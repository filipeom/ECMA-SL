function initESLSymbolicObject(globalObject, objectPrototype, strict) {
  esl_symbolic := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(esl_symbolic);

  apiSymbolicNumber := CreateBuiltInFunctionObject(["var"], "__apiSymbolicNumber", globalObject, strict, null);
  apiSymbolicString := CreateBuiltInFunctionObject(["var"], "__apiSymbolicString", globalObject, strict, null);
  apiSymbolicAssume := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicAssume", globalObject, strict, null);
  apiSymbolicAssert := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicAssert", globalObject, strict, null);
  apiIsSymbolic := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicIsSymbolic", globalObject, strict, null);
  apiEvalWrapper := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicEvalWrapper", globalObject, strict, null);
  apiExecWrapper := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicExecWrapper", globalObject, strict, null);

  createBuiltInProperty(esl_symbolic, "number", apiSymbolicNumber);
  createBuiltInProperty(esl_symbolic, "string", apiSymbolicString);
  createBuiltInProperty(esl_symbolic, "assume", apiSymbolicAssume);
  createBuiltInProperty(esl_symbolic, "assert", apiSymbolicAssert);
  createBuiltInProperty(esl_symbolic, "is_symbolic", apiIsSymbolic);
  createBuiltInProperty(esl_symbolic, "evalWrapper", apiEvalWrapper);
  createBuiltInProperty(esl_symbolic, "execWrapper", apiExecWrapper);

  createBuiltInProperty(apiSymbolicNumber, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicString, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicAssume, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicAssert, "prototype", objectPrototype);
  createBuiltInProperty(apiIsSymbolic, "prototype", objectPrototype);
  createBuiltInProperty(apiEvalWrapper, "prototype", objectPrototype);
  createBuiltInProperty(apiExecWrapper, "prototype", objectPrototype);

  setInternalProperty(esl_symbolic, "Prototype", objectPrototype);

  return esl_symbolic
};

function __apiSymbolicNumber(globalObject, this, NewTarget, strict, params) {
  name := l_nth(params, 0);
  symb := symbolic(__$Flt, name);
  return symb
};

function __apiSymbolicString(globalObject, this, NewTarget, strict, params) {
  name := l_nth(params, 0);
  symb := symbolic(__$Str, name);
  return symb
};

function __apiSymbolicAssume(globalObject, this, NewTarget, strict, params) {
  expr := l_nth(params, 0);
  assume(expr);
  return 0
};

function __apiSymbolicAssert(globalObject, this, NewTarget, strict, params) {
  expr := l_nth(params, 0);
  assert(expr);
  return 0
};
function __apiSymbolicIsSymbolic(globalObject, this, NewTarget, strict, params) {
  x := l_nth(params, 0);
  return __api_is_symbolic(x)
};
function __apiSymbolicEvalWrapper(globalObject, this, NewTarget, strict, params) {
  x := l_nth(params, 0);
  if (__api_is_symbolic(x)) {
    __api_eval_wrapper(x)
  } else {
    return GlobalObjectEval(globalObject, this, NewTarget, strict, params)
  }
};
function __apiSymbolicExecWrapper(globalObject, this, NewTarget, strict, params) {
  x := l_nth(params, 0);
  if (__api_is_symbolic(x)) {
    __api_exec_wrapper(x)
  };
  return 0
}
