/**
 * 7.3.8 DeletePropertyOrThrow (O, P)
 * The abstract operation DeletePropertyOrThrow is used to remove a specific own property of an object.
 * It throws an exception if the property is not configurable. The operation is called with arguments O and P where
 * O is the object and P is the property key. 
 * 
 * This abstract operation performs the following steps:
*/

function DeletePropertyOrThrow(O, P) {
	/* Assert: Type(O) is Object. */
	assert( Type(O) = "Object" );

	/* Assert: IsPropertyKey(P) is true. */
	assert( IsPropertyKey(P) = true );

	/* Let success be O.[[Delete]](P). */
	success := {O.Delete}(O, P, true);

	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);

	/* If success is false, throw a TypeError exception. */
	if ( success = false ) {
		throw TypeErrorConstructorInternal()
	};

	/* Return success. */
	return success
};


/*
*   7.1.15 ToLength ( argument )
*/
function ToLength (argument) {

    /* 1. ReturnIfAbrupt(argument). */
    @ReturnIfAbrupt(argument);

    /* 2. Let len be ToInteger(argument). */
    len := ToInteger(argument);

    /* 3. ReturnIfAbrupt(len). */
    @ReturnIfAbrupt(len);

    /* 4. If len ≤ +0, return +0. */
    if (len <= 0.) {
        return 0.
    };

    /* 5. If len is +∞, return 2^53-1. */
    if (len = Infinity) {
        return ((2. ** 53.) - 1.)
    };

    /* 6. Return min(len, 2^53-1). */
    return min(len, ((2. ** 53.) - 1.))
};


/**
 *  7.3.6 CreateDataPropertyOrThrow (O, P, V) 
 * The abstract operation CreateDataPropertyOrThrow is used to create a new own property of an object. 
 * It throws a TypeError exception if the requested property update cannot be performed. 
 * The operation is called with arguments O, P, and V where O is the object, P is the property key, 
 * and V is the value for the property. 
 * 
 * This abstract operation performs the following steps:
*/
function CreateDataPropertyOrThrow(O, P, V) {
	/* Assert: Type(O) is Object. */
	assert( Type(O) = "Object");

	/* Assert: IsPropertyKey(P) is true. */
	assert( IsPropertyKey(P) = true);

	/* Let success be CreateDataProperty(O, P, V). */
	success := CreateDataPropertyNew(O, P, V);

	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);

	/* If success is false, throw a TypeError exception. */
	if ( success = false ) {
		throw TypeErrorConstructorInternal()
	};

	/* Return success. */
	return success 
};


/* XXX Function generated with HTML2ECMA-SL */
/**
 * 7.2.4 IsConstructor (argument)
 *
 * The abstract operation IsConstructor determines if argument, which must be an 
 * ECMAScript language value or a Completion Record, is a function object with a 
 * [[Construct]] internal method. 
 */
function IsConstructor(argument) {
  /* 1. ReturnIfAbrupt(argument). */
  @ReturnIfAbrupt(argument);
  /* 2. If Type(argument) is not Object, */
  if (!(Type(argument) = "Object")) {
    /* return false */
    return false
  };
  /* 3. If argument has a [[Construct]] internal method, */
  if ("Construct" in_obj argument) {
    /* return true */
    return true
  };
  /* 4. Return false. */
  return false
};


/**
 * 7.2.2 IsArray ( argument )
 * 
 * The abstract operation IsArray takes one argument argument, and performs the following steps:
*/
function IsArray(argument) {

  /* 1. If Type(arg) is not Object, return false. */
  if (!(Type(argument) = "Object")) {
    return false
  };
  /* 2. If the value of the [[Class]] internal property of arg is "Array",
        then return true. */
  if (argument.Class = "Array") {
    return true
  };
  /* 3. Return false. */
  return false
};
