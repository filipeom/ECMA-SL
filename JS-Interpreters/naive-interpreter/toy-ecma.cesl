function FunctionObject (___internal_esl_global, name, params, code, scope) { __v0 := { };
__v0["internal"] := false;
__v0["name"] := name;
__v0["code"] := code;
__v0["params"] := params;
__v0["scope"] := scope;
functionObject := __v0;
return ( false, functionObject ) };
function BreakCompletion (___internal_esl_global, v) { __v1 := ( 'Break, v );
return ( false, __v1 ) };
function interpretCall (___internal_esl_global, oldScope, functionObject, args, thisBinding) { __v2 := functionObject = 'undefined;
if (__v2) {
__v3 := "raiseError" (___internal_esl_global, "Unknown function", functionObject);
if (fst(__v3)) {
return __v3
} else {
__v3 := snd(__v3)
}
};
__v4 := "interpretArgs" (___internal_esl_global, oldScope, args);
if (fst(__v4)) {
return __v4
} else {
__v4 := snd(__v4)
};
evalArgs := __v4;
__v5 := l_len(evalArgs);
nEvalArgs := __v5;
__v6 := "internal" in_obj functionObject;
__v8 := functionObject["internal"];
__v7 := __v8 = false;
__v9 := "name" in_obj functionObject;
__v10 := "params" in_obj functionObject;
__v11 := "code" in_obj functionObject;
__v12 := "scope" in_obj functionObject;
if (true && __v6 && __v7 && __v9 && __v10 && __v11 && __v12) {
name := functionObject["name"];
params := functionObject["params"];
code := functionObject["code"];
scope := functionObject["scope"];
i := 0;
__v13 := "extendScope" (___internal_esl_global, scope, thisBinding);
if (fst(__v13)) {
return __v13
} else {
__v13 := snd(__v13)
};
newScope := __v13;
__v14 := l_len(params);
nParams := __v14;
__v15 := i < nParams;
__v16 := i < nEvalArgs;
__v17 := __v15 && __v16;
while (__v17) { __v18 := l_nth(params, i);
paramName := __v18;
__v19 := l_nth(evalArgs, i);
argVal := __v19;
__v20 := "updateScope" (___internal_esl_global, newScope, newScope, paramName, argVal);
if (fst(__v20)) {
return __v20
} else {
__v20 := snd(__v20)
};
__v21 := i + 1;
i := __v21;
__v15 := i < nParams;
__v16 := i < nEvalArgs;
__v17 := __v15 && __v16 };
__v22 := i < nParams;
while (__v22) { __v23 := l_nth(params, i);
paramName := __v23;
__v24 := "updateScope" (___internal_esl_global, newScope, newScope, paramName, 'undefined);
if (fst(__v24)) {
return __v24
} else {
__v24 := snd(__v24)
};
__v25 := i + 1;
i := __v25;
__v22 := i < nParams };
__v26 := "interpreter" (___internal_esl_global, newScope, code);
if (fst(__v26)) {
return __v26
} else {
__v26 := snd(__v26)
};
return ( false, __v26 )
} else {
__v27 := "internal" in_obj functionObject;
__v29 := functionObject["internal"];
__v28 := __v29 = true;
__v30 := "functionName" in_obj functionObject;
if (true && __v27 && __v28 && __v30) {
functionName := functionObject["functionName"];
__v31 := functionName (___internal_esl_global, evalArgs);
if (fst(__v31)) {
return __v31
} else {
__v31 := snd(__v31)
};
retVal := __v31;
__v32 := "NormalCompletion" (___internal_esl_global, retVal);
if (fst(__v32)) {
return __v32
} else {
__v32 := snd(__v32)
};
return ( false, __v32 )
} else {
if (true) {
__v33 := "raiseError" (___internal_esl_global, "Illegal function call", functionObject);
if (fst(__v33)) {
return __v33
} else {
__v33 := snd(__v33)
}
}
}
} };
function GlobalObject (___internal_esl_global) { __v34 := "Object" (___internal_esl_global);
if (fst(__v34)) {
return __v34
} else {
__v34 := snd(__v34)
};
globalObject := __v34;
__v35 := "Object" (___internal_esl_global);
if (fst(__v35)) {
return __v35
} else {
__v35 := snd(__v35)
};
globalObject["esl_symbolic"] := __v35;
__v36 := globalObject["esl_symbolic"];
__v37 := "InternalFunction" (___internal_esl_global, "esl_symbolic_number");
if (fst(__v37)) {
return __v37
} else {
__v37 := snd(__v37)
};
__v36["number"] := __v37;
__v38 := globalObject["esl_symbolic"];
__v39 := "InternalFunction" (___internal_esl_global, "esl_symbolic_assert");
if (fst(__v39)) {
return __v39
} else {
__v39 := snd(__v39)
};
__v38["assert"] := __v39;
__v40 := globalObject["esl_symbolic"];
__v41 := "InternalFunction" (___internal_esl_global, "esl_symbolic_assume");
if (fst(__v41)) {
return __v41
} else {
__v41 := snd(__v41)
};
__v40["assume"] := __v41;
return ( false, globalObject ) };
function _initScopeVdecls (___internal_esl_global, scope, vdecls) { __v43 := 0;
__v42 := l_len(vdecls);
__v44 := __v42 > __v43;
while (__v44) { vdecl := l_nth(vdecls, __v43);
__v45 := scope["store"];
__v45[vdecl] := 'undefined;
__v43 := __v43 + 1;
__v44 := __v42 > __v43 };
return ( false, null ) };
function updateScope (___internal_esl_global, currScope, scope, name, val) { __v46 := scope["store"];
__v47 := name in_obj __v46;
if (__v47) {
__v48 := scope["store"];
__v48[name] := val
} else {
__v49 := scope["parent"];
__v50 := __v49 = null;
if (__v50) {
__v51 := currScope["store"];
__v51[name] := val
} else {
__v52 := scope["parent"];
__v53 := "updateScope" (___internal_esl_global, currScope, __v52, name, val);
if (fst(__v53)) {
return __v53
} else {
__v53 := snd(__v53)
}
}
};
return ( false, null ) };
function applyUnaryOperator (___internal_esl_global, op, v) { if ("+" = op) {
return ( false, v )
} else {
if ("-" = op) {
__v54 := -(v);
return ( false, __v54 )
} else {
if ("~" = op) {
__v55 := ~(v);
return ( false, __v55 )
} else {
if ("!" = op) {
__v56 := !(v);
return ( false, __v56 )
} else {
__v57 := "raiseError" (___internal_esl_global, "Unsuported unary operator", op);
if (fst(__v57)) {
return __v57
} else {
__v57 := snd(__v57)
}
}
}
}
} };
function ReturnCompletion (___internal_esl_global, v) { __v58 := ( 'Return, v );
return ( false, __v58 ) };
function getThisBinding (___internal_esl_global, scope) { __v59 := scope["thisBinding"];
return ( false, __v59 ) };
function raiseError (___internal_esl_global, msg, src) { __v61 := [ "[ERROR]: ", msg ];
__v60 := s_concat(__v61);
errMsg := __v60;
print errMsg;
print src;
return ( true, msg ) };
function Scope (___internal_esl_global, thisBinding, globalObject) { __v62 := { };
__v63 := { };
__v62["store"] := __v63;
__v62["parent"] := null;
__v62["thisBinding"] := thisBinding;
__v62["globalObject"] := globalObject;
scope := __v62;
return ( false, scope ) };
function ThrowCompletion (___internal_esl_global, v) { __v64 := ( 'Throw, v );
return ( false, __v64 ) };
function esl_symbolic_number (___internal_esl_global, args) { __v65 := l_nth(args, 0);
name := __v65;
return ( false, se_mk_symbolic (__$Flt, name) ) };
function NormalCompletion (___internal_esl_global, v) { __v66 := ( 'Normal, v );
return ( false, __v66 ) };
function interpreter (___internal_esl_global, scope, s) { print "++++++++++++++++++++++++++++++++++++++++";
print s;
__v67 := scope["store"];
print __v67;
__v68 := "type" in_obj s;
__v70 := s["type"];
__v69 := __v70 = "Program";
__v71 := "body" in_obj s;
__v72 := "variableDeclarations" in_obj s;
__v73 := "functionDeclarations" in_obj s;
if (true && __v68 && __v69 && __v71 && __v72 && __v73) {
stmts := s["body"];
vdecls := s["variableDeclarations"];
fdecls := s["functionDeclarations"];
__v74 := "initScope" (___internal_esl_global, scope, vdecls, fdecls);
if (fst(__v74)) {
return __v74
} else {
__v74 := snd(__v74)
};
__v75 := "interpretBlock" (___internal_esl_global, scope, stmts);
if (fst(__v75)) {
return __v75
} else {
__v75 := snd(__v75)
};
return ( false, __v75 )
} else {
__v76 := "type" in_obj s;
__v78 := s["type"];
__v77 := __v78 = "BlockStatement";
__v79 := "body" in_obj s;
if (true && __v76 && __v77 && __v79) {
stmts := s["body"];
__v80 := s["codeType"];
__v81 := __v80 = "function";
if (__v81) {
__v82 := s["variableDeclarations"];
__v83 := s["functionDeclarations"];
__v84 := "initScope" (___internal_esl_global, scope, __v82, __v83);
if (fst(__v84)) {
return __v84
} else {
__v84 := snd(__v84)
}
};
__v85 := "interpretBlock" (___internal_esl_global, scope, stmts);
if (fst(__v85)) {
return __v85
} else {
__v85 := snd(__v85)
};
return ( false, __v85 )
} else {
__v86 := "type" in_obj s;
__v88 := s["type"];
__v87 := __v88 = "ReturnStatement";
__v89 := "argument" in_obj s;
if (true && __v86 && __v87 && __v89) {
arg := s["argument"];
__v90 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v90)) {
return __v90
} else {
__v90 := snd(__v90)
};
retVal := __v90;
__v91 := "isAbruptCompletion" (___internal_esl_global, retVal);
if (fst(__v91)) {
return __v91
} else {
__v91 := snd(__v91)
};
if (__v91) {
return ( false, retVal )
} else {
__v92 := "getCompletionValue" (___internal_esl_global, retVal);
if (fst(__v92)) {
return __v92
} else {
__v92 := snd(__v92)
};
retVal := __v92
};
__v93 := "ReturnCompletion" (___internal_esl_global, retVal);
if (fst(__v93)) {
return __v93
} else {
__v93 := snd(__v93)
};
return ( false, __v93 )
} else {
__v94 := "type" in_obj s;
__v96 := s["type"];
__v95 := __v96 = "ExpressionStatement";
__v97 := "expression" in_obj s;
if (true && __v94 && __v95 && __v97) {
expr := s["expression"];
__v98 := "interpreter" (___internal_esl_global, scope, expr);
if (fst(__v98)) {
return __v98
} else {
__v98 := snd(__v98)
};
return ( false, __v98 )
} else {
__v99 := "type" in_obj s;
__v101 := s["type"];
__v100 := __v101 = "BreakStatement";
__v102 := "label" in_obj s;
__v104 := s["label"];
__v103 := __v104 = null;
if (true && __v99 && __v100 && __v102 && __v103) {
__v105 := "BreakCompletion" (___internal_esl_global, 'empty);
if (fst(__v105)) {
return __v105
} else {
__v105 := snd(__v105)
};
return ( false, __v105 )
} else {
__v106 := "type" in_obj s;
__v108 := s["type"];
__v107 := __v108 = "ContinueStatement";
__v109 := "label" in_obj s;
__v111 := s["label"];
__v110 := __v111 = null;
if (true && __v106 && __v107 && __v109 && __v110) {
__v112 := "ContinueCompletion" (___internal_esl_global, 'empty);
if (fst(__v112)) {
return __v112
} else {
__v112 := snd(__v112)
};
return ( false, __v112 )
} else {
__v113 := "type" in_obj s;
__v115 := s["type"];
__v114 := __v115 = "IfStatement";
__v116 := "test" in_obj s;
__v117 := "consequent" in_obj s;
__v118 := "alternate" in_obj s;
if (true && __v113 && __v114 && __v116 && __v117 && __v118) {
test := s["test"];
stmt1 := s["consequent"];
stmt2 := s["alternate"];
__v119 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v119)) {
return __v119
} else {
__v119 := snd(__v119)
};
testVal := __v119;
__v120 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v120)) {
return __v120
} else {
__v120 := snd(__v120)
};
if (__v120) {
return ( false, testVal )
} else {
__v121 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v121)) {
return __v121
} else {
__v121 := snd(__v121)
};
testVal := __v121
};
if (testVal) {
__v126 := "interpreter" (___internal_esl_global, scope, stmt1);
if (fst(__v126)) {
return __v126
} else {
__v126 := snd(__v126)
};
return ( false, __v126 )
} else {
__v124 := stmt2 = null;
__v123 := !(__v124);
if (__v123) {
__v125 := "interpreter" (___internal_esl_global, scope, stmt2);
if (fst(__v125)) {
return __v125
} else {
__v125 := snd(__v125)
};
return ( false, __v125 )
} else {
__v122 := "NormalCompletion" (___internal_esl_global, 'empty);
if (fst(__v122)) {
return __v122
} else {
__v122 := snd(__v122)
};
return ( false, __v122 )
}
}
} else {
__v127 := "type" in_obj s;
__v129 := s["type"];
__v128 := __v129 = "WhileStatement";
__v130 := "test" in_obj s;
__v131 := "body" in_obj s;
if (true && __v127 && __v128 && __v130 && __v131) {
test := s["test"];
stmt := s["body"];
__v132 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v132)) {
return __v132
} else {
__v132 := snd(__v132)
};
testVal := __v132;
__v133 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v133)) {
return __v133
} else {
__v133 := snd(__v133)
};
if (__v133) {
return ( false, testVal )
} else {
__v134 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v134)) {
return __v134
} else {
__v134 := snd(__v134)
};
testVal := __v134
};
while (testVal) { __v135 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v135)) {
return __v135
} else {
__v135 := snd(__v135)
};
retVal := __v135;
__v136 := "getCompletionType" (___internal_esl_global, retVal);
if (fst(__v136)) {
return __v136
} else {
__v136 := snd(__v136)
};
if ('Break = __v136) {
__v137 := "NormalCompletion" (___internal_esl_global, 'empty);
if (fst(__v137)) {
return __v137
} else {
__v137 := snd(__v137)
};
return ( false, __v137 )
} else {
if ('Return = __v136) {
return ( false, retVal )
} else {
if ('Throw = __v136) {
return ( false, retVal )
} else {

}
}
};
__v138 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v138)) {
return __v138
} else {
__v138 := snd(__v138)
};
testVal := __v138;
__v139 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v139)) {
return __v139
} else {
__v139 := snd(__v139)
};
if (__v139) {
return ( false, testVal )
} else {
__v140 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v140)) {
return __v140
} else {
__v140 := snd(__v140)
};
testVal := __v140
} };
__v141 := "NormalCompletion" (___internal_esl_global, 'empty);
if (fst(__v141)) {
return __v141
} else {
__v141 := snd(__v141)
};
return ( false, __v141 )
} else {
__v142 := "type" in_obj s;
__v144 := s["type"];
__v143 := __v144 = "ForStatement";
__v145 := "init" in_obj s;
__v146 := "test" in_obj s;
__v147 := "update" in_obj s;
__v148 := "body" in_obj s;
if (true && __v142 && __v143 && __v145 && __v146 && __v147 && __v148) {
init := s["init"];
test := s["test"];
update := s["update"];
stmt := s["body"];
__v149 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v149)) {
return __v149
} else {
__v149 := snd(__v149)
};
initVal := __v149;
__v150 := "isAbruptCompletion" (___internal_esl_global, initVal);
if (fst(__v150)) {
return __v150
} else {
__v150 := snd(__v150)
};
if (__v150) {
return ( false, initVal )
} else {
__v151 := "getCompletionValue" (___internal_esl_global, initVal);
if (fst(__v151)) {
return __v151
} else {
__v151 := snd(__v151)
};
initVal := __v151
};
__v152 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v152)) {
return __v152
} else {
__v152 := snd(__v152)
};
testVal := __v152;
__v153 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v153)) {
return __v153
} else {
__v153 := snd(__v153)
};
if (__v153) {
return ( false, testVal )
} else {
__v154 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v154)) {
return __v154
} else {
__v154 := snd(__v154)
};
testVal := __v154
};
while (testVal) { __v155 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v155)) {
return __v155
} else {
__v155 := snd(__v155)
};
retVal := __v155;
__v156 := "getCompletionType" (___internal_esl_global, retVal);
if (fst(__v156)) {
return __v156
} else {
__v156 := snd(__v156)
};
if ('Break = __v156) {
__v157 := "NormalCompletion" (___internal_esl_global, 'empty);
if (fst(__v157)) {
return __v157
} else {
__v157 := snd(__v157)
};
return ( false, __v157 )
} else {
if ('Return = __v156) {
return ( false, retVal )
} else {
if ('Throw = __v156) {
return ( false, retVal )
} else {

}
}
};
__v158 := "interpreter" (___internal_esl_global, scope, update);
if (fst(__v158)) {
return __v158
} else {
__v158 := snd(__v158)
};
updateVal := __v158;
__v159 := "isAbruptCompletion" (___internal_esl_global, updateVal);
if (fst(__v159)) {
return __v159
} else {
__v159 := snd(__v159)
};
if (__v159) {
return ( false, updateVal )
} else {
__v160 := "getCompletionValue" (___internal_esl_global, updateVal);
if (fst(__v160)) {
return __v160
} else {
__v160 := snd(__v160)
};
updateVal := __v160
};
__v161 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v161)) {
return __v161
} else {
__v161 := snd(__v161)
};
testVal := __v161;
__v162 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v162)) {
return __v162
} else {
__v162 := snd(__v162)
};
if (__v162) {
return ( false, testVal )
} else {
__v163 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v163)) {
return __v163
} else {
__v163 := snd(__v163)
};
testVal := __v163
} };
__v164 := "NormalCompletion" (___internal_esl_global, 'empty);
if (fst(__v164)) {
return __v164
} else {
__v164 := snd(__v164)
};
return ( false, __v164 )
} else {
__v165 := "type" in_obj s;
__v167 := s["type"];
__v166 := __v167 = "UnaryExpression";
__v168 := "operator" in_obj s;
__v169 := "argument" in_obj s;
if (true && __v165 && __v166 && __v168 && __v169) {
op := s["operator"];
arg := s["argument"];
__v170 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v170)) {
return __v170
} else {
__v170 := snd(__v170)
};
argVal := __v170;
__v171 := "isAbruptCompletion" (___internal_esl_global, argVal);
if (fst(__v171)) {
return __v171
} else {
__v171 := snd(__v171)
};
if (__v171) {
return ( false, argVal )
} else {
__v172 := "getCompletionValue" (___internal_esl_global, argVal);
if (fst(__v172)) {
return __v172
} else {
__v172 := snd(__v172)
};
argVal := __v172
};
__v173 := "applyUnaryOperator" (___internal_esl_global, op, argVal);
if (fst(__v173)) {
return __v173
} else {
__v173 := snd(__v173)
};
__v174 := "NormalCompletion" (___internal_esl_global, __v173);
if (fst(__v174)) {
return __v174
} else {
__v174 := snd(__v174)
};
return ( false, __v174 )
} else {
__v175 := "type" in_obj s;
__v177 := s["type"];
__v176 := __v177 = "BinaryExpression";
__v178 := "operator" in_obj s;
__v179 := "left" in_obj s;
__v180 := "right" in_obj s;
if (true && __v175 && __v176 && __v178 && __v179 && __v180) {
op := s["operator"];
left := s["left"];
right := s["right"];
__v181 := "interpreter" (___internal_esl_global, scope, left);
if (fst(__v181)) {
return __v181
} else {
__v181 := snd(__v181)
};
leftVal := __v181;
__v182 := "isAbruptCompletion" (___internal_esl_global, leftVal);
if (fst(__v182)) {
return __v182
} else {
__v182 := snd(__v182)
};
if (__v182) {
return ( false, leftVal )
} else {
__v183 := "getCompletionValue" (___internal_esl_global, leftVal);
if (fst(__v183)) {
return __v183
} else {
__v183 := snd(__v183)
};
leftVal := __v183
};
__v184 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v184)) {
return __v184
} else {
__v184 := snd(__v184)
};
rightVal := __v184;
__v185 := "isAbruptCompletion" (___internal_esl_global, rightVal);
if (fst(__v185)) {
return __v185
} else {
__v185 := snd(__v185)
};
if (__v185) {
return ( false, rightVal )
} else {
__v186 := "getCompletionValue" (___internal_esl_global, rightVal);
if (fst(__v186)) {
return __v186
} else {
__v186 := snd(__v186)
};
rightVal := __v186
};
__v187 := "applyBinaryOperator" (___internal_esl_global, op, leftVal, rightVal);
if (fst(__v187)) {
return __v187
} else {
__v187 := snd(__v187)
};
__v188 := "NormalCompletion" (___internal_esl_global, __v187);
if (fst(__v188)) {
return __v188
} else {
__v188 := snd(__v188)
};
return ( false, __v188 )
} else {
__v189 := "type" in_obj s;
__v191 := s["type"];
__v190 := __v191 = "LogicalExpression";
__v192 := "operator" in_obj s;
__v193 := "left" in_obj s;
__v194 := "right" in_obj s;
if (true && __v189 && __v190 && __v192 && __v193 && __v194) {
op := s["operator"];
left := s["left"];
right := s["right"];
__v195 := "interpreter" (___internal_esl_global, scope, left);
if (fst(__v195)) {
return __v195
} else {
__v195 := snd(__v195)
};
leftVal := __v195;
__v196 := "isAbruptCompletion" (___internal_esl_global, leftVal);
if (fst(__v196)) {
return __v196
} else {
__v196 := snd(__v196)
};
if (__v196) {
return ( false, leftVal )
} else {
__v197 := "getCompletionValue" (___internal_esl_global, leftVal);
if (fst(__v197)) {
return __v197
} else {
__v197 := snd(__v197)
};
leftVal := __v197
};
__v198 := "operator" in_obj s;
__v200 := s["operator"];
__v199 := __v200 = "&&";
__v201 := "leftVal" in_obj s;
__v203 := s["leftVal"];
__v202 := __v203 = false;
if (true && __v198 && __v199 && __v201 && __v202) {
__v204 := "NormalCompletion" (___internal_esl_global, false);
if (fst(__v204)) {
return __v204
} else {
__v204 := snd(__v204)
};
return ( false, __v204 )
} else {
__v205 := "operator" in_obj s;
__v207 := s["operator"];
__v206 := __v207 = "||";
__v208 := "leftVal" in_obj s;
__v210 := s["leftVal"];
__v209 := __v210 = true;
if (true && __v205 && __v206 && __v208 && __v209) {
__v211 := "NormalCompletion" (___internal_esl_global, true);
if (fst(__v211)) {
return __v211
} else {
__v211 := snd(__v211)
};
return ( false, __v211 )
}
};
__v212 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v212)) {
return __v212
} else {
__v212 := snd(__v212)
};
return ( false, __v212 )
} else {
__v213 := "type" in_obj s;
__v215 := s["type"];
__v214 := __v215 = "ConditionalExpression";
__v216 := "test" in_obj s;
__v217 := "consequent" in_obj s;
__v218 := "alternate" in_obj s;
if (true && __v213 && __v214 && __v216 && __v217 && __v218) {
test := s["test"];
expr1 := s["consequent"];
expr2 := s["alternate"];
__v219 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v219)) {
return __v219
} else {
__v219 := snd(__v219)
};
testVal := __v219;
__v220 := "isAbruptCompletion" (___internal_esl_global, testVal);
if (fst(__v220)) {
return __v220
} else {
__v220 := snd(__v220)
};
if (__v220) {
return ( false, testVal )
} else {
__v221 := "getCompletionValue" (___internal_esl_global, testVal);
if (fst(__v221)) {
return __v221
} else {
__v221 := snd(__v221)
};
testVal := __v221
};
if (testVal) {
__v222 := "interpreter" (___internal_esl_global, scope, expr1);
if (fst(__v222)) {
return __v222
} else {
__v222 := snd(__v222)
};
return ( false, __v222 )
} else {
__v223 := "interpreter" (___internal_esl_global, scope, expr2);
if (fst(__v223)) {
return __v223
} else {
__v223 := snd(__v223)
};
return ( false, __v223 )
}
} else {
__v224 := "type" in_obj s;
__v226 := s["type"];
__v225 := __v226 = "AssignmentExpression";
__v227 := "operator" in_obj s;
__v228 := "left" in_obj s;
__v229 := "right" in_obj s;
if (true && __v224 && __v225 && __v227 && __v228 && __v229) {
op := s["operator"];
left := s["left"];
right := s["right"];
__v230 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v230)) {
return __v230
} else {
__v230 := snd(__v230)
};
rightVal := __v230;
__v231 := "isAbruptCompletion" (___internal_esl_global, rightVal);
if (fst(__v231)) {
return __v231
} else {
__v231 := snd(__v231)
};
if (__v231) {
return ( false, rightVal )
} else {
__v232 := "getCompletionValue" (___internal_esl_global, rightVal);
if (fst(__v232)) {
return __v232
} else {
__v232 := snd(__v232)
};
rightVal := __v232
};
__v233 := "type" in_obj left;
__v235 := left["type"];
__v234 := __v235 = "Identifier";
__v236 := "name" in_obj left;
if (true && __v233 && __v234 && __v236) {
name := left["name"];
__v237 := "resolveName" (___internal_esl_global, scope, name);
if (fst(__v237)) {
return __v237
} else {
__v237 := snd(__v237)
};
oldVal := __v237;
__v238 := "applyAssignmentOperator" (___internal_esl_global, op, oldVal, rightVal);
if (fst(__v238)) {
return __v238
} else {
__v238 := snd(__v238)
};
newVal := __v238;
__v239 := "updateScope" (___internal_esl_global, scope, scope, name, newVal);
if (fst(__v239)) {
return __v239
} else {
__v239 := snd(__v239)
};
__v240 := "NormalCompletion" (___internal_esl_global, newVal);
if (fst(__v240)) {
return __v240
} else {
__v240 := snd(__v240)
};
return ( false, __v240 )
} else {
__v241 := "type" in_obj left;
__v243 := left["type"];
__v242 := __v243 = "MemberExpression";
__v244 := "object" in_obj left;
__v245 := "property" in_obj left;
__v246 := "computed" in_obj left;
if (true && __v241 && __v242 && __v244 && __v245 && __v246) {
object := left["object"];
prop := left["property"];
computed := left["computed"];
__v247 := "interpreter" (___internal_esl_global, scope, object);
if (fst(__v247)) {
return __v247
} else {
__v247 := snd(__v247)
};
objVal := __v247;
__v248 := "isAbruptCompletion" (___internal_esl_global, objVal);
if (fst(__v248)) {
return __v248
} else {
__v248 := snd(__v248)
};
if (__v248) {
return ( false, objVal )
} else {
__v249 := "getCompletionValue" (___internal_esl_global, objVal);
if (fst(__v249)) {
return __v249
} else {
__v249 := snd(__v249)
};
objVal := __v249
};
if (computed) {
__v250 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v250)) {
return __v250
} else {
__v250 := snd(__v250)
};
propName := __v250;
__v251 := "isAbruptCompletion" (___internal_esl_global, propName);
if (fst(__v251)) {
return __v251
} else {
__v251 := snd(__v251)
};
if (__v251) {
return ( false, propName )
} else {
__v252 := "getCompletionValue" (___internal_esl_global, propName);
if (fst(__v252)) {
return __v252
} else {
__v252 := snd(__v252)
};
propName := __v252
}
} else {
__v253 := prop["name"];
propName := __v253
};
__v254 := "resolveProperty" (___internal_esl_global, objVal, propName);
if (fst(__v254)) {
return __v254
} else {
__v254 := snd(__v254)
};
oldVal := __v254;
__v255 := "applyAssignmentOperator" (___internal_esl_global, op, oldVal, rightVal);
if (fst(__v255)) {
return __v255
} else {
__v255 := snd(__v255)
};
newVal := __v255;
__v256 := "updateObject" (___internal_esl_global, objVal, propName, newVal);
if (fst(__v256)) {
return __v256
} else {
__v256 := snd(__v256)
};
__v257 := "NormalCompletion" (___internal_esl_global, newVal);
if (fst(__v257)) {
return __v257
} else {
__v257 := snd(__v257)
};
return ( false, __v257 )
} else {
if (true) {
__v258 := "raiseError" (___internal_esl_global, "Illegal assignment expression", left);
if (fst(__v258)) {
return __v258
} else {
__v258 := snd(__v258)
}
}
}
}
} else {
__v259 := "type" in_obj s;
__v261 := s["type"];
__v260 := __v261 = "UpdateExpression";
__v262 := "operator" in_obj s;
__v263 := "argument" in_obj s;
__v264 := "prefix" in_obj s;
if (true && __v259 && __v260 && __v262 && __v263 && __v264) {
op := s["operator"];
arg := s["argument"];
prefix := s["prefix"];
__v265 := { };
__v265["type"] := "Literal";
__v265["value"] := 1.;
__v265["raw"] := "1.0";
rightVal := __v265;
__v266 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v266)) {
return __v266
} else {
__v266 := snd(__v266)
};
oldVal := __v266;
__v267 := "isAbruptCompletion" (___internal_esl_global, oldVal);
if (fst(__v267)) {
return __v267
} else {
__v267 := snd(__v267)
};
if (__v267) {
return ( false, oldVal )
} else {
__v268 := "getCompletionValue" (___internal_esl_global, oldVal);
if (fst(__v268)) {
return __v268
} else {
__v268 := snd(__v268)
};
oldVal := __v268
};
if ("++" = op) {
__v269 := { };
__v269["type"] := "AssignmentExpression";
__v269["operator"] := "+=";
__v269["left"] := arg;
__v269["right"] := rightVal;
updateExpr := __v269
} else {
if ("--" = op) {
__v270 := { };
__v270["type"] := "AssignmentExpression";
__v270["operator"] := "-=";
__v270["left"] := arg;
__v270["right"] := rightVal;
updateExpr := __v270
} else {
__v271 := "raiseError" (___internal_esl_global, "Illegal update expression operator", op);
if (fst(__v271)) {
return __v271
} else {
__v271 := snd(__v271)
}
}
};
__v272 := "interpreter" (___internal_esl_global, scope, updateExpr);
if (fst(__v272)) {
return __v272
} else {
__v272 := snd(__v272)
};
newVal := __v272;
__v273 := "isAbruptCompletion" (___internal_esl_global, newVal);
if (fst(__v273)) {
return __v273
} else {
__v273 := snd(__v273)
};
if (__v273) {
return ( false, newVal )
} else {
__v274 := "getCompletionValue" (___internal_esl_global, newVal);
if (fst(__v274)) {
return __v274
} else {
__v274 := snd(__v274)
};
newVal := __v274
};
if (prefix) {
__v275 := "NormalCompletion" (___internal_esl_global, newVal);
if (fst(__v275)) {
return __v275
} else {
__v275 := snd(__v275)
};
return ( false, __v275 )
} else {
__v276 := "NormalCompletion" (___internal_esl_global, oldVal);
if (fst(__v276)) {
return __v276
} else {
__v276 := snd(__v276)
};
return ( false, __v276 )
}
} else {
__v277 := "type" in_obj s;
__v279 := s["type"];
__v278 := __v279 = "ObjectExpression";
__v280 := "properties" in_obj s;
if (true && __v277 && __v278 && __v280) {
props := s["properties"];
__v281 := "Object" (___internal_esl_global);
if (fst(__v281)) {
return __v281
} else {
__v281 := snd(__v281)
};
object := __v281;
__v283 := 0;
__v282 := l_len(props);
__v284 := __v282 > __v283;
while (__v284) { prop := l_nth(props, __v283);
__v286 := prop["key"];
__v285 := __v286["name"];
propName := __v285;
__v287 := prop["value"];
__v288 := "interpreter" (___internal_esl_global, scope, __v287);
if (fst(__v288)) {
return __v288
} else {
__v288 := snd(__v288)
};
propVal := __v288;
__v289 := "isAbruptCompletion" (___internal_esl_global, propVal);
if (fst(__v289)) {
return __v289
} else {
__v289 := snd(__v289)
};
if (__v289) {
return ( false, propVal )
} else {
__v290 := "getCompletionValue" (___internal_esl_global, propVal);
if (fst(__v290)) {
return __v290
} else {
__v290 := snd(__v290)
};
propVal := __v290
};
object[propName] := propVal;
__v283 := __v283 + 1;
__v284 := __v282 > __v283 };
__v291 := "NormalCompletion" (___internal_esl_global, object);
if (fst(__v291)) {
return __v291
} else {
__v291 := snd(__v291)
};
return ( false, __v291 )
} else {
__v292 := "type" in_obj s;
__v294 := s["type"];
__v293 := __v294 = "MemberExpression";
__v295 := "object" in_obj s;
__v296 := "property" in_obj s;
__v297 := "computed" in_obj s;
if (true && __v292 && __v293 && __v295 && __v296 && __v297) {
object := s["object"];
prop := s["property"];
computed := s["computed"];
__v298 := "interpreter" (___internal_esl_global, scope, object);
if (fst(__v298)) {
return __v298
} else {
__v298 := snd(__v298)
};
objVal := __v298;
__v299 := "isAbruptCompletion" (___internal_esl_global, objVal);
if (fst(__v299)) {
return __v299
} else {
__v299 := snd(__v299)
};
if (__v299) {
return ( false, objVal )
} else {
__v300 := "getCompletionValue" (___internal_esl_global, objVal);
if (fst(__v300)) {
return __v300
} else {
__v300 := snd(__v300)
};
objVal := __v300
};
if (computed) {
__v301 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v301)) {
return __v301
} else {
__v301 := snd(__v301)
};
propVal := __v301;
__v302 := "isAbruptCompletion" (___internal_esl_global, propVal);
if (fst(__v302)) {
return __v302
} else {
__v302 := snd(__v302)
};
if (__v302) {
return ( false, propVal )
} else {
__v303 := "getCompletionValue" (___internal_esl_global, propVal);
if (fst(__v303)) {
return __v303
} else {
__v303 := snd(__v303)
};
propVal := __v303
}
} else {
__v304 := prop["name"];
propVal := __v304
};
__v305 := typeof(propVal);
__v306 := __v305 = __$Flt;
if (__v306) {
__v307 := float_to_string(propVal);
propVal := __v307
};
__v308 := "resolveProperty" (___internal_esl_global, objVal, propVal);
if (fst(__v308)) {
return __v308
} else {
__v308 := snd(__v308)
};
__v309 := "NormalCompletion" (___internal_esl_global, __v308);
if (fst(__v309)) {
return __v309
} else {
__v309 := snd(__v309)
};
return ( false, __v309 )
} else {
__v310 := "type" in_obj s;
__v312 := s["type"];
__v311 := __v312 = "CallExpression";
__v313 := "callee" in_obj s;
__v314 := "arguments" in_obj s;
if (true && __v310 && __v311 && __v313 && __v314) {
callee := s["callee"];
args := s["arguments"];
__v315 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v315)) {
return __v315
} else {
__v315 := snd(__v315)
};
functionObject := __v315;
__v316 := "isAbruptCompletion" (___internal_esl_global, functionObject);
if (fst(__v316)) {
return __v316
} else {
__v316 := snd(__v316)
};
if (__v316) {
return ( false, functionObject )
} else {
__v317 := "getCompletionValue" (___internal_esl_global, functionObject);
if (fst(__v317)) {
return __v317
} else {
__v317 := snd(__v317)
};
functionObject := __v317
};
__v318 := callee["type"];
__v319 := __v318 = "MemberExpression";
if (__v319) {
__v320 := callee["object"];
__v321 := "interpreter" (___internal_esl_global, scope, __v320);
if (fst(__v321)) {
return __v321
} else {
__v321 := snd(__v321)
};
thisBinding := __v321;
__v322 := "isAbruptCompletion" (___internal_esl_global, thisBinding);
if (fst(__v322)) {
return __v322
} else {
__v322 := snd(__v322)
};
if (__v322) {
return ( false, thisBinding )
} else {
__v323 := "getCompletionValue" (___internal_esl_global, thisBinding);
if (fst(__v323)) {
return __v323
} else {
__v323 := snd(__v323)
};
thisBinding := __v323
}
} else {
thisBinding := functionObject
};
__v324 := "interpretCall" (___internal_esl_global, scope, functionObject, args, thisBinding);
if (fst(__v324)) {
return __v324
} else {
__v324 := snd(__v324)
};
retVal := __v324;
__v325 := "getCompletionType" (___internal_esl_global, retVal);
if (fst(__v325)) {
return __v325
} else {
__v325 := snd(__v325)
};
if ('Throw = __v325) {
return ( false, retVal )
} else {
__v326 := "getCompletionValue" (___internal_esl_global, retVal);
if (fst(__v326)) {
return __v326
} else {
__v326 := snd(__v326)
};
__v327 := "NormalCompletion" (___internal_esl_global, __v326);
if (fst(__v327)) {
return __v327
} else {
__v327 := snd(__v327)
};
return ( false, __v327 )
}
} else {
__v328 := "type" in_obj s;
__v330 := s["type"];
__v329 := __v330 = "NewExpression";
__v331 := "callee" in_obj s;
__v332 := "arguments" in_obj s;
if (true && __v328 && __v329 && __v331 && __v332) {
callee := s["callee"];
args := s["arguments"];
__v333 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v333)) {
return __v333
} else {
__v333 := snd(__v333)
};
functionObject := __v333;
__v334 := "isAbruptCompletion" (___internal_esl_global, functionObject);
if (fst(__v334)) {
return __v334
} else {
__v334 := snd(__v334)
};
if (__v334) {
return ( false, functionObject )
} else {
__v335 := "getCompletionValue" (___internal_esl_global, functionObject);
if (fst(__v335)) {
return __v335
} else {
__v335 := snd(__v335)
};
functionObject := __v335
};
__v336 := "Object" (___internal_esl_global);
if (fst(__v336)) {
return __v336
} else {
__v336 := snd(__v336)
};
newObject := __v336;
__v337 := "interpretCall" (___internal_esl_global, scope, functionObject, args, newObject);
if (fst(__v337)) {
return __v337
} else {
__v337 := snd(__v337)
};
retVal := __v337;
__v338 := "getCompletionType" (___internal_esl_global, retVal);
if (fst(__v338)) {
return __v338
} else {
__v338 := snd(__v338)
};
if ('Throw = __v338) {
return ( false, retVal )
} else {
__v339 := "NormalCompletion" (___internal_esl_global, newObject);
if (fst(__v339)) {
return __v339
} else {
__v339 := snd(__v339)
};
return ( false, __v339 )
}
} else {
__v340 := "type" in_obj s;
__v342 := s["type"];
__v341 := __v342 = "ArrayExpression";
__v343 := "elements" in_obj s;
if (true && __v340 && __v341 && __v343) {
elements := s["elements"];
__v344 := [  ];
evalElements := __v344;
__v346 := 0;
__v345 := l_len(elements);
__v347 := __v345 > __v346;
while (__v347) { element := l_nth(elements, __v346);
__v348 := "interpreter" (___internal_esl_global, scope, element);
if (fst(__v348)) {
return __v348
} else {
__v348 := snd(__v348)
};
elementVal := __v348;
__v349 := "isAbruptCompletion" (___internal_esl_global, elementVal);
if (fst(__v349)) {
return __v349
} else {
__v349 := snd(__v349)
};
if (__v349) {
return ( false, elementVal )
} else {
__v350 := "getCompletionValue" (___internal_esl_global, elementVal);
if (fst(__v350)) {
return __v350
} else {
__v350 := snd(__v350)
};
elementVal := __v350
};
__v351 := l_add(evalElements, elementVal);
evalElements := __v351;
__v346 := __v346 + 1;
__v347 := __v345 > __v346 };
__v352 := "ArrayObject" (___internal_esl_global, evalElements);
if (fst(__v352)) {
return __v352
} else {
__v352 := snd(__v352)
};
arrayObject := __v352;
__v353 := "NormalCompletion" (___internal_esl_global, arrayObject);
if (fst(__v353)) {
return __v353
} else {
__v353 := snd(__v353)
};
return ( false, __v353 )
} else {
__v354 := "type" in_obj s;
__v356 := s["type"];
__v355 := __v356 = "Literal";
__v357 := "value" in_obj s;
__v358 := "raw" in_obj s;
if (true && __v354 && __v355 && __v357 && __v358) {
value := s["value"];
raw := s["raw"];
__v359 := "NormalCompletion" (___internal_esl_global, value);
if (fst(__v359)) {
return __v359
} else {
__v359 := snd(__v359)
};
return ( false, __v359 )
} else {
__v360 := "type" in_obj s;
__v362 := s["type"];
__v361 := __v362 = "Identifier";
__v363 := "name" in_obj s;
if (true && __v360 && __v361 && __v363) {
name := s["name"];
__v364 := "resolveName" (___internal_esl_global, scope, name);
if (fst(__v364)) {
return __v364
} else {
__v364 := snd(__v364)
};
__v365 := "NormalCompletion" (___internal_esl_global, __v364);
if (fst(__v365)) {
return __v365
} else {
__v365 := snd(__v365)
};
return ( false, __v365 )
} else {
__v366 := "type" in_obj s;
__v368 := s["type"];
__v367 := __v368 = "ThisExpression";
if (true && __v366 && __v367) {
__v369 := "getThisBinding" (___internal_esl_global, scope);
if (fst(__v369)) {
return __v369
} else {
__v369 := snd(__v369)
};
__v370 := "NormalCompletion" (___internal_esl_global, __v369);
if (fst(__v370)) {
return __v370
} else {
__v370 := snd(__v370)
};
return ( false, __v370 )
} else {
__v371 := "type" in_obj s;
__v373 := s["type"];
__v372 := __v373 = "FunctionExpression";
__v374 := "params" in_obj s;
__v375 := "body" in_obj s;
if (true && __v371 && __v372 && __v374 && __v375) {
params := s["params"];
body := s["body"];
__v376 := "FunctionObject" (___internal_esl_global, "", params, body, scope);
if (fst(__v376)) {
return __v376
} else {
__v376 := snd(__v376)
};
functionObject := __v376;
__v377 := "NormalCompletion" (___internal_esl_global, functionObject);
if (fst(__v377)) {
return __v377
} else {
__v377 := snd(__v377)
};
return ( false, __v377 )
} else {
__v378 := "type" in_obj s;
__v380 := s["type"];
__v379 := __v380 = "VariableDeclaration";
__v381 := "kind" in_obj s;
__v383 := s["kind"];
__v382 := __v383 = "var";
__v384 := "declarations" in_obj s;
if (true && __v378 && __v379 && __v381 && __v382 && __v384) {
decls := s["declarations"];
retVal := 'empty;
__v386 := 0;
__v385 := l_len(decls);
__v387 := __v385 > __v386;
while (__v387) { decl := l_nth(decls, __v386);
__v388 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v388)) {
return __v388
} else {
__v388 := snd(__v388)
};
retValAux := __v388;
__v389 := "isAbruptCompletion" (___internal_esl_global, retValAux);
if (fst(__v389)) {
return __v389
} else {
__v389 := snd(__v389)
};
if (__v389) {
return ( false, retValAux )
} else {
__v390 := "getCompletionValue" (___internal_esl_global, retValAux);
if (fst(__v390)) {
return __v390
} else {
__v390 := snd(__v390)
};
retValAux := __v390
};
__v392 := retValAux = 'empty;
__v391 := !(__v392);
if (__v391) {
retVal := retValAux
};
__v386 := __v386 + 1;
__v387 := __v385 > __v386 };
__v393 := "NormalCompletion" (___internal_esl_global, retVal);
if (fst(__v393)) {
return __v393
} else {
__v393 := snd(__v393)
};
return ( false, __v393 )
} else {
__v394 := "type" in_obj s;
__v396 := s["type"];
__v395 := __v396 = "VariableDeclarator";
__v397 := "id" in_obj s;
__v398 := "init" in_obj s;
if (true && __v394 && __v395 && __v397 && __v398) {
id := s["id"];
init := s["init"];
__v400 := init = null;
__v399 := !(__v400);
if (__v399) {
__v401 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v401)) {
return __v401
} else {
__v401 := snd(__v401)
};
rightVal := __v401;
__v402 := "isAbruptCompletion" (___internal_esl_global, rightVal);
if (fst(__v402)) {
return __v402
} else {
__v402 := snd(__v402)
};
if (__v402) {
return ( false, rightVal )
} else {
__v403 := "getCompletionValue" (___internal_esl_global, rightVal);
if (fst(__v403)) {
return __v403
} else {
__v403 := snd(__v403)
};
rightVal := __v403
}
} else {
rightVal := 'undefined
};
__v404 := "type" in_obj id;
__v406 := id["type"];
__v405 := __v406 = "Identifier";
__v407 := "name" in_obj id;
if (true && __v404 && __v405 && __v407) {
name := id["name"];
__v408 := "updateScope" (___internal_esl_global, scope, scope, name, rightVal);
if (fst(__v408)) {
return __v408
} else {
__v408 := snd(__v408)
};
__v409 := "NormalCompletion" (___internal_esl_global, rightVal);
if (fst(__v409)) {
return __v409
} else {
__v409 := snd(__v409)
};
return ( false, __v409 )
} else {
if (true) {
__v410 := "raiseError" (___internal_esl_global, "Illegal variable declarator", id);
if (fst(__v410)) {
return __v410
} else {
__v410 := snd(__v410)
}
}
}
} else {
if (true) {
__v411 := "raiseError" (___internal_esl_global, "Unsuported construct", s);
if (fst(__v411)) {
return __v411
} else {
__v411 := snd(__v411)
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function _initScopeFdecls (___internal_esl_global, scope, fdecls) { __v413 := 0;
__v412 := l_len(fdecls);
__v414 := __v412 > __v413;
while (__v414) { fdecl := l_nth(fdecls, __v413);
__v415 := "type" in_obj fdecl;
__v417 := fdecl["type"];
__v416 := __v417 = "FunctionDeclaration";
__v418 := "id" in_obj fdecl;
__v419 := "params" in_obj fdecl;
__v420 := "body" in_obj fdecl;
if (true && __v415 && __v416 && __v418 && __v419 && __v420) {
id := fdecl["id"];
params := fdecl["params"];
code := fdecl["body"];
__v421 := "type" in_obj id;
__v423 := id["type"];
__v422 := __v423 = "Identifier";
__v424 := "name" in_obj id;
if (true && __v421 && __v422 && __v424) {
name := id["name"];
__v425 := scope["store"];
__v426 := "FunctionObject" (___internal_esl_global, name, params, code, scope);
if (fst(__v426)) {
return __v426
} else {
__v426 := snd(__v426)
};
__v425[name] := __v426
} else {
if (true) {
__v427 := "raiseError" (___internal_esl_global, "Unsuported function identifier", id);
if (fst(__v427)) {
return __v427
} else {
__v427 := snd(__v427)
}
}
}
} else {
if (true) {
__v428 := "raiseError" (___internal_esl_global, "Unsuported function declaration", fdecl);
if (fst(__v428)) {
return __v428
} else {
__v428 := snd(__v428)
}
}
};
__v413 := __v413 + 1;
__v414 := __v412 > __v413 };
return ( false, null ) };
function extendScope (___internal_esl_global, scope, thisBinding) { __v429 := scope["globalObject"];
__v430 := "Scope" (___internal_esl_global, thisBinding, __v429);
if (fst(__v430)) {
return __v430
} else {
__v430 := snd(__v430)
};
newScope := __v430;
newScope["parent"] := scope;
return ( false, newScope ) };
function main () { ___internal_esl_global := { };
__v431 := "buildAST" (___internal_esl_global);
if (fst(__v431)) {
return __v431
} else {
__v431 := snd(__v431)
};
code := __v431;
__v432 := "GlobalObject" (___internal_esl_global);
if (fst(__v432)) {
return __v432
} else {
__v432 := snd(__v432)
};
globalObject := __v432;
__v433 := "Scope" (___internal_esl_global, globalObject, globalObject);
if (fst(__v433)) {
return __v433
} else {
__v433 := snd(__v433)
};
scope := __v433;
__v434 := "interpreter" (___internal_esl_global, scope, code);
if (fst(__v434)) {
return __v434
} else {
__v434 := snd(__v434)
};
return ( false, __v434 ) };
function initArrayIndicies (___internal_esl_global, arrayObject, nElements) { i := 0;
__v435 := i < nElements;
while (__v435) { __v436 := int_to_string(i);
offset := __v436;
__v437 := arrayObject["__elements__"];
__v438 := l_nth(__v437, i);
arrayObject[offset] := __v438;
__v439 := i + 1;
i := __v439;
__v435 := i < nElements };
return ( false, null ) };
function getCompletionType (___internal_esl_global, c) { __v440 := t_nth(c, 0);
return ( false, __v440 ) };
function initScope (___internal_esl_global, scope, vdecls, fdecls) { __v441 := "_initScopeVdecls" (___internal_esl_global, scope, vdecls);
if (fst(__v441)) {
return __v441
} else {
__v441 := snd(__v441)
};
__v442 := "_initScopeFdecls" (___internal_esl_global, scope, fdecls);
if (fst(__v442)) {
return __v442
} else {
__v442 := snd(__v442)
};
return ( false, null ) };
function resolveName (___internal_esl_global, scope, name) { __v443 := scope["store"];
__v444 := name in_obj __v443;
if (__v444) {
__v446 := scope["store"];
__v445 := __v446[name];
return ( false, __v445 )
} else {
__v447 := scope["parent"];
__v448 := __v447 = null;
if (__v448) {
__v449 := scope["globalObject"];
__v450 := "resolveProperty" (___internal_esl_global, __v449, name);
if (fst(__v450)) {
return __v450
} else {
__v450 := snd(__v450)
};
return ( false, __v450 )
} else {
__v451 := scope["parent"];
__v452 := "resolveName" (___internal_esl_global, __v451, name);
if (fst(__v452)) {
return __v452
} else {
__v452 := snd(__v452)
};
return ( false, __v452 )
}
} };
function InternalFunction (___internal_esl_global, name) { __v453 := { };
__v453["internal"] := true;
__v453["functionName"] := name;
object := __v453;
return ( false, object ) };
function esl_symbolic_assert (___internal_esl_global, args) { __v454 := l_nth(args, 0);
cond := __v454;
assert (cond);
return ( false, 0 ) };
function isAbruptCompletion (___internal_esl_global, c) { __v456 := "getCompletionType" (___internal_esl_global, c);
if (fst(__v456)) {
return __v456
} else {
__v456 := snd(__v456)
};
__v457 := __v456 = 'Normal;
__v455 := !(__v457);
return ( false, __v455 ) };
function applyBinaryOperator (___internal_esl_global, op, v1, v2) { if ("+" = op) {
__v458 := v1 + v2;
return ( false, __v458 )
} else {
if ("-" = op) {
__v459 := v1 - v2;
return ( false, __v459 )
} else {
if ("*" = op) {
__v460 := v1 * v2;
return ( false, __v460 )
} else {
if ("/" = op) {
__v461 := v1 / v2;
return ( false, __v461 )
} else {
if ("%" = op) {
__v462 := v1 % v2;
return ( false, __v462 )
} else {
if ("**" = op) {
__v463 := v1 ** v2;
return ( false, __v463 )
} else {
if ("&" = op) {
__v464 := v1 & v2;
return ( false, __v464 )
} else {
if ("|" = op) {
__v465 := v1 | v2;
return ( false, __v465 )
} else {
if ("^" = op) {
__v466 := v1 ^ v2;
return ( false, __v466 )
} else {
if ("<<" = op) {
__v467 := v1 << v2;
return ( false, __v467 )
} else {
if (">>" = op) {
__v468 := v1 >> v2;
return ( false, __v468 )
} else {
if (">>>" = op) {
__v469 := v1 >>> v2;
return ( false, __v469 )
} else {
if ("==" = op) {
__v470 := v1 = v2;
return ( false, __v470 )
} else {
if ("!=" = op) {
__v472 := v1 = v2;
__v471 := !(__v472);
return ( false, __v471 )
} else {
if (">" = op) {
__v473 := v1 > v2;
return ( false, __v473 )
} else {
if ("<" = op) {
__v474 := v1 < v2;
return ( false, __v474 )
} else {
if (">=" = op) {
__v475 := v1 >= v2;
return ( false, __v475 )
} else {
if ("<=" = op) {
__v476 := v1 <= v2;
return ( false, __v476 )
} else {
if ("===" = op) {
__v477 := v1 = v2;
return ( false, __v477 )
} else {
if ("!==" = op) {
__v479 := v1 = v2;
__v478 := !(__v479);
return ( false, __v478 )
} else {
__v480 := "raiseError" (___internal_esl_global, "Unsuported binary operator", op);
if (fst(__v480)) {
return __v480
} else {
__v480 := snd(__v480)
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function interpretArgs (___internal_esl_global, scope, args) { i := 0;
__v481 := l_len(args);
argsLen := __v481;
__v482 := [  ];
evalArgs := __v482;
__v483 := i < argsLen;
while (__v483) { __v484 := l_nth(args, i);
arg := __v484;
__v485 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v485)) {
return __v485
} else {
__v485 := snd(__v485)
};
argVal := __v485;
__v486 := "isAbruptCompletion" (___internal_esl_global, argVal);
if (fst(__v486)) {
return __v486
} else {
__v486 := snd(__v486)
};
if (__v486) {
return ( false, argVal )
} else {
__v487 := "getCompletionValue" (___internal_esl_global, argVal);
if (fst(__v487)) {
return __v487
} else {
__v487 := snd(__v487)
};
argVal := __v487
};
__v488 := l_add(evalArgs, argVal);
evalArgs := __v488;
__v489 := i + 1;
i := __v489;
__v483 := i < argsLen };
return ( false, evalArgs ) };
function updateObject (___internal_esl_global, objVal, propName, val) { objVal[propName] := val;
return ( false, null ) };
function ArrayObject (___internal_esl_global, elements) { __v490 := l_len(elements);
nElements := __v490;
__v491 := "Object" (___internal_esl_global);
if (fst(__v491)) {
return __v491
} else {
__v491 := snd(__v491)
};
arrayObject := __v491;
arrayObject["__elements__"] := elements;
__v492 := int_to_float(nElements);
arrayObject["length"] := __v492;
__v493 := "initArrayIndicies" (___internal_esl_global, arrayObject, nElements);
if (fst(__v493)) {
return __v493
} else {
__v493 := snd(__v493)
};
return ( false, arrayObject ) };
function Object (___internal_esl_global) { __v494 := { };
__v494["__proto__"] := null;
object := __v494;
return ( false, object ) };
function ContinueCompletion (___internal_esl_global, v) { __v495 := ( 'Continue, v );
return ( false, __v495 ) };
function getCompletionValue (___internal_esl_global, c) { __v496 := t_nth(c, 1);
return ( false, __v496 ) };
function interpretBlock (___internal_esl_global, scope, stmts) { retVal := 'empty;
__v498 := 0;
__v497 := l_len(stmts);
__v499 := __v497 > __v498;
while (__v499) { stmt := l_nth(stmts, __v498);
__v500 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v500)) {
return __v500
} else {
__v500 := snd(__v500)
};
retVal := __v500;
__v501 := "isAbruptCompletion" (___internal_esl_global, retVal);
if (fst(__v501)) {
return __v501
} else {
__v501 := snd(__v501)
};
if (__v501) {
return ( false, retVal )
} else {
__v502 := "getCompletionValue" (___internal_esl_global, retVal);
if (fst(__v502)) {
return __v502
} else {
__v502 := snd(__v502)
};
retVal := __v502
};
__v498 := __v498 + 1;
__v499 := __v497 > __v498 };
__v503 := "NormalCompletion" (___internal_esl_global, retVal);
if (fst(__v503)) {
return __v503
} else {
__v503 := snd(__v503)
};
return ( false, __v503 ) };
function applyAssignmentOperator (___internal_esl_global, op, oldVal, rightVal) { __v504 := { };
__v504["op"] := op;
__v504["oldVal"] := oldVal;
updateData := __v504;
__v505 := "op" in_obj updateData;
__v507 := updateData["op"];
__v506 := __v507 = "=";
__v508 := "oldVal" in_obj updateData;
if (true && __v505 && __v506 && __v508) {
oldVal := updateData["oldVal"];
return ( false, rightVal )
} else {
__v509 := "op" in_obj updateData;
__v511 := updateData["op"];
__v510 := __v511 = "+=";
__v512 := "oldVal" in_obj updateData;
if (true && __v509 && __v510 && __v512) {
oldVal := updateData["oldVal"];
__v513 := oldVal + rightVal;
return ( false, __v513 )
} else {
__v514 := "op" in_obj updateData;
__v516 := updateData["op"];
__v515 := __v516 = "-=";
__v517 := "oldVal" in_obj updateData;
if (true && __v514 && __v515 && __v517) {
oldVal := updateData["oldVal"];
__v518 := oldVal - rightVal;
return ( false, __v518 )
} else {
__v519 := "op" in_obj updateData;
__v521 := updateData["op"];
__v520 := __v521 = "*=";
__v522 := "oldVal" in_obj updateData;
if (true && __v519 && __v520 && __v522) {
oldVal := updateData["oldVal"];
__v523 := oldVal * rightVal;
return ( false, __v523 )
} else {
__v524 := "op" in_obj updateData;
__v526 := updateData["op"];
__v525 := __v526 = "/=";
__v527 := "oldVal" in_obj updateData;
if (true && __v524 && __v525 && __v527) {
oldVal := updateData["oldVal"];
__v528 := oldVal / rightVal;
return ( false, __v528 )
} else {
__v529 := "op" in_obj updateData;
__v531 := updateData["op"];
__v530 := __v531 = "%=";
__v532 := "oldVal" in_obj updateData;
if (true && __v529 && __v530 && __v532) {
oldVal := updateData["oldVal"];
__v533 := oldVal % rightVal;
return ( false, __v533 )
} else {
__v534 := "op" in_obj updateData;
__v536 := updateData["op"];
__v535 := __v536 = "**=";
__v537 := "oldVal" in_obj updateData;
if (true && __v534 && __v535 && __v537) {
oldVal := updateData["oldVal"];
__v538 := oldVal ** rightVal;
return ( false, __v538 )
} else {
if (true) {
__v539 := "raiseError" (___internal_esl_global, "Illegal assignment operator", op);
if (fst(__v539)) {
return __v539
} else {
__v539 := snd(__v539)
}
}
}
}
}
}
}
}
} };
function esl_symbolic_assume (___internal_esl_global, args) { __v540 := l_nth(args, 0);
cond := __v540;
se_assume(cond);
return ( false, 0 ) };
function resolveProperty (___internal_esl_global, objVal, propName) { __v542 := typeof(objVal);
__v543 := __v542 = __$Obj;
__v541 := !(__v543);
if (__v541) {
__v544 := "raiseError" (___internal_esl_global, "Unable to access property from a non object value.", objVal);
if (fst(__v544)) {
return __v544
} else {
__v544 := snd(__v544)
}
};
__v545 := propName in_obj objVal;
if (__v545) {
__v546 := objVal[propName];
return ( false, __v546 )
} else {
__v547 := objVal["__proto__"];
__v548 := __v547 = null;
if (__v548) {
return ( false, 'undefined )
} else {
__v549 := objVal["__proto__"];
__v550 := "resolveProperty" (___internal_esl_global, __v549, propName);
if (fst(__v550)) {
return __v550
} else {
__v550 := snd(__v550)
};
return ( false, __v550 )
}
} }