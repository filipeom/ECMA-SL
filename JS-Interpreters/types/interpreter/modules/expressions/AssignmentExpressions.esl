function assignment_expression(scope, left, right) {
  print("AssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, false);
  new_value := update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function plus_assignment_expression(scope, left, right) {
  print("PlusAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value + update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function minus_assignment_expression(scope, left, right) {
  print("MinusAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value - update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function times_assignment_expression(scope, left, right) {
  print("TimesAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value * update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function division_assignment_expression(scope, left, right) {
  print("DivisionAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value / update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function modulus_assignment_expression(scope, left, right) {
  print("ModulusAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value % update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
};

function power_assignment_expression(scope, left, right) {
  print("PowerAssignmentExpression [left][right]:");
  update_data := update_expression(scope, left, right, true);
  new_value := update_data.value ** update_data.mod;
  update_data.store[update_data.name] := new_value;
  return new_value
}