/* HACK: this module directly utilizes the ECMA-SL bitwise operators */

function bitwise_expression_not(scope, arg) {
  print("BitwiseExpressionNot [arg]");
  eval := unary_expression(scope, arg);
  return ~eval
};

function bitwise_expression_and(scope, left, right) {
  print("BitwiseExpressionAnd [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left & evals.right
};

function bitwise_expression_or(scope, left, right) {
  print("BitwiseExpressionOr [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left | evals.right
};

function bitwise_expression_xor(scope, left, right) {
  print("BitwiseExpressionXor [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left ^ evals.right
};

function bitwise_expression_zero_fill_left_shift(scope, left, right) {
  print("BitwiseExpressionZeroFillLeftShift [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left << evals.right
};

function bitwise_expression_signed_right_shift(scope, left, right) {
  print("BitwiseExpressionSignedRightShift [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left >> evals.right
};

function bitwise_expression_zero_fill_right_shift(scope, left, right) {
  print("BitwiseExpressionZeroFillRightShift [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left >>> evals.right
}