function comparison_expression_eq(scope, left, right) {
  print("ComparisonExpressionEq [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left = evals.right
};

function comparison_expression_ne(scope, left, right) {
  print("ComparisonExpressionNe [left][right]");
  evals := binary_expression(scope, left, right);
  return !(evals.left = evals.right)
};

function comparison_expression_lt(scope, left, right) {
  print("ComparisonExpressionLt [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left < evals.right
};

function comparison_expression_gt(scope, left, right) {
  print("ComparisonExpressionGt [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left > evals.right
};

function comparison_expression_le(scope, left, right) {
  print("ComparisonExpressionLe [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left <= evals.right
};

function comparison_expression_ge(scope, left, right) {
  print("ComparisonExpressionGe [left][right]");
  evals := binary_expression(scope, left, right);
  return evals.left >= evals.right
};

function comparison_expression_stricteq(scope, left, right) {
  /* simple (and ineffective) approach to the type comparison */
  print("ComparisonExpressionStrictEq [left][right]");
  evals := binary_expression(scope, left, right);
  return typeof evals.left = typeof evals.right && evals.left = evals.right
};

function comparison_expression_strictne(scope, left, right) {
  /* simple (and ineffective) approach to the type comparison */
  print("ComparisonExpressionStrictNe [left][right]");
  evals := binary_expression(scope, left, right);
  return !(typeof evals.left = typeof evals.right && evals.left = evals.right)
}