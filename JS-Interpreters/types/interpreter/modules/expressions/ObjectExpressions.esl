function object_property(scope, key, value) {
  print("ObjectProperty [key][value]");
  print(key);
  print(value);
  match key with
  | { type: "Identifier", name: name } -> {
    eval_value := interpreter(scope, value);
    return { name: name, value: eval_value }
  }
  | default -> {
    throw "Unexpected key type for object property"
  }
};

function object_expression(scope, props) {
  print("ObjectExpression [properties]");
  print(props);
  object := Object();
  foreach (prop : props) {
    object_property := interpreter(scope, prop);
    object[object_property.name] := object_property.value
  };
  return object
};


function member_expression(scope, object, prop) {
  print("MemberExpression [object][prop]");
  print(object);
  print(prop);
  resolved_object := resolve_left_value(scope, object, true);
  eval_object := resolved_object.value;
  eval_prop := interpreter(scope, prop);
  property_data := resolve_property(eval_object, eval_object, eval_prop, false);
  scope.this_context := eval_object;
  return property_data.value
}