function if_statement(scope, test, stmt1, stmt2) {
  print("IfStatement [test][consequent][alternate]");
  print(test);
  print(stmt1);
  print(stmt2);
  if (interpreter(scope, test)) {
    return interpreter(scope, stmt1)
  } elif (!(stmt2 = null)) {
    return interpreter(scope, stmt2)
  } else {
    return 'empty
  }
};



function __get_switch_case_args(switch_case) {
  match switch_case with
  | { type: "SwitchCase", test: test, consequent: consequent } -> {
    block := { type: "BlockStatement", body: consequent };
    return { test: test, block: block }
  }
  | default -> {
    throw "Unsuported switch case"
  }
};

function switch_statement(scope, discriminant, cases) {
  print("SwitchStatement [discriminat][cases]");
  print(discriminant);
  print(cases);
  main_cases := l_nth(cases, 0);
  default_case := l_nth(cases, 1);
  discriminant_value := interpreter(scope, discriminant);
  
  i := 0;
  searching := true;
  len := l_len(main_cases);
  while (i < len && searching) {
    switch_case := l_nth(main_cases, i);
    switch_case_args := __get_switch_case_args(switch_case);
    case_value := interpreter(scope, switch_case_args.test);
    if (discriminant_value = case_value) {
      searching := false
    } else {
      i := i + 1
    }
  };

  retval := 'empty;
  while (i < len && scope.flow_state = 'normal) {
    switch_case := l_nth(main_cases, i);
    switch_case_args := __get_switch_case_args(switch_case);
    retval := interpreter(scope, switch_case_args.block);
    i := i + 1
  };

  if (!(default_case = null) && scope.flow_state = 'normal) {
    default_args := __get_switch_case_args(default_case);
    retval := interpreter(scope, default_args.block)
  };

  scope.flow_state := 'normal;
  return 'retval
}