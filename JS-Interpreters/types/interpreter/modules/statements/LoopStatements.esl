function while_loop_statement(scope, test, body) {
  print("WhileLoopStatement [test][body]");
  print(test);
  print(body);
  retval := 'empty;

  while (scope.flow_state = 'normal && interpreter(scope, test)) {
    retval := interpreter(scope, body);
    if (scope.flow_state = 'continue) {
      scope.flow_state := 'normal
    }
  };

  if (!(scope.flow_state = 'return)) {
    scope.flow_state := 'normal
  };
  return retval
};

function for_loop_statement(scope, init, test, update, body) {
  print("ForLoopStatement [init][test][update][body]");
  print(init);
  print(test);
  print(update);
  print(body);
  retval := 'empty;

  interpreter(scope, init);
  while (scope.flow_state = 'normal && interpreter(scope, test)) {
    retval := interpreter(scope, body);
    if (scope.flow_state = 'continue) {
      scope.flow_state := 'normal
    };
    interpreter(scope, update)
  };

  if (!(scope.flow_state = 'return)) {
    scope.flow_state := 'normal
  };
  return retval
};

function break_statement(scope) {
  print("BreakStatement");
  scope.flow_state := 'break;
  return 'empty
};

function continue_statement(scope) {
  print("ContinueStatement");
  scope.flow_state := 'continue;
  return 'empty
}