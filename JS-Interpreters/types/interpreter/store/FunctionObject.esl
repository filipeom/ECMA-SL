function FunctionObject(name, params, code, parent_scope) {
  function_object := {};
  function_object.name := name;
  function_object.params := params;
  function_object.code := code;
  function_object.scope := null;
  function_object.parent_scope := parent_scope;
  function_object.prototype := { __proto__: null};
  return function_object
};



function __initialize_function_object_scope(function_object, this_object) {
  scope := Scope();
  scope.parent := function_object;
  function_object.scope := scope;
  code := function_object.code;
  if (!(this_object = null)) {
    scope.this_store := this_object
  };
  match code with
  | { type: "BlockStatement", body: body, variableDeclarations: vdecls, functionDeclarations: fdecls } -> {
    initialize_scope(scope, vdecls, fdecls)
  }
  | default -> {
    throw "Invalid code block for function body"
  };
  return function_object
};

function __add_function_args_to_scope(function_object, function_args) {
  i := 0;
  len := l_len(function_object.params);
  scope := function_object.scope;
  while (i < len) {
    param_name := l_nth(function_object.params, i);
    scope.store[param_name] := l_nth(function_args, i);
    i := i + 1
  };
  return function_object
};

function initialize_function_object(function_object, function_args, this_object) {
  __initialize_function_object_scope(function_object, this_object);
  __add_function_args_to_scope(function_object, function_args);
  return function_object
}
