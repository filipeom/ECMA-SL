PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Program [stmts]:"
PROGRAM PRINT: ["$loc_3", "$loc_7", "$loc_11", "$loc_28", "$loc_46", "$loc_58", "$loc_80"]
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "VariableDeclaration", "kind": "var", "declarations": ["$loc_4"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclaration [decls]:"
PROGRAM PRINT: ["$loc_4"]
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclarator [id][init]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "VariableDeclaration", "kind": "var", "declarations": ["$loc_8"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclaration [decls]:"
PROGRAM PRINT: ["$loc_8"]
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclarator [id][init]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_12", "type": "WhileStatement", "body": "$loc_15" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "WhileLoopStatement [test][body]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_14", "left": "$loc_13", "operator": "<" }
PROGRAM PRINT: { "type": "BlockStatement", "body": ["$loc_16", "$loc_22"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 4.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 4.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 5.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 5.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 6.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 6.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_16", "$loc_22"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_17" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_19", "left": "$loc_18", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_21", "left": "$loc_20", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_23" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_25", "left": "$loc_24", "operator": "=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_27", "left": "$loc_26", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "7", "value": 7 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 7.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "init": "$loc_29", "test": "$loc_33", "type": "ForStatement", "body": "$loc_41", "update": "$loc_36" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ForLoopStatement [init][test][update][body]"
PROGRAM PRINT: { "type": "VariableDeclaration", "kind": "var", "declarations": ["$loc_30"] }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_35", "left": "$loc_34", "operator": "<" }
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_38", "left": "$loc_37", "operator": "=" }
PROGRAM PRINT: { "type": "BlockStatement", "body": ["$loc_42"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclaration [decls]:"
PROGRAM PRINT: ["$loc_30"]
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclarator [id][init]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "3", "value": 3 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_42"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_43" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_45", "left": "$loc_44", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 17.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 17.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_40", "left": "$loc_39", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "3", "value": 3 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_42"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_43" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_45", "left": "$loc_44", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 27.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 27.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_40", "left": "$loc_39", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "3", "value": 3 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_42"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_43" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_45", "left": "$loc_44", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 37.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 37.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "AssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_40", "left": "$loc_39", "operator": "+" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionPlus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1", "value": 1 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "3", "value": 3 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 3.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 37.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_47", "type": "WhileStatement", "body": "$loc_48" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "WhileLoopStatement [test][body]"
PROGRAM PRINT: { "type": "Literal", "raw": "true", "value": true }
PROGRAM PRINT: { "type": "BlockStatement", "body": ["$loc_49", "$loc_53", "$loc_54"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: true
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_49", "$loc_53", "$loc_54"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_50" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_52", "left": "$loc_51", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "100", "value": 100 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 100.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 137.
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "label": null, "type": "BreakStatement" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BreakStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: true
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "init": "$loc_59", "test": "$loc_63", "type": "ForStatement", "body": "$loc_68", "update": "$loc_66" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ForLoopStatement [init][test][update][body]"
PROGRAM PRINT: { "type": "VariableDeclaration", "kind": "var", "declarations": ["$loc_60"] }
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_65", "left": "$loc_64", "operator": "<" }
PROGRAM PRINT: { "prefix": false, "type": "UpdateExpression", "argument": "$loc_67", "operator": "++" }
PROGRAM PRINT: { "type": "BlockStatement", "body": ["$loc_69", "$loc_76"] }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclaration [decls]:"
PROGRAM PRINT: ["$loc_60"]
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "VariableDeclarator [id][init]:"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ContinueStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 1.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_77" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_79", "left": "$loc_78", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1000", "value": 1000 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1000.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 1137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 1137.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ContinueStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 3.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_77" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_79", "left": "$loc_78", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1000", "value": 1000 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1000.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 2137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 2137.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 4.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ContinueStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 5.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_77" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_79", "left": "$loc_78", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1000", "value": 1000 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1000.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 3137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 3137.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 6.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ContinueStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 7.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_77" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_79", "left": "$loc_78", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1000", "value": 1000 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1000.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 4137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 4137.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 8.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 8.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ContinueStatement"
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 9.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "BlockStatement [stmts]:"
PROGRAM PRINT: ["$loc_69", "$loc_76"]
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "test": "$loc_70", "type": "IfStatement", "alternate": null, "consequent": "$loc_75" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "IfStatement [test][consequent][alternate]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_74", "left": "$loc_71", "operator": "==" }
PROGRAM PRINT: { "label": null, "type": "ContinueStatement" }
PROGRAM PRINT: null
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionEq [left][right]"
PROGRAM PRINT: { "type": "BinaryExpression", "right": "$loc_73", "left": "$loc_72", "operator": "%" }
PROGRAM PRINT: { "type": "Literal", "raw": "0", "value": 0 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ArithmeticExpressionModulus [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "2", "value": 2 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 9.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 2.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 0.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 'empty
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_77" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "type": "AssignmentExpression", "right": "$loc_79", "left": "$loc_78", "operator": "+=" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "PlusAssignmentExpression [left][right]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "1000", "value": 1000 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 1000.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 5137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the block [retval]:"
PROGRAM PRINT: 5137.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "UpdateExpressionInc [arg]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "EmptyValue" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ComparisonExpressionLt [left][right]"
PROGRAM PRINT: { "name": "i", "type": "Identifier" }
PROGRAM PRINT: { "type": "Literal", "raw": "10", "value": 10 }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "i"
PROGRAM PRINT: 10.
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Literal [value]"
PROGRAM PRINT: 10.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 5137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "Start of the statement [stmt]"
PROGRAM PRINT: { "type": "ExpressionStatement", "expression": "$loc_81" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "ExpressionStatement [expression]:"
PROGRAM PRINT: { "name": "result", "type": "Identifier" }
PROGRAM PRINT: "........................................"
PROGRAM PRINT: "Identifier [name][value]:"
PROGRAM PRINT: "result"
PROGRAM PRINT: 5137.
PROGRAM PRINT: "End of the statement [retval]"
PROGRAM PRINT: 5137.
PROGRAM PRINT: "________________________________________________________________________________"
PROGRAM PRINT: "End of the program [retval]:"
PROGRAM PRINT: 5137.
