function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "retval_1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := true;
__n8["raw"] := "true";
__n7["test"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "retval_1";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n12["right"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n15 := [  ];
__n9["letDeclarations"] := __n15;
__n16 := [  ];
__n9["constDeclarations"] := __n16;
__n7["consequent"] := __n9;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "retval_";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 2.;
__n22["raw"] := "2";
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n23 := [  ];
__n17["letDeclarations"] := __n23;
__n24 := [  ];
__n17["constDeclarations"] := __n24;
__n7["alternate"] := __n17;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "retval_2";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := false;
__n31["raw"] := "false";
__n30["test"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "retval_2";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 10.;
__n37["raw"] := "10";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n38 := [  ];
__n32["letDeclarations"] := __n38;
__n39 := [  ];
__n32["constDeclarations"] := __n39;
__n30["consequent"] := __n32;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "retval_2";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 20.;
__n45["raw"] := "20";
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n46 := [  ];
__n40["letDeclarations"] := __n46;
__n47 := [  ];
__n40["constDeclarations"] := __n47;
__n30["alternate"] := __n40;
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "retval_3";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 300.;
__n52["raw"] := "300";
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := false;
__n54["raw"] := "false";
__n53["test"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "AssignmentExpression";
__n58["operator"] := "=";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "retval_3";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 100.;
__n60["raw"] := "100";
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n61 := [  ];
__n55["letDeclarations"] := __n61;
__n62 := [  ];
__n55["constDeclarations"] := __n62;
__n53["consequent"] := __n55;
__n53["alternate"] := null;
__n63 := {  };
__n63["type"] := "VariableDeclaration";
__n65 := {  };
__n65["type"] := "VariableDeclarator";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "retval_4";
__n65["id"] := __n66;
__n67 := {  };
__n67["type"] := "ConditionalExpression";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := true;
__n68["raw"] := "true";
__n67["test"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 4000.;
__n69["raw"] := "4000";
__n67["consequent"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 5000.;
__n70["raw"] := "5000";
__n67["alternate"] := __n70;
__n65["init"] := __n67;
__n64 := [ __n65 ];
__n63["declarations"] := __n64;
__n63["kind"] := "var";
__n71 := {  };
__n71["type"] := "VariableDeclaration";
__n73 := {  };
__n73["type"] := "VariableDeclarator";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "retval_5";
__n73["id"] := __n74;
__n75 := {  };
__n75["type"] := "ConditionalExpression";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := false;
__n76["raw"] := "false";
__n75["test"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 40000.;
__n77["raw"] := "40000";
__n75["consequent"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 50000.;
__n78["raw"] := "50000";
__n75["alternate"] := __n78;
__n73["init"] := __n75;
__n72 := [ __n73 ];
__n71["declarations"] := __n72;
__n71["kind"] := "var";
__n79 := {  };
__n79["type"] := "VariableDeclaration";
__n81 := {  };
__n81["type"] := "VariableDeclarator";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "cond";
__n81["id"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 2.;
__n83["raw"] := "2";
__n81["init"] := __n83;
__n80 := [ __n81 ];
__n79["declarations"] := __n80;
__n79["kind"] := "var";
__n84 := {  };
__n84["type"] := "VariableDeclaration";
__n86 := {  };
__n86["type"] := "VariableDeclarator";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "retval_6";
__n86["id"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 0.;
__n88["raw"] := "0";
__n86["init"] := __n88;
__n85 := [ __n86 ];
__n84["declarations"] := __n85;
__n84["kind"] := "var";
__n89 := {  };
__n89["type"] := "SwitchStatement";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "cond";
__n89["discriminant"] := __n90;
__n93 := {  };
__n93["type"] := "SwitchCase";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 0.;
__n94["raw"] := "0";
__n93["test"] := __n94;
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "AssignmentExpression";
__n97["operator"] := "=";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "retval_6";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 0.;
__n99["raw"] := "0";
__n97["right"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n93["consequent"] := __n95;
__n100 := {  };
__n100["type"] := "SwitchCase";
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 1.;
__n101["raw"] := "1";
__n100["test"] := __n101;
__n103 := {  };
__n103["type"] := "ExpressionStatement";
__n104 := {  };
__n104["type"] := "AssignmentExpression";
__n104["operator"] := "=";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "retval_6";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 100000.;
__n106["raw"] := "100000";
__n104["right"] := __n106;
__n103["expression"] := __n104;
__n102 := [ __n103 ];
__n100["consequent"] := __n102;
__n107 := {  };
__n107["type"] := "SwitchCase";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 2.;
__n108["raw"] := "2";
__n107["test"] := __n108;
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "AssignmentExpression";
__n111["operator"] := "=";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "retval_6";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 200000.;
__n113["raw"] := "200000";
__n111["right"] := __n113;
__n110["expression"] := __n111;
__n109 := [ __n110 ];
__n107["consequent"] := __n109;
__n114 := {  };
__n114["type"] := "SwitchCase";
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 3.;
__n115["raw"] := "3";
__n114["test"] := __n115;
__n117 := {  };
__n117["type"] := "ExpressionStatement";
__n118 := {  };
__n118["type"] := "AssignmentExpression";
__n118["operator"] := "+=";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "retval_6";
__n118["left"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 300000.;
__n120["raw"] := "300000";
__n118["right"] := __n120;
__n117["expression"] := __n118;
__n116 := [ __n117 ];
__n114["consequent"] := __n116;
__n92 := [ __n93, __n100, __n107, __n114 ];
__n121 := {  };
__n121["type"] := "SwitchCase";
__n121["test"] := null;
__n123 := {  };
__n123["type"] := "ExpressionStatement";
__n124 := {  };
__n124["type"] := "AssignmentExpression";
__n124["operator"] := "+=";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "retval_6";
__n124["left"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 100000.;
__n126["raw"] := "100000";
__n124["right"] := __n126;
__n123["expression"] := __n124;
__n122 := [ __n123 ];
__n121["consequent"] := __n122;
__n127 := [  ];
__n91 := [ __n92, __n121, __n127 ];
__n89["cases"] := __n91;
__n128 := [  ];
__n89["letDeclarations"] := __n128;
__n129 := [  ];
__n89["constDeclarations"] := __n129;
__n130 := {  };
__n130["type"] := "VariableDeclaration";
__n132 := {  };
__n132["type"] := "VariableDeclarator";
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "cond";
__n132["id"] := __n133;
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 1.;
__n134["raw"] := "1";
__n132["init"] := __n134;
__n131 := [ __n132 ];
__n130["declarations"] := __n131;
__n130["kind"] := "var";
__n135 := {  };
__n135["type"] := "VariableDeclaration";
__n137 := {  };
__n137["type"] := "VariableDeclarator";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "retval_7";
__n137["id"] := __n138;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := 0.;
__n139["raw"] := "0";
__n137["init"] := __n139;
__n136 := [ __n137 ];
__n135["declarations"] := __n136;
__n135["kind"] := "var";
__n140 := {  };
__n140["type"] := "SwitchStatement";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "cond";
__n140["discriminant"] := __n141;
__n144 := {  };
__n144["type"] := "SwitchCase";
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := 0.;
__n145["raw"] := "0";
__n144["test"] := __n145;
__n147 := {  };
__n147["type"] := "ExpressionStatement";
__n148 := {  };
__n148["type"] := "AssignmentExpression";
__n148["operator"] := "=";
__n149 := {  };
__n149["type"] := "Identifier";
__n149["name"] := "retval_7";
__n148["left"] := __n149;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := 0.;
__n150["raw"] := "0";
__n148["right"] := __n150;
__n147["expression"] := __n148;
__n151 := {  };
__n151["type"] := "BreakStatement";
__n151["label"] := null;
__n146 := [ __n147, __n151 ];
__n144["consequent"] := __n146;
__n152 := {  };
__n152["type"] := "SwitchCase";
__n153 := {  };
__n153["type"] := "Literal";
__n153["value"] := 1.;
__n153["raw"] := "1";
__n152["test"] := __n153;
__n155 := {  };
__n155["type"] := "ExpressionStatement";
__n156 := {  };
__n156["type"] := "AssignmentExpression";
__n156["operator"] := "=";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "retval_7";
__n156["left"] := __n157;
__n158 := {  };
__n158["type"] := "Literal";
__n158["value"] := 7000000.;
__n158["raw"] := "7000000";
__n156["right"] := __n158;
__n155["expression"] := __n156;
__n159 := {  };
__n159["type"] := "BreakStatement";
__n159["label"] := null;
__n154 := [ __n155, __n159 ];
__n152["consequent"] := __n154;
__n160 := {  };
__n160["type"] := "SwitchCase";
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := 2.;
__n161["raw"] := "2";
__n160["test"] := __n161;
__n163 := {  };
__n163["type"] := "ExpressionStatement";
__n164 := {  };
__n164["type"] := "AssignmentExpression";
__n164["operator"] := "=";
__n165 := {  };
__n165["type"] := "Identifier";
__n165["name"] := "retval_7";
__n164["left"] := __n165;
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := 0.;
__n166["raw"] := "0";
__n164["right"] := __n166;
__n163["expression"] := __n164;
__n167 := {  };
__n167["type"] := "BreakStatement";
__n167["label"] := null;
__n162 := [ __n163, __n167 ];
__n160["consequent"] := __n162;
__n143 := [ __n144, __n152, __n160 ];
__n168 := {  };
__n168["type"] := "SwitchCase";
__n168["test"] := null;
__n170 := {  };
__n170["type"] := "ExpressionStatement";
__n171 := {  };
__n171["type"] := "AssignmentExpression";
__n171["operator"] := "=";
__n172 := {  };
__n172["type"] := "Identifier";
__n172["name"] := "retval_7";
__n171["left"] := __n172;
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := 0.;
__n173["raw"] := "0";
__n171["right"] := __n173;
__n170["expression"] := __n171;
__n169 := [ __n170 ];
__n168["consequent"] := __n169;
__n174 := [  ];
__n142 := [ __n143, __n168, __n174 ];
__n140["cases"] := __n142;
__n175 := [  ];
__n140["letDeclarations"] := __n175;
__n176 := [  ];
__n140["constDeclarations"] := __n176;
__n177 := {  };
__n177["type"] := "ExpressionStatement";
__n178 := {  };
__n178["type"] := "BinaryExpression";
__n178["operator"] := "+";
__n179 := {  };
__n179["type"] := "BinaryExpression";
__n179["operator"] := "+";
__n180 := {  };
__n180["type"] := "BinaryExpression";
__n180["operator"] := "+";
__n181 := {  };
__n181["type"] := "BinaryExpression";
__n181["operator"] := "+";
__n182 := {  };
__n182["type"] := "BinaryExpression";
__n182["operator"] := "+";
__n183 := {  };
__n183["type"] := "BinaryExpression";
__n183["operator"] := "+";
__n184 := {  };
__n184["type"] := "Identifier";
__n184["name"] := "retval_1";
__n183["left"] := __n184;
__n185 := {  };
__n185["type"] := "Identifier";
__n185["name"] := "retval_2";
__n183["right"] := __n185;
__n182["left"] := __n183;
__n186 := {  };
__n186["type"] := "Identifier";
__n186["name"] := "retval_3";
__n182["right"] := __n186;
__n181["left"] := __n182;
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "retval_4";
__n181["right"] := __n187;
__n180["left"] := __n181;
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "retval_5";
__n180["right"] := __n188;
__n179["left"] := __n180;
__n189 := {  };
__n189["type"] := "Identifier";
__n189["name"] := "retval_6";
__n179["right"] := __n189;
__n178["left"] := __n179;
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "retval_7";
__n178["right"] := __n190;
__n177["expression"] := __n178;
__n1 := [ __n2, __n7, __n25, __n30, __n48, __n53, __n63, __n71, __n79, __n84, __n89, __n130, __n135, __n140, __n177 ];
__n0["body"] := __n1;
__n191 := [ "retval_1", "retval_2", "retval_3", "retval_4", "retval_5", "cond", "retval_6", "retval_7" ];
__n0["variableDeclarations"] := __n191;
__n192 := [  ];
__n0["functionDeclarations"] := __n192;
__n193 := [  ];
__n0["letDeclarations"] := __n193;
__n194 := [  ];
__n0["constDeclarations"] := __n194;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
};
function new_expression (___internal_esl_global, scope, callee, args) { __v0 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v0)) {
return __v0
} else {
__v0 := snd(__v0)
};
function_object := __v0;
__v1 := function_object["params"];
__v2 := "__initialize_function_args" (___internal_esl_global, scope, __v1, args);
if (fst(__v2)) {
return __v2
} else {
__v2 := snd(__v2)
};
eval_args := __v2;
__v3 := { };
new_obj := __v3;
__v4 := function_object["prototype"];
new_obj["__proto__"] := __v4;
__v5 := scope["this_context"];
__v6 := "initialize_function_object" (___internal_esl_global, function_object, eval_args, __v5);
if (fst(__v6)) {
return __v6
} else {
__v6 := snd(__v6)
};
__v7 := function_object["scope"];
__v8 := function_object["code"];
__v9 := "interpreter" (___internal_esl_global, __v7, __v8);
if (fst(__v9)) {
return __v9
} else {
__v9 := snd(__v9)
};
retval := __v9;
return ( false, "banana" ) };
function comparison_expression_ge (___internal_esl_global, scope, left, right) { print "ComparisonExpressionGe [left][right]";
__v10 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v10)) {
return __v10
} else {
__v10 := snd(__v10)
};
evals := __v10;
__v11 := evals["left"];
__v12 := evals["right"];
__v13 := __v11 >= __v12;
return ( false, __v13 ) };
function bitwise_expression_zero_fill_right_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionZeroFillRightShift [left][right]";
__v14 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v14)) {
return __v14
} else {
__v14 := snd(__v14)
};
evals := __v14;
__v15 := evals["left"];
__v16 := evals["right"];
__v17 := __v15 >>> __v16;
return ( false, __v17 ) };
function __initialize_scope_fdecls (___internal_esl_global, scope, fdecls) { __v19 := 0;
__v18 := l_len(fdecls);
__v20 := __v18 > __v19;
while (__v20) { fdecl := l_nth(fdecls, __v19);
__v21 := "type" in_obj fdecl;
__v23 := fdecl["type"];
__v22 := __v23 = "FunctionExpression";
__v24 := "id" in_obj fdecl;
__v25 := "params" in_obj fdecl;
__v26 := "body" in_obj fdecl;
if (true && __v21 && __v22 && __v24 && __v25 && __v26) {
id := fdecl["id"];
params := fdecl["params"];
code := fdecl["body"];
__v27 := "type" in_obj id;
__v29 := id["type"];
__v28 := __v29 = "Identifier";
__v30 := "name" in_obj id;
if (true && __v27 && __v28 && __v30) {
name := id["name"];
__v31 := scope["store"];
__v32 := "FunctionObject" (___internal_esl_global, name, params, code, scope);
if (fst(__v32)) {
return __v32
} else {
__v32 := snd(__v32)
};
__v31[name] := __v32
} else {
if (true) {
return ( true, "Invalid function identifier" )
}
}
} else {
__v33 := "type" in_obj fdecl;
__v35 := fdecl["type"];
__v34 := __v35 = "FunctionDeclaration";
__v36 := "id" in_obj fdecl;
__v37 := "params" in_obj fdecl;
__v38 := "body" in_obj fdecl;
if (true && __v33 && __v34 && __v36 && __v37 && __v38) {
id := fdecl["id"];
params := fdecl["params"];
code := fdecl["body"];
__v39 := "type" in_obj id;
__v41 := id["type"];
__v40 := __v41 = "Identifier";
__v42 := "name" in_obj id;
if (true && __v39 && __v40 && __v42) {
name := id["name"];
__v43 := scope["store"];
__v44 := "FunctionObject" (___internal_esl_global, name, params, code, scope);
if (fst(__v44)) {
return __v44
} else {
__v44 := snd(__v44)
};
__v43[name] := __v44
} else {
if (true) {
return ( true, "Invalid function identifier" )
}
}
} else {
if (true) {
print fdecl;
return ( true, "Unexpected function declaration type" )
}
}
};
__v19 := __v19 + 1;
__v20 := __v18 > __v19 };
return ( false, scope ) };
function arithmetic_expression_neg (___internal_esl_global, scope, arg) { print "ArithmeticExpressionNeg [arg]";
__v45 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v45)) {
return __v45
} else {
__v45 := snd(__v45)
};
eval := __v45;
__v46 := -(eval);
return ( false, __v46 ) };
function __initialize_function_args (___internal_esl_global, scope, params, args) { __v48 := l_len(params);
__v49 := l_len(args);
__v50 := __v48 = __v49;
__v47 := !(__v50);
if (__v47) {
return ( true, "Invalid number of arguments in function call" )
};
__v51 := [  ];
eval_args := __v51;
__v53 := 0;
__v52 := l_len(args);
__v54 := __v52 > __v53;
while (__v54) { arg := l_nth(args, __v53);
__v55 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v55)) {
return __v55
} else {
__v55 := snd(__v55)
};
v := __v55;
__v56 := l_add(eval_args, v);
eval_args := __v56;
__v53 := __v53 + 1;
__v54 := __v52 > __v53 };
return ( false, eval_args ) };
function binary_expression (___internal_esl_global, scope, left, right) { print left;
print right;
__v57 := "interpreter" (___internal_esl_global, scope, left);
if (fst(__v57)) {
return __v57
} else {
__v57 := snd(__v57)
};
eval_left := __v57;
__v58 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v58)) {
return __v58
} else {
__v58 := snd(__v58)
};
eval_right := __v58;
__v59 := { };
__v59["left"] := eval_left;
__v59["right"] := eval_right;
return ( false, __v59 ) };
function comparison_expression_eq (___internal_esl_global, scope, left, right) { print "ComparisonExpressionEq [left][right]";
__v60 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v60)) {
return __v60
} else {
__v60 := snd(__v60)
};
evals := __v60;
__v61 := evals["left"];
__v62 := evals["right"];
__v63 := __v61 = __v62;
return ( false, __v63 ) };
function Scope (___internal_esl_global) { __v64 := { };
scope := __v64;
scope["parent"] := null;
__v65 := "Object" (___internal_esl_global);
if (fst(__v65)) {
return __v65
} else {
__v65 := snd(__v65)
};
scope["store"] := __v65;
scope["this_context"] := null;
__v66 := scope["store"];
scope["this_store"] := __v66;
scope["flow_state"] := 'normal;
return ( false, scope ) };
function arithmetic_expression_minus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionMinus [left][right]";
__v67 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v67)) {
return __v67
} else {
__v67 := snd(__v67)
};
evals := __v67;
__v68 := evals["left"];
__v69 := evals["right"];
__v70 := __v68 - __v69;
return ( false, __v70 ) };
function variable_declarator (___internal_esl_global, scope, id, init) { print "VariableDeclarator [id][init]:";
print id;
print init;
__v71 := "type" in_obj id;
__v73 := id["type"];
__v72 := __v73 = "Identifier";
__v74 := "name" in_obj id;
if (true && __v71 && __v72 && __v74) {
name := id["name"];
__v76 := init = null;
__v75 := !(__v76);
if (__v75) {
__v77 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v77)) {
return __v77
} else {
__v77 := snd(__v77)
};
rv := __v77
} else {
rv := 'undefined
};
__v78 := scope["store"];
__v78[name] := rv;
return ( false, rv )
} else {
if (true) {
return ( true, "Unsuported left side of the declaration operation" )
}
} };
function __initialize_scope_vdecls (___internal_esl_global, scope, vdecls) { __v80 := 0;
__v79 := l_len(vdecls);
__v81 := __v79 > __v80;
while (__v81) { vdecl := l_nth(vdecls, __v80);
__v82 := scope["store"];
__v82[vdecl] := 'undefined;
__v80 := __v80 + 1;
__v81 := __v79 > __v80 };
return ( false, scope ) };
function bitwise_expression_signed_right_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionSignedRightShift [left][right]";
__v83 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v83)) {
return __v83
} else {
__v83 := snd(__v83)
};
evals := __v83;
__v84 := evals["left"];
__v85 := evals["right"];
__v86 := __v84 >> __v85;
return ( false, __v86 ) };
function conditional_expression (___internal_esl_global, scope, test, expr1, expr2) { print "ConditionalExpression [test][consequent][alternate]";
print test;
print expr1;
print expr2;
__v87 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v87)) {
return __v87
} else {
__v87 := snd(__v87)
};
if (__v87) {
__v88 := "interpreter" (___internal_esl_global, scope, expr1);
if (fst(__v88)) {
return __v88
} else {
__v88 := snd(__v88)
};
return ( false, __v88 )
} else {
__v89 := "interpreter" (___internal_esl_global, scope, expr2);
if (fst(__v89)) {
return __v89
} else {
__v89 := snd(__v89)
};
return ( false, __v89 )
} };
function __add_function_args_to_scope (___internal_esl_global, function_object, function_args) { i := 0;
__v91 := function_object["params"];
__v90 := l_len(__v91);
len := __v90;
__v92 := function_object["scope"];
scope := __v92;
__v93 := i < len;
while (__v93) { __v94 := function_object["params"];
__v95 := l_nth(__v94, i);
param_name := __v95;
__v96 := scope["store"];
__v97 := l_nth(function_args, i);
__v96[param_name] := __v97;
__v98 := i + 1;
i := __v98;
__v93 := i < len };
return ( false, function_object ) };
function interpreter (___internal_esl_global, scope, s) { print "........................................";
__v99 := "type" in_obj s;
__v101 := s["type"];
__v100 := __v101 = "Program";
__v102 := "body" in_obj s;
__v103 := "variableDeclarations" in_obj s;
__v104 := "functionDeclarations" in_obj s;
if (true && __v99 && __v100 && __v102 && __v103 && __v104) {
body := s["body"];
vdecls := s["variableDeclarations"];
fdecls := s["functionDeclarations"];
__v105 := "program" (___internal_esl_global, scope, body, vdecls, fdecls);
if (fst(__v105)) {
return __v105
} else {
__v105 := snd(__v105)
};
return ( false, __v105 )
} else {
__v106 := "type" in_obj s;
__v108 := s["type"];
__v107 := __v108 = "BlockStatement";
__v109 := "body" in_obj s;
if (true && __v106 && __v107 && __v109) {
body := s["body"];
__v110 := "block_statement" (___internal_esl_global, scope, body);
if (fst(__v110)) {
return __v110
} else {
__v110 := snd(__v110)
};
return ( false, __v110 )
} else {
__v111 := "type" in_obj s;
__v113 := s["type"];
__v112 := __v113 = "ReturnStatement";
__v114 := "argument" in_obj s;
if (true && __v111 && __v112 && __v114) {
arg := s["argument"];
__v115 := "return_statement" (___internal_esl_global, scope, arg);
if (fst(__v115)) {
return __v115
} else {
__v115 := snd(__v115)
};
return ( false, __v115 )
} else {
__v116 := "type" in_obj s;
__v118 := s["type"];
__v117 := __v118 = "ExpressionStatement";
__v119 := "expression" in_obj s;
if (true && __v116 && __v117 && __v119) {
expr := s["expression"];
__v120 := "expression_statement" (___internal_esl_global, scope, expr);
if (fst(__v120)) {
return __v120
} else {
__v120 := snd(__v120)
};
return ( false, __v120 )
} else {
__v121 := "type" in_obj s;
__v123 := s["type"];
__v122 := __v123 = "IfStatement";
__v124 := "test" in_obj s;
__v125 := "consequent" in_obj s;
__v126 := "alternate" in_obj s;
if (true && __v121 && __v122 && __v124 && __v125 && __v126) {
test := s["test"];
stmt1 := s["consequent"];
stmt2 := s["alternate"];
__v127 := "if_statement" (___internal_esl_global, scope, test, stmt1, stmt2);
if (fst(__v127)) {
return __v127
} else {
__v127 := snd(__v127)
};
return ( false, __v127 )
} else {
__v128 := "type" in_obj s;
__v130 := s["type"];
__v129 := __v130 = "SwitchStatement";
__v131 := "discriminant" in_obj s;
__v132 := "cases" in_obj s;
if (true && __v128 && __v129 && __v131 && __v132) {
discriminant := s["discriminant"];
cases := s["cases"];
__v133 := "switch_statement" (___internal_esl_global, scope, discriminant, cases);
if (fst(__v133)) {
return __v133
} else {
__v133 := snd(__v133)
};
return ( false, __v133 )
} else {
__v134 := "type" in_obj s;
__v136 := s["type"];
__v135 := __v136 = "WhileStatement";
__v137 := "test" in_obj s;
__v138 := "body" in_obj s;
if (true && __v134 && __v135 && __v137 && __v138) {
test := s["test"];
body := s["body"];
__v139 := "while_loop_statement" (___internal_esl_global, scope, test, body);
if (fst(__v139)) {
return __v139
} else {
__v139 := snd(__v139)
};
return ( false, __v139 )
} else {
__v140 := "type" in_obj s;
__v142 := s["type"];
__v141 := __v142 = "ForStatement";
__v143 := "init" in_obj s;
__v144 := "test" in_obj s;
__v145 := "update" in_obj s;
__v146 := "body" in_obj s;
if (true && __v140 && __v141 && __v143 && __v144 && __v145 && __v146) {
init := s["init"];
test := s["test"];
update := s["update"];
body := s["body"];
__v147 := "for_loop_statement" (___internal_esl_global, scope, init, test, update, body);
if (fst(__v147)) {
return __v147
} else {
__v147 := snd(__v147)
};
return ( false, __v147 )
} else {
__v148 := "type" in_obj s;
__v150 := s["type"];
__v149 := __v150 = "BreakStatement";
__v151 := "label" in_obj s;
__v153 := s["label"];
__v152 := __v153 = null;
if (true && __v148 && __v149 && __v151 && __v152) {
__v154 := "break_statement" (___internal_esl_global, scope);
if (fst(__v154)) {
return __v154
} else {
__v154 := snd(__v154)
};
return ( false, __v154 )
} else {
__v155 := "type" in_obj s;
__v157 := s["type"];
__v156 := __v157 = "ContinueStatement";
__v158 := "label" in_obj s;
__v160 := s["label"];
__v159 := __v160 = null;
if (true && __v155 && __v156 && __v158 && __v159) {
__v161 := "continue_statement" (___internal_esl_global, scope);
if (fst(__v161)) {
return __v161
} else {
__v161 := snd(__v161)
};
return ( false, __v161 )
} else {
__v162 := "type" in_obj s;
__v164 := s["type"];
__v163 := __v164 = "UnaryExpression";
__v165 := "argument" in_obj s;
__v166 := "operator" in_obj s;
__v168 := s["operator"];
__v167 := __v168 = "+";
if (true && __v162 && __v163 && __v165 && __v166 && __v167) {
arg := s["argument"];
__v169 := "arithmetic_expression_pos" (___internal_esl_global, scope, arg);
if (fst(__v169)) {
return __v169
} else {
__v169 := snd(__v169)
};
return ( false, __v169 )
} else {
__v170 := "type" in_obj s;
__v172 := s["type"];
__v171 := __v172 = "UnaryExpression";
__v173 := "argument" in_obj s;
__v174 := "operator" in_obj s;
__v176 := s["operator"];
__v175 := __v176 = "-";
if (true && __v170 && __v171 && __v173 && __v174 && __v175) {
arg := s["argument"];
__v177 := "arithmetic_expression_neg" (___internal_esl_global, scope, arg);
if (fst(__v177)) {
return __v177
} else {
__v177 := snd(__v177)
};
return ( false, __v177 )
} else {
__v178 := "type" in_obj s;
__v180 := s["type"];
__v179 := __v180 = "BinaryExpression";
__v181 := "left" in_obj s;
__v182 := "right" in_obj s;
__v183 := "operator" in_obj s;
__v185 := s["operator"];
__v184 := __v185 = "+";
if (true && __v178 && __v179 && __v181 && __v182 && __v183 && __v184) {
left := s["left"];
right := s["right"];
__v186 := "arithmetic_expression_plus" (___internal_esl_global, scope, left, right);
if (fst(__v186)) {
return __v186
} else {
__v186 := snd(__v186)
};
return ( false, __v186 )
} else {
__v187 := "type" in_obj s;
__v189 := s["type"];
__v188 := __v189 = "BinaryExpression";
__v190 := "left" in_obj s;
__v191 := "right" in_obj s;
__v192 := "operator" in_obj s;
__v194 := s["operator"];
__v193 := __v194 = "-";
if (true && __v187 && __v188 && __v190 && __v191 && __v192 && __v193) {
left := s["left"];
right := s["right"];
__v195 := "arithmetic_expression_minus" (___internal_esl_global, scope, left, right);
if (fst(__v195)) {
return __v195
} else {
__v195 := snd(__v195)
};
return ( false, __v195 )
} else {
__v196 := "type" in_obj s;
__v198 := s["type"];
__v197 := __v198 = "BinaryExpression";
__v199 := "left" in_obj s;
__v200 := "right" in_obj s;
__v201 := "operator" in_obj s;
__v203 := s["operator"];
__v202 := __v203 = "*";
if (true && __v196 && __v197 && __v199 && __v200 && __v201 && __v202) {
left := s["left"];
right := s["right"];
__v204 := "arithmetic_expression_times" (___internal_esl_global, scope, left, right);
if (fst(__v204)) {
return __v204
} else {
__v204 := snd(__v204)
};
return ( false, __v204 )
} else {
__v205 := "type" in_obj s;
__v207 := s["type"];
__v206 := __v207 = "BinaryExpression";
__v208 := "left" in_obj s;
__v209 := "right" in_obj s;
__v210 := "operator" in_obj s;
__v212 := s["operator"];
__v211 := __v212 = "/";
if (true && __v205 && __v206 && __v208 && __v209 && __v210 && __v211) {
left := s["left"];
right := s["right"];
__v213 := "arithmetic_expression_division" (___internal_esl_global, scope, left, right);
if (fst(__v213)) {
return __v213
} else {
__v213 := snd(__v213)
};
return ( false, __v213 )
} else {
__v214 := "type" in_obj s;
__v216 := s["type"];
__v215 := __v216 = "BinaryExpression";
__v217 := "left" in_obj s;
__v218 := "right" in_obj s;
__v219 := "operator" in_obj s;
__v221 := s["operator"];
__v220 := __v221 = "%";
if (true && __v214 && __v215 && __v217 && __v218 && __v219 && __v220) {
left := s["left"];
right := s["right"];
__v222 := "arithmetic_expression_modulus" (___internal_esl_global, scope, left, right);
if (fst(__v222)) {
return __v222
} else {
__v222 := snd(__v222)
};
return ( false, __v222 )
} else {
__v223 := "type" in_obj s;
__v225 := s["type"];
__v224 := __v225 = "BinaryExpression";
__v226 := "left" in_obj s;
__v227 := "right" in_obj s;
__v228 := "operator" in_obj s;
__v230 := s["operator"];
__v229 := __v230 = "**";
if (true && __v223 && __v224 && __v226 && __v227 && __v228 && __v229) {
left := s["left"];
right := s["right"];
__v231 := "arithmetic_expression_power" (___internal_esl_global, scope, left, right);
if (fst(__v231)) {
return __v231
} else {
__v231 := snd(__v231)
};
return ( false, __v231 )
} else {
__v232 := "type" in_obj s;
__v234 := s["type"];
__v233 := __v234 = "AssignmentExpression";
__v235 := "left" in_obj s;
__v236 := "right" in_obj s;
__v237 := "operator" in_obj s;
__v239 := s["operator"];
__v238 := __v239 = "=";
if (true && __v232 && __v233 && __v235 && __v236 && __v237 && __v238) {
left := s["left"];
right := s["right"];
__v240 := "assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v240)) {
return __v240
} else {
__v240 := snd(__v240)
};
return ( false, __v240 )
} else {
__v241 := "type" in_obj s;
__v243 := s["type"];
__v242 := __v243 = "AssignmentExpression";
__v244 := "left" in_obj s;
__v245 := "right" in_obj s;
__v246 := "operator" in_obj s;
__v248 := s["operator"];
__v247 := __v248 = "+=";
if (true && __v241 && __v242 && __v244 && __v245 && __v246 && __v247) {
left := s["left"];
right := s["right"];
__v249 := "plus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v249)) {
return __v249
} else {
__v249 := snd(__v249)
};
return ( false, __v249 )
} else {
__v250 := "type" in_obj s;
__v252 := s["type"];
__v251 := __v252 = "AssignmentExpression";
__v253 := "left" in_obj s;
__v254 := "right" in_obj s;
__v255 := "operator" in_obj s;
__v257 := s["operator"];
__v256 := __v257 = "-=";
if (true && __v250 && __v251 && __v253 && __v254 && __v255 && __v256) {
left := s["left"];
right := s["right"];
__v258 := "minus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v258)) {
return __v258
} else {
__v258 := snd(__v258)
};
return ( false, __v258 )
} else {
__v259 := "type" in_obj s;
__v261 := s["type"];
__v260 := __v261 = "AssignmentExpression";
__v262 := "left" in_obj s;
__v263 := "right" in_obj s;
__v264 := "operator" in_obj s;
__v266 := s["operator"];
__v265 := __v266 = "*=";
if (true && __v259 && __v260 && __v262 && __v263 && __v264 && __v265) {
left := s["left"];
right := s["right"];
__v267 := "times_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v267)) {
return __v267
} else {
__v267 := snd(__v267)
};
return ( false, __v267 )
} else {
__v268 := "type" in_obj s;
__v270 := s["type"];
__v269 := __v270 = "AssignmentExpression";
__v271 := "left" in_obj s;
__v272 := "right" in_obj s;
__v273 := "operator" in_obj s;
__v275 := s["operator"];
__v274 := __v275 = "/=";
if (true && __v268 && __v269 && __v271 && __v272 && __v273 && __v274) {
left := s["left"];
right := s["right"];
__v276 := "division_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v276)) {
return __v276
} else {
__v276 := snd(__v276)
};
return ( false, __v276 )
} else {
__v277 := "type" in_obj s;
__v279 := s["type"];
__v278 := __v279 = "AssignmentExpression";
__v280 := "left" in_obj s;
__v281 := "right" in_obj s;
__v282 := "operator" in_obj s;
__v284 := s["operator"];
__v283 := __v284 = "%=";
if (true && __v277 && __v278 && __v280 && __v281 && __v282 && __v283) {
left := s["left"];
right := s["right"];
__v285 := "modulus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v285)) {
return __v285
} else {
__v285 := snd(__v285)
};
return ( false, __v285 )
} else {
__v286 := "type" in_obj s;
__v288 := s["type"];
__v287 := __v288 = "AssignmentExpression";
__v289 := "left" in_obj s;
__v290 := "right" in_obj s;
__v291 := "operator" in_obj s;
__v293 := s["operator"];
__v292 := __v293 = "**=";
if (true && __v286 && __v287 && __v289 && __v290 && __v291 && __v292) {
left := s["left"];
right := s["right"];
__v294 := "power_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v294)) {
return __v294
} else {
__v294 := snd(__v294)
};
return ( false, __v294 )
} else {
__v295 := "type" in_obj s;
__v297 := s["type"];
__v296 := __v297 = "UnaryExpression";
__v298 := "argument" in_obj s;
__v299 := "operator" in_obj s;
__v301 := s["operator"];
__v300 := __v301 = "~";
if (true && __v295 && __v296 && __v298 && __v299 && __v300) {
arg := s["argument"];
__v302 := "bitwise_expression_not" (___internal_esl_global, scope, arg);
if (fst(__v302)) {
return __v302
} else {
__v302 := snd(__v302)
};
return ( false, __v302 )
} else {
__v303 := "type" in_obj s;
__v305 := s["type"];
__v304 := __v305 = "BinaryExpression";
__v306 := "left" in_obj s;
__v307 := "right" in_obj s;
__v308 := "operator" in_obj s;
__v310 := s["operator"];
__v309 := __v310 = "&";
if (true && __v303 && __v304 && __v306 && __v307 && __v308 && __v309) {
left := s["left"];
right := s["right"];
__v311 := "bitwise_expression_and" (___internal_esl_global, scope, left, right);
if (fst(__v311)) {
return __v311
} else {
__v311 := snd(__v311)
};
return ( false, __v311 )
} else {
__v312 := "type" in_obj s;
__v314 := s["type"];
__v313 := __v314 = "BinaryExpression";
__v315 := "left" in_obj s;
__v316 := "right" in_obj s;
__v317 := "operator" in_obj s;
__v319 := s["operator"];
__v318 := __v319 = "|";
if (true && __v312 && __v313 && __v315 && __v316 && __v317 && __v318) {
left := s["left"];
right := s["right"];
__v320 := "bitwise_expression_or" (___internal_esl_global, scope, left, right);
if (fst(__v320)) {
return __v320
} else {
__v320 := snd(__v320)
};
return ( false, __v320 )
} else {
__v321 := "type" in_obj s;
__v323 := s["type"];
__v322 := __v323 = "BinaryExpression";
__v324 := "left" in_obj s;
__v325 := "right" in_obj s;
__v326 := "operator" in_obj s;
__v328 := s["operator"];
__v327 := __v328 = "^";
if (true && __v321 && __v322 && __v324 && __v325 && __v326 && __v327) {
left := s["left"];
right := s["right"];
__v329 := "bitwise_expression_xor" (___internal_esl_global, scope, left, right);
if (fst(__v329)) {
return __v329
} else {
__v329 := snd(__v329)
};
return ( false, __v329 )
} else {
__v330 := "type" in_obj s;
__v332 := s["type"];
__v331 := __v332 = "BinaryExpression";
__v333 := "left" in_obj s;
__v334 := "right" in_obj s;
__v335 := "operator" in_obj s;
__v337 := s["operator"];
__v336 := __v337 = "<<";
if (true && __v330 && __v331 && __v333 && __v334 && __v335 && __v336) {
left := s["left"];
right := s["right"];
__v338 := "bitwise_expression_zero_fill_left_shift" (___internal_esl_global, scope, left, right);
if (fst(__v338)) {
return __v338
} else {
__v338 := snd(__v338)
};
return ( false, __v338 )
} else {
__v339 := "type" in_obj s;
__v341 := s["type"];
__v340 := __v341 = "BinaryExpression";
__v342 := "left" in_obj s;
__v343 := "right" in_obj s;
__v344 := "operator" in_obj s;
__v346 := s["operator"];
__v345 := __v346 = ">>";
if (true && __v339 && __v340 && __v342 && __v343 && __v344 && __v345) {
left := s["left"];
right := s["right"];
__v347 := "bitwise_expression_signed_right_shift" (___internal_esl_global, scope, left, right);
if (fst(__v347)) {
return __v347
} else {
__v347 := snd(__v347)
};
return ( false, __v347 )
} else {
__v348 := "type" in_obj s;
__v350 := s["type"];
__v349 := __v350 = "BinaryExpression";
__v351 := "left" in_obj s;
__v352 := "right" in_obj s;
__v353 := "operator" in_obj s;
__v355 := s["operator"];
__v354 := __v355 = ">>>";
if (true && __v348 && __v349 && __v351 && __v352 && __v353 && __v354) {
left := s["left"];
right := s["right"];
__v356 := "bitwise_expression_zero_fill_right_shift" (___internal_esl_global, scope, left, right);
if (fst(__v356)) {
return __v356
} else {
__v356 := snd(__v356)
};
return ( false, __v356 )
} else {
__v357 := "type" in_obj s;
__v359 := s["type"];
__v358 := __v359 = "BinaryExpression";
__v360 := "left" in_obj s;
__v361 := "right" in_obj s;
__v362 := "operator" in_obj s;
__v364 := s["operator"];
__v363 := __v364 = "==";
if (true && __v357 && __v358 && __v360 && __v361 && __v362 && __v363) {
left := s["left"];
right := s["right"];
__v365 := "comparison_expression_eq" (___internal_esl_global, scope, left, right);
if (fst(__v365)) {
return __v365
} else {
__v365 := snd(__v365)
};
return ( false, __v365 )
} else {
__v366 := "type" in_obj s;
__v368 := s["type"];
__v367 := __v368 = "BinaryExpression";
__v369 := "left" in_obj s;
__v370 := "right" in_obj s;
__v371 := "operator" in_obj s;
__v373 := s["operator"];
__v372 := __v373 = "!=";
if (true && __v366 && __v367 && __v369 && __v370 && __v371 && __v372) {
left := s["left"];
right := s["right"];
__v374 := "comparison_expression_ne" (___internal_esl_global, scope, left, right);
if (fst(__v374)) {
return __v374
} else {
__v374 := snd(__v374)
};
return ( false, __v374 )
} else {
__v375 := "type" in_obj s;
__v377 := s["type"];
__v376 := __v377 = "BinaryExpression";
__v378 := "left" in_obj s;
__v379 := "right" in_obj s;
__v380 := "operator" in_obj s;
__v382 := s["operator"];
__v381 := __v382 = "<";
if (true && __v375 && __v376 && __v378 && __v379 && __v380 && __v381) {
left := s["left"];
right := s["right"];
__v383 := "comparison_expression_lt" (___internal_esl_global, scope, left, right);
if (fst(__v383)) {
return __v383
} else {
__v383 := snd(__v383)
};
return ( false, __v383 )
} else {
__v384 := "type" in_obj s;
__v386 := s["type"];
__v385 := __v386 = "BinaryExpression";
__v387 := "left" in_obj s;
__v388 := "right" in_obj s;
__v389 := "operator" in_obj s;
__v391 := s["operator"];
__v390 := __v391 = ">";
if (true && __v384 && __v385 && __v387 && __v388 && __v389 && __v390) {
left := s["left"];
right := s["right"];
__v392 := "comparison_expression_gt" (___internal_esl_global, scope, left, right);
if (fst(__v392)) {
return __v392
} else {
__v392 := snd(__v392)
};
return ( false, __v392 )
} else {
__v393 := "type" in_obj s;
__v395 := s["type"];
__v394 := __v395 = "BinaryExpression";
__v396 := "left" in_obj s;
__v397 := "right" in_obj s;
__v398 := "operator" in_obj s;
__v400 := s["operator"];
__v399 := __v400 = "<=";
if (true && __v393 && __v394 && __v396 && __v397 && __v398 && __v399) {
left := s["left"];
right := s["right"];
__v401 := "comparison_expression_le" (___internal_esl_global, scope, left, right);
if (fst(__v401)) {
return __v401
} else {
__v401 := snd(__v401)
};
return ( false, __v401 )
} else {
__v402 := "type" in_obj s;
__v404 := s["type"];
__v403 := __v404 = "BinaryExpression";
__v405 := "left" in_obj s;
__v406 := "right" in_obj s;
__v407 := "operator" in_obj s;
__v409 := s["operator"];
__v408 := __v409 = ">=";
if (true && __v402 && __v403 && __v405 && __v406 && __v407 && __v408) {
left := s["left"];
right := s["right"];
__v410 := "comparison_expression_ge" (___internal_esl_global, scope, left, right);
if (fst(__v410)) {
return __v410
} else {
__v410 := snd(__v410)
};
return ( false, __v410 )
} else {
__v411 := "type" in_obj s;
__v413 := s["type"];
__v412 := __v413 = "BinaryExpression";
__v414 := "left" in_obj s;
__v415 := "right" in_obj s;
__v416 := "operator" in_obj s;
__v418 := s["operator"];
__v417 := __v418 = "===";
if (true && __v411 && __v412 && __v414 && __v415 && __v416 && __v417) {
left := s["left"];
right := s["right"];
__v419 := "comparison_expression_stricteq" (___internal_esl_global, scope, left, right);
if (fst(__v419)) {
return __v419
} else {
__v419 := snd(__v419)
};
return ( false, __v419 )
} else {
__v420 := "type" in_obj s;
__v422 := s["type"];
__v421 := __v422 = "BinaryExpression";
__v423 := "left" in_obj s;
__v424 := "right" in_obj s;
__v425 := "operator" in_obj s;
__v427 := s["operator"];
__v426 := __v427 = "!==";
if (true && __v420 && __v421 && __v423 && __v424 && __v425 && __v426) {
left := s["left"];
right := s["right"];
__v428 := "comparison_expression_strictne" (___internal_esl_global, scope, left, right);
if (fst(__v428)) {
return __v428
} else {
__v428 := snd(__v428)
};
return ( false, __v428 )
} else {
__v429 := "type" in_obj s;
__v431 := s["type"];
__v430 := __v431 = "ConditionalExpression";
__v432 := "test" in_obj s;
__v433 := "consequent" in_obj s;
__v434 := "alternate" in_obj s;
if (true && __v429 && __v430 && __v432 && __v433 && __v434) {
test := s["test"];
expr1 := s["consequent"];
expr2 := s["alternate"];
__v435 := "conditional_expression" (___internal_esl_global, scope, test, expr1, expr2);
if (fst(__v435)) {
return __v435
} else {
__v435 := snd(__v435)
};
return ( false, __v435 )
} else {
__v436 := "type" in_obj s;
__v438 := s["type"];
__v437 := __v438 = "CallExpression";
__v439 := "callee" in_obj s;
__v440 := "arguments" in_obj s;
if (true && __v436 && __v437 && __v439 && __v440) {
callee := s["callee"];
args := s["arguments"];
__v441 := "call_expression" (___internal_esl_global, scope, callee, args);
if (fst(__v441)) {
return __v441
} else {
__v441 := snd(__v441)
};
return ( false, __v441 )
} else {
__v442 := "type" in_obj s;
__v444 := s["type"];
__v443 := __v444 = "NewExpression";
__v445 := "callee" in_obj s;
__v446 := "arguments" in_obj s;
if (true && __v442 && __v443 && __v445 && __v446) {
callee := s["callee"];
args := s["arguments"];
__v447 := "new_expression" (___internal_esl_global, scope, callee, args);
if (fst(__v447)) {
return __v447
} else {
__v447 := snd(__v447)
};
return ( false, __v447 )
} else {
__v448 := "type" in_obj s;
__v450 := s["type"];
__v449 := __v450 = "UnaryExpression";
__v451 := "argument" in_obj s;
__v452 := "operator" in_obj s;
__v454 := s["operator"];
__v453 := __v454 = "!";
if (true && __v448 && __v449 && __v451 && __v452 && __v453) {
arg := s["argument"];
__v455 := "logical_expression_not" (___internal_esl_global, scope, arg);
if (fst(__v455)) {
return __v455
} else {
__v455 := snd(__v455)
};
return ( false, __v455 )
} else {
__v456 := "type" in_obj s;
__v458 := s["type"];
__v457 := __v458 = "LogicalExpression";
__v459 := "left" in_obj s;
__v460 := "right" in_obj s;
__v461 := "operator" in_obj s;
__v463 := s["operator"];
__v462 := __v463 = "||";
if (true && __v456 && __v457 && __v459 && __v460 && __v461 && __v462) {
left := s["left"];
right := s["right"];
__v464 := "logical_expression_or" (___internal_esl_global, scope, left, right);
if (fst(__v464)) {
return __v464
} else {
__v464 := snd(__v464)
};
return ( false, __v464 )
} else {
__v465 := "type" in_obj s;
__v467 := s["type"];
__v466 := __v467 = "LogicalExpression";
__v468 := "left" in_obj s;
__v469 := "right" in_obj s;
__v470 := "operator" in_obj s;
__v472 := s["operator"];
__v471 := __v472 = "&&";
if (true && __v465 && __v466 && __v468 && __v469 && __v470 && __v471) {
left := s["left"];
right := s["right"];
__v473 := "logical_expression_and" (___internal_esl_global, scope, left, right);
if (fst(__v473)) {
return __v473
} else {
__v473 := snd(__v473)
};
return ( false, __v473 )
} else {
__v474 := "type" in_obj s;
__v476 := s["type"];
__v475 := __v476 = "Property";
__v477 := "kind" in_obj s;
__v478 := "key" in_obj s;
__v479 := "value" in_obj s;
__v480 := "computed" in_obj s;
__v482 := s["computed"];
__v481 := __v482 = false;
__v483 := "shorthand" in_obj s;
__v485 := s["shorthand"];
__v484 := __v485 = false;
if (true && __v474 && __v475 && __v477 && __v478 && __v479 && __v480 && __v481 && __v483 && __v484) {
kind := s["kind"];
key := s["key"];
value := s["value"];
__v486 := "object_property" (___internal_esl_global, scope, key, value);
if (fst(__v486)) {
return __v486
} else {
__v486 := snd(__v486)
};
return ( false, __v486 )
} else {
__v487 := "type" in_obj s;
__v489 := s["type"];
__v488 := __v489 = "ObjectExpression";
__v490 := "properties" in_obj s;
if (true && __v487 && __v488 && __v490) {
props := s["properties"];
__v491 := "object_expression" (___internal_esl_global, scope, props);
if (fst(__v491)) {
return __v491
} else {
__v491 := snd(__v491)
};
return ( false, __v491 )
} else {
__v492 := "type" in_obj s;
__v494 := s["type"];
__v493 := __v494 = "MemberExpression";
__v495 := "object" in_obj s;
__v496 := "property" in_obj s;
__v497 := "computed" in_obj s;
__v499 := s["computed"];
__v498 := __v499 = true;
if (true && __v492 && __v493 && __v495 && __v496 && __v497 && __v498) {
object := s["object"];
prop := s["property"];
__v500 := "member_expression" (___internal_esl_global, scope, object, prop);
if (fst(__v500)) {
return __v500
} else {
__v500 := snd(__v500)
};
return ( false, __v500 )
} else {
__v501 := "type" in_obj s;
__v503 := s["type"];
__v502 := __v503 = "UpdateExpression";
__v504 := "argument" in_obj s;
__v505 := "operator" in_obj s;
__v507 := s["operator"];
__v506 := __v507 = "++";
__v508 := "prefix" in_obj s;
if (true && __v501 && __v502 && __v504 && __v505 && __v506 && __v508) {
arg := s["argument"];
prefix := s["prefix"];
__v509 := "update_expression_inc" (___internal_esl_global, scope, arg, prefix);
if (fst(__v509)) {
return __v509
} else {
__v509 := snd(__v509)
};
return ( false, __v509 )
} else {
__v510 := "type" in_obj s;
__v512 := s["type"];
__v511 := __v512 = "UpdateExpression";
__v513 := "argument" in_obj s;
__v514 := "operator" in_obj s;
__v516 := s["operator"];
__v515 := __v516 = "--";
__v517 := "prefix" in_obj s;
if (true && __v510 && __v511 && __v513 && __v514 && __v515 && __v517) {
arg := s["argument"];
prefix := s["prefix"];
__v518 := "update_expression_dec" (___internal_esl_global, scope, arg, prefix);
if (fst(__v518)) {
return __v518
} else {
__v518 := snd(__v518)
};
return ( false, __v518 )
} else {
__v519 := "type" in_obj s;
__v521 := s["type"];
__v520 := __v521 = "VariableDeclarator";
__v522 := "id" in_obj s;
__v523 := "init" in_obj s;
if (true && __v519 && __v520 && __v522 && __v523) {
id := s["id"];
init := s["init"];
__v524 := "variable_declarator" (___internal_esl_global, scope, id, init);
if (fst(__v524)) {
return __v524
} else {
__v524 := snd(__v524)
};
return ( false, __v524 )
} else {
__v525 := "type" in_obj s;
__v527 := s["type"];
__v526 := __v527 = "VariableDeclaration";
__v528 := "kind" in_obj s;
__v530 := s["kind"];
__v529 := __v530 = "var";
__v531 := "declarations" in_obj s;
if (true && __v525 && __v526 && __v528 && __v529 && __v531) {
decls := s["declarations"];
__v532 := "var_declaration" (___internal_esl_global, scope, decls);
if (fst(__v532)) {
return __v532
} else {
__v532 := snd(__v532)
};
return ( false, __v532 )
} else {
__v533 := "type" in_obj s;
__v535 := s["type"];
__v534 := __v535 = "VariableDeclaration";
__v536 := "kind" in_obj s;
__v538 := s["kind"];
__v537 := __v538 = "let";
__v539 := "declarations" in_obj s;
if (true && __v533 && __v534 && __v536 && __v537 && __v539) {
decls := s["declarations"];
__v540 := "let_declaration" (___internal_esl_global, scope, decls);
if (fst(__v540)) {
return __v540
} else {
__v540 := snd(__v540)
};
return ( false, __v540 )
} else {
__v541 := "type" in_obj s;
__v543 := s["type"];
__v542 := __v543 = "VariableDeclaration";
__v544 := "kind" in_obj s;
__v546 := s["kind"];
__v545 := __v546 = "const";
__v547 := "declarations" in_obj s;
if (true && __v541 && __v542 && __v544 && __v545 && __v547) {
decls := s["declarations"];
__v548 := "const_declaration" (___internal_esl_global, scope, decls);
if (fst(__v548)) {
return __v548
} else {
__v548 := snd(__v548)
};
return ( false, __v548 )
} else {
__v549 := "type" in_obj s;
__v551 := s["type"];
__v550 := __v551 = "Literal";
__v552 := "raw" in_obj s;
__v553 := "value" in_obj s;
if (true && __v549 && __v550 && __v552 && __v553) {
raw := s["raw"];
value := s["value"];
__v554 := "literal_value" (___internal_esl_global, scope, value);
if (fst(__v554)) {
return __v554
} else {
__v554 := snd(__v554)
};
return ( false, __v554 )
} else {
__v555 := "type" in_obj s;
__v557 := s["type"];
__v556 := __v557 = "Identifier";
__v558 := "name" in_obj s;
if (true && __v555 && __v556 && __v558) {
name := s["name"];
__v559 := "identifier_value" (___internal_esl_global, scope, name);
if (fst(__v559)) {
return __v559
} else {
__v559 := snd(__v559)
};
return ( false, __v559 )
} else {
__v560 := "type" in_obj s;
__v562 := s["type"];
__v561 := __v562 = "EmptyValue";
if (true && __v560 && __v561) {
return ( false, 'empty )
} else {
if (true) {
print "[ERROR]: Found an unsuported statement";
print s;
return ( true, "Unsuported statement" )
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function minus_assignment_expression (___internal_esl_global, scope, left, right) { print "MinusAssignmentExpression [left][right]:";
__v563 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v563)) {
return __v563
} else {
__v563 := snd(__v563)
};
update_data := __v563;
__v564 := update_data["value"];
__v565 := update_data["mod"];
__v566 := __v564 - __v565;
new_value := __v566;
__v567 := update_data["store"];
__v568 := update_data["name"];
__v567[__v568] := new_value;
return ( false, new_value ) };
function update_expression (___internal_esl_global, scope, left, right, must_exist) { print left;
print right;
__v569 := "resolve_left_value" (___internal_esl_global, scope, left, must_exist);
if (fst(__v569)) {
return __v569
} else {
__v569 := snd(__v569)
};
update_data := __v569;
__v570 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v570)) {
return __v570
} else {
__v570 := snd(__v570)
};
update_data["mod"] := __v570;
return ( false, update_data ) };
function initialize_scope (___internal_esl_global, scope, vdecls, fdecls) { __v571 := "__initialize_scope_vdecls" (___internal_esl_global, scope, vdecls);
if (fst(__v571)) {
return __v571
} else {
__v571 := snd(__v571)
};
scope := __v571;
__v572 := "__initialize_scope_fdecls" (___internal_esl_global, scope, fdecls);
if (fst(__v572)) {
return __v572
} else {
__v572 := snd(__v572)
};
scope := __v572;
return ( false, scope ) };
function arithmetic_expression_pos (___internal_esl_global, scope, arg) { print "ArithmeticExpressionPos [arg]";
__v573 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v573)) {
return __v573
} else {
__v573 := snd(__v573)
};
eval := __v573;
return ( false, eval ) };
function while_loop_statement (___internal_esl_global, scope, test, body) { print "WhileLoopStatement [test][body]";
print test;
print body;
retval := 'empty;
__v574 := scope["flow_state"];
__v575 := __v574 = 'normal;
__v576 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v576)) {
return __v576
} else {
__v576 := snd(__v576)
};
__v577 := __v575 && __v576;
while (__v577) { __v578 := "interpreter" (___internal_esl_global, scope, body);
if (fst(__v578)) {
return __v578
} else {
__v578 := snd(__v578)
};
retval := __v578;
__v579 := scope["flow_state"];
__v580 := __v579 = 'continue;
if (__v580) {
scope["flow_state"] := 'normal
};
__v574 := scope["flow_state"];
__v575 := __v574 = 'normal;
__v576 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v576)) {
return __v576
} else {
__v576 := snd(__v576)
};
__v577 := __v575 && __v576 };
__v582 := scope["flow_state"];
__v583 := __v582 = 'return;
__v581 := !(__v583);
if (__v581) {
scope["flow_state"] := 'normal
};
return ( false, retval ) };
function update_expression_inc (___internal_esl_global, scope, arg, prefix) { print "UpdateExpressionInc [arg]";
__v584 := { };
__v584["type"] := "EmptyValue";
__v585 := "update_expression" (___internal_esl_global, scope, arg, __v584, true);
if (fst(__v585)) {
return __v585
} else {
__v585 := snd(__v585)
};
update_data := __v585;
__v586 := update_data["value"];
__v587 := __v586 + 1.;
new_value := __v587;
__v588 := update_data["store"];
__v589 := update_data["name"];
__v588[__v589] := new_value;
__v590 := update_data["value"];
__v591 := "__prefix_return" (___internal_esl_global, prefix, __v590, new_value);
if (fst(__v591)) {
return __v591
} else {
__v591 := snd(__v591)
};
return ( false, __v591 ) };
function assignment_expression (___internal_esl_global, scope, left, right) { print "AssignmentExpression [left][right]:";
__v592 := "update_expression" (___internal_esl_global, scope, left, right, false);
if (fst(__v592)) {
return __v592
} else {
__v592 := snd(__v592)
};
update_data := __v592;
__v593 := update_data["mod"];
new_value := __v593;
__v594 := update_data["store"];
__v595 := update_data["name"];
__v594[__v595] := new_value;
return ( false, new_value ) };
function program (___internal_esl_global, scope, stmts, vdecls, fdecls) { print "Program [stmts]:";
print stmts;
__v596 := "initialize_scope" (___internal_esl_global, scope, vdecls, fdecls);
if (fst(__v596)) {
return __v596
} else {
__v596 := snd(__v596)
};
scope := __v596;
i := 0;
retval := 'empty;
__v597 := l_len(stmts);
len := __v597;
__v598 := i < len;
__v599 := scope["flow_state"];
__v600 := __v599 = 'normal;
__v601 := __v598 && __v600;
while (__v601) { __v602 := l_nth(stmts, i);
stmt := __v602;
print "________________________________________________________________________________";
print "Start of the statement [stmt]";
print stmt;
scope["this_context"] := null;
__v603 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v603)) {
return __v603
} else {
__v603 := snd(__v603)
};
retval := __v603;
print "End of the statement [retval]";
print retval;
__v604 := i + 1;
i := __v604;
__v598 := i < len;
__v599 := scope["flow_state"];
__v600 := __v599 = 'normal;
__v601 := __v598 && __v600 };
print "________________________________________________________________________________";
print "End of the program [retval]:";
print retval;
return ( false, retval ) };
function member_expression (___internal_esl_global, scope, object, prop) { print "MemberExpression [object][prop]";
print object;
print prop;
__v605 := "resolve_left_value" (___internal_esl_global, scope, object, true);
if (fst(__v605)) {
return __v605
} else {
__v605 := snd(__v605)
};
resolved_object := __v605;
__v606 := resolved_object["value"];
eval_object := __v606;
__v607 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v607)) {
return __v607
} else {
__v607 := snd(__v607)
};
eval_prop := __v607;
__v608 := "resolve_property" (___internal_esl_global, eval_object, eval_object, eval_prop, false);
if (fst(__v608)) {
return __v608
} else {
__v608 := snd(__v608)
};
property_data := __v608;
scope["this_context"] := eval_object;
__v609 := property_data["value"];
return ( false, __v609 ) };
function comparison_expression_lt (___internal_esl_global, scope, left, right) { print "ComparisonExpressionLt [left][right]";
__v610 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v610)) {
return __v610
} else {
__v610 := snd(__v610)
};
evals := __v610;
__v611 := evals["left"];
__v612 := evals["right"];
__v613 := __v611 < __v612;
return ( false, __v613 ) };
function arithmetic_expression_plus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionPlus [left][right]";
__v614 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v614)) {
return __v614
} else {
__v614 := snd(__v614)
};
evals := __v614;
__v615 := evals["left"];
__v616 := evals["right"];
__v617 := __v615 + __v616;
return ( false, __v617 ) };
function continue_statement (___internal_esl_global, scope) { print "ContinueStatement";
scope["flow_state"] := 'continue;
return ( false, 'empty ) };
function initialize_function_object (___internal_esl_global, function_object, function_args, this_object) { __v618 := "__initialize_function_object_scope" (___internal_esl_global, function_object, this_object);
if (fst(__v618)) {
return __v618
} else {
__v618 := snd(__v618)
};
__v619 := "__add_function_args_to_scope" (___internal_esl_global, function_object, function_args);
if (fst(__v619)) {
return __v619
} else {
__v619 := snd(__v619)
};
return ( false, function_object ) };
function bitwise_expression_zero_fill_left_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionZeroFillLeftShift [left][right]";
__v620 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v620)) {
return __v620
} else {
__v620 := snd(__v620)
};
evals := __v620;
__v621 := evals["left"];
__v622 := evals["right"];
__v623 := __v621 << __v622;
return ( false, __v623 ) };
function times_assignment_expression (___internal_esl_global, scope, left, right) { print "TimesAssignmentExpression [left][right]:";
__v624 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v624)) {
return __v624
} else {
__v624 := snd(__v624)
};
update_data := __v624;
__v625 := update_data["value"];
__v626 := update_data["mod"];
__v627 := __v625 * __v626;
new_value := __v627;
__v628 := update_data["store"];
__v629 := update_data["name"];
__v628[__v629] := new_value;
return ( false, new_value ) };
function break_statement (___internal_esl_global, scope) { print "BreakStatement";
scope["flow_state"] := 'break;
return ( false, 'empty ) };
function resolve_left_value (___internal_esl_global, scope, left, must_exist) { __v630 := "type" in_obj left;
__v632 := left["type"];
__v631 := __v632 = "Identifier";
__v633 := "name" in_obj left;
if (true && __v630 && __v631 && __v633) {
name := left["name"];
__v634 := "resolve_id" (___internal_esl_global, scope, scope, name, must_exist);
if (fst(__v634)) {
return __v634
} else {
__v634 := snd(__v634)
};
return ( false, __v634 )
} else {
__v635 := "type" in_obj left;
__v637 := left["type"];
__v636 := __v637 = "ThisExpression";
if (true && __v635 && __v636) {
__v638 := { };
__v639 := scope["store"];
__v638["store"] := __v639;
__v638["name"] := "this";
__v640 := scope["this_store"];
__v638["value"] := __v640;
return ( false, __v638 )
} else {
__v641 := "type" in_obj left;
__v643 := left["type"];
__v642 := __v643 = "MemberExpression";
__v644 := "object" in_obj left;
__v645 := "property" in_obj left;
__v646 := "computed" in_obj left;
__v648 := left["computed"];
__v647 := __v648 = true;
if (true && __v641 && __v642 && __v644 && __v645 && __v646 && __v647) {
object := left["object"];
prop := left["property"];
__v649 := "resolve_left_value" (___internal_esl_global, scope, object, true);
if (fst(__v649)) {
return __v649
} else {
__v649 := snd(__v649)
};
resolved_object := __v649;
__v650 := resolved_object["value"];
eval_object := __v650;
__v651 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v651)) {
return __v651
} else {
__v651 := snd(__v651)
};
eval_prop := __v651;
__v652 := "resolve_property" (___internal_esl_global, eval_object, eval_object, eval_prop, must_exist);
if (fst(__v652)) {
return __v652
} else {
__v652 := snd(__v652)
};
return ( false, __v652 )
} else {
if (true) {
return ( true, "Unsuported left value" )
}
}
}
} };
function var_declaration (___internal_esl_global, scope, decls) { print "VariableDeclaration [decls]:";
print decls;
ret := 'empty;
__v654 := 0;
__v653 := l_len(decls);
__v655 := __v653 > __v654;
while (__v655) { decl := l_nth(decls, __v654);
__v656 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v656)) {
return __v656
} else {
__v656 := snd(__v656)
};
ret := __v656;
__v654 := __v654 + 1;
__v655 := __v653 > __v654 };
return ( false, ret ) };
function bitwise_expression_not (___internal_esl_global, scope, arg) { print "BitwiseExpressionNot [arg]";
__v657 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v657)) {
return __v657
} else {
__v657 := snd(__v657)
};
eval := __v657;
__v658 := ~(eval);
return ( false, __v658 ) };
function arithmetic_expression_times (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionTimes [left][right]";
__v659 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v659)) {
return __v659
} else {
__v659 := snd(__v659)
};
evals := __v659;
__v660 := evals["left"];
__v661 := evals["right"];
__v662 := __v660 * __v661;
return ( false, __v662 ) };
function object_expression (___internal_esl_global, scope, props) { print "ObjectExpression [properties]";
print props;
__v663 := "Object" (___internal_esl_global);
if (fst(__v663)) {
return __v663
} else {
__v663 := snd(__v663)
};
object := __v663;
__v665 := 0;
__v664 := l_len(props);
__v666 := __v664 > __v665;
while (__v666) { prop := l_nth(props, __v665);
__v667 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v667)) {
return __v667
} else {
__v667 := snd(__v667)
};
object_property := __v667;
__v668 := object_property["name"];
__v669 := object_property["value"];
object[__v668] := __v669;
__v665 := __v665 + 1;
__v666 := __v664 > __v665 };
return ( false, object ) };
function logical_expression_or (___internal_esl_global, scope, left, right) { print "LogicalExpressionOr [left][right]";
__v670 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v670)) {
return __v670
} else {
__v670 := snd(__v670)
};
evals := __v670;
__v671 := evals["left"];
__v672 := evals["right"];
__v673 := __v671 || __v672;
return ( false, __v673 ) };
function switch_statement (___internal_esl_global, scope, discriminant, cases) { print "SwitchStatement [discriminat][cases]";
print discriminant;
print cases;
__v674 := l_nth(cases, 0);
main_cases := __v674;
__v675 := l_nth(cases, 1);
default_case := __v675;
__v676 := "interpreter" (___internal_esl_global, scope, discriminant);
if (fst(__v676)) {
return __v676
} else {
__v676 := snd(__v676)
};
discriminant_value := __v676;
i := 0;
searching := true;
__v677 := l_len(main_cases);
len := __v677;
__v678 := i < len;
__v679 := __v678 && searching;
while (__v679) { __v680 := l_nth(main_cases, i);
switch_case := __v680;
__v681 := "__get_switch_case_args" (___internal_esl_global, switch_case);
if (fst(__v681)) {
return __v681
} else {
__v681 := snd(__v681)
};
switch_case_args := __v681;
__v682 := switch_case_args["test"];
__v683 := "interpreter" (___internal_esl_global, scope, __v682);
if (fst(__v683)) {
return __v683
} else {
__v683 := snd(__v683)
};
case_value := __v683;
__v684 := discriminant_value = case_value;
if (__v684) {
searching := false
} else {
__v685 := i + 1;
i := __v685
};
__v678 := i < len;
__v679 := __v678 && searching };
retval := 'empty;
__v686 := i < len;
__v687 := scope["flow_state"];
__v688 := __v687 = 'normal;
__v689 := __v686 && __v688;
while (__v689) { __v690 := l_nth(main_cases, i);
switch_case := __v690;
__v691 := "__get_switch_case_args" (___internal_esl_global, switch_case);
if (fst(__v691)) {
return __v691
} else {
__v691 := snd(__v691)
};
switch_case_args := __v691;
__v692 := switch_case_args["block"];
__v693 := "interpreter" (___internal_esl_global, scope, __v692);
if (fst(__v693)) {
return __v693
} else {
__v693 := snd(__v693)
};
retval := __v693;
__v694 := i + 1;
i := __v694;
__v686 := i < len;
__v687 := scope["flow_state"];
__v688 := __v687 = 'normal;
__v689 := __v686 && __v688 };
__v696 := default_case = null;
__v695 := !(__v696);
__v697 := scope["flow_state"];
__v698 := __v697 = 'normal;
__v699 := __v695 && __v698;
if (__v699) {
__v700 := "__get_switch_case_args" (___internal_esl_global, default_case);
if (fst(__v700)) {
return __v700
} else {
__v700 := snd(__v700)
};
default_args := __v700;
__v701 := default_args["block"];
__v702 := "interpreter" (___internal_esl_global, scope, __v701);
if (fst(__v702)) {
return __v702
} else {
__v702 := snd(__v702)
};
retval := __v702
};
scope["flow_state"] := 'normal;
return ( false, 'retval ) };
function bitwise_expression_and (___internal_esl_global, scope, left, right) { print "BitwiseExpressionAnd [left][right]";
__v703 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v703)) {
return __v703
} else {
__v703 := snd(__v703)
};
evals := __v703;
__v704 := evals["left"];
__v705 := evals["right"];
__v706 := __v704 & __v705;
return ( false, __v706 ) };
function resolve_id (___internal_esl_global, original_scope, scope, name, must_exist) { __v708 := scope["store"];
__v707 := __v708[name];
value := __v707;
__v709 := value = 'undefined;
__v711 := scope["parent"];
__v712 := __v711 = null;
__v710 := !(__v712);
__v713 := __v709 && __v710;
if (__v713) {
__v715 := scope["parent"];
__v714 := __v715["parent_scope"];
upper_scope := __v714;
__v716 := "resolve_id" (___internal_esl_global, original_scope, upper_scope, name, must_exist);
if (fst(__v716)) {
return __v716
} else {
__v716 := snd(__v716)
};
return ( false, __v716 )
};
__v721 := value = 'undefined;
__v720 := !(__v721);
if (__v720) {
__v722 := { };
__v723 := scope["store"];
__v722["store"] := __v723;
__v722["name"] := name;
__v722["value"] := value;
return ( false, __v722 )
} else {
__v717 := !(must_exist);
if (__v717) {
__v718 := { };
__v719 := original_scope["store"];
__v718["store"] := __v719;
__v718["name"] := name;
__v718["value"] := value;
return ( false, __v718 )
} else {
return ( true, "The name is not defined in the current scope" )
}
} };
function identifier_value (___internal_esl_global, scope, name) { print "Identifier [name][value]:";
__v724 := "resolve_id" (___internal_esl_global, scope, scope, name, true);
if (fst(__v724)) {
return __v724
} else {
__v724 := snd(__v724)
};
id_data := __v724;
print name;
__v725 := id_data["value"];
print __v725;
__v726 := id_data["value"];
return ( false, __v726 ) };
function comparison_expression_ne (___internal_esl_global, scope, left, right) { print "ComparisonExpressionNe [left][right]";
__v727 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v727)) {
return __v727
} else {
__v727 := snd(__v727)
};
evals := __v727;
__v729 := evals["left"];
__v730 := evals["right"];
__v731 := __v729 = __v730;
__v728 := !(__v731);
return ( false, __v728 ) };
function modulus_assignment_expression (___internal_esl_global, scope, left, right) { print "ModulusAssignmentExpression [left][right]:";
__v732 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v732)) {
return __v732
} else {
__v732 := snd(__v732)
};
update_data := __v732;
__v733 := update_data["value"];
__v734 := update_data["mod"];
__v735 := __v733 % __v734;
new_value := __v735;
__v736 := update_data["store"];
__v737 := update_data["name"];
__v736[__v737] := new_value;
return ( false, new_value ) };
function logical_expression_not (___internal_esl_global, scope, arg) { print "LogicalExpressionNot [arg]";
__v738 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v738)) {
return __v738
} else {
__v738 := snd(__v738)
};
eval := __v738;
__v739 := !(eval);
return ( false, __v739 ) };
function comparison_expression_strictne (___internal_esl_global, scope, left, right) { print "ComparisonExpressionStrictNe [left][right]";
__v740 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v740)) {
return __v740
} else {
__v740 := snd(__v740)
};
evals := __v740;
__v743 := evals["left"];
__v742 := typeof(__v743);
__v745 := evals["right"];
__v744 := typeof(__v745);
__v746 := __v742 = __v744;
__v747 := evals["left"];
__v748 := evals["right"];
__v749 := __v747 = __v748;
__v750 := __v746 && __v749;
__v741 := !(__v750);
return ( false, __v741 ) };
function division_assignment_expression (___internal_esl_global, scope, left, right) { print "DivisionAssignmentExpression [left][right]:";
__v751 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v751)) {
return __v751
} else {
__v751 := snd(__v751)
};
update_data := __v751;
__v752 := update_data["value"];
__v753 := update_data["mod"];
__v754 := __v752 / __v753;
new_value := __v754;
__v755 := update_data["store"];
__v756 := update_data["name"];
__v755[__v756] := new_value;
return ( false, new_value ) };
function FunctionObject (___internal_esl_global, name, params, code, parent_scope) { __v757 := { };
function_object := __v757;
function_object["name"] := name;
function_object["params"] := params;
function_object["code"] := code;
function_object["scope"] := null;
function_object["parent_scope"] := parent_scope;
__v758 := { };
function_object["prototype"] := __v758;
return ( false, function_object ) };
function block_statement (___internal_esl_global, scope, stmts) { print "BlockStatement [stmts]:";
print stmts;
i := 0;
retval := 'empty;
__v759 := l_len(stmts);
len := __v759;
__v760 := i < len;
__v761 := scope["flow_state"];
__v762 := __v761 = 'normal;
__v763 := __v760 && __v762;
while (__v763) { __v764 := l_nth(stmts, i);
stmt := __v764;
print "Start of the statement [stmt]";
print stmt;
scope["this_context"] := null;
__v765 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v765)) {
return __v765
} else {
__v765 := snd(__v765)
};
retval := __v765;
print "End of the statement [retval]";
print retval;
__v766 := i + 1;
i := __v766;
__v760 := i < len;
__v761 := scope["flow_state"];
__v762 := __v761 = 'normal;
__v763 := __v760 && __v762 };
print "________________________________________________________________________________";
print "End of the block [retval]:";
print retval;
return ( false, retval ) };
function let_declaration (___internal_esl_global, scope, decls) { print "LetDeclaration [decls]:";
print decls;
ret := 'empty;
__v768 := 0;
__v767 := l_len(decls);
__v769 := __v767 > __v768;
while (__v769) { decl := l_nth(decls, __v768);
__v770 := "__check_is_declared" (___internal_esl_global, scope, decl);
if (fst(__v770)) {
return __v770
} else {
__v770 := snd(__v770)
};
__v771 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v771)) {
return __v771
} else {
__v771 := snd(__v771)
};
ret := __v771;
__v768 := __v768 + 1;
__v769 := __v767 > __v768 };
return ( false, ret ) };
function const_declaration (___internal_esl_global, scope, decls) { print "ConstDeclaration [decls]:";
print decls;
ret := 'empty;
__v773 := 0;
__v772 := l_len(decls);
__v774 := __v772 > __v773;
while (__v774) { decl := l_nth(decls, __v773);
__v775 := "__check_is_declared" (___internal_esl_global, scope, decl);
if (fst(__v775)) {
return __v775
} else {
__v775 := snd(__v775)
};
__v776 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v776)) {
return __v776
} else {
__v776 := snd(__v776)
};
ret := __v776;
__v773 := __v773 + 1;
__v774 := __v772 > __v773 };
return ( false, ret ) };
function plus_assignment_expression (___internal_esl_global, scope, left, right) { print "PlusAssignmentExpression [left][right]:";
__v777 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v777)) {
return __v777
} else {
__v777 := snd(__v777)
};
update_data := __v777;
__v778 := update_data["value"];
__v779 := update_data["mod"];
__v780 := __v778 + __v779;
new_value := __v780;
__v781 := update_data["store"];
__v782 := update_data["name"];
__v781[__v782] := new_value;
return ( false, new_value ) };
function __prefix_return (___internal_esl_global, prefix, old_value, new_value) { if (prefix) {
return ( false, new_value )
} else {
return ( false, old_value )
} };
function call_expression (___internal_esl_global, scope, callee, args) { print "CallExpression [callee][args]";
print callee;
print args;
__v783 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v783)) {
return __v783
} else {
__v783 := snd(__v783)
};
function_object := __v783;
__v784 := function_object["params"];
__v785 := "__initialize_function_args" (___internal_esl_global, scope, __v784, args);
if (fst(__v785)) {
return __v785
} else {
__v785 := snd(__v785)
};
eval_args := __v785;
__v786 := scope["this_context"];
__v787 := "initialize_function_object" (___internal_esl_global, function_object, eval_args, __v786);
if (fst(__v787)) {
return __v787
} else {
__v787 := snd(__v787)
};
print "________________________________________________________________________________";
print "Start of the function [func]";
__v788 := function_object["name"];
print __v788;
__v789 := function_object["scope"];
__v790 := function_object["code"];
__v791 := "interpreter" (___internal_esl_global, __v789, __v790);
if (fst(__v791)) {
return __v791
} else {
__v791 := snd(__v791)
};
retval := __v791;
print "________________________________________________________________________________";
print "End of the function [retval]:";
print retval;
return ( false, retval ) };
function power_assignment_expression (___internal_esl_global, scope, left, right) { print "PowerAssignmentExpression [left][right]:";
__v792 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v792)) {
return __v792
} else {
__v792 := snd(__v792)
};
update_data := __v792;
__v793 := update_data["value"];
__v794 := update_data["mod"];
__v795 := __v793 ** __v794;
new_value := __v795;
__v796 := update_data["store"];
__v797 := update_data["name"];
__v796[__v797] := new_value;
return ( false, new_value ) };
function return_statement (___internal_esl_global, scope, arg) { print "ReturnStatement [arg]";
print arg;
scope["this_context"] := null;
__v798 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v798)) {
return __v798
} else {
__v798 := snd(__v798)
};
retval := __v798;
scope["flow_state"] := 'return;
return ( false, retval ) };
function __check_is_declared (___internal_esl_global, scope, decl) { print "[WARN]: Let/Const variables behave like normal variables";
return ( false, true ) };
function expression_statement (___internal_esl_global, scope, expr) { print "ExpressionStatement [expression]:";
print expr;
__v799 := "interpreter" (___internal_esl_global, scope, expr);
if (fst(__v799)) {
return __v799
} else {
__v799 := snd(__v799)
};
return ( false, __v799 ) };
function arithmetic_expression_division (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionDivision [left][right]";
__v800 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v800)) {
return __v800
} else {
__v800 := snd(__v800)
};
evals := __v800;
__v801 := evals["left"];
__v802 := evals["right"];
__v803 := __v801 / __v802;
return ( false, __v803 ) };
function comparison_expression_gt (___internal_esl_global, scope, left, right) { print "ComparisonExpressionGt [left][right]";
__v804 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v804)) {
return __v804
} else {
__v804 := snd(__v804)
};
evals := __v804;
__v805 := evals["left"];
__v806 := evals["right"];
__v807 := __v805 > __v806;
return ( false, __v807 ) };
function comparison_expression_stricteq (___internal_esl_global, scope, left, right) { print "ComparisonExpressionStrictEq [left][right]";
__v808 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v808)) {
return __v808
} else {
__v808 := snd(__v808)
};
evals := __v808;
__v810 := evals["left"];
__v809 := typeof(__v810);
__v812 := evals["right"];
__v811 := typeof(__v812);
__v813 := __v809 = __v811;
__v814 := evals["left"];
__v815 := evals["right"];
__v816 := __v814 = __v815;
__v817 := __v813 && __v816;
return ( false, __v817 ) };
function __initialize_function_object_scope (___internal_esl_global, function_object, this_object) { __v818 := "Scope" (___internal_esl_global);
if (fst(__v818)) {
return __v818
} else {
__v818 := snd(__v818)
};
scope := __v818;
scope["parent"] := function_object;
function_object["scope"] := scope;
__v819 := function_object["code"];
code := __v819;
__v821 := this_object = null;
__v820 := !(__v821);
if (__v820) {
scope["this_store"] := this_object
};
__v822 := "type" in_obj code;
__v824 := code["type"];
__v823 := __v824 = "BlockStatement";
__v825 := "body" in_obj code;
__v826 := "variableDeclarations" in_obj code;
__v827 := "functionDeclarations" in_obj code;
if (true && __v822 && __v823 && __v825 && __v826 && __v827) {
body := code["body"];
vdecls := code["variableDeclarations"];
fdecls := code["functionDeclarations"];
__v828 := "initialize_scope" (___internal_esl_global, scope, vdecls, fdecls);
if (fst(__v828)) {
return __v828
} else {
__v828 := snd(__v828)
}
} else {
if (true) {
return ( true, "Invalid code block for function body" )
}
};
return ( false, function_object ) };
function main () { ___internal_esl_global := { };
__v829 := "buildAST" (___internal_esl_global);
if (fst(__v829)) {
return __v829
} else {
__v829 := snd(__v829)
};
code := __v829;
__v830 := "Scope" (___internal_esl_global);
if (fst(__v830)) {
return __v830
} else {
__v830 := snd(__v830)
};
scope := __v830;
__v831 := "Object" (___internal_esl_global);
if (fst(__v831)) {
return __v831
} else {
__v831 := snd(__v831)
};
scope["this_store"] := __v831;
__v832 := "interpreter" (___internal_esl_global, scope, code);
if (fst(__v832)) {
return __v832
} else {
__v832 := snd(__v832)
};
return ( false, __v832 ) };
function update_expression_dec (___internal_esl_global, scope, arg, prefix) { print "UpdateExpressionDec [arg]";
__v833 := { };
__v833["type"] := "EmptyValue";
__v834 := "update_expression" (___internal_esl_global, scope, arg, __v833, true);
if (fst(__v834)) {
return __v834
} else {
__v834 := snd(__v834)
};
update_data := __v834;
__v835 := update_data["value"];
__v836 := __v835 - 1.;
new_value := __v836;
__v837 := update_data["store"];
__v838 := update_data["name"];
__v837[__v838] := new_value;
__v839 := update_data["value"];
__v840 := "__prefix_return" (___internal_esl_global, prefix, __v839, new_value);
if (fst(__v840)) {
return __v840
} else {
__v840 := snd(__v840)
};
return ( false, __v840 ) };
function resolve_property (___internal_esl_global, original_object, object, prop, must_exist) { __v841 := object[prop];
value := __v841;
__v842 := value = 'undefined;
__v844 := object["__proto__"];
__v845 := __v844 = null;
__v843 := !(__v845);
__v846 := __v842 && __v843;
if (__v846) {
__v847 := object["__proto__"];
object_proto := __v847;
__v848 := "resolve_property" (___internal_esl_global, original_object, object_proto, prop, must_exist);
if (fst(__v848)) {
return __v848
} else {
__v848 := snd(__v848)
};
return ( false, __v848 )
};
__v852 := value = 'undefined;
__v851 := !(__v852);
if (__v851) {
__v853 := { };
__v853["store"] := object;
__v853["name"] := prop;
__v853["value"] := value;
return ( false, __v853 )
} else {
__v849 := !(must_exist);
if (__v849) {
__v850 := { };
__v850["store"] := original_object;
__v850["name"] := prop;
__v850["value"] := value;
return ( false, __v850 )
} else {
return ( true, "The prop is not defined in the current object" )
}
} };
function bitwise_expression_xor (___internal_esl_global, scope, left, right) { print "BitwiseExpressionXor [left][right]";
__v854 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v854)) {
return __v854
} else {
__v854 := snd(__v854)
};
evals := __v854;
__v855 := evals["left"];
__v856 := evals["right"];
__v857 := __v855 ^ __v856;
return ( false, __v857 ) };
function object_property (___internal_esl_global, scope, key, value) { print "ObjectProperty [key][value]";
print key;
print value;
__v858 := "type" in_obj key;
__v860 := key["type"];
__v859 := __v860 = "Identifier";
__v861 := "name" in_obj key;
if (true && __v858 && __v859 && __v861) {
name := key["name"];
__v862 := "interpreter" (___internal_esl_global, scope, value);
if (fst(__v862)) {
return __v862
} else {
__v862 := snd(__v862)
};
eval_value := __v862;
__v863 := { };
__v863["name"] := name;
__v863["value"] := eval_value;
return ( false, __v863 )
} else {
if (true) {
return ( true, "Unexpected key type for object property" )
}
} };
function bitwise_expression_or (___internal_esl_global, scope, left, right) { print "BitwiseExpressionOr [left][right]";
__v864 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v864)) {
return __v864
} else {
__v864 := snd(__v864)
};
evals := __v864;
__v865 := evals["left"];
__v866 := evals["right"];
__v867 := __v865 | __v866;
return ( false, __v867 ) };
function __get_switch_case_args (___internal_esl_global, switch_case) { __v868 := "type" in_obj switch_case;
__v870 := switch_case["type"];
__v869 := __v870 = "SwitchCase";
__v871 := "test" in_obj switch_case;
__v872 := "consequent" in_obj switch_case;
if (true && __v868 && __v869 && __v871 && __v872) {
test := switch_case["test"];
consequent := switch_case["consequent"];
__v873 := { };
__v873["type"] := "BlockStatement";
__v873["body"] := consequent;
block := __v873;
__v874 := { };
__v874["test"] := test;
__v874["block"] := block;
return ( false, __v874 )
} else {
if (true) {
return ( true, "Unsuported switch case" )
}
} };
function unary_expression (___internal_esl_global, scope, arg) { print arg;
__v875 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v875)) {
return __v875
} else {
__v875 := snd(__v875)
};
eval := __v875;
return ( false, eval ) };
function logical_expression_and (___internal_esl_global, scope, left, right) { print "LogicalExpressionAnd [left][right]";
__v876 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v876)) {
return __v876
} else {
__v876 := snd(__v876)
};
evals := __v876;
__v877 := evals["left"];
__v878 := evals["right"];
__v879 := __v877 && __v878;
return ( false, __v879 ) };
function Object (___internal_esl_global) { __v880 := { };
__v880["__proto__"] := null;
object := __v880;
return ( false, object ) };
function for_loop_statement (___internal_esl_global, scope, init, test, update, body) { print "ForLoopStatement [init][test][update][body]";
print init;
print test;
print update;
print body;
retval := 'empty;
__v881 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v881)) {
return __v881
} else {
__v881 := snd(__v881)
};
__v882 := scope["flow_state"];
__v883 := __v882 = 'normal;
__v884 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v884)) {
return __v884
} else {
__v884 := snd(__v884)
};
__v885 := __v883 && __v884;
while (__v885) { __v886 := "interpreter" (___internal_esl_global, scope, body);
if (fst(__v886)) {
return __v886
} else {
__v886 := snd(__v886)
};
retval := __v886;
__v887 := scope["flow_state"];
__v888 := __v887 = 'continue;
if (__v888) {
scope["flow_state"] := 'normal
};
__v889 := "interpreter" (___internal_esl_global, scope, update);
if (fst(__v889)) {
return __v889
} else {
__v889 := snd(__v889)
};
__v882 := scope["flow_state"];
__v883 := __v882 = 'normal;
__v884 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v884)) {
return __v884
} else {
__v884 := snd(__v884)
};
__v885 := __v883 && __v884 };
__v891 := scope["flow_state"];
__v892 := __v891 = 'return;
__v890 := !(__v892);
if (__v890) {
scope["flow_state"] := 'normal
};
return ( false, retval ) };
function arithmetic_expression_modulus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionModulus [left][right]";
__v893 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v893)) {
return __v893
} else {
__v893 := snd(__v893)
};
evals := __v893;
__v894 := evals["left"];
__v895 := evals["right"];
__v896 := __v894 % __v895;
return ( false, __v896 ) };
function arithmetic_expression_power (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionPower [left][right]";
__v897 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v897)) {
return __v897
} else {
__v897 := snd(__v897)
};
evals := __v897;
__v898 := evals["left"];
__v899 := evals["right"];
__v900 := __v898 ** __v899;
return ( false, __v900 ) };
function literal_value (___internal_esl_global, scope, value) { print "Literal [value]";
print value;
return ( false, value ) };
function comparison_expression_le (___internal_esl_global, scope, left, right) { print "ComparisonExpressionLe [left][right]";
__v901 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v901)) {
return __v901
} else {
__v901 := snd(__v901)
};
evals := __v901;
__v902 := evals["left"];
__v903 := evals["right"];
__v904 := __v902 <= __v903;
return ( false, __v904 ) };
function if_statement (___internal_esl_global, scope, test, stmt1, stmt2) { print "IfStatement [test][consequent][alternate]";
print test;
print stmt1;
print stmt2;
__v908 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v908)) {
return __v908
} else {
__v908 := snd(__v908)
};
if (__v908) {
__v909 := "interpreter" (___internal_esl_global, scope, stmt1);
if (fst(__v909)) {
return __v909
} else {
__v909 := snd(__v909)
};
return ( false, __v909 )
} else {
__v906 := stmt2 = null;
__v905 := !(__v906);
if (__v905) {
__v907 := "interpreter" (___internal_esl_global, scope, stmt2);
if (fst(__v907)) {
return __v907
} else {
__v907 := snd(__v907)
};
return ( false, __v907 )
} else {
return ( false, 'empty )
}
} }