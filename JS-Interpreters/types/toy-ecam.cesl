function new_expression (___internal_esl_global, scope, callee, args) { print "INSIDE NEW 1";
__v0 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v0)) {
return __v0
} else {
__v0 := snd(__v0)
};
function_object := __v0;
__v1 := function_object["params"];
__v2 := "__initialize_function_args" (___internal_esl_global, scope, __v1, args);
if (fst(__v2)) {
return __v2
} else {
__v2 := snd(__v2)
};
eval_args := __v2;
__v3 := { };
new_obj := __v3;
__v4 := function_object["prototype"];
new_obj["__proto__"] := __v4;
__v5 := scope["this_context"];
__v6 := "initialize_function_object" (___internal_esl_global, function_object, eval_args, __v5);
if (fst(__v6)) {
return __v6
} else {
__v6 := snd(__v6)
};
__v7 := function_object["scope"];
__v8 := function_object["code"];
__v9 := "interpreter" (___internal_esl_global, __v7, __v8);
if (fst(__v9)) {
return __v9
} else {
__v9 := snd(__v9)
};
retval := __v9;
return ( false, "banana" ) };
function comparison_expression_ge (___internal_esl_global, scope, left, right) { print "ComparisonExpressionGe [left][right]";
__v10 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v10)) {
return __v10
} else {
__v10 := snd(__v10)
};
evals := __v10;
__v11 := evals["left"];
__v12 := evals["right"];
__v13 := __v11 >= __v12;
return ( false, __v13 ) };
function bitwise_expression_zero_fill_right_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionZeroFillRightShift [left][right]";
__v14 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v14)) {
return __v14
} else {
__v14 := snd(__v14)
};
evals := __v14;
__v15 := evals["left"];
__v16 := evals["right"];
__v17 := __v15 >>> __v16;
return ( false, __v17 ) };
function __initialize_scope_fdecls (___internal_esl_global, scope, fdecls) { __v19 := 0;
__v18 := l_len(fdecls);
__v20 := __v18 > __v19;
while (__v20) { fdecl := l_nth(fdecls, __v19);
__v21 := "type" in_obj fdecl;
__v23 := fdecl["type"];
__v22 := __v23 = "FunctionExpression";
__v24 := "id" in_obj fdecl;
__v25 := "params" in_obj fdecl;
__v26 := "body" in_obj fdecl;
if (true && __v21 && __v22 && __v24 && __v25 && __v26) {
id := fdecl["id"];
params := fdecl["params"];
code := fdecl["body"];
__v27 := "type" in_obj id;
__v29 := id["type"];
__v28 := __v29 = "Identifier";
__v30 := "name" in_obj id;
if (true && __v27 && __v28 && __v30) {
name := id["name"];
__v31 := scope["store"];
__v32 := "FunctionObject" (___internal_esl_global, name, params, code, scope);
if (fst(__v32)) {
return __v32
} else {
__v32 := snd(__v32)
};
__v31[name] := __v32
} else {
if (true) {
return ( true, "Invalid function identifier" )
}
}
} else {
__v33 := "type" in_obj fdecl;
__v35 := fdecl["type"];
__v34 := __v35 = "FunctionDeclaration";
__v36 := "id" in_obj fdecl;
__v37 := "params" in_obj fdecl;
__v38 := "body" in_obj fdecl;
if (true && __v33 && __v34 && __v36 && __v37 && __v38) {
id := fdecl["id"];
params := fdecl["params"];
code := fdecl["body"];
__v39 := "type" in_obj id;
__v41 := id["type"];
__v40 := __v41 = "Identifier";
__v42 := "name" in_obj id;
if (true && __v39 && __v40 && __v42) {
name := id["name"];
__v43 := scope["store"];
__v44 := "FunctionObject" (___internal_esl_global, name, params, code, scope);
if (fst(__v44)) {
return __v44
} else {
__v44 := snd(__v44)
};
__v43[name] := __v44
} else {
if (true) {
return ( true, "Invalid function identifier" )
}
}
} else {
if (true) {
print fdecl;
return ( true, "Unexpected function declaration type" )
}
}
};
__v19 := __v19 + 1;
__v20 := __v18 > __v19 };
return ( false, scope ) };
function arithmetic_expression_neg (___internal_esl_global, scope, arg) { print "ArithmeticExpressionNeg [arg]";
__v45 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v45)) {
return __v45
} else {
__v45 := snd(__v45)
};
eval := __v45;
__v46 := -(eval);
return ( false, __v46 ) };
function __initialize_function_args (___internal_esl_global, scope, params, args) { __v48 := l_len(params);
__v49 := l_len(args);
__v50 := __v48 = __v49;
__v47 := !(__v50);
if (__v47) {
return ( true, "Invalid number of arguments in function call" )
};
__v51 := [  ];
eval_args := __v51;
__v53 := 0;
__v52 := l_len(args);
__v54 := __v52 > __v53;
while (__v54) { arg := l_nth(args, __v53);
__v55 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v55)) {
return __v55
} else {
__v55 := snd(__v55)
};
v := __v55;
__v56 := l_add(eval_args, v);
eval_args := __v56;
__v53 := __v53 + 1;
__v54 := __v52 > __v53 };
return ( false, eval_args ) };
function binary_expression (___internal_esl_global, scope, left, right) { print left;
print right;
__v57 := "interpreter" (___internal_esl_global, scope, left);
if (fst(__v57)) {
return __v57
} else {
__v57 := snd(__v57)
};
eval_left := __v57;
__v58 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v58)) {
return __v58
} else {
__v58 := snd(__v58)
};
eval_right := __v58;
__v59 := { };
__v59["left"] := eval_left;
__v59["right"] := eval_right;
return ( false, __v59 ) };
function comparison_expression_eq (___internal_esl_global, scope, left, right) { print "ComparisonExpressionEq [left][right]";
__v60 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v60)) {
return __v60
} else {
__v60 := snd(__v60)
};
evals := __v60;
__v61 := evals["left"];
__v62 := evals["right"];
__v63 := __v61 = __v62;
return ( false, __v63 ) };
function Scope (___internal_esl_global) { __v64 := { };
scope := __v64;
scope["parent"] := null;
__v65 := "Object" (___internal_esl_global);
if (fst(__v65)) {
return __v65
} else {
__v65 := snd(__v65)
};
scope["store"] := __v65;
scope["this_context"] := null;
__v66 := scope["store"];
scope["this_store"] := __v66;
scope["flow_state"] := 'normal;
return ( false, scope ) };
function arithmetic_expression_minus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionMinus [left][right]";
__v67 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v67)) {
return __v67
} else {
__v67 := snd(__v67)
};
evals := __v67;
__v68 := evals["left"];
__v69 := evals["right"];
__v70 := __v68 - __v69;
return ( false, __v70 ) };
function variable_declarator (___internal_esl_global, scope, id, init) { print "VariableDeclarator [id][init]:";
print id;
print init;
__v71 := "type" in_obj id;
__v73 := id["type"];
__v72 := __v73 = "Identifier";
__v74 := "name" in_obj id;
if (true && __v71 && __v72 && __v74) {
name := id["name"];
__v76 := init = null;
__v75 := !(__v76);
if (__v75) {
__v77 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v77)) {
return __v77
} else {
__v77 := snd(__v77)
};
rv := __v77
} else {
rv := 'undefined
};
__v78 := scope["store"];
__v78[name] := rv;
return ( false, rv )
} else {
if (true) {
return ( true, "Unsuported left side of the declaration operation" )
}
} };
function __initialize_scope_vdecls (___internal_esl_global, scope, vdecls) { __v80 := 0;
__v79 := l_len(vdecls);
__v81 := __v79 > __v80;
while (__v81) { vdecl := l_nth(vdecls, __v80);
__v82 := scope["store"];
__v82[vdecl] := 'undefined;
__v80 := __v80 + 1;
__v81 := __v79 > __v80 };
return ( false, scope ) };
function bitwise_expression_signed_right_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionSignedRightShift [left][right]";
__v83 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v83)) {
return __v83
} else {
__v83 := snd(__v83)
};
evals := __v83;
__v84 := evals["left"];
__v85 := evals["right"];
__v86 := __v84 >> __v85;
return ( false, __v86 ) };
function conditional_expression (___internal_esl_global, scope, test, expr1, expr2) { print "ConditionalExpression [test][consequent][alternate]";
print test;
print expr1;
print expr2;
__v87 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v87)) {
return __v87
} else {
__v87 := snd(__v87)
};
if (__v87) {
__v88 := "interpreter" (___internal_esl_global, scope, expr1);
if (fst(__v88)) {
return __v88
} else {
__v88 := snd(__v88)
};
return ( false, __v88 )
} else {
__v89 := "interpreter" (___internal_esl_global, scope, expr2);
if (fst(__v89)) {
return __v89
} else {
__v89 := snd(__v89)
};
return ( false, __v89 )
} };
function __add_function_args_to_scope (___internal_esl_global, function_object, function_args) { i := 0;
__v91 := function_object["params"];
__v90 := l_len(__v91);
len := __v90;
__v92 := function_object["scope"];
scope := __v92;
__v93 := i < len;
while (__v93) { __v94 := function_object["params"];
__v95 := l_nth(__v94, i);
param_name := __v95;
__v96 := scope["store"];
__v97 := l_nth(function_args, i);
__v96[param_name] := __v97;
__v98 := i + 1;
i := __v98;
__v93 := i < len };
return ( false, function_object ) };
function interpreter (___internal_esl_global, scope, s) { print "........................................";
__v99 := "type" in_obj s;
__v101 := s["type"];
__v100 := __v101 = "Program";
__v102 := "body" in_obj s;
__v103 := "variableDeclarations" in_obj s;
__v104 := "functionDeclarations" in_obj s;
if (true && __v99 && __v100 && __v102 && __v103 && __v104) {
body := s["body"];
vdecls := s["variableDeclarations"];
fdecls := s["functionDeclarations"];
__v105 := "program" (___internal_esl_global, scope, body, vdecls, fdecls);
if (fst(__v105)) {
return __v105
} else {
__v105 := snd(__v105)
};
return ( false, __v105 )
} else {
__v106 := "type" in_obj s;
__v108 := s["type"];
__v107 := __v108 = "BlockStatement";
__v109 := "body" in_obj s;
if (true && __v106 && __v107 && __v109) {
body := s["body"];
__v110 := "block_statement" (___internal_esl_global, scope, body);
if (fst(__v110)) {
return __v110
} else {
__v110 := snd(__v110)
};
return ( false, __v110 )
} else {
__v111 := "type" in_obj s;
__v113 := s["type"];
__v112 := __v113 = "ReturnStatement";
__v114 := "argument" in_obj s;
if (true && __v111 && __v112 && __v114) {
arg := s["argument"];
__v115 := "return_statement" (___internal_esl_global, scope, arg);
if (fst(__v115)) {
return __v115
} else {
__v115 := snd(__v115)
};
return ( false, __v115 )
} else {
__v116 := "type" in_obj s;
__v118 := s["type"];
__v117 := __v118 = "ExpressionStatement";
__v119 := "expression" in_obj s;
if (true && __v116 && __v117 && __v119) {
expr := s["expression"];
__v120 := "expression_statement" (___internal_esl_global, scope, expr);
if (fst(__v120)) {
return __v120
} else {
__v120 := snd(__v120)
};
return ( false, __v120 )
} else {
__v121 := "type" in_obj s;
__v123 := s["type"];
__v122 := __v123 = "IfStatement";
__v124 := "test" in_obj s;
__v125 := "consequent" in_obj s;
__v126 := "alternate" in_obj s;
if (true && __v121 && __v122 && __v124 && __v125 && __v126) {
test := s["test"];
stmt1 := s["consequent"];
stmt2 := s["alternate"];
__v127 := "if_statement" (___internal_esl_global, scope, test, stmt1, stmt2);
if (fst(__v127)) {
return __v127
} else {
__v127 := snd(__v127)
};
return ( false, __v127 )
} else {
__v128 := "type" in_obj s;
__v130 := s["type"];
__v129 := __v130 = "SwitchStatement";
__v131 := "discriminant" in_obj s;
__v132 := "cases" in_obj s;
if (true && __v128 && __v129 && __v131 && __v132) {
discriminant := s["discriminant"];
cases := s["cases"];
__v133 := "switch_statement" (___internal_esl_global, scope, discriminant, cases);
if (fst(__v133)) {
return __v133
} else {
__v133 := snd(__v133)
};
return ( false, __v133 )
} else {
__v134 := "type" in_obj s;
__v136 := s["type"];
__v135 := __v136 = "WhileStatement";
__v137 := "test" in_obj s;
__v138 := "body" in_obj s;
if (true && __v134 && __v135 && __v137 && __v138) {
test := s["test"];
body := s["body"];
__v139 := "while_loop_statement" (___internal_esl_global, scope, test, body);
if (fst(__v139)) {
return __v139
} else {
__v139 := snd(__v139)
};
return ( false, __v139 )
} else {
__v140 := "type" in_obj s;
__v142 := s["type"];
__v141 := __v142 = "ForStatement";
__v143 := "init" in_obj s;
__v144 := "test" in_obj s;
__v145 := "update" in_obj s;
__v146 := "body" in_obj s;
if (true && __v140 && __v141 && __v143 && __v144 && __v145 && __v146) {
init := s["init"];
test := s["test"];
update := s["update"];
body := s["body"];
__v147 := "for_loop_statement" (___internal_esl_global, scope, init, test, update, body);
if (fst(__v147)) {
return __v147
} else {
__v147 := snd(__v147)
};
return ( false, __v147 )
} else {
__v148 := "type" in_obj s;
__v150 := s["type"];
__v149 := __v150 = "BreakStatement";
__v151 := "label" in_obj s;
__v153 := s["label"];
__v152 := __v153 = null;
if (true && __v148 && __v149 && __v151 && __v152) {
__v154 := "break_statement" (___internal_esl_global, scope);
if (fst(__v154)) {
return __v154
} else {
__v154 := snd(__v154)
};
return ( false, __v154 )
} else {
__v155 := "type" in_obj s;
__v157 := s["type"];
__v156 := __v157 = "ContinueStatement";
__v158 := "label" in_obj s;
__v160 := s["label"];
__v159 := __v160 = null;
if (true && __v155 && __v156 && __v158 && __v159) {
__v161 := "continue_statement" (___internal_esl_global, scope);
if (fst(__v161)) {
return __v161
} else {
__v161 := snd(__v161)
};
return ( false, __v161 )
} else {
__v162 := "type" in_obj s;
__v164 := s["type"];
__v163 := __v164 = "UnaryExpression";
__v165 := "argument" in_obj s;
__v166 := "operator" in_obj s;
__v168 := s["operator"];
__v167 := __v168 = "+";
if (true && __v162 && __v163 && __v165 && __v166 && __v167) {
arg := s["argument"];
__v169 := "arithmetic_expression_pos" (___internal_esl_global, scope, arg);
if (fst(__v169)) {
return __v169
} else {
__v169 := snd(__v169)
};
return ( false, __v169 )
} else {
__v170 := "type" in_obj s;
__v172 := s["type"];
__v171 := __v172 = "UnaryExpression";
__v173 := "argument" in_obj s;
__v174 := "operator" in_obj s;
__v176 := s["operator"];
__v175 := __v176 = "-";
if (true && __v170 && __v171 && __v173 && __v174 && __v175) {
arg := s["argument"];
__v177 := "arithmetic_expression_neg" (___internal_esl_global, scope, arg);
if (fst(__v177)) {
return __v177
} else {
__v177 := snd(__v177)
};
return ( false, __v177 )
} else {
__v178 := "type" in_obj s;
__v180 := s["type"];
__v179 := __v180 = "BinaryExpression";
__v181 := "left" in_obj s;
__v182 := "right" in_obj s;
__v183 := "operator" in_obj s;
__v185 := s["operator"];
__v184 := __v185 = "+";
if (true && __v178 && __v179 && __v181 && __v182 && __v183 && __v184) {
left := s["left"];
right := s["right"];
__v186 := "arithmetic_expression_plus" (___internal_esl_global, scope, left, right);
if (fst(__v186)) {
return __v186
} else {
__v186 := snd(__v186)
};
return ( false, __v186 )
} else {
__v187 := "type" in_obj s;
__v189 := s["type"];
__v188 := __v189 = "BinaryExpression";
__v190 := "left" in_obj s;
__v191 := "right" in_obj s;
__v192 := "operator" in_obj s;
__v194 := s["operator"];
__v193 := __v194 = "-";
if (true && __v187 && __v188 && __v190 && __v191 && __v192 && __v193) {
left := s["left"];
right := s["right"];
__v195 := "arithmetic_expression_minus" (___internal_esl_global, scope, left, right);
if (fst(__v195)) {
return __v195
} else {
__v195 := snd(__v195)
};
return ( false, __v195 )
} else {
__v196 := "type" in_obj s;
__v198 := s["type"];
__v197 := __v198 = "BinaryExpression";
__v199 := "left" in_obj s;
__v200 := "right" in_obj s;
__v201 := "operator" in_obj s;
__v203 := s["operator"];
__v202 := __v203 = "*";
if (true && __v196 && __v197 && __v199 && __v200 && __v201 && __v202) {
left := s["left"];
right := s["right"];
__v204 := "arithmetic_expression_times" (___internal_esl_global, scope, left, right);
if (fst(__v204)) {
return __v204
} else {
__v204 := snd(__v204)
};
return ( false, __v204 )
} else {
__v205 := "type" in_obj s;
__v207 := s["type"];
__v206 := __v207 = "BinaryExpression";
__v208 := "left" in_obj s;
__v209 := "right" in_obj s;
__v210 := "operator" in_obj s;
__v212 := s["operator"];
__v211 := __v212 = "/";
if (true && __v205 && __v206 && __v208 && __v209 && __v210 && __v211) {
left := s["left"];
right := s["right"];
__v213 := "arithmetic_expression_division" (___internal_esl_global, scope, left, right);
if (fst(__v213)) {
return __v213
} else {
__v213 := snd(__v213)
};
return ( false, __v213 )
} else {
__v214 := "type" in_obj s;
__v216 := s["type"];
__v215 := __v216 = "BinaryExpression";
__v217 := "left" in_obj s;
__v218 := "right" in_obj s;
__v219 := "operator" in_obj s;
__v221 := s["operator"];
__v220 := __v221 = "%";
if (true && __v214 && __v215 && __v217 && __v218 && __v219 && __v220) {
left := s["left"];
right := s["right"];
__v222 := "arithmetic_expression_modulus" (___internal_esl_global, scope, left, right);
if (fst(__v222)) {
return __v222
} else {
__v222 := snd(__v222)
};
return ( false, __v222 )
} else {
__v223 := "type" in_obj s;
__v225 := s["type"];
__v224 := __v225 = "BinaryExpression";
__v226 := "left" in_obj s;
__v227 := "right" in_obj s;
__v228 := "operator" in_obj s;
__v230 := s["operator"];
__v229 := __v230 = "**";
if (true && __v223 && __v224 && __v226 && __v227 && __v228 && __v229) {
left := s["left"];
right := s["right"];
__v231 := "arithmetic_expression_power" (___internal_esl_global, scope, left, right);
if (fst(__v231)) {
return __v231
} else {
__v231 := snd(__v231)
};
return ( false, __v231 )
} else {
__v232 := "type" in_obj s;
__v234 := s["type"];
__v233 := __v234 = "AssignmentExpression";
__v235 := "left" in_obj s;
__v236 := "right" in_obj s;
__v237 := "operator" in_obj s;
__v239 := s["operator"];
__v238 := __v239 = "=";
if (true && __v232 && __v233 && __v235 && __v236 && __v237 && __v238) {
left := s["left"];
right := s["right"];
__v240 := "assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v240)) {
return __v240
} else {
__v240 := snd(__v240)
};
return ( false, __v240 )
} else {
__v241 := "type" in_obj s;
__v243 := s["type"];
__v242 := __v243 = "AssignmentExpression";
__v244 := "left" in_obj s;
__v245 := "right" in_obj s;
__v246 := "operator" in_obj s;
__v248 := s["operator"];
__v247 := __v248 = "+=";
if (true && __v241 && __v242 && __v244 && __v245 && __v246 && __v247) {
left := s["left"];
right := s["right"];
__v249 := "plus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v249)) {
return __v249
} else {
__v249 := snd(__v249)
};
return ( false, __v249 )
} else {
__v250 := "type" in_obj s;
__v252 := s["type"];
__v251 := __v252 = "AssignmentExpression";
__v253 := "left" in_obj s;
__v254 := "right" in_obj s;
__v255 := "operator" in_obj s;
__v257 := s["operator"];
__v256 := __v257 = "-=";
if (true && __v250 && __v251 && __v253 && __v254 && __v255 && __v256) {
left := s["left"];
right := s["right"];
__v258 := "minus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v258)) {
return __v258
} else {
__v258 := snd(__v258)
};
return ( false, __v258 )
} else {
__v259 := "type" in_obj s;
__v261 := s["type"];
__v260 := __v261 = "AssignmentExpression";
__v262 := "left" in_obj s;
__v263 := "right" in_obj s;
__v264 := "operator" in_obj s;
__v266 := s["operator"];
__v265 := __v266 = "*=";
if (true && __v259 && __v260 && __v262 && __v263 && __v264 && __v265) {
left := s["left"];
right := s["right"];
__v267 := "times_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v267)) {
return __v267
} else {
__v267 := snd(__v267)
};
return ( false, __v267 )
} else {
__v268 := "type" in_obj s;
__v270 := s["type"];
__v269 := __v270 = "AssignmentExpression";
__v271 := "left" in_obj s;
__v272 := "right" in_obj s;
__v273 := "operator" in_obj s;
__v275 := s["operator"];
__v274 := __v275 = "/=";
if (true && __v268 && __v269 && __v271 && __v272 && __v273 && __v274) {
left := s["left"];
right := s["right"];
__v276 := "division_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v276)) {
return __v276
} else {
__v276 := snd(__v276)
};
return ( false, __v276 )
} else {
__v277 := "type" in_obj s;
__v279 := s["type"];
__v278 := __v279 = "AssignmentExpression";
__v280 := "left" in_obj s;
__v281 := "right" in_obj s;
__v282 := "operator" in_obj s;
__v284 := s["operator"];
__v283 := __v284 = "%=";
if (true && __v277 && __v278 && __v280 && __v281 && __v282 && __v283) {
left := s["left"];
right := s["right"];
__v285 := "modulus_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v285)) {
return __v285
} else {
__v285 := snd(__v285)
};
return ( false, __v285 )
} else {
__v286 := "type" in_obj s;
__v288 := s["type"];
__v287 := __v288 = "AssignmentExpression";
__v289 := "left" in_obj s;
__v290 := "right" in_obj s;
__v291 := "operator" in_obj s;
__v293 := s["operator"];
__v292 := __v293 = "**=";
if (true && __v286 && __v287 && __v289 && __v290 && __v291 && __v292) {
left := s["left"];
right := s["right"];
__v294 := "power_assignment_expression" (___internal_esl_global, scope, left, right);
if (fst(__v294)) {
return __v294
} else {
__v294 := snd(__v294)
};
return ( false, __v294 )
} else {
__v295 := "type" in_obj s;
__v297 := s["type"];
__v296 := __v297 = "UnaryExpression";
__v298 := "argument" in_obj s;
__v299 := "operator" in_obj s;
__v301 := s["operator"];
__v300 := __v301 = "~";
if (true && __v295 && __v296 && __v298 && __v299 && __v300) {
arg := s["argument"];
__v302 := "bitwise_expression_not" (___internal_esl_global, scope, arg);
if (fst(__v302)) {
return __v302
} else {
__v302 := snd(__v302)
};
return ( false, __v302 )
} else {
__v303 := "type" in_obj s;
__v305 := s["type"];
__v304 := __v305 = "BinaryExpression";
__v306 := "left" in_obj s;
__v307 := "right" in_obj s;
__v308 := "operator" in_obj s;
__v310 := s["operator"];
__v309 := __v310 = "&";
if (true && __v303 && __v304 && __v306 && __v307 && __v308 && __v309) {
left := s["left"];
right := s["right"];
__v311 := "bitwise_expression_and" (___internal_esl_global, scope, left, right);
if (fst(__v311)) {
return __v311
} else {
__v311 := snd(__v311)
};
return ( false, __v311 )
} else {
__v312 := "type" in_obj s;
__v314 := s["type"];
__v313 := __v314 = "BinaryExpression";
__v315 := "left" in_obj s;
__v316 := "right" in_obj s;
__v317 := "operator" in_obj s;
__v319 := s["operator"];
__v318 := __v319 = "|";
if (true && __v312 && __v313 && __v315 && __v316 && __v317 && __v318) {
left := s["left"];
right := s["right"];
__v320 := "bitwise_expression_or" (___internal_esl_global, scope, left, right);
if (fst(__v320)) {
return __v320
} else {
__v320 := snd(__v320)
};
return ( false, __v320 )
} else {
__v321 := "type" in_obj s;
__v323 := s["type"];
__v322 := __v323 = "BinaryExpression";
__v324 := "left" in_obj s;
__v325 := "right" in_obj s;
__v326 := "operator" in_obj s;
__v328 := s["operator"];
__v327 := __v328 = "^";
if (true && __v321 && __v322 && __v324 && __v325 && __v326 && __v327) {
left := s["left"];
right := s["right"];
__v329 := "bitwise_expression_xor" (___internal_esl_global, scope, left, right);
if (fst(__v329)) {
return __v329
} else {
__v329 := snd(__v329)
};
return ( false, __v329 )
} else {
__v330 := "type" in_obj s;
__v332 := s["type"];
__v331 := __v332 = "BinaryExpression";
__v333 := "left" in_obj s;
__v334 := "right" in_obj s;
__v335 := "operator" in_obj s;
__v337 := s["operator"];
__v336 := __v337 = "<<";
if (true && __v330 && __v331 && __v333 && __v334 && __v335 && __v336) {
left := s["left"];
right := s["right"];
__v338 := "bitwise_expression_zero_fill_left_shift" (___internal_esl_global, scope, left, right);
if (fst(__v338)) {
return __v338
} else {
__v338 := snd(__v338)
};
return ( false, __v338 )
} else {
__v339 := "type" in_obj s;
__v341 := s["type"];
__v340 := __v341 = "BinaryExpression";
__v342 := "left" in_obj s;
__v343 := "right" in_obj s;
__v344 := "operator" in_obj s;
__v346 := s["operator"];
__v345 := __v346 = ">>";
if (true && __v339 && __v340 && __v342 && __v343 && __v344 && __v345) {
left := s["left"];
right := s["right"];
__v347 := "bitwise_expression_signed_right_shift" (___internal_esl_global, scope, left, right);
if (fst(__v347)) {
return __v347
} else {
__v347 := snd(__v347)
};
return ( false, __v347 )
} else {
__v348 := "type" in_obj s;
__v350 := s["type"];
__v349 := __v350 = "BinaryExpression";
__v351 := "left" in_obj s;
__v352 := "right" in_obj s;
__v353 := "operator" in_obj s;
__v355 := s["operator"];
__v354 := __v355 = ">>>";
if (true && __v348 && __v349 && __v351 && __v352 && __v353 && __v354) {
left := s["left"];
right := s["right"];
__v356 := "bitwise_expression_zero_fill_right_shift" (___internal_esl_global, scope, left, right);
if (fst(__v356)) {
return __v356
} else {
__v356 := snd(__v356)
};
return ( false, __v356 )
} else {
__v357 := "type" in_obj s;
__v359 := s["type"];
__v358 := __v359 = "BinaryExpression";
__v360 := "left" in_obj s;
__v361 := "right" in_obj s;
__v362 := "operator" in_obj s;
__v364 := s["operator"];
__v363 := __v364 = "==";
if (true && __v357 && __v358 && __v360 && __v361 && __v362 && __v363) {
left := s["left"];
right := s["right"];
__v365 := "comparison_expression_eq" (___internal_esl_global, scope, left, right);
if (fst(__v365)) {
return __v365
} else {
__v365 := snd(__v365)
};
return ( false, __v365 )
} else {
__v366 := "type" in_obj s;
__v368 := s["type"];
__v367 := __v368 = "BinaryExpression";
__v369 := "left" in_obj s;
__v370 := "right" in_obj s;
__v371 := "operator" in_obj s;
__v373 := s["operator"];
__v372 := __v373 = "!=";
if (true && __v366 && __v367 && __v369 && __v370 && __v371 && __v372) {
left := s["left"];
right := s["right"];
__v374 := "comparison_expression_ne" (___internal_esl_global, scope, left, right);
if (fst(__v374)) {
return __v374
} else {
__v374 := snd(__v374)
};
return ( false, __v374 )
} else {
__v375 := "type" in_obj s;
__v377 := s["type"];
__v376 := __v377 = "BinaryExpression";
__v378 := "left" in_obj s;
__v379 := "right" in_obj s;
__v380 := "operator" in_obj s;
__v382 := s["operator"];
__v381 := __v382 = "<";
if (true && __v375 && __v376 && __v378 && __v379 && __v380 && __v381) {
left := s["left"];
right := s["right"];
__v383 := "comparison_expression_lt" (___internal_esl_global, scope, left, right);
if (fst(__v383)) {
return __v383
} else {
__v383 := snd(__v383)
};
return ( false, __v383 )
} else {
__v384 := "type" in_obj s;
__v386 := s["type"];
__v385 := __v386 = "BinaryExpression";
__v387 := "left" in_obj s;
__v388 := "right" in_obj s;
__v389 := "operator" in_obj s;
__v391 := s["operator"];
__v390 := __v391 = ">";
if (true && __v384 && __v385 && __v387 && __v388 && __v389 && __v390) {
left := s["left"];
right := s["right"];
__v392 := "comparison_expression_gt" (___internal_esl_global, scope, left, right);
if (fst(__v392)) {
return __v392
} else {
__v392 := snd(__v392)
};
return ( false, __v392 )
} else {
__v393 := "type" in_obj s;
__v395 := s["type"];
__v394 := __v395 = "BinaryExpression";
__v396 := "left" in_obj s;
__v397 := "right" in_obj s;
__v398 := "operator" in_obj s;
__v400 := s["operator"];
__v399 := __v400 = "<=";
if (true && __v393 && __v394 && __v396 && __v397 && __v398 && __v399) {
left := s["left"];
right := s["right"];
__v401 := "comparison_expression_le" (___internal_esl_global, scope, left, right);
if (fst(__v401)) {
return __v401
} else {
__v401 := snd(__v401)
};
return ( false, __v401 )
} else {
__v402 := "type" in_obj s;
__v404 := s["type"];
__v403 := __v404 = "BinaryExpression";
__v405 := "left" in_obj s;
__v406 := "right" in_obj s;
__v407 := "operator" in_obj s;
__v409 := s["operator"];
__v408 := __v409 = ">=";
if (true && __v402 && __v403 && __v405 && __v406 && __v407 && __v408) {
left := s["left"];
right := s["right"];
__v410 := "comparison_expression_ge" (___internal_esl_global, scope, left, right);
if (fst(__v410)) {
return __v410
} else {
__v410 := snd(__v410)
};
return ( false, __v410 )
} else {
__v411 := "type" in_obj s;
__v413 := s["type"];
__v412 := __v413 = "BinaryExpression";
__v414 := "left" in_obj s;
__v415 := "right" in_obj s;
__v416 := "operator" in_obj s;
__v418 := s["operator"];
__v417 := __v418 = "===";
if (true && __v411 && __v412 && __v414 && __v415 && __v416 && __v417) {
left := s["left"];
right := s["right"];
__v419 := "comparison_expression_stricteq" (___internal_esl_global, scope, left, right);
if (fst(__v419)) {
return __v419
} else {
__v419 := snd(__v419)
};
return ( false, __v419 )
} else {
__v420 := "type" in_obj s;
__v422 := s["type"];
__v421 := __v422 = "BinaryExpression";
__v423 := "left" in_obj s;
__v424 := "right" in_obj s;
__v425 := "operator" in_obj s;
__v427 := s["operator"];
__v426 := __v427 = "!==";
if (true && __v420 && __v421 && __v423 && __v424 && __v425 && __v426) {
left := s["left"];
right := s["right"];
__v428 := "comparison_expression_strictne" (___internal_esl_global, scope, left, right);
if (fst(__v428)) {
return __v428
} else {
__v428 := snd(__v428)
};
return ( false, __v428 )
} else {
__v429 := "type" in_obj s;
__v431 := s["type"];
__v430 := __v431 = "ConditionalExpression";
__v432 := "test" in_obj s;
__v433 := "consequent" in_obj s;
__v434 := "alternate" in_obj s;
if (true && __v429 && __v430 && __v432 && __v433 && __v434) {
test := s["test"];
expr1 := s["consequent"];
expr2 := s["alternate"];
__v435 := "conditional_expression" (___internal_esl_global, scope, test, expr1, expr2);
if (fst(__v435)) {
return __v435
} else {
__v435 := snd(__v435)
};
return ( false, __v435 )
} else {
__v436 := "type" in_obj s;
__v438 := s["type"];
__v437 := __v438 = "CallExpression";
__v439 := "callee" in_obj s;
__v440 := "arguments" in_obj s;
if (true && __v436 && __v437 && __v439 && __v440) {
callee := s["callee"];
args := s["arguments"];
__v441 := "call_expression" (___internal_esl_global, scope, callee, args);
if (fst(__v441)) {
return __v441
} else {
__v441 := snd(__v441)
};
return ( false, __v441 )
} else {
__v442 := "type" in_obj s;
__v444 := s["type"];
__v443 := __v444 = "NewExpression";
__v445 := "callee" in_obj s;
__v446 := "arguments" in_obj s;
if (true && __v442 && __v443 && __v445 && __v446) {
callee := s["callee"];
args := s["arguments"];
__v447 := "new_expression" (___internal_esl_global, scope, callee, args);
if (fst(__v447)) {
return __v447
} else {
__v447 := snd(__v447)
};
return ( false, __v447 )
} else {
__v448 := "type" in_obj s;
__v450 := s["type"];
__v449 := __v450 = "UnaryExpression";
__v451 := "argument" in_obj s;
__v452 := "operator" in_obj s;
__v454 := s["operator"];
__v453 := __v454 = "!";
if (true && __v448 && __v449 && __v451 && __v452 && __v453) {
arg := s["argument"];
__v455 := "logical_expression_not" (___internal_esl_global, scope, arg);
if (fst(__v455)) {
return __v455
} else {
__v455 := snd(__v455)
};
return ( false, __v455 )
} else {
__v456 := "type" in_obj s;
__v458 := s["type"];
__v457 := __v458 = "LogicalExpression";
__v459 := "left" in_obj s;
__v460 := "right" in_obj s;
__v461 := "operator" in_obj s;
__v463 := s["operator"];
__v462 := __v463 = "||";
if (true && __v456 && __v457 && __v459 && __v460 && __v461 && __v462) {
left := s["left"];
right := s["right"];
__v464 := "logical_expression_or" (___internal_esl_global, scope, left, right);
if (fst(__v464)) {
return __v464
} else {
__v464 := snd(__v464)
};
return ( false, __v464 )
} else {
__v465 := "type" in_obj s;
__v467 := s["type"];
__v466 := __v467 = "LogicalExpression";
__v468 := "left" in_obj s;
__v469 := "right" in_obj s;
__v470 := "operator" in_obj s;
__v472 := s["operator"];
__v471 := __v472 = "&&";
if (true && __v465 && __v466 && __v468 && __v469 && __v470 && __v471) {
left := s["left"];
right := s["right"];
__v473 := "logical_expression_and" (___internal_esl_global, scope, left, right);
if (fst(__v473)) {
return __v473
} else {
__v473 := snd(__v473)
};
return ( false, __v473 )
} else {
__v474 := "type" in_obj s;
__v476 := s["type"];
__v475 := __v476 = "Property";
__v477 := "kind" in_obj s;
__v478 := "key" in_obj s;
__v479 := "value" in_obj s;
__v480 := "computed" in_obj s;
__v482 := s["computed"];
__v481 := __v482 = false;
__v483 := "shorthand" in_obj s;
__v485 := s["shorthand"];
__v484 := __v485 = false;
if (true && __v474 && __v475 && __v477 && __v478 && __v479 && __v480 && __v481 && __v483 && __v484) {
kind := s["kind"];
key := s["key"];
value := s["value"];
__v486 := "object_property" (___internal_esl_global, scope, key, value);
if (fst(__v486)) {
return __v486
} else {
__v486 := snd(__v486)
};
return ( false, __v486 )
} else {
__v487 := "type" in_obj s;
__v489 := s["type"];
__v488 := __v489 = "ObjectExpression";
__v490 := "properties" in_obj s;
if (true && __v487 && __v488 && __v490) {
props := s["properties"];
__v491 := "object_expression" (___internal_esl_global, scope, props);
if (fst(__v491)) {
return __v491
} else {
__v491 := snd(__v491)
};
return ( false, __v491 )
} else {
__v492 := "type" in_obj s;
__v494 := s["type"];
__v493 := __v494 = "MemberExpression";
__v495 := "object" in_obj s;
__v496 := "property" in_obj s;
__v497 := "computed" in_obj s;
__v499 := s["computed"];
__v498 := __v499 = true;
if (true && __v492 && __v493 && __v495 && __v496 && __v497 && __v498) {
object := s["object"];
prop := s["property"];
__v500 := "member_expression" (___internal_esl_global, scope, object, prop);
if (fst(__v500)) {
return __v500
} else {
__v500 := snd(__v500)
};
return ( false, __v500 )
} else {
__v501 := "type" in_obj s;
__v503 := s["type"];
__v502 := __v503 = "UpdateExpression";
__v504 := "argument" in_obj s;
__v505 := "operator" in_obj s;
__v507 := s["operator"];
__v506 := __v507 = "++";
__v508 := "prefix" in_obj s;
if (true && __v501 && __v502 && __v504 && __v505 && __v506 && __v508) {
arg := s["argument"];
prefix := s["prefix"];
__v509 := "update_expression_inc" (___internal_esl_global, scope, arg, prefix);
if (fst(__v509)) {
return __v509
} else {
__v509 := snd(__v509)
};
return ( false, __v509 )
} else {
__v510 := "type" in_obj s;
__v512 := s["type"];
__v511 := __v512 = "UpdateExpression";
__v513 := "argument" in_obj s;
__v514 := "operator" in_obj s;
__v516 := s["operator"];
__v515 := __v516 = "--";
__v517 := "prefix" in_obj s;
if (true && __v510 && __v511 && __v513 && __v514 && __v515 && __v517) {
arg := s["argument"];
prefix := s["prefix"];
__v518 := "update_expression_dec" (___internal_esl_global, scope, arg, prefix);
if (fst(__v518)) {
return __v518
} else {
__v518 := snd(__v518)
};
return ( false, __v518 )
} else {
__v519 := "type" in_obj s;
__v521 := s["type"];
__v520 := __v521 = "VariableDeclarator";
__v522 := "id" in_obj s;
__v523 := "init" in_obj s;
if (true && __v519 && __v520 && __v522 && __v523) {
id := s["id"];
init := s["init"];
__v524 := "variable_declarator" (___internal_esl_global, scope, id, init);
if (fst(__v524)) {
return __v524
} else {
__v524 := snd(__v524)
};
return ( false, __v524 )
} else {
__v525 := "type" in_obj s;
__v527 := s["type"];
__v526 := __v527 = "VariableDeclaration";
__v528 := "kind" in_obj s;
__v530 := s["kind"];
__v529 := __v530 = "var";
__v531 := "declarations" in_obj s;
if (true && __v525 && __v526 && __v528 && __v529 && __v531) {
decls := s["declarations"];
__v532 := "var_declaration" (___internal_esl_global, scope, decls);
if (fst(__v532)) {
return __v532
} else {
__v532 := snd(__v532)
};
return ( false, __v532 )
} else {
__v533 := "type" in_obj s;
__v535 := s["type"];
__v534 := __v535 = "VariableDeclaration";
__v536 := "kind" in_obj s;
__v538 := s["kind"];
__v537 := __v538 = "let";
__v539 := "declarations" in_obj s;
if (true && __v533 && __v534 && __v536 && __v537 && __v539) {
decls := s["declarations"];
__v540 := "let_declaration" (___internal_esl_global, scope, decls);
if (fst(__v540)) {
return __v540
} else {
__v540 := snd(__v540)
};
return ( false, __v540 )
} else {
__v541 := "type" in_obj s;
__v543 := s["type"];
__v542 := __v543 = "VariableDeclaration";
__v544 := "kind" in_obj s;
__v546 := s["kind"];
__v545 := __v546 = "const";
__v547 := "declarations" in_obj s;
if (true && __v541 && __v542 && __v544 && __v545 && __v547) {
decls := s["declarations"];
__v548 := "const_declaration" (___internal_esl_global, scope, decls);
if (fst(__v548)) {
return __v548
} else {
__v548 := snd(__v548)
};
return ( false, __v548 )
} else {
__v549 := "type" in_obj s;
__v551 := s["type"];
__v550 := __v551 = "Literal";
__v552 := "raw" in_obj s;
__v553 := "value" in_obj s;
if (true && __v549 && __v550 && __v552 && __v553) {
raw := s["raw"];
value := s["value"];
__v554 := "literal_value" (___internal_esl_global, scope, value);
if (fst(__v554)) {
return __v554
} else {
__v554 := snd(__v554)
};
return ( false, __v554 )
} else {
__v555 := "type" in_obj s;
__v557 := s["type"];
__v556 := __v557 = "Identifier";
__v558 := "name" in_obj s;
if (true && __v555 && __v556 && __v558) {
name := s["name"];
__v559 := "identifier_value" (___internal_esl_global, scope, name);
if (fst(__v559)) {
return __v559
} else {
__v559 := snd(__v559)
};
return ( false, __v559 )
} else {
__v560 := "type" in_obj s;
__v562 := s["type"];
__v561 := __v562 = "EmptyValue";
if (true && __v560 && __v561) {
return ( false, 'empty )
} else {
__v563 := "type" in_obj s;
__v565 := s["type"];
__v564 := __v565 = "FunctionExpression";
__v566 := "id" in_obj s;
__v568 := s["id"];
__v567 := __v568 = null;
__v569 := "params" in_obj s;
__v570 := "body" in_obj s;
if (true && __v563 && __v564 && __v566 && __v567 && __v569 && __v570) {
params := s["params"];
code := s["body"];
__v571 := "FunctionObject" (___internal_esl_global, null, params, code, scope);
if (fst(__v571)) {
return __v571
} else {
__v571 := snd(__v571)
};
return ( false, __v571 )
} else {
if (true) {
print "[ERROR]: Found an unsuported statement";
print s;
return ( true, "Unsuported statement" )
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function minus_assignment_expression (___internal_esl_global, scope, left, right) { print "MinusAssignmentExpression [left][right]:";
__v572 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v572)) {
return __v572
} else {
__v572 := snd(__v572)
};
update_data := __v572;
__v573 := update_data["value"];
__v574 := update_data["mod"];
__v575 := __v573 - __v574;
new_value := __v575;
__v576 := update_data["store"];
__v577 := update_data["name"];
__v576[__v577] := new_value;
return ( false, new_value ) };
function update_expression (___internal_esl_global, scope, left, right, must_exist) { print left;
print right;
print "--resolve_left_value1";
__v578 := "resolve_left_value" (___internal_esl_global, scope, left, must_exist);
if (fst(__v578)) {
return __v578
} else {
__v578 := snd(__v578)
};
update_data := __v578;
print "--resolve_left_value2";
print update_data;
__v579 := "interpreter" (___internal_esl_global, scope, right);
if (fst(__v579)) {
return __v579
} else {
__v579 := snd(__v579)
};
update_data["mod"] := __v579;
return ( false, update_data ) };
function initialize_scope (___internal_esl_global, scope, vdecls, fdecls) { __v580 := "__initialize_scope_vdecls" (___internal_esl_global, scope, vdecls);
if (fst(__v580)) {
return __v580
} else {
__v580 := snd(__v580)
};
scope := __v580;
__v581 := "__initialize_scope_fdecls" (___internal_esl_global, scope, fdecls);
if (fst(__v581)) {
return __v581
} else {
__v581 := snd(__v581)
};
scope := __v581;
return ( false, scope ) };
function arithmetic_expression_pos (___internal_esl_global, scope, arg) { print "ArithmeticExpressionPos [arg]";
__v582 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v582)) {
return __v582
} else {
__v582 := snd(__v582)
};
eval := __v582;
return ( false, eval ) };
function while_loop_statement (___internal_esl_global, scope, test, body) { print "WhileLoopStatement [test][body]";
print test;
print body;
retval := 'empty;
__v583 := scope["flow_state"];
__v584 := __v583 = 'normal;
__v585 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v585)) {
return __v585
} else {
__v585 := snd(__v585)
};
__v586 := __v584 && __v585;
while (__v586) { __v587 := "interpreter" (___internal_esl_global, scope, body);
if (fst(__v587)) {
return __v587
} else {
__v587 := snd(__v587)
};
retval := __v587;
__v588 := scope["flow_state"];
__v589 := __v588 = 'continue;
if (__v589) {
scope["flow_state"] := 'normal
};
__v583 := scope["flow_state"];
__v584 := __v583 = 'normal;
__v585 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v585)) {
return __v585
} else {
__v585 := snd(__v585)
};
__v586 := __v584 && __v585 };
__v591 := scope["flow_state"];
__v592 := __v591 = 'return;
__v590 := !(__v592);
if (__v590) {
scope["flow_state"] := 'normal
};
return ( false, retval ) };
function update_expression_inc (___internal_esl_global, scope, arg, prefix) { print "UpdateExpressionInc [arg]";
__v593 := { };
__v593["type"] := "EmptyValue";
__v594 := "update_expression" (___internal_esl_global, scope, arg, __v593, true);
if (fst(__v594)) {
return __v594
} else {
__v594 := snd(__v594)
};
update_data := __v594;
__v595 := update_data["value"];
__v596 := __v595 + 1.;
new_value := __v596;
__v597 := update_data["store"];
__v598 := update_data["name"];
__v597[__v598] := new_value;
__v599 := update_data["value"];
__v600 := "__prefix_return" (___internal_esl_global, prefix, __v599, new_value);
if (fst(__v600)) {
return __v600
} else {
__v600 := snd(__v600)
};
return ( false, __v600 ) };
function assignment_expression (___internal_esl_global, scope, left, right) { print "AssignmentExpression [left][right]:";
__v601 := "update_expression" (___internal_esl_global, scope, left, right, false);
if (fst(__v601)) {
return __v601
} else {
__v601 := snd(__v601)
};
update_data := __v601;
__v602 := update_data["mod"];
new_value := __v602;
__v603 := update_data["store"];
__v604 := update_data["name"];
__v603[__v604] := new_value;
return ( false, new_value ) };
function program (___internal_esl_global, scope, stmts, vdecls, fdecls) { print "Program [stmts]:";
print stmts;
__v605 := "initialize_scope" (___internal_esl_global, scope, vdecls, fdecls);
if (fst(__v605)) {
return __v605
} else {
__v605 := snd(__v605)
};
scope := __v605;
i := 0;
retval := 'empty;
__v606 := l_len(stmts);
len := __v606;
__v607 := i < len;
__v608 := scope["flow_state"];
__v609 := __v608 = 'normal;
__v610 := __v607 && __v609;
while (__v610) { __v611 := l_nth(stmts, i);
stmt := __v611;
print "________________________________________________________________________________";
print "Start of the statement [stmt]";
print stmt;
scope["this_context"] := null;
__v612 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v612)) {
return __v612
} else {
__v612 := snd(__v612)
};
retval := __v612;
print "End of the statement [retval]";
print retval;
__v613 := i + 1;
i := __v613;
__v607 := i < len;
__v608 := scope["flow_state"];
__v609 := __v608 = 'normal;
__v610 := __v607 && __v609 };
print "________________________________________________________________________________";
print "End of the program [retval]:";
print retval;
return ( false, retval ) };
function member_expression (___internal_esl_global, scope, object, prop) { print "MemberExpression [object][prop]";
print object;
print prop;
__v614 := "resolve_left_value" (___internal_esl_global, scope, object, true);
if (fst(__v614)) {
return __v614
} else {
__v614 := snd(__v614)
};
resolved_object := __v614;
__v615 := resolved_object["value"];
eval_object := __v615;
__v616 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v616)) {
return __v616
} else {
__v616 := snd(__v616)
};
eval_prop := __v616;
__v617 := "resolve_property" (___internal_esl_global, eval_object, eval_object, eval_prop, false);
if (fst(__v617)) {
return __v617
} else {
__v617 := snd(__v617)
};
property_data := __v617;
scope["this_context"] := eval_object;
__v618 := property_data["value"];
return ( false, __v618 ) };
function comparison_expression_lt (___internal_esl_global, scope, left, right) { print "ComparisonExpressionLt [left][right]";
__v619 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v619)) {
return __v619
} else {
__v619 := snd(__v619)
};
evals := __v619;
__v620 := evals["left"];
__v621 := evals["right"];
__v622 := __v620 < __v621;
return ( false, __v622 ) };
function arithmetic_expression_plus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionPlus [left][right]";
__v623 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v623)) {
return __v623
} else {
__v623 := snd(__v623)
};
evals := __v623;
__v624 := evals["left"];
__v625 := evals["right"];
__v626 := __v624 + __v625;
return ( false, __v626 ) };
function continue_statement (___internal_esl_global, scope) { print "ContinueStatement";
scope["flow_state"] := 'continue;
return ( false, 'empty ) };
function initialize_function_object (___internal_esl_global, function_object, function_args, this_object) { __v627 := "__initialize_function_object_scope" (___internal_esl_global, function_object, this_object);
if (fst(__v627)) {
return __v627
} else {
__v627 := snd(__v627)
};
__v628 := "__add_function_args_to_scope" (___internal_esl_global, function_object, function_args);
if (fst(__v628)) {
return __v628
} else {
__v628 := snd(__v628)
};
return ( false, function_object ) };
function bitwise_expression_zero_fill_left_shift (___internal_esl_global, scope, left, right) { print "BitwiseExpressionZeroFillLeftShift [left][right]";
__v629 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v629)) {
return __v629
} else {
__v629 := snd(__v629)
};
evals := __v629;
__v630 := evals["left"];
__v631 := evals["right"];
__v632 := __v630 << __v631;
return ( false, __v632 ) };
function times_assignment_expression (___internal_esl_global, scope, left, right) { print "TimesAssignmentExpression [left][right]:";
__v633 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v633)) {
return __v633
} else {
__v633 := snd(__v633)
};
update_data := __v633;
__v634 := update_data["value"];
__v635 := update_data["mod"];
__v636 := __v634 * __v635;
new_value := __v636;
__v637 := update_data["store"];
__v638 := update_data["name"];
__v637[__v638] := new_value;
return ( false, new_value ) };
function break_statement (___internal_esl_global, scope) { print "BreakStatement";
scope["flow_state"] := 'break;
return ( false, 'empty ) };
function resolve_left_value (___internal_esl_global, scope, left, must_exist) { __v639 := "type" in_obj left;
__v641 := left["type"];
__v640 := __v641 = "Identifier";
__v642 := "name" in_obj left;
if (true && __v639 && __v640 && __v642) {
name := left["name"];
__v643 := "resolve_id" (___internal_esl_global, scope, scope, name, must_exist);
if (fst(__v643)) {
return __v643
} else {
__v643 := snd(__v643)
};
return ( false, __v643 )
} else {
__v644 := "type" in_obj left;
__v646 := left["type"];
__v645 := __v646 = "ThisExpression";
if (true && __v644 && __v645) {
__v647 := { };
__v648 := scope["store"];
__v647["store"] := __v648;
__v647["name"] := "this";
__v649 := scope["this_store"];
__v647["value"] := __v649;
return ( false, __v647 )
} else {
__v650 := "type" in_obj left;
__v652 := left["type"];
__v651 := __v652 = "MemberExpression";
__v653 := "object" in_obj left;
__v654 := "property" in_obj left;
__v655 := "computed" in_obj left;
__v657 := left["computed"];
__v656 := __v657 = true;
if (true && __v650 && __v651 && __v653 && __v654 && __v655 && __v656) {
object := left["object"];
prop := left["property"];
__v658 := "interpreter" (___internal_esl_global, scope, object);
if (fst(__v658)) {
return __v658
} else {
__v658 := snd(__v658)
};
base := __v658;
__v659 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v659)) {
return __v659
} else {
__v659 := snd(__v659)
};
prop := __v659;
__v660 := "resolve_property" (___internal_esl_global, base, base, prop, must_exist);
if (fst(__v660)) {
return __v660
} else {
__v660 := snd(__v660)
};
return ( false, __v660 )
} else {
if (true) {
return ( true, "Unsuported left value" )
}
}
}
} };
function var_declaration (___internal_esl_global, scope, decls) { print "VariableDeclaration [decls]:";
print decls;
ret := 'empty;
__v662 := 0;
__v661 := l_len(decls);
__v663 := __v661 > __v662;
while (__v663) { decl := l_nth(decls, __v662);
__v664 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v664)) {
return __v664
} else {
__v664 := snd(__v664)
};
ret := __v664;
__v662 := __v662 + 1;
__v663 := __v661 > __v662 };
return ( false, ret ) };
function bitwise_expression_not (___internal_esl_global, scope, arg) { print "BitwiseExpressionNot [arg]";
__v665 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v665)) {
return __v665
} else {
__v665 := snd(__v665)
};
eval := __v665;
__v666 := ~(eval);
return ( false, __v666 ) };
function arithmetic_expression_times (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionTimes [left][right]";
__v667 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v667)) {
return __v667
} else {
__v667 := snd(__v667)
};
evals := __v667;
__v668 := evals["left"];
__v669 := evals["right"];
__v670 := __v668 * __v669;
return ( false, __v670 ) };
function object_expression (___internal_esl_global, scope, props) { print "ObjectExpression [properties]";
print props;
__v671 := "Object" (___internal_esl_global);
if (fst(__v671)) {
return __v671
} else {
__v671 := snd(__v671)
};
object := __v671;
__v673 := 0;
__v672 := l_len(props);
__v674 := __v672 > __v673;
while (__v674) { prop := l_nth(props, __v673);
__v675 := "interpreter" (___internal_esl_global, scope, prop);
if (fst(__v675)) {
return __v675
} else {
__v675 := snd(__v675)
};
object_property := __v675;
__v676 := object_property["name"];
__v677 := object_property["value"];
object[__v676] := __v677;
__v673 := __v673 + 1;
__v674 := __v672 > __v673 };
return ( false, object ) };
function logical_expression_or (___internal_esl_global, scope, left, right) { print "LogicalExpressionOr [left][right]";
__v678 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v678)) {
return __v678
} else {
__v678 := snd(__v678)
};
evals := __v678;
__v679 := evals["left"];
__v680 := evals["right"];
__v681 := __v679 || __v680;
return ( false, __v681 ) };
function switch_statement (___internal_esl_global, scope, discriminant, cases) { print "SwitchStatement [discriminat][cases]";
print discriminant;
print cases;
__v682 := l_nth(cases, 0);
main_cases := __v682;
__v683 := l_nth(cases, 1);
default_case := __v683;
__v684 := "interpreter" (___internal_esl_global, scope, discriminant);
if (fst(__v684)) {
return __v684
} else {
__v684 := snd(__v684)
};
discriminant_value := __v684;
i := 0;
searching := true;
__v685 := l_len(main_cases);
len := __v685;
__v686 := i < len;
__v687 := __v686 && searching;
while (__v687) { __v688 := l_nth(main_cases, i);
switch_case := __v688;
__v689 := "__get_switch_case_args" (___internal_esl_global, switch_case);
if (fst(__v689)) {
return __v689
} else {
__v689 := snd(__v689)
};
switch_case_args := __v689;
__v690 := switch_case_args["test"];
__v691 := "interpreter" (___internal_esl_global, scope, __v690);
if (fst(__v691)) {
return __v691
} else {
__v691 := snd(__v691)
};
case_value := __v691;
__v692 := discriminant_value = case_value;
if (__v692) {
searching := false
} else {
__v693 := i + 1;
i := __v693
};
__v686 := i < len;
__v687 := __v686 && searching };
retval := 'empty;
__v694 := i < len;
__v695 := scope["flow_state"];
__v696 := __v695 = 'normal;
__v697 := __v694 && __v696;
while (__v697) { __v698 := l_nth(main_cases, i);
switch_case := __v698;
__v699 := "__get_switch_case_args" (___internal_esl_global, switch_case);
if (fst(__v699)) {
return __v699
} else {
__v699 := snd(__v699)
};
switch_case_args := __v699;
__v700 := switch_case_args["block"];
__v701 := "interpreter" (___internal_esl_global, scope, __v700);
if (fst(__v701)) {
return __v701
} else {
__v701 := snd(__v701)
};
retval := __v701;
__v702 := i + 1;
i := __v702;
__v694 := i < len;
__v695 := scope["flow_state"];
__v696 := __v695 = 'normal;
__v697 := __v694 && __v696 };
__v704 := default_case = null;
__v703 := !(__v704);
__v705 := scope["flow_state"];
__v706 := __v705 = 'normal;
__v707 := __v703 && __v706;
if (__v707) {
__v708 := "__get_switch_case_args" (___internal_esl_global, default_case);
if (fst(__v708)) {
return __v708
} else {
__v708 := snd(__v708)
};
default_args := __v708;
__v709 := default_args["block"];
__v710 := "interpreter" (___internal_esl_global, scope, __v709);
if (fst(__v710)) {
return __v710
} else {
__v710 := snd(__v710)
};
retval := __v710
};
scope["flow_state"] := 'normal;
return ( false, 'retval ) };
function bitwise_expression_and (___internal_esl_global, scope, left, right) { print "BitwiseExpressionAnd [left][right]";
__v711 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v711)) {
return __v711
} else {
__v711 := snd(__v711)
};
evals := __v711;
__v712 := evals["left"];
__v713 := evals["right"];
__v714 := __v712 & __v713;
return ( false, __v714 ) };
function resolve_id (___internal_esl_global, original_scope, scope, name, must_exist) { __v716 := scope["store"];
__v715 := __v716[name];
value := __v715;
__v717 := value = 'undefined;
__v719 := scope["parent"];
__v720 := __v719 = null;
__v718 := !(__v720);
__v721 := __v717 && __v718;
if (__v721) {
__v723 := scope["parent"];
__v722 := __v723["parent_scope"];
upper_scope := __v722;
__v724 := "resolve_id" (___internal_esl_global, original_scope, upper_scope, name, must_exist);
if (fst(__v724)) {
return __v724
} else {
__v724 := snd(__v724)
};
return ( false, __v724 )
};
__v729 := value = 'undefined;
__v728 := !(__v729);
if (__v728) {
__v730 := { };
__v731 := scope["store"];
__v730["store"] := __v731;
__v730["name"] := name;
__v730["value"] := value;
return ( false, __v730 )
} else {
__v725 := !(must_exist);
if (__v725) {
__v726 := { };
__v727 := original_scope["store"];
__v726["store"] := __v727;
__v726["name"] := name;
__v726["value"] := value;
return ( false, __v726 )
} else {
return ( true, "The name is not defined in the current scope" )
}
} };
function identifier_value (___internal_esl_global, scope, name) { print "Identifier [name][value]:";
__v732 := "resolve_id" (___internal_esl_global, scope, scope, name, true);
if (fst(__v732)) {
return __v732
} else {
__v732 := snd(__v732)
};
id_data := __v732;
print name;
__v733 := id_data["value"];
print __v733;
__v734 := id_data["value"];
return ( false, __v734 ) };
function comparison_expression_ne (___internal_esl_global, scope, left, right) { print "ComparisonExpressionNe [left][right]";
__v735 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v735)) {
return __v735
} else {
__v735 := snd(__v735)
};
evals := __v735;
__v737 := evals["left"];
__v738 := evals["right"];
__v739 := __v737 = __v738;
__v736 := !(__v739);
return ( false, __v736 ) };
function modulus_assignment_expression (___internal_esl_global, scope, left, right) { print "ModulusAssignmentExpression [left][right]:";
__v740 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v740)) {
return __v740
} else {
__v740 := snd(__v740)
};
update_data := __v740;
__v741 := update_data["value"];
__v742 := update_data["mod"];
__v743 := __v741 % __v742;
new_value := __v743;
__v744 := update_data["store"];
__v745 := update_data["name"];
__v744[__v745] := new_value;
return ( false, new_value ) };
function logical_expression_not (___internal_esl_global, scope, arg) { print "LogicalExpressionNot [arg]";
__v746 := "unary_expression" (___internal_esl_global, scope, arg);
if (fst(__v746)) {
return __v746
} else {
__v746 := snd(__v746)
};
eval := __v746;
__v747 := !(eval);
return ( false, __v747 ) };
function comparison_expression_strictne (___internal_esl_global, scope, left, right) { print "ComparisonExpressionStrictNe [left][right]";
__v748 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v748)) {
return __v748
} else {
__v748 := snd(__v748)
};
evals := __v748;
__v751 := evals["left"];
__v750 := typeof(__v751);
__v753 := evals["right"];
__v752 := typeof(__v753);
__v754 := __v750 = __v752;
__v755 := evals["left"];
__v756 := evals["right"];
__v757 := __v755 = __v756;
__v758 := __v754 && __v757;
__v749 := !(__v758);
return ( false, __v749 ) };
function division_assignment_expression (___internal_esl_global, scope, left, right) { print "DivisionAssignmentExpression [left][right]:";
__v759 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v759)) {
return __v759
} else {
__v759 := snd(__v759)
};
update_data := __v759;
__v760 := update_data["value"];
__v761 := update_data["mod"];
__v762 := __v760 / __v761;
new_value := __v762;
__v763 := update_data["store"];
__v764 := update_data["name"];
__v763[__v764] := new_value;
return ( false, new_value ) };
function FunctionObject (___internal_esl_global, name, params, code, parent_scope) { __v765 := { };
function_object := __v765;
function_object["name"] := name;
function_object["params"] := params;
function_object["code"] := code;
function_object["scope"] := null;
function_object["parent_scope"] := parent_scope;
__v766 := { };
__v766["__proto__"] := null;
function_object["prototype"] := __v766;
return ( false, function_object ) };
function block_statement (___internal_esl_global, scope, stmts) { print "BlockStatement [stmts]:";
print stmts;
i := 0;
retval := 'empty;
__v767 := l_len(stmts);
len := __v767;
__v768 := i < len;
__v769 := scope["flow_state"];
__v770 := __v769 = 'normal;
__v771 := __v768 && __v770;
while (__v771) { __v772 := l_nth(stmts, i);
stmt := __v772;
print "Start of the statement [stmt]";
print stmt;
scope["this_context"] := null;
__v773 := "interpreter" (___internal_esl_global, scope, stmt);
if (fst(__v773)) {
return __v773
} else {
__v773 := snd(__v773)
};
retval := __v773;
print "End of the statement [retval]";
print retval;
__v774 := i + 1;
i := __v774;
__v768 := i < len;
__v769 := scope["flow_state"];
__v770 := __v769 = 'normal;
__v771 := __v768 && __v770 };
print "________________________________________________________________________________";
print "End of the block [retval]:";
print retval;
return ( false, retval ) };
function let_declaration (___internal_esl_global, scope, decls) { print "LetDeclaration [decls]:";
print decls;
ret := 'empty;
__v776 := 0;
__v775 := l_len(decls);
__v777 := __v775 > __v776;
while (__v777) { decl := l_nth(decls, __v776);
__v778 := "__check_is_declared" (___internal_esl_global, scope, decl);
if (fst(__v778)) {
return __v778
} else {
__v778 := snd(__v778)
};
__v779 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v779)) {
return __v779
} else {
__v779 := snd(__v779)
};
ret := __v779;
__v776 := __v776 + 1;
__v777 := __v775 > __v776 };
return ( false, ret ) };
function const_declaration (___internal_esl_global, scope, decls) { print "ConstDeclaration [decls]:";
print decls;
ret := 'empty;
__v781 := 0;
__v780 := l_len(decls);
__v782 := __v780 > __v781;
while (__v782) { decl := l_nth(decls, __v781);
__v783 := "__check_is_declared" (___internal_esl_global, scope, decl);
if (fst(__v783)) {
return __v783
} else {
__v783 := snd(__v783)
};
__v784 := "interpreter" (___internal_esl_global, scope, decl);
if (fst(__v784)) {
return __v784
} else {
__v784 := snd(__v784)
};
ret := __v784;
__v781 := __v781 + 1;
__v782 := __v780 > __v781 };
return ( false, ret ) };
function plus_assignment_expression (___internal_esl_global, scope, left, right) { print "PlusAssignmentExpression [left][right]:";
__v785 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v785)) {
return __v785
} else {
__v785 := snd(__v785)
};
update_data := __v785;
__v786 := update_data["value"];
__v787 := update_data["mod"];
__v788 := __v786 + __v787;
new_value := __v788;
__v789 := update_data["store"];
__v790 := update_data["name"];
__v789[__v790] := new_value;
return ( false, new_value ) };
function __prefix_return (___internal_esl_global, prefix, old_value, new_value) { if (prefix) {
return ( false, new_value )
} else {
return ( false, old_value )
} };
function call_expression (___internal_esl_global, scope, callee, args) { print "CallExpression [callee][args]";
print callee;
print args;
__v791 := "interpreter" (___internal_esl_global, scope, callee);
if (fst(__v791)) {
return __v791
} else {
__v791 := snd(__v791)
};
function_object := __v791;
__v792 := function_object["params"];
__v793 := "__initialize_function_args" (___internal_esl_global, scope, __v792, args);
if (fst(__v793)) {
return __v793
} else {
__v793 := snd(__v793)
};
eval_args := __v793;
__v794 := scope["this_context"];
__v795 := "initialize_function_object" (___internal_esl_global, function_object, eval_args, __v794);
if (fst(__v795)) {
return __v795
} else {
__v795 := snd(__v795)
};
print "________________________________________________________________________________";
print "Start of the function [func]";
__v796 := function_object["name"];
print __v796;
__v797 := function_object["scope"];
__v798 := function_object["code"];
__v799 := "interpreter" (___internal_esl_global, __v797, __v798);
if (fst(__v799)) {
return __v799
} else {
__v799 := snd(__v799)
};
retval := __v799;
print "________________________________________________________________________________";
print "End of the function [retval]:";
print retval;
return ( false, retval ) };
function power_assignment_expression (___internal_esl_global, scope, left, right) { print "PowerAssignmentExpression [left][right]:";
__v800 := "update_expression" (___internal_esl_global, scope, left, right, true);
if (fst(__v800)) {
return __v800
} else {
__v800 := snd(__v800)
};
update_data := __v800;
__v801 := update_data["value"];
__v802 := update_data["mod"];
__v803 := __v801 ** __v802;
new_value := __v803;
__v804 := update_data["store"];
__v805 := update_data["name"];
__v804[__v805] := new_value;
return ( false, new_value ) };
function return_statement (___internal_esl_global, scope, arg) { print "ReturnStatement [arg]";
print arg;
scope["this_context"] := null;
__v806 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v806)) {
return __v806
} else {
__v806 := snd(__v806)
};
retval := __v806;
scope["flow_state"] := 'return;
return ( false, retval ) };
function __check_is_declared (___internal_esl_global, scope, decl) { print "[WARN]: Let/Const variables behave like normal variables";
return ( false, true ) };
function expression_statement (___internal_esl_global, scope, expr) { print "ExpressionStatement [expression]:";
print expr;
__v807 := "interpreter" (___internal_esl_global, scope, expr);
if (fst(__v807)) {
return __v807
} else {
__v807 := snd(__v807)
};
return ( false, __v807 ) };
function arithmetic_expression_division (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionDivision [left][right]";
__v808 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v808)) {
return __v808
} else {
__v808 := snd(__v808)
};
evals := __v808;
__v809 := evals["left"];
__v810 := evals["right"];
__v811 := __v809 / __v810;
return ( false, __v811 ) };
function comparison_expression_gt (___internal_esl_global, scope, left, right) { print "ComparisonExpressionGt [left][right]";
__v812 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v812)) {
return __v812
} else {
__v812 := snd(__v812)
};
evals := __v812;
__v813 := evals["left"];
__v814 := evals["right"];
__v815 := __v813 > __v814;
return ( false, __v815 ) };
function comparison_expression_stricteq (___internal_esl_global, scope, left, right) { print "ComparisonExpressionStrictEq [left][right]";
__v816 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v816)) {
return __v816
} else {
__v816 := snd(__v816)
};
evals := __v816;
__v818 := evals["left"];
__v817 := typeof(__v818);
__v820 := evals["right"];
__v819 := typeof(__v820);
__v821 := __v817 = __v819;
__v822 := evals["left"];
__v823 := evals["right"];
__v824 := __v822 = __v823;
__v825 := __v821 && __v824;
return ( false, __v825 ) };
function __initialize_function_object_scope (___internal_esl_global, function_object, this_object) { __v826 := "Scope" (___internal_esl_global);
if (fst(__v826)) {
return __v826
} else {
__v826 := snd(__v826)
};
scope := __v826;
scope["parent"] := function_object;
function_object["scope"] := scope;
__v827 := function_object["code"];
code := __v827;
__v829 := this_object = null;
__v828 := !(__v829);
if (__v828) {
scope["this_store"] := this_object
};
__v830 := "type" in_obj code;
__v832 := code["type"];
__v831 := __v832 = "BlockStatement";
__v833 := "body" in_obj code;
__v834 := "variableDeclarations" in_obj code;
__v835 := "functionDeclarations" in_obj code;
if (true && __v830 && __v831 && __v833 && __v834 && __v835) {
body := code["body"];
vdecls := code["variableDeclarations"];
fdecls := code["functionDeclarations"];
__v836 := "initialize_scope" (___internal_esl_global, scope, vdecls, fdecls);
if (fst(__v836)) {
return __v836
} else {
__v836 := snd(__v836)
}
} else {
if (true) {
return ( true, "Invalid code block for function body" )
}
};
return ( false, function_object ) };
function main () { ___internal_esl_global := { };
__v837 := "buildAST" (___internal_esl_global);
if (fst(__v837)) {
return __v837
} else {
__v837 := snd(__v837)
};
code := __v837;
__v838 := "Scope" (___internal_esl_global);
if (fst(__v838)) {
return __v838
} else {
__v838 := snd(__v838)
};
scope := __v838;
__v839 := "Object" (___internal_esl_global);
if (fst(__v839)) {
return __v839
} else {
__v839 := snd(__v839)
};
scope["this_store"] := __v839;
__v840 := "interpreter" (___internal_esl_global, scope, code);
if (fst(__v840)) {
return __v840
} else {
__v840 := snd(__v840)
};
return ( false, __v840 ) };
function update_expression_dec (___internal_esl_global, scope, arg, prefix) { print "UpdateExpressionDec [arg]";
__v841 := { };
__v841["type"] := "EmptyValue";
__v842 := "update_expression" (___internal_esl_global, scope, arg, __v841, true);
if (fst(__v842)) {
return __v842
} else {
__v842 := snd(__v842)
};
update_data := __v842;
__v843 := update_data["value"];
__v844 := __v843 - 1.;
new_value := __v844;
__v845 := update_data["store"];
__v846 := update_data["name"];
__v845[__v846] := new_value;
__v847 := update_data["value"];
__v848 := "__prefix_return" (___internal_esl_global, prefix, __v847, new_value);
if (fst(__v848)) {
return __v848
} else {
__v848 := snd(__v848)
};
return ( false, __v848 ) };
function resolve_property (___internal_esl_global, original_object, object, prop, must_exist) { __v849 := object[prop];
value := __v849;
__v850 := value = 'undefined;
__v852 := object["__proto__"];
__v853 := __v852 = null;
__v851 := !(__v853);
__v854 := __v850 && __v851;
if (__v854) {
__v855 := object["__proto__"];
object_proto := __v855;
__v856 := "resolve_property" (___internal_esl_global, original_object, object_proto, prop, must_exist);
if (fst(__v856)) {
return __v856
} else {
__v856 := snd(__v856)
};
return ( false, __v856 )
};
__v860 := value = 'undefined;
__v859 := !(__v860);
if (__v859) {
__v861 := { };
__v861["store"] := object;
__v861["name"] := prop;
__v861["value"] := value;
return ( false, __v861 )
} else {
__v857 := !(must_exist);
if (__v857) {
__v858 := { };
__v858["store"] := original_object;
__v858["name"] := prop;
__v858["value"] := value;
return ( false, __v858 )
} else {
return ( true, "The prop is not defined in the current object" )
}
} };
function bitwise_expression_xor (___internal_esl_global, scope, left, right) { print "BitwiseExpressionXor [left][right]";
__v862 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v862)) {
return __v862
} else {
__v862 := snd(__v862)
};
evals := __v862;
__v863 := evals["left"];
__v864 := evals["right"];
__v865 := __v863 ^ __v864;
return ( false, __v865 ) };
function object_property (___internal_esl_global, scope, key, value) { print "ObjectProperty [key][value]";
print key;
print value;
__v866 := "type" in_obj key;
__v868 := key["type"];
__v867 := __v868 = "Identifier";
__v869 := "name" in_obj key;
if (true && __v866 && __v867 && __v869) {
name := key["name"];
__v870 := "interpreter" (___internal_esl_global, scope, value);
if (fst(__v870)) {
return __v870
} else {
__v870 := snd(__v870)
};
eval_value := __v870;
__v871 := { };
__v871["name"] := name;
__v871["value"] := eval_value;
return ( false, __v871 )
} else {
if (true) {
return ( true, "Unexpected key type for object property" )
}
} };
function bitwise_expression_or (___internal_esl_global, scope, left, right) { print "BitwiseExpressionOr [left][right]";
__v872 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v872)) {
return __v872
} else {
__v872 := snd(__v872)
};
evals := __v872;
__v873 := evals["left"];
__v874 := evals["right"];
__v875 := __v873 | __v874;
return ( false, __v875 ) };
function __get_switch_case_args (___internal_esl_global, switch_case) { __v876 := "type" in_obj switch_case;
__v878 := switch_case["type"];
__v877 := __v878 = "SwitchCase";
__v879 := "test" in_obj switch_case;
__v880 := "consequent" in_obj switch_case;
if (true && __v876 && __v877 && __v879 && __v880) {
test := switch_case["test"];
consequent := switch_case["consequent"];
__v881 := { };
__v881["type"] := "BlockStatement";
__v881["body"] := consequent;
block := __v881;
__v882 := { };
__v882["test"] := test;
__v882["block"] := block;
return ( false, __v882 )
} else {
if (true) {
return ( true, "Unsuported switch case" )
}
} };
function unary_expression (___internal_esl_global, scope, arg) { print arg;
__v883 := "interpreter" (___internal_esl_global, scope, arg);
if (fst(__v883)) {
return __v883
} else {
__v883 := snd(__v883)
};
eval := __v883;
return ( false, eval ) };
function logical_expression_and (___internal_esl_global, scope, left, right) { print "LogicalExpressionAnd [left][right]";
__v884 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v884)) {
return __v884
} else {
__v884 := snd(__v884)
};
evals := __v884;
__v885 := evals["left"];
__v886 := evals["right"];
__v887 := __v885 && __v886;
return ( false, __v887 ) };
function Object (___internal_esl_global) { __v888 := { };
__v888["__proto__"] := null;
object := __v888;
return ( false, object ) };
function for_loop_statement (___internal_esl_global, scope, init, test, update, body) { print "ForLoopStatement [init][test][update][body]";
print init;
print test;
print update;
print body;
retval := 'empty;
__v889 := "interpreter" (___internal_esl_global, scope, init);
if (fst(__v889)) {
return __v889
} else {
__v889 := snd(__v889)
};
__v890 := scope["flow_state"];
__v891 := __v890 = 'normal;
__v892 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v892)) {
return __v892
} else {
__v892 := snd(__v892)
};
__v893 := __v891 && __v892;
while (__v893) { __v894 := "interpreter" (___internal_esl_global, scope, body);
if (fst(__v894)) {
return __v894
} else {
__v894 := snd(__v894)
};
retval := __v894;
__v895 := scope["flow_state"];
__v896 := __v895 = 'continue;
if (__v896) {
scope["flow_state"] := 'normal
};
__v897 := "interpreter" (___internal_esl_global, scope, update);
if (fst(__v897)) {
return __v897
} else {
__v897 := snd(__v897)
};
__v890 := scope["flow_state"];
__v891 := __v890 = 'normal;
__v892 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v892)) {
return __v892
} else {
__v892 := snd(__v892)
};
__v893 := __v891 && __v892 };
__v899 := scope["flow_state"];
__v900 := __v899 = 'return;
__v898 := !(__v900);
if (__v898) {
scope["flow_state"] := 'normal
};
return ( false, retval ) };
function arithmetic_expression_modulus (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionModulus [left][right]";
__v901 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v901)) {
return __v901
} else {
__v901 := snd(__v901)
};
evals := __v901;
__v902 := evals["left"];
__v903 := evals["right"];
__v904 := __v902 % __v903;
return ( false, __v904 ) };
function arithmetic_expression_power (___internal_esl_global, scope, left, right) { print "ArithmeticExpressionPower [left][right]";
__v905 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v905)) {
return __v905
} else {
__v905 := snd(__v905)
};
evals := __v905;
__v906 := evals["left"];
__v907 := evals["right"];
__v908 := __v906 ** __v907;
return ( false, __v908 ) };
function literal_value (___internal_esl_global, scope, value) { print "Literal [value]";
print value;
return ( false, value ) };
function comparison_expression_le (___internal_esl_global, scope, left, right) { print "ComparisonExpressionLe [left][right]";
__v909 := "binary_expression" (___internal_esl_global, scope, left, right);
if (fst(__v909)) {
return __v909
} else {
__v909 := snd(__v909)
};
evals := __v909;
__v910 := evals["left"];
__v911 := evals["right"];
__v912 := __v910 <= __v911;
return ( false, __v912 ) };
function if_statement (___internal_esl_global, scope, test, stmt1, stmt2) { print "IfStatement [test][consequent][alternate]";
print test;
print stmt1;
print stmt2;
__v916 := "interpreter" (___internal_esl_global, scope, test);
if (fst(__v916)) {
return __v916
} else {
__v916 := snd(__v916)
};
if (__v916) {
__v917 := "interpreter" (___internal_esl_global, scope, stmt1);
if (fst(__v917)) {
return __v917
} else {
__v917 := snd(__v917)
};
return ( false, __v917 )
} else {
__v914 := stmt2 = null;
__v913 := !(__v914);
if (__v913) {
__v915 := "interpreter" (___internal_esl_global, scope, stmt2);
if (fst(__v915)) {
return __v915
} else {
__v915 := snd(__v915)
};
return ( false, __v915 )
} else {
return ( false, 'empty )
}
} }