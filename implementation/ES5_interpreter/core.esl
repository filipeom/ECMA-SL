function setBindingDeletable (envRec, name, deletable) { __v0 := envRec[name];
binding := __v0;
__v2 := t_nth(binding, 0);
__v3 := t_nth(binding, 1);
__v4 := t_nth(binding, 3);
__v1 := "newBinding" (__v2, __v3, deletable, __v4);
newBinding := __v1;
envRec[name] := newBinding;
return  };
function SetMutableBindingDeclarative (declarativeEnvRec, N, V, S) { print "SetMutableBindingDeclarative";
envRec := declarativeEnvRec;
__v5 := N in_obj envRec;
if (!(__v5)) {
throw "Assert failed: N in_obj envRec"
};
__v6 := "isMutableBinding" (envRec, N);
if (__v6) {
__v7 := "setBindingValue" (envRec, N, V)
} else {
__v8 := S = true;
if (__v8) {
__v9 := "TypeErrorException" ();
throw __v9
}
};
return V };
function JS_Interpreter_Arguments (ArgumentsList, scope) { __v10 := [  ];
args := __v10;
__v11 := l_len(ArgumentsList);
lArguments := __v11;
i := 0;
__v12 := lArguments > i;
while (__v12) { __v14 := l_nth(ArgumentsList, i);
__v13 := "JS_Interpreter_Expr" (__v14, scope);
ref := __v13;
__v15 := "GetValue" (ref);
arg := __v15;
__v16 := l_add(args, arg);
args := __v16;
__v17 := i + 1;
i := __v17;
__v12 := lArguments > i };
return args };
function SetMutableBinding (envRec, N, V, S) { print "SetMutableBinding";
__v18 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v18) {
__v19 := "SetMutableBindingDeclarative" (envRec, N, V, S);
return __v19
};
__v20 := "SetMutableBindingObject" (envRec, N, V, S);
return __v20 };
function CreateAccessorPropertyFrom (Desc) { __v21 := { };
__v22 := "GetValueOrDefault" (Desc, "Get");
__v21["Get"] := __v22;
__v23 := "GetValueOrDefault" (Desc, "Set");
__v21["Set"] := __v23;
__v24 := "GetValueOrDefault" (Desc, "Enumerable");
__v21["Enumerable"] := __v24;
__v25 := "GetValueOrDefault" (Desc, "Configurable");
__v21["Configurable"] := __v25;
return __v21 };
function JS_Interpreter_ForInStmt_lhsExpr (forInStmt, scope) { __v26 := "type" in_obj forInStmt;
__v28 := forInStmt["type"];
__v27 := __v28 = "ForInStatement";
__v29 := "left" in_obj forInStmt;
__v30 := "right" in_obj forInStmt;
__v31 := "body" in_obj forInStmt;
__v32 := "labelSet" in_obj forInStmt;
if (true && __v26 && __v27 && __v29 && __v30 && __v31 && __v32) {
LeftHandSideExpression := forInStmt["left"];
Expression := forInStmt["right"];
Statement := forInStmt["body"];
currentLabelSet := forInStmt["labelSet"];
__v33 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v33;
__v34 := "GetValue" (exprRef);
experValue := __v34;
__v36 := experValue = 'null;
__v37 := experValue = 'undefined;
__v35 := __v36 || __v37;
if (__v35) {
__v38 := "normalEmptyCompletion" ('empty);
return __v38
};
__v39 := "ToObject" (experValue);
obj := __v39;
V := 'empty;
i := 0;
__v41 := [  ];
__v40 := "getEnumerableProperties" (obj, __v41);
obj_enums := __v40;
__v42 := "getNextPropertyName" (obj_enums, i);
P := __v42;
__v43 := i + 1;
i := __v43;
__v44 := P = "None";
if (__v44) {
__v45 := "normalEmptyCompletion" (V);
return __v45
};
__v46 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lhsRef := __v46;
__v49 := "getLexicalEnvironment" (scope);
__v48 := "getGlobalObject" (__v49);
__v47 := "PutValue" (lhsRef, P, __v48);
__v50 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v50;
__v53 := "getCompletionValue" (stmt);
__v52 := __v53 = 'empty;
__v51 := !(__v52);
if (__v51) {
__v54 := "getCompletionValue" (stmt);
V := __v54
};
__v57 := "getCompletionType" (stmt);
__v56 := __v57 = 'break;
__v59 := "getCompletionTarget" (stmt);
__v58 := __v59 in_list currentLabelSet;
__v55 := __v56 && __v58;
if (__v55) {
__v60 := "normalEmptyCompletion" (V);
return __v60
};
__v64 := "getCompletionType" (stmt);
__v63 := __v64 = 'continue;
__v62 := !(__v63);
__v67 := "getCompletionTarget" (stmt);
__v66 := __v67 in_list currentLabelSet;
__v65 := !(__v66);
__v61 := __v62 || __v65;
if (__v61) {
__v68 := "isAnAbruptCompletion" (stmt);
if (__v68) {
return stmt
}
};
while (!(false)) { __v42 := "getNextPropertyName" (obj_enums, i);
P := __v42;
__v43 := i + 1;
i := __v43;
__v44 := P = "None";
if (__v44) {
__v45 := "normalEmptyCompletion" (V);
return __v45
};
__v46 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lhsRef := __v46;
__v49 := "getLexicalEnvironment" (scope);
__v48 := "getGlobalObject" (__v49);
__v47 := "PutValue" (lhsRef, P, __v48);
__v50 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v50;
__v53 := "getCompletionValue" (stmt);
__v52 := __v53 = 'empty;
__v51 := !(__v52);
if (__v51) {
__v54 := "getCompletionValue" (stmt);
V := __v54
};
__v57 := "getCompletionType" (stmt);
__v56 := __v57 = 'break;
__v59 := "getCompletionTarget" (stmt);
__v58 := __v59 in_list currentLabelSet;
__v55 := __v56 && __v58;
if (__v55) {
__v60 := "normalEmptyCompletion" (V);
return __v60
};
__v64 := "getCompletionType" (stmt);
__v63 := __v64 = 'continue;
__v62 := !(__v63);
__v67 := "getCompletionTarget" (stmt);
__v66 := __v67 in_list currentLabelSet;
__v65 := !(__v66);
__v61 := __v62 || __v65;
if (__v61) {
__v68 := "isAnAbruptCompletion" (stmt);
if (__v68) {
return stmt
}
} }
} };
function newDataPropertyDescriptorFull (value, writable, enumerable, configurable) { __v69 := "NewPropertyDescriptor" ();
desc := __v69;
desc["Value"] := value;
desc["Writable"] := writable;
desc["Enumerable"] := enumerable;
desc["Configurable"] := configurable;
return desc };
function GlobalEnvironment (globalObject) { __v70 := "newLexicalEnvironment" ();
globalEnv := __v70;
__v71 := "newObjectEnvironmentRecord" (globalObject);
globalEnvRec := __v71;
__v72 := "setEnvironmentRecord" (globalEnv, globalEnvRec);
__v73 := "setOuterLexicalEnvironmentReference" (globalEnv, 'null);
return globalEnv };
function ToUint16 (argument) { __v74 := "ToNumber" (argument);
number := __v74;
__v75 := to_uint16(number);
return __v75 };
function CreateArgumentsObject (func, names, args, env, strict) { __v76 := l_len(args);
len := __v76;
__v77 := "NewECMAScriptObject" ();
obj := __v77;
__v78 := "setAllInternalMethodsOfObject" (obj);
obj["Class"] := "Arguments";
obj["Prototype"] := "$loc_OBJ_PROTOTYPE";
__v80 := { };
__v80["Value"] := len;
__v80["Writable"] := true;
__v80["Enumerable"] := false;
__v80["Configurable"] := true;
__v79 := "DefineOwnProperty" (obj, "length", __v80, false);
__v81 := "NewObject" ();
map := __v81;
__v82 := [  ];
mappedNames := __v82;
__v83 := len - 1;
indx := __v83;
__v84 := indx >= 0;
while (__v84) { __v85 := l_nth(args, indx);
val := __v85;
__v88 := int_to_float(indx);
__v87 := "ToString" (__v88);
__v89 := { };
__v89["Value"] := val;
__v89["Writable"] := true;
__v89["Enumerable"] := true;
__v89["Configurable"] := true;
__v86 := "DefineOwnProperty" (obj, __v87, __v89, false);
__v91 := l_len(names);
__v90 := indx < __v91;
if (__v90) {
__v92 := l_nth(names, indx);
name := __v92;
__v94 := strict = false;
__v96 := name in_list mappedNames;
__v95 := !(__v96);
__v93 := __v94 && __v95;
if (__v93) {
__v97 := l_add(mappedNames, name);
mappedNames := __v97;
__v98 := "MakeArgGetter" (name, env);
g := __v98;
__v99 := "MakeArgSetter" (name, env);
p := __v99;
__v102 := int_to_float(indx);
__v101 := "ToString" (__v102);
__v103 := { };
__v103["Set"] := p;
__v103["Get"] := g;
__v103["Configurable"] := true;
__v100 := "DefineOwnProperty" (map, __v101, __v103, false)
}
};
__v104 := indx - 1;
indx := __v104;
__v84 := indx >= 0 };
__v106 := l_len(mappedNames);
__v105 := __v106 > 0;
if (__v105) {
obj["ParameterMap"] := map;
obj["Get"] := "ArgumentsObjectGet";
obj["GetOwnProperty"] := "ArgumentsObjectGetOwnProperty";
obj["DefineOwnProperty"] := "ArgumentsObjectDefineOwnProperty";
obj["Delete"] := "ArgumentsObjectDelete"
};
__v107 := strict = false;
if (__v107) {
__v109 := { };
__v109["Value"] := func;
__v109["Writable"] := true;
__v109["Enumerable"] := false;
__v109["Configurable"] := true;
__v108 := "DefineOwnProperty" (obj, "callee", __v109, false)
} else {
thrower := null;
__v111 := { };
__v111["Get"] := thrower;
__v111["Set"] := thrower;
__v111["Enumerable"] := false;
__v111["Configurable"] := false;
__v110 := "DefineOwnProperty" (obj, "caller", __v111, false);
__v113 := { };
__v113["Get"] := thrower;
__v113["Set"] := thrower;
__v113["Enumerable"] := false;
__v113["Configurable"] := false;
__v112 := "DefineOwnProperty" (obj, "callee", __v113, false)
};
return obj };
function JS_Interpreter_FunctionBody (FunctionBody, scope) { __v114 := "body" in_obj FunctionBody;
__v115 := "strict" in_obj FunctionBody;
if (true && __v114 && __v115) {
SourceElementsopt := FunctionBody["body"];
strict := FunctionBody["strict"];
__v116 := "setContainedInStrictCode" (scope, strict);
__v119 := [  ];
__v118 := SourceElementsopt = __v119;
__v117 := !(__v118);
if (__v117) {
__v120 := "JS_Interpreter_SourceElements" (SourceElementsopt, scope);
return __v120
} else {
__v121 := "normalEmptyCompletion" ('undefined);
return __v121
}
} };
function JS_Interpreter_SwitchCase (switchCase, scope) { __v122 := "type" in_obj switchCase;
__v124 := switchCase["type"];
__v123 := __v124 = "SwitchCase";
__v125 := "test" in_obj switchCase;
if (true && __v122 && __v123 && __v125) {
Expression := switchCase["test"];
__v126 := "JS_Interpreter_Expr" (Expression, scope);
return __v126
} };
function Type (V) { __v127 := typeof(V);
v_type := __v127;
__v128 := v_type = __$Int;
if (__v128) {
return "Number"
};
__v129 := v_type = __$Flt;
if (__v129) {
return "Number"
};
__v130 := v_type = __$Bool;
if (__v130) {
return "Boolean"
};
__v131 := v_type = __$Str;
if (__v131) {
return "String"
};
__v132 := v_type = __$Obj;
if (__v132) {
__v133 := "isJavaScriptObject" (V);
if (__v133) {
return "Object"
};
__v134 := "isPropertyDescriptor" (V);
if (__v134) {
return "PropertyDescriptor"
};
return "EnvironmentRecord"
};
__v135 := v_type = __$List;
if (__v135) {
return "List"
};
__v136 := v_type = __$Symbol;
if (__v136) {
__v137 := V = 'null;
if (__v137) {
return "Null"
};
__v138 := V = 'undefined;
if (__v138) {
return "Undefined"
}
};
__v139 := v_type = __$Tuple;
if (__v139) {
__v140 := fst(V);
ft := __v140;
__v141 := ft = "R";
if (__v141) {
return "Reference"
};
__v142 := ft = "C";
if (__v142) {
return "Completion"
};
__v143 := ft = "P";
if (__v143) {
return "PropertyIdentifier"
}
};
__v144 := "SyntaxErrorException" ();
throw __v144 };
function CreateImmutableBindingDeclarative (declarativeEnvRec, N) { envRec := declarativeEnvRec;
__v146 := N in_obj envRec;
__v145 := !(__v146);
if (!(__v145)) {
throw "Assert failed: !(N in_obj envRec)"
};
__v147 := "createImmutableBinding" (envRec, N);
__v148 := "setBindingInitialised" (envRec, N, false);
return 'undefined };
function ToPrimitive (input, PreferredType) { __v150 := "Type" (input);
__v149 := __v150 = "Object";
if (__v149) {
__v151 := "DefaultValue" (input, PreferredType);
return __v151
};
return input };
function CreateMutableBindingDeclarative (declarativeEnvRec, N, D) { envRec := declarativeEnvRec;
__v153 := N in_obj envRec;
__v152 := !(__v153);
if (!(__v152)) {
throw "Assert failed: !(N in_obj envRec)"
};
__v154 := "createMutableBinding" (envRec, N, 'undefined);
__v155 := D = true;
if (__v155) {
__v156 := "setBindingDeletable" (envRec, N, true)
};
return 'undefined };
function HasBinding (envRec, N) { __v157 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v157) {
__v158 := "HasBindingDeclarativeEnvRecord" (envRec, N);
return __v158
};
__v159 := "HasBindingObjectEnvRecord" (envRec, N);
return __v159 };
function JS_Interpreter_PostfixExpressions (PostfixExpression, scope) { __v160 := "type" in_obj PostfixExpression;
__v162 := PostfixExpression["type"];
__v161 := __v162 = "UpdateExpression";
__v163 := "operator" in_obj PostfixExpression;
__v165 := PostfixExpression["operator"];
__v164 := __v165 = "++";
__v166 := "argument" in_obj PostfixExpression;
__v167 := "prefix" in_obj PostfixExpression;
__v169 := PostfixExpression["prefix"];
__v168 := __v169 = false;
if (true && __v160 && __v161 && __v163 && __v164 && __v166 && __v167 && __v168) {
LeftHandSideExpression := PostfixExpression["argument"];
__v170 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lhs := __v170;
__v175 := "Type" (lhs);
__v174 := __v175 = "Reference";
__v177 := "IsStrictReference" (lhs);
__v176 := __v177 = true;
__v173 := __v174 && __v176;
__v180 := "GetBase" (lhs);
__v179 := "Type" (__v180);
__v178 := __v179 = "EnvironmentRecord";
__v172 := __v173 && __v178;
__v183 := "GetReferencedName" (lhs);
__v182 := __v183 = "eval";
__v185 := "GetReferencedName" (lhs);
__v184 := __v185 = "arguments";
__v181 := __v182 || __v184;
__v171 := __v172 && __v181;
if (__v171) {
__v186 := "SyntaxErrorException" ();
throw __v186
};
__v188 := "GetValue" (lhs);
__v187 := "ToNumber" (__v188);
oldValue := __v187;
__v189 := oldValue + 1;
newValue := __v189;
__v192 := "getLexicalEnvironment" (scope);
__v191 := "getGlobalObject" (__v192);
__v190 := "PutValue" (lhs, newValue, __v191);
return oldValue
} else {
__v193 := "type" in_obj PostfixExpression;
__v195 := PostfixExpression["type"];
__v194 := __v195 = "UpdateExpression";
__v196 := "operator" in_obj PostfixExpression;
__v198 := PostfixExpression["operator"];
__v197 := __v198 = "--";
__v199 := "argument" in_obj PostfixExpression;
__v200 := "prefix" in_obj PostfixExpression;
__v202 := PostfixExpression["prefix"];
__v201 := __v202 = false;
if (true && __v193 && __v194 && __v196 && __v197 && __v199 && __v200 && __v201) {
LeftHandSideExpression := PostfixExpression["argument"];
__v203 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lhs := __v203;
__v208 := "Type" (lhs);
__v207 := __v208 = "Reference";
__v210 := "IsStrictReference" (lhs);
__v209 := __v210 = true;
__v206 := __v207 && __v209;
__v213 := "GetBase" (lhs);
__v212 := "Type" (__v213);
__v211 := __v212 = "EnvironmentRecord";
__v205 := __v206 && __v211;
__v216 := "GetReferencedName" (lhs);
__v215 := __v216 = "eval";
__v218 := "GetReferencedName" (lhs);
__v217 := __v218 = "arguments";
__v214 := __v215 || __v217;
__v204 := __v205 && __v214;
if (__v204) {
__v219 := "SyntaxErrorException" ();
throw __v219
};
__v221 := "GetValue" (lhs);
__v220 := "ToNumber" (__v221);
oldValue := __v220;
__v222 := oldValue - 1;
newValue := __v222;
__v225 := "getLexicalEnvironment" (scope);
__v224 := "getGlobalObject" (__v225);
__v223 := "PutValue" (lhs, newValue, __v224);
return oldValue
}
} };
function DeleteBindingDeclarative (declarativeEnvRec, N) { envRec := declarativeEnvRec;
__v227 := N in_obj envRec;
__v226 := !(__v227);
if (__v226) {
return true
};
__v228 := "isBindingCannotBeDeleted" (envRec, N);
if (__v228) {
return false
};
delete envRec[N];
return true };
function setOuterLexicalEnvironmentReference (lexicalEnvironment, outerLexicalEnvironment) { lexicalEnvironment["OuterEnvRef"] := outerLexicalEnvironment;
return outerLexicalEnvironment };
function getNextPropertyName (props, idx) { __v230 := l_len(props);
__v229 := __v230 <= idx;
if (__v229) {
return "None"
};
__v231 := l_nth(props, idx);
return __v231 };
function setAllInternalMethodsExceptGet (obj) { obj["GetOwnProperty"] := "GetOwnProperty";
obj["GetProperty"] := "GetProperty";
obj["CanPut"] := "CanPut";
obj["Put"] := "Put";
obj["HasProperty"] := "HasProperty";
obj["Delete"] := "Delete";
obj["DefaultValue"] := "DefaultValue";
obj["DefineOwnProperty"] := "DefineOwnProperty";
return obj };
function EveryFieldIsAbsent (Desc) { __v232 := "GetProps" (Desc);
list := __v232;
__v234 := l_len(list);
__v233 := __v234 = 0;
if (__v233) {
return true
} else {
return false
} };
function JS_Interpreter_Catch (Catch, parameter, scope) { __v235 := "type" in_obj Catch;
__v237 := Catch["type"];
__v236 := __v237 = "CatchClause";
__v238 := "param" in_obj Catch;
__v239 := "body" in_obj Catch;
if (true && __v235 && __v236 && __v238 && __v239) {
Identifier := Catch["param"];
Block := Catch["body"];
C := parameter;
__v240 := "getLexicalEnvironment" (scope);
oldEnv := __v240;
__v241 := "NewDeclarativeEnvironment" (oldEnv);
catchEnv := __v241;
__v243 := "getEnvironmentRecord" (catchEnv);
__v244 := Identifier["name"];
__v242 := "CreateMutableBinding" (__v243, __v244, false);
__v246 := "getEnvironmentRecord" (catchEnv);
__v247 := Identifier["name"];
__v245 := "SetMutableBinding" (__v246, __v247, C, false);
__v248 := "setLexicalEnvironment" (scope, catchEnv);
__v249 := "JS_Interpreter_Stmt" (Block, scope);
B := __v249;
__v250 := "setLexicalEnvironment" (scope, oldEnv);
return B
} };
function newSetAccessorPropertyDescriptor (set) { __v251 := "NewPropertyDescriptor" ();
desc := __v251;
desc["Set"] := set;
desc["Enumerable"] := true;
desc["Configurable"] := true;
return desc };
function getFunctionCode (F) { __v252 := F["Code"];
return __v252 };
function NewECMAScriptObjectFull (prototype, class, extensible) { __v253 := "NewECMAScriptObject" ();
object := __v253;
__v254 := "setInternalProperty" (object, "Prototype", prototype);
__v255 := "setInternalProperty" (object, "Class", class);
__v256 := "setInternalProperty" (object, "Extensible", extensible);
return object };
function getJSProperty (object, pname) { __v258 := object["JSProperties"];
__v257 := __v258[pname];
return __v257 };
function IsArrayIndex (P) { __v259 := "ToUint32" (P);
i := __v259;
__v261 := i = 'null;
__v260 := !(__v261);
return __v260 };
function applyBitwiseOperator (operator, lnum, rnum) { __v262 := operator = "&";
if (__v262) {
__v263 := lnum & rnum;
return __v263
};
__v264 := operator = "^";
if (__v264) {
__v265 := lnum ^ rnum;
return __v265
};
__v266 := operator = "|";
if (__v266) {
__v267 := lnum | rnum;
return __v267
};
__v268 := "TypeErrorException" ();
throw __v268 };
function newPropertyIdentifier (name, desc) { __v269 := ( "P", name, desc );
return __v269 };
function getVariableEnvironment (runningExecCtx) { __v270 := runningExecCtx["VariableEnvironment"];
return __v270 };
function arrayForEach (global, this, args) { __v271 := l_nth(args, 0);
callbackfn := __v271;
__v272 := l_nth(args, 1);
thisArg := __v272;
__v273 := "ToObject" (this);
O := __v273;
__v275 := O["Get"];
__v274 := __v275 (O, "length");
lenVal := __v274;
__v276 := "ToUint32" (lenVal);
len := __v276;
__v278 := "IsCallable" (callbackfn);
__v277 := __v278 = false;
if (__v277) {
__v279 := "TypeErrorException" ();
throw __v279
};
__v281 := thisArg = 'undefined;
__v280 := !(__v281);
if (__v280) {
T := thisArg
} else {
T := 'undefined
};
k := 0.;
__v282 := k < len;
while (__v282) { __v283 := "ToString" (k);
Pk := __v283;
__v285 := O["HasProperty"];
__v284 := __v285 (O, Pk);
kPresent := __v284;
__v286 := kPresent = true;
if (__v286) {
__v288 := O["Get"];
__v287 := __v288 (O, Pk);
kValue := __v287;
__v290 := callbackfn["Call"];
__v291 := [ kValue, k, O ];
__v289 := __v290 (callbackfn, T, __v291)
};
__v292 := k + 1.;
k := __v292;
__v282 := k < len };
return 'undefined };
function JS_Interpreter_IterationStatement (iterStmt, scope) { __v293 := "type" in_obj iterStmt;
__v295 := iterStmt["type"];
__v294 := __v295 = "DoWhileStatement";
__v296 := "test" in_obj iterStmt;
__v297 := "body" in_obj iterStmt;
__v298 := "labelSet" in_obj iterStmt;
if (true && __v293 && __v294 && __v296 && __v297 && __v298) {
Expression := iterStmt["test"];
Statement := iterStmt["body"];
currentLabelSet := iterStmt["labelSet"];
V := 'empty;
iterating := true;
__v299 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v299;
__v302 := "getCompletionValue" (stmt);
__v301 := __v302 = 'empty;
__v300 := !(__v301);
if (__v300) {
__v303 := "getCompletionValue" (stmt);
V := __v303
};
__v307 := "getCompletionType" (stmt);
__v306 := __v307 = 'continue;
__v305 := !(__v306);
__v310 := "getCompletionTarget" (stmt);
__v309 := __v310 in_list currentLabelSet;
__v308 := !(__v309);
__v304 := __v305 || __v308;
if (__v304) {
__v313 := "getCompletionType" (stmt);
__v312 := __v313 = 'break;
__v315 := "getCompletionTarget" (stmt);
__v314 := __v315 in_list currentLabelSet;
__v311 := __v312 && __v314;
if (__v311) {
__v316 := "normalEmptyCompletion" (V);
return __v316
};
__v317 := "isAnAbruptCompletion" (stmt);
if (__v317) {
return stmt
}
};
__v318 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v318;
__v321 := "GetValue" (exprRef);
__v320 := "ToBoolean" (__v321);
__v319 := __v320 = false;
if (__v319) {
iterating := false
};
__v322 := iterating = false;
while (!(__v322)) { __v299 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v299;
__v302 := "getCompletionValue" (stmt);
__v301 := __v302 = 'empty;
__v300 := !(__v301);
if (__v300) {
__v303 := "getCompletionValue" (stmt);
V := __v303
};
__v307 := "getCompletionType" (stmt);
__v306 := __v307 = 'continue;
__v305 := !(__v306);
__v310 := "getCompletionTarget" (stmt);
__v309 := __v310 in_list currentLabelSet;
__v308 := !(__v309);
__v304 := __v305 || __v308;
if (__v304) {
__v313 := "getCompletionType" (stmt);
__v312 := __v313 = 'break;
__v315 := "getCompletionTarget" (stmt);
__v314 := __v315 in_list currentLabelSet;
__v311 := __v312 && __v314;
if (__v311) {
__v316 := "normalEmptyCompletion" (V);
return __v316
};
__v317 := "isAnAbruptCompletion" (stmt);
if (__v317) {
return stmt
}
};
__v318 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v318;
__v321 := "GetValue" (exprRef);
__v320 := "ToBoolean" (__v321);
__v319 := __v320 = false;
if (__v319) {
iterating := false
};
__v322 := iterating = false };
__v323 := "normalEmptyCompletion" (V);
return __v323
} else {
__v324 := "type" in_obj iterStmt;
__v326 := iterStmt["type"];
__v325 := __v326 = "WhileStatement";
__v327 := "test" in_obj iterStmt;
__v328 := "body" in_obj iterStmt;
__v329 := "labelSet" in_obj iterStmt;
if (true && __v324 && __v325 && __v327 && __v328 && __v329) {
Expression := iterStmt["test"];
Statement := iterStmt["body"];
currentLabelSet := iterStmt["labelSet"];
V := 'empty;
__v330 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v330;
__v333 := "GetValue" (exprRef);
__v332 := "ToBoolean" (__v333);
__v331 := __v332 = false;
if (__v331) {
__v334 := "normalEmptyCompletion" (V);
return __v334
};
__v335 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v335;
__v338 := "getCompletionValue" (stmt);
__v337 := __v338 = 'empty;
__v336 := !(__v337);
if (__v336) {
__v339 := "getCompletionValue" (stmt);
V := __v339
};
__v343 := "getCompletionType" (stmt);
__v342 := __v343 = 'continue;
__v341 := !(__v342);
__v346 := "getCompletionTarget" (stmt);
__v345 := __v346 in_list currentLabelSet;
__v344 := !(__v345);
__v340 := __v341 || __v344;
if (__v340) {
__v349 := "getCompletionType" (stmt);
__v348 := __v349 = 'break;
__v351 := "getCompletionTarget" (stmt);
__v350 := __v351 in_list currentLabelSet;
__v347 := __v348 && __v350;
if (__v347) {
__v352 := "normalEmptyCompletion" (V);
return __v352
};
__v353 := "isAnAbruptCompletion" (stmt);
if (__v353) {
return stmt
}
};
while (!(false)) { __v330 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v330;
__v333 := "GetValue" (exprRef);
__v332 := "ToBoolean" (__v333);
__v331 := __v332 = false;
if (__v331) {
__v334 := "normalEmptyCompletion" (V);
return __v334
};
__v335 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v335;
__v338 := "getCompletionValue" (stmt);
__v337 := __v338 = 'empty;
__v336 := !(__v337);
if (__v336) {
__v339 := "getCompletionValue" (stmt);
V := __v339
};
__v343 := "getCompletionType" (stmt);
__v342 := __v343 = 'continue;
__v341 := !(__v342);
__v346 := "getCompletionTarget" (stmt);
__v345 := __v346 in_list currentLabelSet;
__v344 := !(__v345);
__v340 := __v341 || __v344;
if (__v340) {
__v349 := "getCompletionType" (stmt);
__v348 := __v349 = 'break;
__v351 := "getCompletionTarget" (stmt);
__v350 := __v351 in_list currentLabelSet;
__v347 := __v348 && __v350;
if (__v347) {
__v352 := "normalEmptyCompletion" (V);
return __v352
};
__v353 := "isAnAbruptCompletion" (stmt);
if (__v353) {
return stmt
}
} }
} else {
__v354 := "type" in_obj iterStmt;
__v356 := iterStmt["type"];
__v355 := __v356 = "ForStatement";
__v357 := "init" in_obj iterStmt;
if (true && __v354 && __v355 && __v357) {
Expr_or_VarDecl_or_Null := iterStmt["init"];
__v358 := Expr_or_VarDecl_or_Null = null;
if (__v358) {
__v359 := "JS_Interpreter_ForStmt_Expr" (iterStmt, scope);
return __v359
};
__v360 := "type" in_obj Expr_or_VarDecl_or_Null;
__v362 := Expr_or_VarDecl_or_Null["type"];
__v361 := __v362 = "VariableDeclaration";
if (true && __v360 && __v361) {
__v363 := "JS_Interpreter_ForStmt_VarDecl" (iterStmt, scope);
return __v363
} else {
if (true) {
__v364 := "JS_Interpreter_ForStmt_Expr" (iterStmt, scope);
return __v364
}
}
} else {
__v365 := "type" in_obj iterStmt;
__v367 := iterStmt["type"];
__v366 := __v367 = "ForInStatement";
__v368 := "left" in_obj iterStmt;
if (true && __v365 && __v366 && __v368) {
lhsExpr_or_VarDecl := iterStmt["left"];
__v369 := "type" in_obj lhsExpr_or_VarDecl;
__v371 := lhsExpr_or_VarDecl["type"];
__v370 := __v371 = "VariableDeclaration";
__v372 := "kind" in_obj lhsExpr_or_VarDecl;
__v374 := lhsExpr_or_VarDecl["kind"];
__v373 := __v374 = "var";
if (true && __v369 && __v370 && __v372 && __v373) {
__v375 := "JS_Interpreter_ForInStmt_VarDecl" (iterStmt, scope);
return __v375
} else {
__v376 := "type" in_obj lhsExpr_or_VarDecl;
__v378 := lhsExpr_or_VarDecl["type"];
__v377 := __v378 = "Identifier";
if (true && __v376 && __v377) {
__v379 := "JS_Interpreter_ForInStmt_lhsExpr" (iterStmt, scope);
return __v379
}
}
}
}
}
} };
function InitializeImmutableBindingDeclarative (declarativeEnvRec, N, V) { envRec := declarativeEnvRec;
__v380 := "hasUninitialisedImmutableBinding" (envRec, N);
if (!(__v380)) {
throw "Assert failed: hasUninitialisedImmutableBinding (envRec, N)"
};
__v381 := "setBindingValue" (envRec, N, V);
__v382 := "setBindingInitialised" (envRec, N, true);
return V };
function getBindingValue (envRec, name) { __v383 := envRec[name];
binding := __v383;
__v384 := t_nth(binding, 1);
return __v384 };
function min (a, b) { __v385 := a < b;
if (__v385) {
return a
} else {
return b
} };
function newPropertyReference (base, referencedName, strict) { __v386 := ( "R", "P", base, referencedName, strict );
return __v386 };
function arraySplice (global, this, args) { __v387 := l_nth(args, 0);
start := __v387;
__v388 := l_nth(args, 1);
deleteCount := __v388;
__v390 := tl(args);
__v389 := tl(__v390);
items := __v389;
__v391 := "ToObject" (this);
O := __v391;
__v393 := [  ];
__v392 := "internalNewArray" (__v393);
A := __v392;
__v395 := O["Get"];
__v394 := __v395 (O, "length");
lenVal := __v394;
__v396 := "ToUint32" (lenVal);
len := __v396;
__v397 := "ToInteger" (start);
relativeStart := __v397;
__v398 := relativeStart < 0.;
if (__v398) {
__v400 := len + relativeStart;
__v399 := "max" (__v400, 0.);
actualStart := __v399
} else {
__v401 := "min" (relativeStart, len);
actualStart := __v401
};
__v404 := "ToInteger" (deleteCount);
__v403 := "max" (__v404, 0.);
__v405 := len - actualStart;
__v402 := "min" (__v403, __v405);
actualDeleteCount := __v402;
k := 0.;
__v406 := k < actualDeleteCount;
while (__v406) { __v408 := actualStart + k;
__v407 := "ToString" (__v408);
from := __v407;
__v410 := O["HasProperty"];
__v409 := __v410 (O, from);
fromPresent := __v409;
__v411 := fromPresent = true;
if (__v411) {
__v413 := O["Get"];
__v412 := __v413 (O, from);
fromValue := __v412;
__v414 := "newDataPropertyDescriptorFull" (fromValue, true, true, true);
descriptor := __v414;
__v416 := A["DefineOwnProperty"];
__v417 := "ToString" (k);
__v415 := __v416 (A, __v417, descriptor, false)
};
__v418 := k + 1.;
k := __v418;
__v406 := k < actualDeleteCount };
__v420 := l_len(items);
__v419 := __v420 = 0.;
if (__v419) {
__v421 := [  ];
items := __v421
} else {
items := items
};
__v423 := l_len(items);
__v422 := int_to_float(__v423);
itemCount := __v422;
__v424 := itemCount < actualDeleteCount;
if (__v424) {
k := actualStart;
__v426 := len - actualDeleteCount;
__v425 := k < __v426;
while (__v425) { __v428 := k + actualDeleteCount;
__v427 := "ToString" (__v428);
from := __v427;
__v430 := k + itemCount;
__v429 := "ToString" (__v430);
to := __v429;
__v432 := O["HasProperty"];
__v431 := __v432 (O, from);
fromPresent := __v431;
__v433 := fromPresent = true;
if (__v433) {
__v435 := O["Get"];
__v434 := __v435 (O, from);
fromValue := __v434;
__v437 := O["Put"];
__v436 := __v437 (O, to, fromValue, true)
} else {
__v439 := O["Delete"];
__v438 := __v439 (O, to, true)
};
__v440 := k + 1.;
k := __v440;
__v426 := len - actualDeleteCount;
__v425 := k < __v426 };
k := len;
__v443 := len - actualDeleteCount;
__v442 := __v443 + itemCount;
__v441 := k > __v442;
while (__v441) { __v445 := O["Delete"];
__v447 := k - 1.;
__v446 := "ToString" (__v447);
__v444 := __v445 (O, __v446, true);
__v448 := k - 1.;
k := __v448;
__v443 := len - actualDeleteCount;
__v442 := __v443 + itemCount;
__v441 := k > __v442 }
} else {
__v449 := itemCount > actualDeleteCount;
if (__v449) {
__v450 := len - actualDeleteCount;
k := __v450;
__v451 := k > actualStart;
while (__v451) { __v454 := k + actualDeleteCount;
__v453 := __v454 - 1.;
__v452 := "ToString" (__v453);
from := __v452;
__v457 := k + itemCount;
__v456 := __v457 - 1.;
__v455 := "ToString" (__v456);
to := __v455;
__v459 := O["HasProperty"];
__v458 := __v459 (O, from);
fromPresent := __v458;
__v460 := fromPresent = true;
if (__v460) {
__v462 := O["Get"];
__v461 := __v462 (O, from);
fromValue := __v461;
__v464 := O["Put"];
__v463 := __v464 (O, to, fromValue, true)
} else {
__v466 := O["Delete"];
__v465 := __v466 (O, to, true)
};
__v467 := k - 1.;
k := __v467;
__v451 := k > actualStart }
}
};
k := actualStart;
__v470 := [  ];
__v469 := items = __v470;
__v468 := !(__v469);
while (__v468) { __v471 := hd(items);
E := __v471;
__v472 := tl(items);
items := __v472;
__v474 := O["Put"];
__v475 := "ToString" (k);
__v473 := __v474 (O, __v475, E, true);
__v476 := k + 1.;
k := __v476;
__v470 := [  ];
__v469 := items = __v470;
__v468 := !(__v469) };
__v478 := O["Put"];
__v480 := len - actualDeleteCount;
__v479 := __v480 + itemCount;
__v477 := __v478 (O, "length", __v479, true);
return A };
function JS_Interpreter_UnaryOperator (UnaryExpression, scope) { __v481 := "type" in_obj UnaryExpression;
__v483 := UnaryExpression["type"];
__v482 := __v483 = "UnaryExpression";
__v484 := "operator" in_obj UnaryExpression;
__v486 := UnaryExpression["operator"];
__v485 := __v486 = "delete";
__v487 := "argument" in_obj UnaryExpression;
if (true && __v481 && __v482 && __v484 && __v485 && __v487) {
UnaryExpression := UnaryExpression["argument"];
__v488 := "JS_Interpreter_Expr" (UnaryExpression, scope);
ref := __v488;
__v491 := "Type" (ref);
__v490 := __v491 = "Reference";
__v489 := !(__v490);
if (__v489) {
return true
};
__v492 := "IsUnresolvableReference" (ref);
if (__v492) {
__v494 := "IsStrictReference" (ref);
__v493 := __v494 = true;
if (__v493) {
__v495 := "SyntaxErrorException" ();
throw __v495
} else {
return true
}
};
__v497 := "IsPropertyReference" (ref);
__v496 := __v497 = true;
if (__v496) {
__v500 := "GetBase" (ref);
__v499 := "ToObject" (__v500);
__v501 := "GetReferencedName" (ref);
__v502 := "IsStrictReference" (ref);
__v498 := "Delete" (__v499, __v501, __v502);
return __v498
} else {
__v504 := "IsStrictReference" (ref);
__v503 := __v504 = true;
if (__v503) {
__v505 := "SyntaxErrorException" ();
throw __v505
};
__v506 := "GetBase" (ref);
bindings := __v506;
__v508 := "GetReferencedName" (ref);
__v507 := "DeleteBinding" (bindings, __v508);
return __v507
}
} else {
__v509 := "type" in_obj UnaryExpression;
__v511 := UnaryExpression["type"];
__v510 := __v511 = "UnaryExpression";
__v512 := "operator" in_obj UnaryExpression;
__v514 := UnaryExpression["operator"];
__v513 := __v514 = "void";
__v515 := "argument" in_obj UnaryExpression;
if (true && __v509 && __v510 && __v512 && __v513 && __v515) {
UnaryExpression := UnaryExpression["argument"];
__v516 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v516;
__v517 := "GetValue" (expr);
return 'undefined
} else {
__v518 := "type" in_obj UnaryExpression;
__v520 := UnaryExpression["type"];
__v519 := __v520 = "UnaryExpression";
__v521 := "operator" in_obj UnaryExpression;
__v523 := UnaryExpression["operator"];
__v522 := __v523 = "typeof";
__v524 := "argument" in_obj UnaryExpression;
if (true && __v518 && __v519 && __v521 && __v522 && __v524) {
UnaryExpression := UnaryExpression["argument"];
__v525 := "JS_Interpreter_Expr" (UnaryExpression, scope);
val := __v525;
__v527 := "Type" (val);
__v526 := __v527 = "Reference";
if (__v526) {
__v529 := "IsUnresolvableReference" (val);
__v528 := __v529 = true;
if (__v528) {
return "undefined"
};
__v530 := "GetValue" (val);
val := __v530
};
__v532 := "Type" (val);
__v531 := __v532 = "Undefined";
if (__v531) {
return "undefined"
};
__v534 := "Type" (val);
__v533 := __v534 = "Null";
if (__v533) {
return "object"
};
__v536 := "Type" (val);
__v535 := __v536 = "Boolean";
if (__v535) {
return "boolean"
};
__v538 := "Type" (val);
__v537 := __v538 = "Number";
if (__v537) {
return "number"
};
__v540 := "Type" (val);
__v539 := __v540 = "String";
if (__v539) {
return "string"
};
__v542 := "Type" (val);
__v541 := __v542 = "Object";
if (__v541) {
__v544 := "Call" in_obj val;
__v543 := !(__v544);
if (__v543) {
return "object"
} else {
return "function"
}
}
} else {
__v545 := "type" in_obj UnaryExpression;
__v547 := UnaryExpression["type"];
__v546 := __v547 = "UpdateExpression";
__v548 := "operator" in_obj UnaryExpression;
__v550 := UnaryExpression["operator"];
__v549 := __v550 = "++";
__v551 := "argument" in_obj UnaryExpression;
__v552 := "prefix" in_obj UnaryExpression;
__v554 := UnaryExpression["prefix"];
__v553 := __v554 = true;
if (true && __v545 && __v546 && __v548 && __v549 && __v551 && __v552 && __v553) {
UnaryExpression := UnaryExpression["argument"];
__v555 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v555;
__v560 := "Type" (expr);
__v559 := __v560 = "Reference";
__v562 := "IsStrictReference" (expr);
__v561 := __v562 = true;
__v558 := __v559 && __v561;
__v565 := "GetBase" (expr);
__v564 := "Type" (__v565);
__v563 := __v564 = "EnvironmentRecord";
__v557 := __v558 && __v563;
__v568 := "GetReferencedName" (expr);
__v567 := __v568 = "eval";
__v570 := "GetReferencedName" (expr);
__v569 := __v570 = "arguments";
__v566 := __v567 || __v569;
__v556 := __v557 && __v566;
if (__v556) {
__v571 := "SyntaxErrorException" ();
throw __v571
};
__v573 := "GetValue" (expr);
__v572 := "ToNumber" (__v573);
oldValue := __v572;
__v574 := oldValue + 1;
newValue := __v574;
__v577 := "getLexicalEnvironment" (scope);
__v576 := "getGlobalObject" (__v577);
__v575 := "PutValue" (expr, newValue, __v576);
return newValue
} else {
__v578 := "type" in_obj UnaryExpression;
__v580 := UnaryExpression["type"];
__v579 := __v580 = "UpdateExpression";
__v581 := "operator" in_obj UnaryExpression;
__v583 := UnaryExpression["operator"];
__v582 := __v583 = "--";
__v584 := "argument" in_obj UnaryExpression;
__v585 := "prefix" in_obj UnaryExpression;
__v587 := UnaryExpression["prefix"];
__v586 := __v587 = true;
if (true && __v578 && __v579 && __v581 && __v582 && __v584 && __v585 && __v586) {
UnaryExpression := UnaryExpression["argument"];
__v588 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v588;
__v593 := "Type" (expr);
__v592 := __v593 = "Reference";
__v595 := "IsStrictReference" (expr);
__v594 := __v595 = true;
__v591 := __v592 && __v594;
__v598 := "GetBase" (expr);
__v597 := "Type" (__v598);
__v596 := __v597 = "EnvironmentRecord";
__v590 := __v591 && __v596;
__v601 := "GetReferencedName" (expr);
__v600 := __v601 = "eval";
__v603 := "GetReferencedName" (expr);
__v602 := __v603 = "arguments";
__v599 := __v600 || __v602;
__v589 := __v590 && __v599;
if (__v589) {
__v604 := "SyntaxErrorException" ();
throw __v604
};
__v606 := "GetValue" (expr);
__v605 := "ToNumber" (__v606);
oldValue := __v605;
__v607 := oldValue - 1;
newValue := __v607;
__v610 := "getLexicalEnvironment" (scope);
__v609 := "getGlobalObject" (__v610);
__v608 := "PutValue" (expr, newValue, __v609);
return newValue
} else {
__v611 := "type" in_obj UnaryExpression;
__v613 := UnaryExpression["type"];
__v612 := __v613 = "UnaryExpression";
__v614 := "operator" in_obj UnaryExpression;
__v616 := UnaryExpression["operator"];
__v615 := __v616 = "+";
__v617 := "argument" in_obj UnaryExpression;
if (true && __v611 && __v612 && __v614 && __v615 && __v617) {
UnaryExpression := UnaryExpression["argument"];
__v618 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v618;
__v620 := "GetValue" (expr);
__v619 := "ToNumber" (__v620);
return __v619
} else {
__v621 := "type" in_obj UnaryExpression;
__v623 := UnaryExpression["type"];
__v622 := __v623 = "UnaryExpression";
__v624 := "operator" in_obj UnaryExpression;
__v626 := UnaryExpression["operator"];
__v625 := __v626 = "-";
__v627 := "argument" in_obj UnaryExpression;
if (true && __v621 && __v622 && __v624 && __v625 && __v627) {
UnaryExpression := UnaryExpression["argument"];
__v628 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v628;
__v630 := "GetValue" (expr);
__v629 := "ToNumber" (__v630);
oldValue := __v629;
__v631 := oldValue = nan;
if (__v631) {
return nan
};
__v632 := -(oldValue);
return __v632
} else {
__v633 := "type" in_obj UnaryExpression;
__v635 := UnaryExpression["type"];
__v634 := __v635 = "UnaryExpression";
__v636 := "operator" in_obj UnaryExpression;
__v638 := UnaryExpression["operator"];
__v637 := __v638 = "~";
__v639 := "argument" in_obj UnaryExpression;
if (true && __v633 && __v634 && __v636 && __v637 && __v639) {
UnaryExpression := UnaryExpression["argument"];
__v640 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v640;
__v642 := "GetValue" (expr);
__v641 := "ToInt32" (__v642);
oldValue := __v641;
__v643 := ~(oldValue);
return __v643
} else {
__v644 := "type" in_obj UnaryExpression;
__v646 := UnaryExpression["type"];
__v645 := __v646 = "UnaryExpression";
__v647 := "operator" in_obj UnaryExpression;
__v649 := UnaryExpression["operator"];
__v648 := __v649 = "!";
__v650 := "argument" in_obj UnaryExpression;
if (true && __v644 && __v645 && __v647 && __v648 && __v650) {
UnaryExpression := UnaryExpression["argument"];
__v651 := "JS_Interpreter_Expr" (UnaryExpression, scope);
expr := __v651;
__v653 := "GetValue" (expr);
__v652 := "ToBoolean" (__v653);
oldValue := __v652;
__v654 := oldValue = true;
if (__v654) {
return false
};
return true
}
}
}
}
}
}
}
}
} };
function ArgumentsObjectDefineOwnProperty (argumentsObject, P, Desc, Throw) { __v655 := argumentsObject["ParameterMap"];
map := __v655;
__v656 := "GetOwnProperty" (map, P);
isMapped := __v656;
__v657 := "DefineOwnProperty" (argumentsObject, P, Desc, false);
allowed := __v657;
__v658 := allowed = false;
if (__v658) {
__v659 := Throw = true;
if (__v659) {
__v660 := "TypeErrorException" ();
throw __v660
} else {
return false
}
};
__v662 := isMapped = 'undefined;
__v661 := !(__v662);
if (__v661) {
__v663 := "IsAccessorDescriptor" (Desc);
if (__v663) {
__v664 := "Delete" (map, P, false)
} else {
__v665 := "Value" in_obj Desc;
if (__v665) {
__v667 := Desc["Value"];
__v666 := "Put" (map, P, __v667, Throw)
};
__v669 := "Writable" in_obj Desc;
__v671 := Desc["Writable"];
__v670 := __v671 = false;
__v668 := __v669 && __v670;
if (__v668) {
__v672 := "Delete" (map, P, false)
}
}
};
return true };
function HasBindingObjectEnvRecord (objectEnvRec, N) { envRec := objectEnvRec;
__v673 := "getBindingObject" (envRec);
bindings := __v673;
__v674 := "HasProperty" (bindings, N);
return __v674 };
function JS_Interpreter_SourceElements (SourceElements, scope) { i := 0;
__v675 := l_len(SourceElements);
lSourceElements := __v675;
__v676 := i < lSourceElements;
while (__v676) { __v678 := l_nth(SourceElements, i);
__v677 := "JS_Interpreter_Stmt" (__v678, scope);
result := __v677;
__v679 := "isAnAbruptCompletion" (result);
if (__v679) {
return result
};
__v680 := "getCompletionValue" (result);
V := __v680;
__v681 := i + 1;
i := __v681;
__v676 := i < lSourceElements };
__v683 := "getCompletionType" (result);
__v684 := "getCompletionTarget" (result);
__v682 := "newCompletion" (__v683, V, __v684);
return __v682 };
function setEnvironmentRecord (lexicalEnvironment, environmentRecord) { lexicalEnvironment["EnvRec"] := environmentRecord;
return environmentRecord };
function getFunctionDeclarationsInCode (object) { __v685 := object["functionDeclarations"];
return __v685 };
function arrayToLocaleString (global, this, args) { __v686 := "ToObject" (this);
O := __v686;
__v688 := O["Get"];
__v687 := __v688 (O, "length");
arrayLen := __v687;
__v689 := "ToUint32" (arrayLen);
len := __v689;
separator := ",";
__v690 := len = 0.;
if (__v690) {
return ""
};
__v692 := O["Get"];
__v691 := __v692 (O, "0");
firstElement := __v691;
__v694 := firstElement = 'undefined;
__v695 := firstElement = 'null;
__v693 := __v694 || __v695;
if (__v693) {
R := ""
} else {
__v696 := "ToObject" (firstElement);
elementObj := __v696;
__v698 := elementObj["Get"];
__v697 := __v698 (elementObj, "toLocaleString");
func := __v697;
__v700 := "IsCallable" (func);
__v699 := __v700 = false;
if (__v699) {
__v701 := "TypeErrorException" ();
throw __v701
};
__v703 := func["Call"];
__v704 := [  ];
__v702 := __v703 (func, elementObj, __v704);
R := __v702
};
k := 1;
__v705 := k < len;
while (__v705) { __v707 := [ R, separator ];
__v706 := s_concat(__v707);
S := __v706;
__v709 := O["Get"];
__v710 := "ToString" (k);
__v708 := __v709 (O, __v710);
nextElement := __v708;
__v713 := nextElement = 'undefined;
__v712 := __v713 || nextElement;
__v711 := __v712 = 'null;
if (__v711) {
R := ""
} else {
__v714 := "ToObject" (nextElement);
elementObj := __v714;
__v716 := elementObj["Get"];
__v715 := __v716 (elementObj, "toLocaleString");
func := __v715;
__v718 := "IsCallable" (func);
__v717 := __v718 = false;
if (__v717) {
__v719 := "TypeErrorException" ();
throw __v719
};
__v721 := func["Call"];
__v722 := [  ];
__v720 := __v721 (func, elementObj, __v722);
R := __v720
};
__v724 := [ S, R ];
__v723 := s_concat(__v724);
R := __v723;
__v725 := k + 1;
k := __v725;
__v705 := k < len };
return R };
function arrayEvery (global, this, args) { __v726 := l_nth(args, 0);
callbackfn := __v726;
__v727 := l_nth(args, 1);
thisArg := __v727;
__v728 := "ToObject" (this);
O := __v728;
__v730 := O["Get"];
__v729 := __v730 (O, "length");
lenVal := __v729;
__v731 := "ToUint32" (lenVal);
len := __v731;
__v733 := "IsCallable" (callbackfn);
__v732 := __v733 = false;
if (__v732) {
__v734 := "TypeErrorException" ();
throw __v734
};
__v736 := thisArg = 'undefined;
__v735 := !(__v736);
if (__v735) {
T := thisArg
} else {
T := 'undefined
};
k := 0.;
__v737 := k < len;
while (__v737) { __v738 := "ToString" (k);
Pk := __v738;
__v740 := O["HasProperty"];
__v739 := __v740 (O, Pk);
kPresent := __v739;
__v741 := kPresent = true;
if (__v741) {
__v743 := O["Get"];
__v742 := __v743 (O, Pk);
kValue := __v742;
__v745 := callbackfn["Call"];
__v746 := [ kValue, k, O ];
__v744 := __v745 (callbackfn, T, __v746);
testResult := __v744;
__v748 := "ToBoolean" (testResult);
__v747 := __v748 = false;
if (__v747) {
return false
}
};
__v749 := k + 1.;
k := __v749;
__v737 := k < len };
return true };
function arrayJoin (global, this, args) { __v750 := l_nth(args, 0);
separator := __v750;
__v751 := "ToObject" (this);
O := __v751;
__v753 := O["Get"];
__v752 := __v753 (O, "length");
lenVal := __v752;
__v754 := "ToUint32" (lenVal);
len := __v754;
__v755 := separator = 'undefined;
if (__v755) {
separator := ","
};
__v756 := "ToString" (separator);
sep := __v756;
__v757 := len = 0.;
if (__v757) {
return ""
};
__v759 := O["Get"];
__v758 := __v759 (O, "0");
element0 := __v758;
__v761 := element0 = 'undefined;
__v762 := element0 = 'null;
__v760 := __v761 || __v762;
if (__v760) {
R := ""
} else {
__v763 := "ToString" (element0);
R := __v763
};
k := 1.;
__v764 := k < len;
while (__v764) { __v766 := [ R, sep ];
__v765 := s_concat(__v766);
S := __v765;
__v768 := O["Get"];
__v769 := "ToString" (k);
__v767 := __v768 (O, __v769);
element := __v767;
__v771 := element = 'undefined;
__v772 := element = 'null;
__v770 := __v771 || __v772;
if (__v770) {
next := ""
} else {
__v773 := "ToString" (element);
next := __v773
};
__v775 := [ S, next ];
__v774 := s_concat(__v775);
R := __v774;
__v776 := k + 1.;
k := __v776;
__v764 := k < len };
return R };
function setProvideThis (objectEnvironment, value) { __v777 := "getEnvironmentRecord" (objectEnvironment);
__v777["provideThis"] := value;
return value };
function InitializeImmutableBinding (envRec, N, V) { __v778 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v778) {
__v779 := "InitializeImmutableBindingDeclarative" (envRec, N, V);
return __v779
};
return 'undefined };
function HasProperty (O, P) { print "HasProperty";
__v780 := "GetProperty" (O, P);
desc := __v780;
__v781 := desc = 'undefined;
if (__v781) {
return false
} else {
return true
} };
function Get (O, P) { print "Get";
__v782 := "GetProperty" (O, P);
desc := __v782;
__v783 := desc = 'undefined;
if (__v783) {
return 'undefined
};
__v784 := "IsDataPropertyDescriptor" (desc);
if (__v784) {
__v785 := desc["Value"];
return __v785
} else {
__v786 := desc["Get"];
getter := __v786;
__v787 := getter = 'undefined;
if (__v787) {
return 'undefined
};
__v789 := [  ];
__v788 := "Call" (getter, O, __v789);
return __v788
} };
function applyingTheSubtractionOperation (leftOperand, rightOperand) { __v791 := -(rightOperand);
__v790 := "applyingTheAdditionOperation" (leftOperand, __v791);
return __v790 };
function Put (O, P, V, Throw) { print "Put";
__v793 := "CanPut" (O, P);
__v792 := __v793 = false;
if (__v792) {
if (Throw) {
__v794 := "TypeErrorException" ();
throw __v794
} else {
return 
}
};
__v795 := "GetOwnProperty" (O, P);
ownDesc := __v795;
__v796 := "IsDataPropertyDescriptor" (ownDesc);
if (__v796) {
__v797 := { };
__v797["Value"] := V;
valueDesc := __v797;
__v798 := "DefineOwnProperty" (O, P, valueDesc, Throw);
return 
};
__v799 := "GetProperty" (O, P);
desc := __v799;
__v800 := "IsAccessorPropertyDescriptor" (desc);
if (__v800) {
__v801 := desc["Set"];
setter := __v801;
__v802 := "Call" (setter, O, V)
} else {
__v803 := { };
__v803["Value"] := V;
__v803["Writable"] := true;
__v803["Enumerable"] := true;
__v803["Configurable"] := true;
newDesc := __v803;
__v804 := "DefineOwnProperty" (O, P, newDesc, Throw)
};
return  };
function SortCompare (obj, comparefn, j, k) { __v805 := "ToString" (j);
jString := __v805;
__v806 := "ToString" (k);
kString := __v806;
__v808 := obj["HasProperty"];
__v807 := __v808 (obj, jString);
hasj := __v807;
__v810 := obj["HasProperty"];
__v809 := __v810 (obj, kString);
hask := __v809;
__v812 := hasj = false;
__v813 := hask = false;
__v811 := __v812 && __v813;
if (__v811) {
return 0.
};
__v814 := hasj = false;
if (__v814) {
return 1.
};
__v815 := hask = false;
if (__v815) {
return -1.
};
__v817 := obj["Get"];
__v816 := __v817 (obj, jString);
x := __v816;
__v819 := obj["Get"];
__v818 := __v819 (obj, kString);
y := __v818;
__v821 := x = 'undefined;
__v822 := y = 'undefined;
__v820 := __v821 && __v822;
if (__v820) {
return 0.
};
__v823 := x = 'undefined;
if (__v823) {
return 1.
};
__v824 := y = 'undefined;
if (__v824) {
return -1.
};
__v826 := comparefn = 'undefined;
__v825 := !(__v826);
if (__v825) {
__v828 := "IsCallable" (comparefn);
__v827 := __v828 = false;
if (__v827) {
__v829 := "TypeErrorException" ();
throw __v829
};
__v831 := comparefn["Call"];
__v832 := [ x, y ];
__v830 := __v831 (comparefn, 'undefined, __v832);
return __v830
};
__v833 := "ToString" (x);
xString := __v833;
__v834 := "ToString" (y);
yString := __v834;
__v835 := xString < yString;
if (__v835) {
return -1.
};
__v836 := xString > yString;
if (__v836) {
return 1.
};
return 0. };
function arrayIndexOf (global, this, args) { __v837 := l_nth(args, 0);
searchElement := __v837;
__v838 := l_nth(args, 1);
fromIndex := __v838;
__v839 := "ToObject" (this);
O := __v839;
__v841 := O["Get"];
__v840 := __v841 (O, "length");
lenVal := __v840;
__v842 := "ToUint32" (lenVal);
len := __v842;
__v843 := len = 0.;
if (__v843) {
return -1.
};
__v845 := fromIndex = 'undefined;
__v844 := !(__v845);
if (__v844) {
__v846 := "ToInteger" (fromIndex);
n := __v846
} else {
n := 0.
};
__v847 := n >= len;
if (__v847) {
return -1.
};
__v848 := n >= 0.;
if (__v848) {
k := n
} else {
__v850 := "abs" (n);
__v849 := len - __v850;
k := __v849;
__v851 := k < 0.;
if (__v851) {
k := 0.
}
};
__v852 := k < len;
while (__v852) { __v854 := O["HasProperty"];
__v855 := "ToString" (k);
__v853 := __v854 (O, __v855);
kPresent := __v853;
__v856 := kPresent = true;
if (__v856) {
__v858 := O["Get"];
__v859 := "ToString" (k);
__v857 := __v858 (O, __v859);
elementK := __v857;
__v860 := searchElement = elementK;
same := __v860;
__v861 := same = true;
if (__v861) {
return k
}
};
__v862 := k + 1.;
k := __v862;
__v852 := k < len };
return -1. };
function newImmutableBinding (value) { __v863 := "newBinding" (false, value, false, false);
return __v863 };
function ArgumentsObjectDelete (argumentsObject, P, Throw) { __v864 := argumentsObject["ParameterMap"];
map := __v864;
__v865 := "GetOwnProperty" (map, P);
isMapped := __v865;
__v866 := "Delete" (argumentsObject, P, Throw);
result := __v866;
__v868 := result = true;
__v870 := isMapped = 'undefined;
__v869 := !(__v870);
__v867 := __v868 && __v869;
if (__v867) {
__v871 := "Delete" (map, P, false)
};
return result };
function AbstractRelationalComparison (x, y, LeftFirst) { __v872 := LeftFirst = true;
if (__v872) {
__v873 := "ToPrimitive" (x, 'Number);
px := __v873;
__v874 := "ToPrimitive" (y, 'Number);
py := __v874
} else {
__v875 := "ToPrimitive" (y, 'Number);
py := __v875;
__v876 := "ToPrimitive" (x, 'Number);
px := __v876
};
__v880 := "Type" (px);
__v879 := __v880 = "String";
__v882 := "Type" (py);
__v881 := __v882 = "String";
__v878 := __v879 && __v881;
__v877 := !(__v878);
if (__v877) {
__v883 := "ToNumber" (px);
nx := __v883;
__v884 := "ToNumber" (py);
ny := __v884;
__v885 := nx = nan;
if (__v885) {
return 'undefined
};
__v886 := ny = nan;
if (__v886) {
return 'undefined
};
__v887 := nx = ny;
if (__v887) {
return false
};
__v889 := nx = 0.;
__v890 := ny = -0.;
__v888 := __v889 && __v890;
if (__v888) {
return false
};
__v892 := nx = -0.;
__v893 := ny = 0.;
__v891 := __v892 && __v893;
if (__v891) {
return false
};
__v894 := nx = inf;
if (__v894) {
return false
};
__v895 := ny = inf;
if (__v895) {
return true
};
__v897 := -(inf);
__v896 := ny = __v897;
if (__v896) {
return false
};
__v899 := -(inf);
__v898 := nx = __v899;
if (__v898) {
return true
};
__v900 := nx < ny;
if (__v900) {
return true
};
return false
} else {
__v901 := px < py;
if (__v901) {
return true
};
return false
} };
function getCompletionType (completion) { __v902 := t_nth(completion, 1);
return __v902 };
function ToNumber (argument) { __v903 := "Type" (argument);
argument_type := __v903;
__v904 := argument_type = "Undefined";
if (__v904) {
return nan
};
__v905 := argument_type = "Null";
if (__v905) {
return 0
};
__v906 := argument_type = "Boolean";
if (__v906) {
__v907 := argument = true;
if (__v907) {
__v908 := int_to_float(1);
return __v908
};
return 0
};
__v909 := argument_type = "Number";
if (__v909) {
return argument
};
__v910 := argument_type = "String";
if (__v910) {
__v911 := float_of_string(argument);
return __v911
};
__v912 := argument_type = "Object";
if (__v912) {
__v913 := "ToPrimitive" (argument, 'Number);
primValue := __v913;
__v914 := "ToNumber" (primValue);
return __v914
} };
function maskOutBits (num) { __v916 := int_to_float(31);
__v915 := num & __v916;
v := __v915;
return v };
function setBindingInitialised (envRec, name, initialised) { __v917 := envRec[name];
binding := __v917;
__v919 := t_nth(binding, 1);
__v920 := t_nth(binding, 2);
__v921 := t_nth(binding, 3);
__v918 := "newBinding" (initialised, __v919, __v920, __v921);
newBinding := __v918;
envRec[name] := newBinding;
return  };
function hasUninitialisedImmutableBinding (envRec, name) { __v923 := name in_obj envRec;
if (__v923 = false) {
__v922 := false
} else {
__v924 := "isUninitialisedBinding" (envRec, name);
if (__v924 = false) {
__v922 := false
} else {
__v922 := true
}
};
return __v922 };
function HasPrimitiveBase (V) { print "HasPrimitiveBase";
__v929 := "GetBase" (V);
__v928 := "Type" (__v929);
__v927 := __v928 = "Boolean";
__v932 := "GetBase" (V);
__v931 := "Type" (__v932);
__v930 := __v931 = "String";
__v926 := __v927 || __v930;
__v935 := "GetBase" (V);
__v934 := "Type" (__v935);
__v933 := __v934 = "Number";
__v925 := __v926 || __v933;
if (__v925) {
return true
} else {
return false
} };
function JS_Interpreter_SwitchStatement (switchStmt, scope) { __v936 := "type" in_obj switchStmt;
__v938 := switchStmt["type"];
__v937 := __v938 = "SwitchStatement";
__v939 := "discriminant" in_obj switchStmt;
__v940 := "cases" in_obj switchStmt;
__v941 := "labelSet" in_obj switchStmt;
if (true && __v936 && __v937 && __v939 && __v940 && __v941) {
Expression := switchStmt["discriminant"];
CaseBlock := switchStmt["cases"];
currentLabelSet := switchStmt["labelSet"];
__v942 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v942;
__v944 := "GetValue" (exprRef);
__v943 := "JS_Interpreter_CaseBlock" (CaseBlock, __v944, scope);
R := __v943;
__v947 := "getCompletionType" (R);
__v946 := __v947 = 'break;
__v949 := "getCompletionTarget" (R);
__v948 := __v949 in_list currentLabelSet;
__v945 := __v946 && __v948;
if (__v945) {
__v951 := "getCompletionValue" (R);
__v950 := "normalEmptyCompletion" (__v951);
return __v950
};
return R
} };
function IsAccessorPropertyDescriptor (Desc) { __v952 := Desc = 'undefined;
if (__v952) {
return false
};
__v955 := "Get" in_obj Desc;
__v954 := !(__v955);
__v957 := "Set" in_obj Desc;
__v956 := !(__v957);
__v953 := __v954 && __v956;
if (__v953) {
return false
};
return true };
function newCompletion (type, value, target) { __v958 := ( "C", type, value, target );
return __v958 };
function arrayConcat (global, this, items) { __v959 := "ToObject" (this);
O := __v959;
__v961 := [  ];
__v960 := "internalNewArray" (__v961);
A := __v960;
__v962 := int_to_float(0);
n := __v962;
__v963 := l_prepend(O, items);
items := __v963;
__v966 := [  ];
__v965 := items = __v966;
__v964 := !(__v965);
while (__v964) { __v967 := hd(items);
E := __v967;
__v968 := tl(items);
items := __v968;
__v970 := E["Class"];
__v969 := __v970 = "Array";
if (__v969) {
__v971 := int_to_float(0);
k := __v971;
__v973 := E["Get"];
__v972 := __v973 (E, "length");
len := __v972;
__v974 := k < len;
while (__v974) { __v975 := "ToString" (k);
P := __v975;
__v977 := E["HasProperty"];
__v976 := __v977 (E, P);
exists := __v976;
__v978 := exists = true;
if (__v978) {
__v980 := E["Get"];
__v979 := __v980 (E, P);
subElement := __v979;
__v981 := "newDataPropertyDescriptorFull" (subElement, true, true, true);
descriptor := __v981;
__v983 := A["DefineOwnProperty"];
__v984 := "ToString" (n);
__v982 := __v983 (A, __v984, descriptor, false)
};
__v985 := n + 1;
n := __v985;
__v986 := k + 1;
k := __v986;
__v974 := k < len }
} else {
__v987 := "newDataPropertyDescriptorFull" (E, true, true, true);
descriptor := __v987;
__v989 := A["DefineOwnProperty"];
__v990 := "ToString" (n);
__v988 := __v989 (A, __v990, descriptor, false);
__v991 := n + 1;
n := __v991
};
__v966 := [  ];
__v965 := items = __v966;
__v964 := !(__v965) };
return A };
function CheckObjectCoercible (V) { __v992 := "Type" (V);
v_type := __v992;
__v994 := v_type = "Undefined";
__v995 := v_type = "Null";
__v993 := __v994 || __v995;
if (__v993) {
__v996 := "TypeErrorException" ();
throw __v996
};
return  };
function setBindingValue (envRec, name, value) { __v997 := envRec[name];
binding := __v997;
__v999 := t_nth(binding, 0);
__v1000 := t_nth(binding, 2);
__v1001 := t_nth(binding, 3);
__v998 := "newBinding" (__v999, value, __v1000, __v1001);
newBinding := __v998;
envRec[name] := newBinding;
return  };
function FromPropertyDescriptor (Desc) { __v1002 := Desc = 'undefined;
if (__v1002) {
return 'undefined
};
__v1003 := "NewObject" ();
obj := __v1003;
__v1004 := "IsDataPropertyDescriptor" (Desc);
if (__v1004) {
__v1006 := { };
__v1007 := Desc["Value"];
__v1006["Value"] := __v1007;
__v1006["Writable"] := true;
__v1006["Enumerable"] := true;
__v1006["Configurable"] := true;
__v1005 := "DefineOwnProperty" (obj, "value", __v1006, false);
__v1009 := { };
__v1010 := Desc["Writable"];
__v1009["Value"] := __v1010;
__v1009["Writable"] := true;
__v1009["Enumerable"] := true;
__v1009["Configurable"] := true;
__v1008 := "DefineOwnProperty" (obj, "writable", __v1009, false)
} else {
__v1012 := { };
__v1013 := Desc["Get"];
__v1012["Value"] := __v1013;
__v1012["Writable"] := true;
__v1012["Enumerable"] := true;
__v1012["Configurable"] := true;
__v1011 := "DefineOwnProperty" (obj, "get", __v1012, false);
__v1015 := { };
__v1016 := Desc["Set"];
__v1015["Value"] := __v1016;
__v1015["Writable"] := true;
__v1015["Enumerable"] := true;
__v1015["Configurable"] := true;
__v1014 := "DefineOwnProperty" (obj, "set", __v1015, false)
};
__v1018 := { };
__v1019 := Desc["Enumerable"];
__v1018["Value"] := __v1019;
__v1018["Writable"] := true;
__v1018["Enumerable"] := true;
__v1018["Configurable"] := true;
__v1017 := "DefineOwnProperty" (obj, "enumerable", __v1018, false);
__v1021 := { };
__v1022 := Desc["Configurable"];
__v1021["Value"] := __v1022;
__v1021["Writable"] := true;
__v1021["Enumerable"] := true;
__v1021["Configurable"] := true;
__v1020 := "DefineOwnProperty" (obj, "configurable", __v1021, false);
return obj };
function arrayReduce (global, this, args) { __v1023 := l_nth(args, 0);
callbackfn := __v1023;
__v1024 := l_nth(args, 1);
initialValue := __v1024;
__v1025 := "ToObject" (this);
O := __v1025;
__v1027 := O["Get"];
__v1026 := __v1027 (O, "length");
lenVal := __v1026;
__v1028 := "ToUint32" (lenVal);
len := __v1028;
__v1030 := "IsCallable" (callbackfn);
__v1029 := __v1030 = false;
if (__v1029) {
__v1031 := "TypeErrorException" ();
throw __v1031
};
__v1033 := len = 0;
__v1034 := initialValue = 'undefined;
__v1032 := __v1033 && __v1034;
if (__v1032) {
__v1035 := "TypeErrorException" ();
throw __v1035
};
k := 0.;
__v1037 := initialValue = 'undefined;
__v1036 := !(__v1037);
if (__v1036) {
accumulator := initialValue
} else {
kPresent := false;
__v1039 := kPresent = false;
__v1040 := k < len;
__v1038 := __v1039 && __v1040;
while (__v1038) { __v1041 := "ToString" (k);
Pk := __v1041;
__v1043 := O["HasProperty"];
__v1042 := __v1043 (O, Pk);
kPresent := __v1042;
__v1044 := kPresent = true;
if (__v1044) {
__v1046 := O["Get"];
__v1045 := __v1046 (O, Pk);
accumulator := __v1045
};
__v1047 := k + 1.;
k := __v1047;
__v1039 := kPresent = false;
__v1040 := k < len;
__v1038 := __v1039 && __v1040 };
__v1048 := kPresent = false;
if (__v1048) {
__v1049 := "TypeErrorException" ();
throw __v1049
}
};
__v1050 := k < len;
while (__v1050) { __v1051 := "ToString" (k);
Pk := __v1051;
__v1053 := O["HasProperty"];
__v1052 := __v1053 (O, Pk);
kPresent := __v1052;
__v1054 := kPresent = true;
if (__v1054) {
__v1056 := O["Get"];
__v1055 := __v1056 (O, Pk);
kValue := __v1055;
__v1058 := callbackfn["Call"];
__v1059 := [ accumulator, kValue, k, O ];
__v1057 := __v1058 (callbackfn, 'undefined, __v1059);
accumulator := __v1057
};
__v1060 := k + 1.;
k := __v1060;
__v1050 := k < len };
return accumulator };
function JS_Interpreter_PropertyName (PropertyName, scope) { __v1061 := "type" in_obj PropertyName;
__v1063 := PropertyName["type"];
__v1062 := __v1063 = "Identifier";
__v1064 := "name" in_obj PropertyName;
if (true && __v1061 && __v1062 && __v1064) {
IdentifierName := PropertyName["name"];
return IdentifierName
} else {
__v1065 := "type" in_obj PropertyName;
__v1067 := PropertyName["type"];
__v1066 := __v1067 = "Literal";
__v1068 := "value" in_obj PropertyName;
if (true && __v1065 && __v1066 && __v1068) {
Literal := PropertyName["value"];
__v1070 := typeof(Literal);
__v1069 := __v1070 = __$Str;
if (__v1069) {
return Literal
};
__v1071 := "formingTheValueOfTheNumericLiteral" (Literal);
nbr := __v1071;
__v1072 := "ToString" (nbr);
return __v1072
}
} };
function abs (a) { __v1073 := a < 0;
if (__v1073) {
__v1074 := a * -1;
return __v1074
} else {
return a
} };
function isStrictFunctionObject (F) { __v1075 := F["strict"];
return __v1075 };
function JS_Interpreter_StmtList (stmts, scope) { V := 'empty;
i := 0;
__v1076 := l_len(stmts);
lstmts := __v1076;
__v1077 := i < lstmts;
while (__v1077) { __v1079 := l_nth(stmts, i);
__v1078 := "JS_Interpreter_Stmt" (__v1079, scope);
stmt := __v1078;
__v1080 := "isAnAbruptCompletion" (stmt);
if (__v1080) {
return stmt
};
__v1083 := "getCompletionValue" (stmt);
__v1082 := __v1083 = 'empty;
__v1081 := !(__v1082);
if (__v1081) {
__v1084 := "getCompletionValue" (stmt);
V := __v1084
};
__v1085 := i + 1;
i := __v1085;
__v1077 := i < lstmts };
__v1087 := "getCompletionType" (stmt);
__v1088 := "getCompletionTarget" (stmt);
__v1086 := "newCompletion" (__v1087, V, __v1088);
return __v1086 };
function IsPrimitiveValue (v) { __v1089 := "Type" (v);
v_type := __v1089;
__v1090 := v_type = "Object";
if (__v1090) {
return false
} else {
return true
} };
function Get_internal (base, P) { __v1091 := "ToObject" (base);
O := __v1091;
__v1092 := "GetProperty" (O, P);
desc := __v1092;
__v1093 := desc = 'undefined;
if (__v1093) {
return 'undefined
};
__v1095 := "IsDataPropertyDescriptor" (desc);
__v1094 := __v1095 = true;
if (__v1094) {
__v1096 := desc["Value"];
return __v1096
} else {
__v1097 := desc["Get"];
getter := __v1097
};
__v1098 := getter = 'undefined;
if (__v1098) {
return 'undefined
};
__v1100 := [  ];
__v1099 := "Call" (getter, base, __v1100);
return __v1099 };
function newDataPropertyDescriptor (value) { __v1101 := "NewPropertyDescriptor" ();
desc := __v1101;
desc["Value"] := value;
desc["Writable"] := true;
desc["Enumerable"] := true;
desc["Configurable"] := true;
return desc };
function JS_Interpreter_ForStmt_Expr (forStmt, scope) { __v1102 := "type" in_obj forStmt;
__v1104 := forStmt["type"];
__v1103 := __v1104 = "ForStatement";
__v1105 := "init" in_obj forStmt;
__v1106 := "test" in_obj forStmt;
__v1107 := "update" in_obj forStmt;
__v1108 := "body" in_obj forStmt;
__v1109 := "labelSet" in_obj forStmt;
if (true && __v1102 && __v1103 && __v1105 && __v1106 && __v1107 && __v1108 && __v1109) {
ExpressionNoIn := forStmt["init"];
Expression1 := forStmt["test"];
Expression2 := forStmt["update"];
Statement := forStmt["body"];
currentLabelSet := forStmt["labelSet"];
__v1111 := ExpressionNoIn = null;
__v1110 := !(__v1111);
if (__v1110) {
__v1112 := "JS_Interpreter_Expr" (ExpressionNoIn, scope);
exprRef := __v1112;
__v1113 := "GetValue" (exprRef)
};
V := 'empty;
__v1115 := Expression1 = null;
__v1114 := !(__v1115);
if (__v1114) {
__v1116 := "JS_Interpreter_Expr" (Expression1, scope);
testExprRef := __v1116;
__v1119 := "GetValue" (testExprRef);
__v1118 := "ToBoolean" (__v1119);
__v1117 := __v1118 = false;
if (__v1117) {
__v1120 := "normalEmptyCompletion" (V);
return __v1120
}
};
__v1121 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v1121;
__v1124 := "getCompletionValue" (stmt);
__v1123 := __v1124 = 'empty;
__v1122 := !(__v1123);
if (__v1122) {
__v1126 := "getCompletionValue" (stmt);
__v1125 := V = __v1126
};
__v1129 := "getCompletionType" (stmt);
__v1128 := __v1129 = 'break;
__v1131 := "getCompletionTarget" (stmt);
__v1130 := __v1131 in_list currentLabelSet;
__v1127 := __v1128 && __v1130;
if (__v1127) {
__v1132 := "normalEmptyCompletion" (V);
return __v1132
};
__v1136 := "getCompletionType" (stmt);
__v1135 := __v1136 = 'continue;
__v1134 := !(__v1135);
__v1139 := "getCompletionTarget" (stmt);
__v1138 := __v1139 in_list currentLabelSet;
__v1137 := !(__v1138);
__v1133 := __v1134 || __v1137;
if (__v1133) {
__v1140 := "isAnAbruptCompletion" (stmt);
if (__v1140) {
return stmt
}
};
__v1142 := Expression2 = null;
__v1141 := !(__v1142);
if (__v1141) {
__v1143 := "JS_Interpreter_Expr" (Expression2, scope);
incExprRef := __v1143;
__v1144 := "GetValue" (incExprRef)
};
while (!(false)) { __v1115 := Expression1 = null;
__v1114 := !(__v1115);
if (__v1114) {
__v1116 := "JS_Interpreter_Expr" (Expression1, scope);
testExprRef := __v1116;
__v1119 := "GetValue" (testExprRef);
__v1118 := "ToBoolean" (__v1119);
__v1117 := __v1118 = false;
if (__v1117) {
__v1120 := "normalEmptyCompletion" (V);
return __v1120
}
};
__v1121 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v1121;
__v1124 := "getCompletionValue" (stmt);
__v1123 := __v1124 = 'empty;
__v1122 := !(__v1123);
if (__v1122) {
__v1126 := "getCompletionValue" (stmt);
__v1125 := V = __v1126
};
__v1129 := "getCompletionType" (stmt);
__v1128 := __v1129 = 'break;
__v1131 := "getCompletionTarget" (stmt);
__v1130 := __v1131 in_list currentLabelSet;
__v1127 := __v1128 && __v1130;
if (__v1127) {
__v1132 := "normalEmptyCompletion" (V);
return __v1132
};
__v1136 := "getCompletionType" (stmt);
__v1135 := __v1136 = 'continue;
__v1134 := !(__v1135);
__v1139 := "getCompletionTarget" (stmt);
__v1138 := __v1139 in_list currentLabelSet;
__v1137 := !(__v1138);
__v1133 := __v1134 || __v1137;
if (__v1133) {
__v1140 := "isAnAbruptCompletion" (stmt);
if (__v1140) {
return stmt
}
};
__v1142 := Expression2 = null;
__v1141 := !(__v1142);
if (__v1141) {
__v1143 := "JS_Interpreter_Expr" (Expression2, scope);
incExprRef := __v1143;
__v1144 := "GetValue" (incExprRef)
} }
} };
function getPropertyDescriptor (propertyIdentifier) { __v1145 := t_nth(propertyIdentifier, 2);
return __v1145 };
function CreateMutableBindingObject (objectEnvRec, N, D) { envRec := objectEnvRec;
__v1146 := "getBindingObject" (envRec);
bindings := __v1146;
__v1148 := "HasProperty" (bindings, N);
__v1147 := __v1148 = false;
if (!(__v1147)) {
throw "Assert failed: HasProperty (bindings, N) = false"
};
__v1149 := D = true;
if (__v1149) {
configValue := true
} else {
configValue := false
};
__v1151 := { };
__v1151["Value"] := 'undefined;
__v1151["Writable"] := true;
__v1151["Enumerable"] := true;
__v1151["Configurable"] := configValue;
__v1150 := "DefineOwnProperty" (bindings, N, __v1151, true);
return 'undefined };
function JS_Interpreter_ForInStmt_VarDecl (forInStmt, scope) { __v1152 := "type" in_obj forInStmt;
__v1154 := forInStmt["type"];
__v1153 := __v1154 = "ForInStatement";
__v1155 := "left" in_obj forInStmt;
__v1156 := "right" in_obj forInStmt;
__v1157 := "body" in_obj forInStmt;
__v1158 := "labelSet" in_obj forInStmt;
if (true && __v1152 && __v1153 && __v1155 && __v1156 && __v1157 && __v1158) {
VariableDeclarationNoIn := forInStmt["left"];
Expression := forInStmt["right"];
Statement := forInStmt["body"];
currentLabelSet := forInStmt["labelSet"];
__v1159 := "JS_Interpreter_VarDecl" (VariableDeclarationNoIn, scope);
varName := __v1159;
__v1160 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v1160;
__v1161 := "GetValue" (exprRef);
experValue := __v1161;
__v1163 := experValue = 'null;
__v1164 := experValue = 'undefined;
__v1162 := __v1163 || __v1164;
if (__v1162) {
__v1165 := "normalEmptyCompletion" ('empty);
return __v1165
};
__v1166 := "ToObject" (experValue);
obj := __v1166;
V := 'empty;
i := 0;
__v1168 := [  ];
__v1167 := "getEnumerableProperties" (obj, __v1168);
obj_enums := __v1167;
__v1169 := "getNextPropertyName" (obj_enums, i);
P := __v1169;
__v1170 := i + 1;
i := __v1170;
__v1171 := P = "None";
if (__v1171) {
__v1172 := "normalEmptyCompletion" (V);
return __v1172
};
__v1173 := "JS_Interpreter_Expr" (varName, scope);
varRef := __v1173;
__v1176 := "getLexicalEnvironment" (scope);
__v1175 := "getGlobalObject" (__v1176);
__v1174 := "PutValue" (varRef, P, __v1175);
__v1177 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v1177;
__v1180 := "getCompletionValue" (stmt);
__v1179 := __v1180 = 'empty;
__v1178 := !(__v1179);
if (__v1178) {
__v1181 := "getCompletionValue" (stmt);
V := __v1181
};
__v1184 := "getCompletionType" (stmt);
__v1183 := __v1184 = 'break;
__v1186 := "getCompletionTarget" (stmt);
__v1185 := __v1186 in_list currentLabelSet;
__v1182 := __v1183 && __v1185;
if (__v1182) {
__v1187 := "normalEmptyCompletion" (V);
return __v1187
};
__v1191 := "getCompletionType" (stmt);
__v1190 := __v1191 = 'continue;
__v1189 := !(__v1190);
__v1194 := "getCompletionTarget" (stmt);
__v1193 := __v1194 in_list currentLabelSet;
__v1192 := !(__v1193);
__v1188 := __v1189 || __v1192;
if (__v1188) {
__v1195 := "isAnAbruptCompletion" (stmt);
if (__v1195) {
return stmt
}
};
while (!(false)) { __v1169 := "getNextPropertyName" (obj_enums, i);
P := __v1169;
__v1170 := i + 1;
i := __v1170;
__v1171 := P = "None";
if (__v1171) {
__v1172 := "normalEmptyCompletion" (V);
return __v1172
};
__v1173 := "JS_Interpreter_Expr" (varName, scope);
varRef := __v1173;
__v1176 := "getLexicalEnvironment" (scope);
__v1175 := "getGlobalObject" (__v1176);
__v1174 := "PutValue" (varRef, P, __v1175);
__v1177 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v1177;
__v1180 := "getCompletionValue" (stmt);
__v1179 := __v1180 = 'empty;
__v1178 := !(__v1179);
if (__v1178) {
__v1181 := "getCompletionValue" (stmt);
V := __v1181
};
__v1184 := "getCompletionType" (stmt);
__v1183 := __v1184 = 'break;
__v1186 := "getCompletionTarget" (stmt);
__v1185 := __v1186 in_list currentLabelSet;
__v1182 := __v1183 && __v1185;
if (__v1182) {
__v1187 := "normalEmptyCompletion" (V);
return __v1187
};
__v1191 := "getCompletionType" (stmt);
__v1190 := __v1191 = 'continue;
__v1189 := !(__v1190);
__v1194 := "getCompletionTarget" (stmt);
__v1193 := __v1194 in_list currentLabelSet;
__v1192 := !(__v1193);
__v1188 := __v1189 || __v1192;
if (__v1188) {
__v1195 := "isAnAbruptCompletion" (stmt);
if (__v1195) {
return stmt
}
} }
} };
function createMutableBinding (declarativeEnvRec, name, value) { __v1196 := "newMutableBinding" (value);
declarativeEnvRec[name] := __v1196;
return  };
function DefineOwnPropertyArray (A, P, Desc, Throw) { __v1198 := A["GetOwnProperty"];
__v1197 := __v1198 (A, "length");
oldLenDesc := __v1197;
__v1199 := oldLenDesc["Value"];
oldLen := __v1199;
__v1200 := P = "length";
if (__v1200) {
__v1202 := "Value" in_obj Desc;
__v1201 := !(__v1202);
if (__v1201) {
__v1203 := "DefineOwnProperty" (A, "length", Desc, Throw);
return __v1203
};
__v1204 := "CopyDescriptor" (Desc);
newLenDesc := __v1204;
__v1206 := Desc["Value"];
__v1205 := "ToUint32" (__v1206);
newLen := __v1205;
__v1210 := Desc["Value"];
__v1209 := "ToNumber" (__v1210);
__v1208 := newLen = __v1209;
__v1207 := !(__v1208);
if (__v1207) {
__v1211 := "RangeErrorException" ();
throw __v1211
};
newLenDesc["Value"] := newLen;
__v1212 := newLen >= oldLen;
if (__v1212) {
__v1213 := "DefineOwnProperty" (A, "length", newLenDesc, Throw);
return __v1213
};
__v1215 := oldLenDesc["Writable"];
__v1214 := __v1215 = false;
if (__v1214) {
__v1216 := "Reject" (Throw)
};
__v1220 := "Writable" in_obj newLenDesc;
__v1219 := !(__v1220);
__v1221 := newLenDesc["Writable"];
__v1218 := __v1219 || __v1221;
__v1217 := __v1218 = true;
if (__v1217) {
newWritable := true
} else {
newWritable := false;
newLenDesc["Writable"] := true
};
__v1222 := "DefineOwnProperty" (A, "length", newLenDesc, Throw);
succeeded := __v1222;
__v1223 := succeeded = false;
if (__v1223) {
return false
};
__v1224 := newLen < oldLen;
while (__v1224) { __v1225 := oldLen - 1.;
oldLen := __v1225;
__v1227 := A["Delete"];
__v1228 := "ToString" (oldLen);
__v1226 := __v1227 (A, __v1228, false);
deleteSucceeded := __v1226;
__v1229 := deleteSucceeded = false;
if (__v1229) {
__v1230 := oldLen + 1.;
newLenDesc["Value"] := __v1230;
__v1231 := newWritable = false;
if (__v1231) {
newLenDesc["Writable"] := false
};
__v1232 := "DefineOwnProperty" (A, "length", newLenDesc, false);
__v1233 := "Reject" (Throw)
};
__v1224 := newLen < oldLen };
__v1234 := newWritable = false;
if (__v1234) {
throw "TODO"
};
return true
} else {
__v1235 := "IsArrayIndex" (P);
if (__v1235) {
__v1236 := "ToUint32" (P);
index := __v1236;
__v1239 := index >= oldLen;
__v1240 := oldLenDesc["Writable"];
__v1238 := __v1239 && __v1240;
__v1237 := __v1238 = false;
if (__v1237) {
__v1241 := "Reject" (Throw)
};
__v1242 := "DefineOwnProperty" (A, P, Desc, false);
succeeded := __v1242;
__v1243 := succeeded = false;
if (__v1243) {
__v1244 := "Reject" (Throw)
};
__v1245 := index >= oldLen;
if (__v1245) {
__v1246 := index + 1.;
oldLenDesc["Value"] := __v1246;
__v1247 := "DefineOwnProperty" (A, "length", oldLenDesc, false)
};
return true
}
};
__v1248 := "DefineOwnProperty" (A, P, Desc, Throw);
return __v1248 };
function GetReferencedName (V) { print "GetReferencedName";
__v1249 := t_nth(V, 3);
return __v1249 };
function SetMutableBindingObject (objectEnvRec, N, V, S) { envRec := objectEnvRec;
__v1250 := "getBindingObject" (envRec);
bindings := __v1250;
__v1251 := "Put" (bindings, N, V, S);
return V };
function ToPropertyDescriptor (Obj) { __v1254 := "Type" (Obj);
__v1253 := __v1254 = "Object";
__v1252 := !(__v1253);
if (__v1252) {
__v1255 := "TypeErrorException" ();
throw __v1255
};
__v1256 := "NewPropertyDescriptor" ();
desc := __v1256;
__v1258 := "HasProperty" (Obj, "enumerable");
__v1257 := __v1258 = true;
if (__v1257) {
__v1259 := "Get" (Obj, "enumerable");
enum := __v1259;
__v1260 := "ToBoolean" (enum);
desc["Enumerable"] := __v1260
};
__v1262 := "HasProperty" (Obj, "configurable");
__v1261 := __v1262 = true;
if (__v1261) {
__v1263 := "Get" (Obj, "configurable");
conf := __v1263;
__v1264 := "ToBoolean" (conf);
desc["Configurable"] := __v1264
};
__v1266 := "HasProperty" (Obj, "value");
__v1265 := __v1266 = true;
if (__v1265) {
__v1267 := "Get" (Obj, "value");
value := __v1267;
desc["Value"] := value
};
__v1269 := "HasProperty" (Obj, "writable");
__v1268 := __v1269 = true;
if (__v1268) {
__v1270 := "Get" (Obj, "writable");
writable := __v1270;
__v1271 := "ToBoolean" (writable);
desc["Writable"] := __v1271
};
__v1273 := "HasProperty" (Obj, "get");
__v1272 := __v1273 = true;
if (__v1272) {
__v1274 := "Get" (Obj, "get");
getter := __v1274;
__v1277 := "IsCallable" (getter);
__v1276 := __v1277 = false;
__v1279 := getter = 'undefined;
__v1278 := !(__v1279);
__v1275 := __v1276 && __v1278;
if (__v1275) {
__v1280 := "TypeErrorException" ();
throw __v1280
};
desc["Get"] := getter
};
__v1282 := "HasProperty" (Obj, "set");
__v1281 := __v1282 = true;
if (__v1281) {
__v1283 := "Get" (Obj, "set");
setter := __v1283;
__v1286 := "IsCallable" (setter);
__v1285 := __v1286 = false;
__v1288 := setter = 'undefined;
__v1287 := !(__v1288);
__v1284 := __v1285 && __v1287;
if (__v1284) {
__v1289 := "TypeErrorException" ();
throw __v1289
};
desc["Set"] := setter
};
__v1291 := "Get" in_obj desc;
__v1292 := "Set" in_obj desc;
__v1290 := __v1291 || __v1292;
if (__v1290) {
__v1294 := "Value" in_obj desc;
__v1295 := "Writable" in_obj desc;
__v1293 := __v1294 || __v1295;
if (__v1293) {
__v1296 := "TypeErrorException" ();
throw __v1296
}
};
return desc };
function ImplicitThisValueObject (objectEnvRec) { envRec := objectEnvRec;
__v1298 := "getProvideThis" (objectEnvRec);
__v1297 := __v1298 = true;
if (__v1297) {
__v1299 := "getBindingObject" (objectEnvRec);
return __v1299
} else {
return 'undefined
} };
function buildAST () { __v1300 := { };
__v0 := __v1300;
__v0["type"] := "Program";
__v1301 := { };
__v2 := __v1301;
__v2["type"] := "VariableDeclaration";
__v1302 := { };
__v4 := __v1302;
__v4["type"] := "VariableDeclarator";
__v1303 := { };
__v5 := __v1303;
__v5["type"] := "Identifier";
__v5["name"] := "arr";
__v4["id"] := __v5;
__v1304 := { };
__v6 := __v1304;
__v6["type"] := "ArrayExpression";
__v1305 := { };
__v8 := __v1305;
__v8["type"] := "Literal";
__v8["value"] := 1;
__v8["raw"] := "1";
__v1306 := { };
__v9 := __v1306;
__v9["type"] := "Literal";
__v9["value"] := 2;
__v9["raw"] := "2";
__v1307 := [ __v8, __v9 ];
__v7 := __v1307;
__v6["elements"] := __v7;
__v4["init"] := __v6;
__v1308 := [ __v4 ];
__v3 := __v1308;
__v2["declarations"] := __v3;
__v2["kind"] := "var";
__v1309 := { };
__v10 := __v1309;
__v10["type"] := "ExpressionStatement";
__v1310 := { };
__v11 := __v1310;
__v11["type"] := "CallExpression";
__v1311 := { };
__v12 := __v1311;
__v12["type"] := "MemberExpression";
__v1312 := { };
__v13 := __v1312;
__v13["type"] := "Identifier";
__v13["name"] := "arr";
__v12["object"] := __v13;
__v1313 := { };
__v14 := __v1313;
__v14["type"] := "Literal";
__v14["value"] := "push";
__v14["raw"] := "\"push\"";
__v12["property"] := __v14;
__v12["computed"] := true;
__v11["callee"] := __v12;
__v1314 := { };
__v16 := __v1314;
__v16["type"] := "Literal";
__v16["value"] := 3;
__v16["raw"] := "3";
__v1315 := [ __v16 ];
__v15 := __v1315;
__v11["arguments"] := __v15;
__v10["expression"] := __v11;
__v1316 := { };
__v17 := __v1316;
__v17["type"] := "ExpressionStatement";
__v1317 := { };
__v18 := __v1317;
__v18["type"] := "MemberExpression";
__v18["computed"] := true;
__v1318 := { };
__v19 := __v1318;
__v19["type"] := "Identifier";
__v19["name"] := "arr";
__v18["object"] := __v19;
__v1319 := { };
__v20 := __v1319;
__v20["type"] := "Literal";
__v20["value"] := 2;
__v20["raw"] := "2";
__v18["property"] := __v20;
__v17["expression"] := __v18;
__v1320 := [ __v2, __v10, __v17 ];
__v1 := __v1320;
__v0["body"] := __v1;
__v0["sourceType"] := "script";
__v1321 := [ "arr" ];
__v21 := __v1321;
__v0["variableDeclarations"] := __v21;
__v1322 := [  ];
__v22 := __v1322;
__v0["functionDeclarations"] := __v22;
__v0["codeType"] := "global";
__v0["strict"] := false;
return __v0 };
function JS_Interpreter_FunctionExpression (FunctionExpression, scope) { __v1323 := "id" in_obj FunctionExpression;
__v1325 := FunctionExpression["id"];
__v1324 := __v1325 = null;
__v1326 := "params" in_obj FunctionExpression;
__v1327 := "body" in_obj FunctionExpression;
if (true && __v1323 && __v1324 && __v1326 && __v1327) {
FormalParameterList := FunctionExpression["params"];
FunctionBody := FunctionExpression["body"];
__v1329 := "getLexicalEnvironment" (scope);
__v1330 := "isStrictModeCode" (FunctionBody, scope);
__v1328 := "CreateFunctionObject" (FormalParameterList, FunctionBody, __v1329, __v1330);
return __v1328
} else {
__v1331 := "id" in_obj FunctionExpression;
__v1332 := "params" in_obj FunctionExpression;
__v1333 := "body" in_obj FunctionExpression;
if (true && __v1331 && __v1332 && __v1333) {
Identifier := FunctionExpression["id"];
FormalParameterListopt := FunctionExpression["params"];
FunctionBody := FunctionExpression["body"];
__v1335 := "getLexicalEnvironment" (scope);
__v1334 := "NewDeclarativeEnvironment" (__v1335);
funcEnv := __v1334;
__v1336 := "getEnvironmentRecord" (funcEnv);
envRec := __v1336;
__v1338 := Identifier["name"];
__v1337 := "CreateImmutableBinding" (envRec, __v1338);
__v1340 := "isStrictModeCode" (FunctionBody, scope);
__v1339 := "CreateFunctionObject" (FormalParameterListopt, FunctionBody, funcEnv, __v1340);
closure := __v1339;
__v1342 := Identifier["name"];
__v1341 := "InitializeImmutableBinding" (envRec, __v1342, closure);
return closure
}
} };
function isEvalCode (code) { __v1344 := code["codeType"];
__v1343 := __v1344 = "eval";
return __v1343 };
function GetOwnProperty (O, P) { print "GetOwnProperty";
__v1347 := O["JSProperties"];
__v1346 := P in_obj __v1347;
__v1345 := !(__v1346);
if (__v1345) {
return 'undefined
};
__v1348 := "NewPropertyDescriptor" ();
D := __v1348;
__v1350 := O["JSProperties"];
__v1349 := __v1350[P];
X := __v1349;
__v1351 := "IsDataPropertyDescriptor" (X);
if (__v1351) {
__v1352 := X["Value"];
D["Value"] := __v1352;
__v1353 := X["Writable"];
D["Writable"] := __v1353
} else {
__v1354 := X["Get"];
D["Get"] := __v1354;
__v1355 := X["Set"];
D["Set"] := __v1355
};
__v1356 := X["Enumerable"];
D["Enumerable"] := __v1356;
__v1357 := X["Configurable"];
D["Configurable"] := __v1357;
return D };
function HasBindingDeclarativeEnvRecord (declarativeEnvRec, N) { envRec := declarativeEnvRec;
__v1358 := N in_obj envRec;
if (__v1358) {
return true
};
return false };
function MakeArgSetter (name, env) { __v1360 := [ name, "_arg" ];
__v1359 := s_concat(__v1360);
param := __v1359;
__v1362 := [ name, " = ", param, ";" ];
__v1361 := s_concat(__v1362);
body := __v1361;
__v1364 := [ param ];
__v1363 := "CreateFunctionObject" (__v1364, body, env, true);
return __v1363 };
function getEnvironmentRecord (lexicalEnvironment) { __v1365 := lexicalEnvironment["EnvRec"];
return __v1365 };
function getOuterEnvironmentReference (lexicalEnvironment) { __v1366 := lexicalEnvironment["OuterEnvRef"];
return __v1366 };
function normalEmptyCompletion (V) { __v1367 := "newCompletion" ('normal, V, 'empty);
return __v1367 };
function DeclarationBindingInstantiation (code, args, runningExecCtx, F) { __v1369 := "getVariableEnvironment" (runningExecCtx);
__v1368 := "getEnvironmentRecord" (__v1369);
env := __v1368;
__v1370 := "isEvalCode" (code);
if (__v1370) {
configurableBindings := true
} else {
configurableBindings := false
};
__v1371 := "isStrictModeCode" (code, runningExecCtx);
if (__v1371) {
strict := true
} else {
strict := false
};
__v1372 := "isFunctionCode" (code);
if (__v1372) {
func := F;
__v1373 := func["FormalParameters"];
names := __v1373;
__v1374 := l_len(args);
argCount := __v1374;
n := 0;
i := 0;
__v1375 := l_len(names);
lnames := __v1375;
__v1376 := lnames > i;
while (__v1376) { __v1377 := l_nth(names, i);
argName := __v1377;
__v1378 := n + 1;
n := __v1378;
__v1379 := n > argCount;
if (__v1379) {
v := 'undefined
} else {
__v1381 := n - 1;
__v1380 := l_nth(args, __v1381);
v := __v1380
};
__v1382 := "HasBinding" (env, argName);
argAlreadyDeclared := __v1382;
__v1383 := argAlreadyDeclared = false;
if (__v1383) {
__v1384 := "CreateMutableBinding" (env, argName, false)
};
__v1385 := "SetMutableBinding" (env, argName, v, strict);
__v1386 := i + 1;
i := __v1386;
__v1376 := lnames > i }
};
i := 0;
__v1387 := "getFunctionDeclarationsInCode" (code);
functionDeclarations := __v1387;
__v1388 := l_len(functionDeclarations);
lfunctionDeclarations := __v1388;
__v1389 := lfunctionDeclarations > i;
while (__v1389) { __v1390 := l_nth(functionDeclarations, i);
f := __v1390;
__v1392 := f["id"];
__v1391 := __v1392["name"];
fn := __v1391;
__v1393 := "JS_Interpreter_FunctionDeclaration" (f, runningExecCtx);
fo := __v1393;
__v1394 := "HasBinding" (env, fn);
funcAlreadyDeclared := __v1394;
__v1395 := funcAlreadyDeclared = false;
if (__v1395) {
__v1396 := "CreateMutableBinding" (env, fn, configurableBindings)
} else {
__v1399 := "getLexicalEnvironment" (runningExecCtx);
__v1398 := "getGlobalObject" (__v1399);
__v1397 := env = __v1398;
if (__v1397) {
__v1401 := "getLexicalEnvironment" (runningExecCtx);
__v1400 := "getGlobalObject" (__v1401);
go := __v1400;
__v1402 := "GetProperty" (go, fn);
existingProp := __v1402;
__v1403 := existingProp["Configurable"];
if (__v1403) {
__v1405 := { };
__v1405["Value"] := 'undefined;
__v1405["Writable"] := true;
__v1405["Enumerable"] := true;
__v1405["Configurable"] := configurableBindings;
__v1404 := "DefineOwnProperty" (go, fn, __v1405, true)
} else {
__v1407 := "IsAccessorDescriptor" (existingProp);
__v1410 := existingProp["Writable"];
__v1411 := existingProp["Enumerable"];
__v1409 := __v1410 && __v1411;
__v1408 := !(__v1409);
__v1406 := __v1407 || __v1408;
if (__v1406) {
__v1412 := "TypeErrorException" ();
throw __v1412
}
}
}
};
__v1413 := "SetMutableBinding" (env, fn, fo, strict);
__v1414 := i + 1;
i := __v1414;
__v1389 := lfunctionDeclarations > i };
__v1415 := "HasBinding" (env, "arguments");
argumentsAlreadyDeclared := __v1415;
__v1417 := "isFunctionCode" (code);
__v1418 := argumentsAlreadyDeclared = false;
__v1416 := __v1417 && __v1418;
if (__v1416) {
__v1419 := "CreateArgumentsObject" (func, names, args, env, strict);
argsObj := __v1419;
__v1420 := strict = true;
if (__v1420) {
__v1421 := "CreateImmutableBinding" (env, "arguments");
__v1422 := "InitializeImmutableBinding" (env, "arguments", argsObj)
} else {
__v1423 := "CreateMutableBinding" (env, "arguments", false);
__v1424 := "SetMutableBinding" (env, "arguments", argsObj, false)
}
};
i := 0;
__v1425 := "getVariableDeclarationsInCode" (code);
variableDeclarations := __v1425;
__v1426 := l_len(variableDeclarations);
lvariableDeclarations := __v1426;
__v1427 := lvariableDeclarations > i;
while (__v1427) { __v1428 := l_nth(variableDeclarations, i);
d := __v1428;
dn := d;
__v1429 := "HasBinding" (env, dn);
varAlreadyDeclared := __v1429;
__v1430 := varAlreadyDeclared = false;
if (__v1430) {
__v1431 := "CreateMutableBinding" (env, dn, configurableBindings);
__v1432 := "SetMutableBinding" (env, dn, 'undefined, strict)
};
__v1433 := i + 1;
i := __v1433;
__v1427 := lvariableDeclarations > i };
return 'undefined };
function isStrictModeCode (code, execCtx) { __v1436 := code["strict"];
__v1435 := __v1436 = true;
if (__v1435 = true) {
__v1434 := true
} else {
__v1437 := "isContainedInStrictCode" (execCtx);
if (__v1437 = true) {
__v1434 := true
} else {
__v1434 := false
}
};
return __v1434 };
function arrayLastIndexOf (global, this, args) { __v1438 := l_nth(args, 0);
searchElement := __v1438;
__v1439 := l_nth(args, 1);
fromIndex := __v1439;
__v1440 := "ToObject" (this);
O := __v1440;
__v1442 := O["Get"];
__v1441 := __v1442 (O, "length");
lenVal := __v1441;
__v1443 := "ToUint32" (lenVal);
len := __v1443;
__v1444 := len = 0.;
if (__v1444) {
return -1.
};
__v1446 := fromIndex = 'undefined;
__v1445 := !(__v1446);
if (__v1445) {
__v1447 := "ToInteger" (fromIndex);
n := __v1447
} else {
n := len
};
__v1448 := n >= 0.;
if (__v1448) {
__v1450 := len - 1.;
__v1449 := "min" (n, __v1450);
k := __v1449
} else {
__v1452 := "abs" (n);
__v1451 := len - __v1452;
k := __v1451
};
__v1453 := k >= 0.;
while (__v1453) { __v1455 := O["HasProperty"];
__v1456 := "ToString" (k);
__v1454 := __v1455 (O, __v1456);
kPresent := __v1454;
__v1457 := kPresent = true;
if (__v1457) {
__v1459 := O["Get"];
__v1460 := "ToString" (k);
__v1458 := __v1459 (O, __v1460);
elementK := __v1458;
__v1461 := searchElement = elementK;
same := __v1461;
__v1462 := same = true;
if (__v1462) {
return k
}
};
__v1463 := k - 1.;
k := __v1463;
__v1453 := k >= 0. };
return -1. };
function CreateImmutableBinding (envRec, N) { __v1464 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v1464) {
__v1465 := "CreateImmutableBindingDeclarative" (envRec, N);
return __v1465
};
return 'undefined };
function GetProperty (O, P) { print "GetProperty";
__v1466 := "GetOwnProperty" (O, P);
prop := __v1466;
__v1468 := prop = 'undefined;
__v1467 := !(__v1468);
if (__v1467) {
return prop
};
__v1469 := O["Prototype"];
proto := __v1469;
__v1470 := proto = 'null;
if (__v1470) {
return 'undefined
};
__v1471 := "GetProperty" (proto, P);
return __v1471 };
function initArrayPrototype (global, objectPrototype, strict) { __v1472 := "NewECMAScriptObjectFull" (objectPrototype, "Array", true);
prototype := __v1472;
__v1473 := "setAllInternalMethodsOfArray" (prototype);
__v1475 := [ "items" ];
__v1474 := "CreateFunctionObject" (__v1475, "isArray", global, strict);
isArrayObject := __v1474;
__v1476 := "newDataPropertyDescriptorFull" (isArrayObject, true, false, true);
descriptor := __v1476;
__v1477 := "setJSProperty" (prototype, "isArray", descriptor);
__v1479 := [ "items" ];
__v1478 := "CreateFunctionObject" (__v1479, "arrayToString", global, strict);
toStringObject := __v1478;
__v1480 := "newDataPropertyDescriptorFull" (toStringObject, true, false, true);
descriptor := __v1480;
__v1481 := "setJSProperty" (prototype, "toString", descriptor);
__v1483 := [ "items" ];
__v1482 := "CreateFunctionObject" (__v1483, "arrayToLocaleString", global, strict);
toLocaleStringObject := __v1482;
__v1484 := "newDataPropertyDescriptorFull" (toLocaleStringObject, true, false, true);
descriptor := __v1484;
__v1485 := "setJSProperty" (prototype, "toLocaleString", descriptor);
__v1487 := [ "items" ];
__v1486 := "CreateFunctionObject" (__v1487, "arrayConcat", global, strict);
concatObject := __v1486;
__v1488 := "newDataPropertyDescriptorFull" (concatObject, true, false, true);
descriptor := __v1488;
__v1489 := "setJSProperty" (prototype, "concat", descriptor);
__v1491 := [ "items" ];
__v1490 := "CreateFunctionObject" (__v1491, "arrayJoin", global, strict);
joinObject := __v1490;
__v1492 := "newDataPropertyDescriptorFull" (joinObject, true, false, true);
descriptor := __v1492;
__v1493 := "setJSProperty" (prototype, "join", descriptor);
__v1495 := [ "items" ];
__v1494 := "CreateFunctionObject" (__v1495, "arrayPop", global, strict);
popObject := __v1494;
__v1496 := "newDataPropertyDescriptorFull" (popObject, true, false, true);
descriptor := __v1496;
__v1497 := "setJSProperty" (prototype, "pop", descriptor);
__v1499 := [ "items" ];
__v1498 := "CreateFunctionObject" (__v1499, "arrayPush", global, strict);
pushObject := __v1498;
__v1500 := "newDataPropertyDescriptorFull" (pushObject, true, false, true);
descriptor := __v1500;
__v1501 := "setJSProperty" (prototype, "push", descriptor);
__v1503 := [ "items" ];
__v1502 := "CreateFunctionObject" (__v1503, "arrayReverse", global, strict);
reverseObject := __v1502;
__v1504 := "newDataPropertyDescriptorFull" (reverseObject, true, false, true);
descriptor := __v1504;
__v1505 := "setJSProperty" (prototype, "reverse", descriptor);
__v1507 := [ "items" ];
__v1506 := "CreateFunctionObject" (__v1507, "arrayShift", global, strict);
shiftObject := __v1506;
__v1508 := "newDataPropertyDescriptorFull" (shiftObject, true, false, true);
descriptor := __v1508;
__v1509 := "setJSProperty" (prototype, "shift", descriptor);
__v1511 := [ "items" ];
__v1510 := "CreateFunctionObject" (__v1511, "arraySlice", global, strict);
sliceObject := __v1510;
__v1512 := "newDataPropertyDescriptorFull" (sliceObject, true, false, true);
descriptor := __v1512;
__v1513 := "setJSProperty" (prototype, "slice", descriptor);
__v1515 := [ "items" ];
__v1514 := "CreateFunctionObject" (__v1515, "arraySort", global, strict);
sortObject := __v1514;
__v1516 := "newDataPropertyDescriptorFull" (sortObject, true, false, true);
descriptor := __v1516;
__v1517 := "setJSProperty" (prototype, "sort", descriptor);
__v1519 := [ "items" ];
__v1518 := "CreateFunctionObject" (__v1519, "arraySplice", global, strict);
spliceObject := __v1518;
__v1520 := "newDataPropertyDescriptorFull" (sortObject, true, false, true);
descriptor := __v1520;
__v1521 := "setJSProperty" (prototype, "splice", descriptor);
__v1523 := [ "items" ];
__v1522 := "CreateFunctionObject" (__v1523, "arrayIndexOf", global, strict);
indexOfObject := __v1522;
__v1524 := "newDataPropertyDescriptorFull" (indexOfObject, true, false, true);
descriptor := __v1524;
__v1525 := "setJSProperty" (prototype, "indexOf", descriptor);
__v1527 := [ "items" ];
__v1526 := "CreateFunctionObject" (__v1527, "arrayLastIndexOf", global, strict);
lastIndexOfObject := __v1526;
__v1528 := "newDataPropertyDescriptorFull" (lastIndexOfObject, true, false, true);
descriptor := __v1528;
__v1529 := "setJSProperty" (prototype, "lastIndexOf", descriptor);
__v1531 := [ "items" ];
__v1530 := "CreateFunctionObject" (__v1531, "arrayEvery", global, strict);
everyOfObject := __v1530;
__v1532 := "newDataPropertyDescriptorFull" (everyOfObject, true, false, true);
descriptor := __v1532;
__v1533 := "setJSProperty" (prototype, "every", descriptor);
__v1535 := [ "items" ];
__v1534 := "CreateFunctionObject" (__v1535, "arraySome", global, strict);
someOfObject := __v1534;
__v1536 := "newDataPropertyDescriptorFull" (someOfObject, true, false, true);
descriptor := __v1536;
__v1537 := "setJSProperty" (prototype, "some", descriptor);
__v1539 := [ "items" ];
__v1538 := "CreateFunctionObject" (__v1539, "arrayForEach", global, strict);
forEachObject := __v1538;
__v1540 := "newDataPropertyDescriptorFull" (forEachObject, true, false, true);
descriptor := __v1540;
__v1541 := "setJSProperty" (prototype, "forEach", descriptor);
__v1543 := [ "items" ];
__v1542 := "CreateFunctionObject" (__v1543, "arrayMap", global, strict);
mapObject := __v1542;
__v1544 := "newDataPropertyDescriptorFull" (mapObject, true, false, true);
descriptor := __v1544;
__v1545 := "setJSProperty" (prototype, "map", descriptor);
__v1547 := [ "items" ];
__v1546 := "CreateFunctionObject" (__v1547, "arrayFilter", global, strict);
filterObject := __v1546;
__v1548 := "newDataPropertyDescriptorFull" (filterObject, true, false, true);
descriptor := __v1548;
__v1549 := "setJSProperty" (prototype, "filter", descriptor);
__v1551 := [ "items" ];
__v1550 := "CreateFunctionObject" (__v1551, "arrayReduce", global, strict);
reduceObject := __v1550;
__v1552 := "newDataPropertyDescriptorFull" (reduceObject, true, false, true);
descriptor := __v1552;
__v1553 := "setJSProperty" (prototype, "reduce", descriptor);
__v1555 := [ "items" ];
__v1554 := "CreateFunctionObject" (__v1555, "arrayReduceRight", global, strict);
reduceRightObject := __v1554;
__v1556 := "newDataPropertyDescriptorFull" (reduceRightObject, true, false, true);
descriptor := __v1556;
__v1557 := "setJSProperty" (prototype, "reduceRight", descriptor);
return prototype };
function GetValue (V) { print "GetValue";
__v1560 := "Type" (V);
__v1559 := __v1560 = "Reference";
__v1558 := !(__v1559);
if (__v1558) {
return V
};
__v1561 := "GetBase" (V);
base := __v1561;
__v1562 := "IsUnresolvableReference" (V);
if (__v1562) {
__v1563 := "ReferenceErrorException" ();
throw __v1563
};
__v1564 := "IsPropertyReference" (V);
if (__v1564) {
__v1566 := "HasPrimitiveBase" (V);
__v1565 := __v1566 = false;
if (__v1565) {
__v1567 := base["Get"];
get := __v1567
} else {
get := "Get_internal"
};
__v1569 := "GetReferencedName" (V);
__v1568 := get (base, __v1569);
return __v1568
} else {
__v1571 := "GetReferencedName" (V);
__v1572 := "IsStrictReference" (V);
__v1570 := "GetBindingValue" (base, __v1571, __v1572);
return __v1570
} };
function newDeclarativeEnvironmentRecord () { __v1573 := { };
return __v1573 };
function isMutableBinding (envRec, name) { __v1574 := envRec[name];
binding := __v1574;
__v1575 := t_nth(binding, 3);
return __v1575 };
function isDeclarativeEnvironmentRecord (envRec) { print "isDeclarativeEnvironmentRecord";
__v1576 := "isObjectEnvRec" in_obj envRec;
if (__v1576) {
return false
} else {
return true
} };
function setInternalProperty (object, pname, pvalue) { object[pname] := pvalue;
return  };
function main () { __v1577 := "buildAST" ();
x := __v1577;
__v1578 := "JS_Interpreter_Program" (x);
ret := __v1578;
return ret };
function NewObjectEnvironment (O, E) { __v1579 := "newLexicalEnvironment" ();
env := __v1579;
__v1580 := "newObjectEnvironmentRecord" (O);
envRec := __v1580;
__v1581 := "setEnvironmentRecord" (env, envRec);
__v1582 := "setOuterLexicalEnvironmentReference" (env, E);
return env };
function getBindingObject (objectEnvRec) { __v1583 := objectEnvRec["bindingObject"];
return __v1583 };
function hasStatementList (caseClause) { __v1584 := caseClause = null;
if (__v1584) {
return false
};
__v1585 := "type" in_obj caseClause;
__v1587 := caseClause["type"];
__v1586 := __v1587 = "SwitchCase";
__v1588 := "consequent" in_obj caseClause;
if (true && __v1585 && __v1586 && __v1588) {
StatementList := caseClause["consequent"];
__v1590 := l_len(StatementList);
__v1589 := __v1590 > 0;
return __v1589
} else {
if (true) {
__v1591 := "SyntaxErrorException" ();
throw __v1591
}
} };
function arraySlice (global, this, args) { __v1592 := l_nth(args, 0);
start := __v1592;
__v1593 := l_nth(args, 1);
end := __v1593;
__v1594 := "ToObject" (this);
O := __v1594;
__v1596 := [  ];
__v1595 := "internalNewArray" (__v1596);
A := __v1595;
__v1598 := O["Get"];
__v1597 := __v1598 (O, "length");
lenVal := __v1597;
__v1599 := "ToUint32" (lenVal);
len := __v1599;
__v1600 := "ToInteger" (start);
relativeStart := __v1600;
__v1601 := relativeStart < 0.;
if (__v1601) {
__v1603 := len + relativeStart;
__v1602 := "max" (__v1603, 0.);
k := __v1602
} else {
__v1604 := "min" (relativeStart, len);
k := __v1604
};
__v1605 := end = 'undefined;
if (__v1605) {
relativeEnd := len
} else {
__v1606 := "ToInteger" (end);
relativeEnd := __v1606
};
__v1607 := relativeEnd < 0.;
if (__v1607) {
__v1609 := len + relativeEnd;
__v1608 := "max" (__v1609, 0.);
final := __v1608
} else {
__v1610 := "min" (relativeEnd, len);
final := __v1610
};
n := 0.;
__v1611 := k < final;
while (__v1611) { __v1612 := "ToString" (k);
Pk := __v1612;
__v1614 := O["HasProperty"];
__v1613 := __v1614 (O, Pk);
kPresent := __v1613;
__v1615 := kPresent = true;
if (__v1615) {
__v1617 := O["Get"];
__v1616 := __v1617 (O, Pk);
kValue := __v1616;
__v1618 := "newDataPropertyDescriptorFull" (kValue, true, true, true);
descriptor := __v1618;
__v1620 := A["DefineOwnProperty"];
__v1621 := "ToString" (n);
__v1619 := __v1620 (A, __v1621, descriptor, false)
};
__v1622 := k + 1.;
k := __v1622;
__v1623 := n + 1.;
n := __v1623;
__v1611 := k < final };
return A };
function JS_Interpreter_AssignmentExpression (AssignmentExpression, scope) { __v1624 := "operator" in_obj AssignmentExpression;
__v1626 := AssignmentExpression["operator"];
__v1625 := __v1626 = "=";
__v1627 := "left" in_obj AssignmentExpression;
__v1628 := "right" in_obj AssignmentExpression;
if (true && __v1624 && __v1625 && __v1627 && __v1628) {
LeftHandSideExpression := AssignmentExpression["left"];
AssignmentExpression := AssignmentExpression["right"];
__v1629 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lref := __v1629;
__v1630 := "JS_Interpreter_Expr" (AssignmentExpression, scope);
rref := __v1630;
__v1631 := "GetValue" (rref);
rval := __v1631;
__v1636 := "Type" (lref);
__v1635 := __v1636 = "Reference";
__v1637 := "IsStrictReference" (lref);
__v1634 := __v1635 && __v1637;
__v1640 := "GetBase" (lref);
__v1639 := "Type" (__v1640);
__v1638 := __v1639 = "EnvironmentRecord";
__v1633 := __v1634 && __v1638;
__v1643 := "GetReferencedName" (lref);
__v1642 := __v1643 = "eval";
__v1645 := "GetReferencedName" (lref);
__v1644 := __v1645 = "arguments";
__v1641 := __v1642 || __v1644;
__v1632 := __v1633 && __v1641;
if (__v1632) {
__v1646 := "SyntaxErrorException" ();
throw __v1646
};
__v1649 := "getLexicalEnvironment" (scope);
__v1648 := "getGlobalObject" (__v1649);
__v1647 := "PutValue" (lref, rval, __v1648);
return rval
} else {
__v1650 := "operator" in_obj AssignmentExpression;
__v1651 := "left" in_obj AssignmentExpression;
__v1652 := "right" in_obj AssignmentExpression;
if (true && __v1650 && __v1651 && __v1652) {
AssignmentOperator := AssignmentExpression["operator"];
LeftHandSideExpression := AssignmentExpression["left"];
AssignmentExpression := AssignmentExpression["right"];
__v1653 := "JS_Interpreter_Expr" (LeftHandSideExpression, scope);
lref := __v1653;
__v1654 := "GetValue" (lref);
lval := __v1654;
__v1655 := "JS_Interpreter_Expr" (AssignmentExpression, scope);
rref := __v1655;
__v1656 := "GetValue" (rref);
rval := __v1656;
__v1657 := "applyOperator" (AssignmentOperator, lval, rval);
r := __v1657;
__v1662 := "Type" (lref);
__v1661 := __v1662 = "Reference";
__v1663 := "IsStrictReference" (lref);
__v1660 := __v1661 && __v1663;
__v1666 := "GetBase" (lref);
__v1665 := "Type" (__v1666);
__v1664 := __v1665 = "EnvironmentRecord";
__v1659 := __v1660 && __v1664;
__v1669 := "GetReferencedName" (lref);
__v1668 := __v1669 = "eval";
__v1671 := "GetReferencedName" (lref);
__v1670 := __v1671 = "arguments";
__v1667 := __v1668 || __v1670;
__v1658 := __v1659 && __v1667;
if (__v1658) {
__v1672 := "SyntaxErrorException" ();
throw __v1672
};
__v1675 := "getLexicalEnvironment" (scope);
__v1674 := "getGlobalObject" (__v1675);
__v1673 := "PutValue" (lref, r, __v1674);
return r
}
} };
function getVariableDeclarationsInCode (object) { __v1676 := object["variableDeclarations"];
return __v1676 };
function applyingTheAdditionOperation (leftOperand, rightOperand) { __v1677 := leftOperand + rightOperand;
return __v1677 };
function arrayFilter (global, this, args) { __v1678 := l_nth(args, 0);
callbackfn := __v1678;
__v1679 := l_nth(args, 1);
thisArg := __v1679;
__v1680 := "ToObject" (this);
O := __v1680;
__v1682 := O["Get"];
__v1681 := __v1682 (O, "length");
lenVal := __v1681;
__v1683 := "ToUint32" (lenVal);
len := __v1683;
__v1685 := "IsCallable" (callbackfn);
__v1684 := __v1685 = false;
if (__v1684) {
__v1686 := "TypeErrorException" ();
throw __v1686
};
__v1688 := thisArg = 'undefined;
__v1687 := !(__v1688);
if (__v1687) {
T := thisArg
} else {
T := 'undefined
};
__v1690 := [  ];
__v1689 := "internalNewArray" (__v1690);
A := __v1689;
k := 0.;
to := 0.;
__v1691 := k < len;
while (__v1691) { __v1692 := "ToString" (k);
Pk := __v1692;
__v1694 := O["HasProperty"];
__v1693 := __v1694 (O, Pk);
kPresent := __v1693;
__v1695 := kPresent = true;
if (__v1695) {
__v1697 := O["Get"];
__v1696 := __v1697 (O, Pk);
kValue := __v1696;
__v1699 := callbackfn["Call"];
__v1700 := [ kValue, k, O ];
__v1698 := __v1699 (callbackfn, T, __v1700);
selected := __v1698;
__v1702 := "ToBoolean" (selected);
__v1701 := __v1702 = true;
if (__v1701) {
__v1703 := "newDataPropertyDescriptorFull" (kValue, true, true, true);
descriptor := __v1703;
__v1705 := A["DefineOwnProperty"];
__v1706 := "ToString" (to);
__v1704 := __v1705 (A, __v1706, descriptor, false);
__v1707 := to + 1.;
to := __v1707
}
};
__v1708 := k + 1.;
k := __v1708;
__v1691 := k < len };
return A };
function setVariableEnvironment (runningExecCtx, variableEnvironment) { runningExecCtx["VariableEnvironment"] := variableEnvironment;
return 'undefined };
function isFunctionCode (code) { __v1710 := code["codeType"];
__v1709 := __v1710 = "function";
return __v1709 };
function arraySome (global, this, args) { __v1711 := l_nth(args, 0);
callbackfn := __v1711;
__v1712 := l_nth(args, 1);
thisArg := __v1712;
__v1713 := "ToObject" (this);
O := __v1713;
__v1715 := O["Get"];
__v1714 := __v1715 (O, "length");
lenVal := __v1714;
__v1716 := "ToUint32" (lenVal);
len := __v1716;
__v1718 := "IsCallable" (callbackfn);
__v1717 := __v1718 = false;
if (__v1717) {
__v1719 := "TypeErrorException" ();
throw __v1719
};
__v1721 := thisArg = 'undefined;
__v1720 := !(__v1721);
if (__v1720) {
T := thisArg
} else {
T := 'undefined
};
k := 0.;
__v1722 := k < len;
while (__v1722) { __v1723 := "ToString" (k);
Pk := __v1723;
__v1725 := O["HasProperty"];
__v1724 := __v1725 (O, Pk);
kPresent := __v1724;
__v1726 := kPresent = true;
if (__v1726) {
__v1728 := O["Get"];
__v1727 := __v1728 (O, Pk);
kValue := __v1727;
__v1730 := callbackfn["Call"];
__v1731 := [ kValue, k, O ];
__v1729 := __v1730 (callbackfn, T, __v1731);
testResult := __v1729;
__v1733 := "ToBoolean" (testResult);
__v1732 := __v1733 = true;
if (__v1732) {
return true
}
};
__v1734 := k + 1.;
k := __v1734;
__v1722 := k < len };
return false };
function isUninitialisedBinding (envRec, name) { __v1735 := envRec[name];
binding := __v1735;
__v1737 := t_nth(binding, 0);
__v1736 := !(__v1737);
return __v1736 };
function ToInteger (argument) { __v1738 := "ToNumber" (argument);
number := __v1738;
__v1739 := to_int(number);
return __v1739 };
function arrayPop (global, this, args) { __v1740 := "ToObject" (this);
O := __v1740;
__v1742 := O["Get"];
__v1741 := __v1742 (O, "length");
lenVal := __v1741;
__v1743 := "ToUint32" (lenVal);
len := __v1743;
__v1745 := [ "lenVal: ", lenVal ];
__v1744 := s_concat(__v1745);
print __v1744;
__v1747 := [ "len: ", len ];
__v1746 := s_concat(__v1747);
print __v1746;
__v1748 := len = 0.;
if (__v1748) {
__v1750 := O["Put"];
__v1749 := __v1750 (O, "length", 0., true);
return 'undefined
} else {
__v1751 := len > 0.;
if (__v1751) {
__v1753 := len - 1.;
__v1752 := "ToString" (__v1753);
indx := __v1752;
__v1755 := O["Get"];
__v1754 := __v1755 (O, indx);
element := __v1754;
__v1757 := [ "indx: ", indx ];
__v1756 := s_concat(__v1757);
print __v1756;
__v1759 := [ "element: ", element ];
__v1758 := s_concat(__v1759);
print __v1758;
__v1761 := O["Delete"];
__v1760 := __v1761 (O, indx, true);
__v1763 := O["Put"];
__v1762 := __v1763 (O, "length", indx, true);
return element
}
} };
function JS_Interpreter_Stmt (s, scope) { __v1764 := "type" in_obj s;
__v1766 := s["type"];
__v1765 := __v1766 = "BlockStatement";
__v1767 := "body" in_obj s;
if (true && __v1764 && __v1765 && __v1767) {
StatementList := s["body"];
__v1769 := l_len(StatementList);
__v1768 := __v1769 = 0;
if (__v1768) {
__v1770 := "normalEmptyCompletion" ('empty);
return __v1770
};
__v1771 := "JS_Interpreter_StmtList" (StatementList, scope);
return __v1771
} else {
__v1772 := "type" in_obj s;
__v1774 := s["type"];
__v1773 := __v1774 = "VariableDeclaration";
__v1775 := "declarations" in_obj s;
if (true && __v1772 && __v1773 && __v1775) {
VariableDeclarationList := s["declarations"];
i := 0;
__v1776 := l_len(VariableDeclarationList);
lVarDecl := __v1776;
__v1777 := lVarDecl > i;
while (__v1777) { __v1779 := l_nth(VariableDeclarationList, i);
__v1778 := "JS_Interpreter_VarDecl" (__v1779, scope);
__v1780 := i + 1;
i := __v1780;
__v1777 := lVarDecl > i };
__v1781 := "normalEmptyCompletion" ('empty);
return __v1781
} else {
__v1782 := "type" in_obj s;
__v1784 := s["type"];
__v1783 := __v1784 = "EmptyStatement";
if (true && __v1782 && __v1783) {
__v1785 := "normalEmptyCompletion" ('empty);
return __v1785
} else {
__v1786 := "type" in_obj s;
__v1788 := s["type"];
__v1787 := __v1788 = "ExpressionStatement";
__v1789 := "expression" in_obj s;
if (true && __v1786 && __v1787 && __v1789) {
Expression := s["expression"];
__v1790 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v1790;
__v1792 := "GetValue" (exprRef);
__v1791 := "normalEmptyCompletion" (__v1792);
return __v1791
} else {
__v1793 := "type" in_obj s;
__v1795 := s["type"];
__v1794 := __v1795 = "IfStatement";
__v1796 := "test" in_obj s;
__v1797 := "consequent" in_obj s;
__v1798 := "alternate" in_obj s;
if (true && __v1793 && __v1794 && __v1796 && __v1797 && __v1798) {
Expression := s["test"];
Statement1 := s["consequent"];
Statement2 := s["alternate"];
__v1799 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v1799;
__v1801 := "GetValue" (exprRef);
__v1800 := "ToBoolean" (__v1801);
if (__v1800) {
__v1802 := "JS_Interpreter_Stmt" (Statement1, scope);
return __v1802
} else {
__v1804 := Statement2 = null;
__v1803 := !(__v1804);
if (__v1803) {
__v1805 := "JS_Interpreter_Stmt" (Statement2, scope);
return __v1805
};
__v1806 := "normalEmptyCompletion" ('empty);
return __v1806
}
} else {
__v1807 := "type" in_obj s;
__v1809 := s["type"];
__v1808 := __v1809 = "LabeledStatement";
__v1810 := "label" in_obj s;
__v1811 := "body" in_obj s;
if (true && __v1807 && __v1808 && __v1810 && __v1811) {
Identifier := s["label"];
Statement := s["body"];
__v1813 := "labelSet" in_obj Statement;
__v1812 := !(__v1813);
if (__v1812) {
__v1814 := [  ];
Statement["labelSet"] := __v1814
};
__v1816 := Statement["labelSet"];
__v1817 := Identifier["name"];
__v1815 := l_add(__v1816, __v1817);
Statement["labelSet"] := __v1815;
__v1818 := "labelSet" in_obj s;
if (__v1818) {
__v1820 := s["labelSet"];
__v1821 := Statement["labelSet"];
__v1819 := l_concat(__v1820, __v1821);
Statement["labelSet"] := __v1819
};
__v1822 := "JS_Interpreter_Stmt" (Statement, scope);
return __v1822
} else {
__v1823 := "type" in_obj s;
__v1825 := s["type"];
__v1824 := __v1825 = "DoWhileStatement";
if (true && __v1823 && __v1824) {
__v1827 := "labelSet" in_obj s;
__v1826 := !(__v1827);
if (__v1826) {
__v1828 := [  ];
s["labelSet"] := __v1828
};
__v1830 := s["labelSet"];
__v1829 := l_add(__v1830, 'empty);
s["labelSet"] := __v1829;
__v1831 := "JS_Interpreter_IterationStatement" (s, scope);
return __v1831
} else {
__v1832 := "type" in_obj s;
__v1834 := s["type"];
__v1833 := __v1834 = "WhileStatement";
if (true && __v1832 && __v1833) {
__v1836 := "labelSet" in_obj s;
__v1835 := !(__v1836);
if (__v1835) {
__v1837 := [  ];
s["labelSet"] := __v1837
};
__v1839 := s["labelSet"];
__v1838 := l_add(__v1839, 'empty);
s["labelSet"] := __v1838;
__v1840 := "JS_Interpreter_IterationStatement" (s, scope);
return __v1840
} else {
__v1841 := "type" in_obj s;
__v1843 := s["type"];
__v1842 := __v1843 = "ForStatement";
if (true && __v1841 && __v1842) {
__v1845 := "labelSet" in_obj s;
__v1844 := !(__v1845);
if (__v1844) {
__v1846 := [  ];
s["labelSet"] := __v1846
};
__v1848 := s["labelSet"];
__v1847 := l_add(__v1848, 'empty);
s["labelSet"] := __v1847;
__v1849 := "JS_Interpreter_IterationStatement" (s, scope);
return __v1849
} else {
__v1850 := "type" in_obj s;
__v1852 := s["type"];
__v1851 := __v1852 = "ForInStatement";
if (true && __v1850 && __v1851) {
__v1854 := "labelSet" in_obj s;
__v1853 := !(__v1854);
if (__v1853) {
__v1855 := [  ];
s["labelSet"] := __v1855
};
__v1857 := s["labelSet"];
__v1856 := l_add(__v1857, 'empty);
s["labelSet"] := __v1856;
__v1858 := "JS_Interpreter_IterationStatement" (s, scope);
return __v1858
} else {
__v1859 := "type" in_obj s;
__v1861 := s["type"];
__v1860 := __v1861 = "ContinueStatement";
__v1862 := "label" in_obj s;
if (true && __v1859 && __v1860 && __v1862) {
Identifier := s["label"];
__v1863 := Identifier = null;
if (__v1863) {
__v1864 := "newCompletion" ('continue, 'empty, 'empty);
return __v1864
};
__v1866 := Identifier["name"];
__v1865 := "newCompletion" ('continue, 'empty, __v1866);
return __v1865
} else {
__v1867 := "type" in_obj s;
__v1869 := s["type"];
__v1868 := __v1869 = "BreakStatement";
__v1870 := "label" in_obj s;
if (true && __v1867 && __v1868 && __v1870) {
Identifier := s["label"];
__v1871 := Identifier = null;
if (__v1871) {
__v1872 := "newCompletion" ('break, 'empty, 'empty);
return __v1872
};
__v1874 := Identifier["name"];
__v1873 := "newCompletion" ('break, 'empty, __v1874);
return __v1873
} else {
__v1875 := "type" in_obj s;
__v1877 := s["type"];
__v1876 := __v1877 = "ReturnStatement";
__v1878 := "argument" in_obj s;
if (true && __v1875 && __v1876 && __v1878) {
Expression := s["argument"];
__v1879 := Expression = null;
if (__v1879) {
__v1880 := "newCompletion" ('return, 'undefined, 'empty);
return __v1880
};
__v1881 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v1881;
__v1883 := "GetValue" (exprRef);
__v1882 := "newCompletion" ('return, __v1883, 'empty);
return __v1882
} else {
__v1884 := "type" in_obj s;
__v1886 := s["type"];
__v1885 := __v1886 = "WithStatement";
__v1887 := "object" in_obj s;
__v1888 := "body" in_obj s;
if (true && __v1884 && __v1885 && __v1887 && __v1888) {
Expression := s["object"];
Statement := s["body"];
__v1889 := "JS_Interpreter_Expr" (Expression, scope);
val := __v1889;
__v1891 := "GetValue" (val);
__v1890 := "ToObject" (__v1891);
obj := __v1890;
__v1892 := "getLexicalEnvironment" (scope);
oldEnv := __v1892;
__v1893 := "NewObjectEnvironment" (obj, oldEnv);
newEnv := __v1893;
__v1894 := "setProvideThis" (newEnv, true);
__v1895 := "setLexicalEnvironment" (scope, newEnv);
__v1896 := "JS_Interpreter_Stmt" (Statement, scope);
C := __v1896;
__v1897 := "setLexicalEnvironment" (scope, oldEnv);
return C
} else {
__v1898 := "type" in_obj s;
__v1900 := s["type"];
__v1899 := __v1900 = "SwitchStatement";
if (true && __v1898 && __v1899) {
__v1902 := "labelSet" in_obj s;
__v1901 := !(__v1902);
if (__v1901) {
__v1903 := [  ];
s["labelSet"] := __v1903
};
__v1905 := s["labelSet"];
__v1904 := l_add(__v1905, 'empty);
s["labelSet"] := __v1904;
__v1906 := "JS_Interpreter_SwitchStatement" (s, scope);
return __v1906
} else {
__v1907 := "type" in_obj s;
__v1909 := s["type"];
__v1908 := __v1909 = "ThrowStatement";
__v1910 := "argument" in_obj s;
if (true && __v1907 && __v1908 && __v1910) {
Expression := s["argument"];
__v1911 := "JS_Interpreter_Expr" (Expression, scope);
exprRef := __v1911;
__v1913 := "GetValue" (exprRef);
__v1912 := "newCompletion" ('throw, __v1913, 'empty);
return __v1912
} else {
__v1914 := "type" in_obj s;
__v1916 := s["type"];
__v1915 := __v1916 = "TryStatement";
if (true && __v1914 && __v1915) {
__v1917 := "JS_Interpreter_TryStatement" (s, scope);
return __v1917
} else {
__v1918 := "type" in_obj s;
__v1920 := s["type"];
__v1919 := __v1920 = "DebuggerStatement";
if (true && __v1918 && __v1919) {
__v1921 := "existsDebuggerImplementation" ();
if (__v1921) {
__v1922 := "debuggerAction" ();
result := __v1922
} else {
__v1923 := "normalEmptyCompletion" ('empty);
result := __v1923
};
return result
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function NewPropertyDescriptor () { __v1924 := { };
return __v1924 };
function GetIdentifierReference (lex, name, strict) { print "GetIdentifierReference";
__v1925 := lex = 'null;
if (__v1925) {
__v1926 := "newValueReference" ('undefined, name, strict);
return __v1926
};
__v1927 := "getEnvironmentRecord" (lex);
envRec := __v1927;
__v1928 := "HasBinding" (envRec, name);
exists := __v1928;
__v1929 := exists = true;
if (__v1929) {
__v1930 := "newValueReference" (envRec, name, strict);
return __v1930
} else {
__v1931 := "getOuterEnvironmentReference" (lex);
outer := __v1931;
__v1932 := "GetIdentifierReference" (outer, name, strict);
return __v1932
} };
function CreateFunctionObject (FormalParameterList, FunctionBody, Scope, Strict) { __v1933 := "NewECMAScriptObject" ();
F := __v1933;
__v1934 := "setAllInternalMethodsExceptGet" (F);
F["Class"] := "Function";
F["Prototype"] := "$loc_FUNC_PROTOTYPE";
F["Get"] := null;
F["Call"] := "Call";
F["Construct"] := "Construct";
F["HasInstance"] := null;
F["Scope"] := Scope;
names := FormalParameterList;
F["FormalParameters"] := names;
F["Code"] := FunctionBody;
F["Extensible"] := true;
__v1935 := l_len(FormalParameterList);
len := __v1935;
__v1937 := { };
__v1937["Value"] := len;
__v1937["Writable"] := false;
__v1937["Enumerable"] := false;
__v1937["Configurable"] := false;
__v1936 := "DefineOwnProperty" (F, "length", __v1937, false);
__v1938 := "NewObject" ();
proto := __v1938;
__v1940 := { };
__v1940["Value"] := F;
__v1940["Writable"] := true;
__v1940["Enumerable"] := false;
__v1940["Configurable"] := true;
__v1939 := "DefineOwnProperty" (proto, "constructor", __v1940, false);
__v1942 := { };
__v1942["Value"] := proto;
__v1942["Writable"] := true;
__v1942["Enumerable"] := false;
__v1942["Configurable"] := false;
__v1941 := "DefineOwnProperty" (F, "prototype", __v1942, false);
__v1943 := Strict = true;
if (__v1943) {
thrower := null;
__v1945 := { };
__v1945["Get"] := thrower;
__v1945["Set"] := thrower;
__v1945["Enumerable"] := false;
__v1945["Configurable"] := false;
__v1944 := "DefineOwnProperty" (F, "caller", __v1945, false);
__v1947 := { };
__v1947["Get"] := thrower;
__v1947["Set"] := thrower;
__v1947["Enumerable"] := false;
__v1947["Configurable"] := false;
__v1946 := "DefineOwnProperty" (F, "arguments", __v1947, false)
};
F["strict"] := Strict;
return F };
function JS_Interpreter_LogicalExpression (LogicalExpression, scope) { __v1948 := "operator" in_obj LogicalExpression;
__v1950 := LogicalExpression["operator"];
__v1949 := __v1950 = "&&";
__v1951 := "left" in_obj LogicalExpression;
__v1952 := "right" in_obj LogicalExpression;
if (true && __v1948 && __v1949 && __v1951 && __v1952) {
LogicalANDExpression := LogicalExpression["left"];
BitwiseORExpression := LogicalExpression["right"];
__v1953 := "JS_Interpreter_Expr" (LogicalANDExpression, scope);
lref := __v1953;
__v1954 := "GetValue" (lref);
lval := __v1954;
__v1956 := "ToBoolean" (lval);
__v1955 := __v1956 = false;
if (__v1955) {
return lval
};
__v1957 := "JS_Interpreter_Expr" (BitwiseORExpression, scope);
rref := __v1957;
__v1958 := "GetValue" (rref);
return __v1958
} else {
__v1959 := "operator" in_obj LogicalExpression;
__v1961 := LogicalExpression["operator"];
__v1960 := __v1961 = "||";
__v1962 := "left" in_obj LogicalExpression;
__v1963 := "right" in_obj LogicalExpression;
if (true && __v1959 && __v1960 && __v1962 && __v1963) {
LogicalORExpression := LogicalExpression["left"];
LogicalANDExpression := LogicalExpression["right"];
__v1964 := "JS_Interpreter_Expr" (LogicalORExpression, scope);
lref := __v1964;
__v1965 := "GetValue" (lref);
lval := __v1965;
__v1967 := "ToBoolean" (lval);
__v1966 := __v1967 = true;
if (__v1966) {
return lval
};
__v1968 := "JS_Interpreter_Expr" (LogicalANDExpression, scope);
rref := __v1968;
__v1969 := "GetValue" (rref);
return __v1969
}
} };
function setJSProperty (object, pname, pvalue) { __v1970 := object["JSProperties"];
__v1970[pname] := pvalue;
return  };
function arrayMap (global, this, args) { __v1971 := l_nth(args, 0);
callbackfn := __v1971;
__v1972 := l_nth(args, 1);
thisArg := __v1972;
__v1973 := "ToObject" (this);
O := __v1973;
__v1975 := O["Get"];
__v1974 := __v1975 (O, "length");
lenVal := __v1974;
__v1976 := "ToUint32" (lenVal);
len := __v1976;
__v1978 := "IsCallable" (callbackfn);
__v1977 := __v1978 = false;
if (__v1977) {
__v1979 := "TypeErrorException" ();
throw __v1979
};
__v1981 := thisArg = 'undefined;
__v1980 := !(__v1981);
if (__v1980) {
T := thisArg
} else {
T := 'undefined
};
__v1982 := "internalNewArrayLen" (len);
A := __v1982;
k := 0.;
__v1983 := k < len;
while (__v1983) { __v1984 := "ToString" (k);
Pk := __v1984;
__v1986 := O["HasProperty"];
__v1985 := __v1986 (O, Pk);
kPresent := __v1985;
__v1987 := kPresent = true;
if (__v1987) {
__v1989 := O["Get"];
__v1988 := __v1989 (O, Pk);
kValue := __v1988;
__v1991 := callbackfn["Call"];
__v1992 := [ kValue, k, O ];
__v1990 := __v1991 (callbackfn, T, __v1992);
mappedValue := __v1990;
__v1993 := "newDataPropertyDescriptorFull" (mappedValue, true, true, true);
descriptor := __v1993;
__v1995 := A["DefineOwnProperty"];
__v1994 := __v1995 (A, Pk, descriptor, false)
};
__v1996 := k + 1.;
k := __v1996;
__v1983 := k < len };
return A };
function GetBase (V) { print "GetBase";
__v1997 := t_nth(V, 2);
return __v1997 };
function CreateMutableBinding (envRec, N, D) { __v1998 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v1998) {
__v1999 := "CreateMutableBindingDeclarative" (envRec, N, D);
return __v1999
};
__v2000 := "CreateMutableBindingObject" (envRec, N, D);
return __v2000 };
function initArrayLib (global, objectPrototype, strict) { __v2001 := "initArrayPrototype" (gobal, objectPrototype, strict);
objArrayPrototype := __v2001;
__v2003 := [ "items" ];
__v2002 := "CreateFunctionObject" (__v2003, "ArrayConstructor", global, strict);
objArrayConstructor := __v2002;
__v2004 := "newDataPropertyDescriptorFull" (objArrayPrototype, false, false, false);
descriptor := __v2004;
__v2005 := "setJSProperty" (objArrayConstructor, "prototype", descriptor);
__v2006 := "newDataPropertyDescriptorFull" (objArrayConstructor, true, false, true);
descriptor := __v2006;
__v2007 := "setJSProperty" (global, "Array", descriptor);
return objArrayConstructor };
function ToString (V) { __v2008 := "Type" (V);
v_type := __v2008;
__v2009 := v_type = "Undefined";
if (__v2009) {
return "undefined"
};
__v2010 := v_type = "Null";
if (__v2010) {
return 'null
};
__v2011 := v_type = "Boolean";
if (__v2011) {
__v2012 := V = true;
if (__v2012) {
return "true"
};
return "false"
};
__v2013 := v_type = "Number";
if (__v2013) {
__v2014 := float_to_string(V);
return __v2014
};
__v2015 := v_type = "String";
if (__v2015) {
return V
};
__v2016 := v_type = "Object";
if (__v2016) {
__v2017 := "ToPrimitive" (V, 'String);
primValue := __v2017;
__v2018 := "ToString" (primValue);
return __v2018
} };
function ArgumentsObjectGet (argumentObject, P) { __v2019 := argumentObject["ParameterMap"];
map := __v2019;
__v2020 := "GetOwnProperty" (map, P);
isMapped := __v2020;
__v2021 := isMapped = 'undefined;
if (__v2021) {
__v2022 := "Get" (argumentObject, P);
v := __v2022;
__v2024 := P = "caller";
__v2025 := "isStrictFunctionObject" (v);
__v2023 := __v2024 && __v2025;
if (__v2023) {
__v2026 := "TypeErrorException" ();
throw __v2026
};
return v
} else {
__v2027 := "Get" (map, P);
return __v2027
} };
function IdentifierResolution (Identifier, runningExecCtx) { __v2028 := "getLexicalEnvironment" (runningExecCtx);
env := __v2028;
__v2029 := "isContainedInStrictCode" (runningExecCtx);
if (__v2029) {
strict := true
} else {
strict := false
};
__v2030 := "GetIdentifierReference" (env, Identifier, strict);
return __v2030 };
function getPropertyName (propertyIdentifier) { __v2031 := t_nth(propertyIdentifier, 1);
return __v2031 };
function StrictEqualityComparison (x, y) { __v2034 := "Type" (x);
__v2035 := "Type" (y);
__v2033 := __v2034 = __v2035;
__v2032 := !(__v2033);
if (__v2032) {
return false
};
__v2037 := "Type" (x);
__v2036 := __v2037 = "Undefined";
if (__v2036) {
return true
};
__v2039 := "Type" (x);
__v2038 := __v2039 = "Null";
if (__v2038) {
return true
};
__v2041 := "Type" (x);
__v2040 := __v2041 = "Number";
if (__v2040) {
__v2042 := x = nan;
if (__v2042) {
return false
};
__v2043 := y = nan;
if (__v2043) {
return false
};
__v2044 := x = y;
if (__v2044) {
return true
};
__v2046 := x = 0;
__v2047 := y = 0;
__v2045 := __v2046 && __v2047;
if (__v2045) {
return true
};
__v2049 := x = 0;
__v2050 := y = 0;
__v2048 := __v2049 && __v2050;
if (__v2048) {
return false
};
return false
};
__v2052 := "Type" (x);
__v2051 := __v2052 = "String";
if (__v2051) {
__v2053 := x = y;
return __v2053
};
__v2055 := "Type" (x);
__v2054 := __v2055 = "Boolean";
if (__v2054) {
__v2056 := x = y;
return __v2056
};
__v2057 := x = y;
return __v2057 };
function setAllInternalMethodsOfArray (arr) { __v2058 := "setAllInternalMethodsOfObject" (arr);
arr["DefineOwnProperty"] := "DefineOwnPropertyArray";
return arr };
function TypeErrorException () { __v2059 := { };
__v2059["exception"] := "TypeError";
return __v2059 };
function Reject (Throw) { if (Throw) {
__v2060 := "TypeErrorException" ();
throw __v2060
} else {
return false
} };
function ToBoolean (argument) { __v2063 := "Type" (argument);
__v2062 := __v2063 = "Undefined";
__v2065 := "Type" (argument);
__v2064 := __v2065 = "Null";
__v2061 := __v2062 || __v2064;
if (__v2061) {
return false
};
__v2067 := "Type" (argument);
__v2066 := __v2067 = "Boolean";
if (__v2066) {
return argument
};
__v2069 := "Type" (argument);
__v2068 := __v2069 = "Number";
if (__v2068) {
__v2072 := argument = 0;
__v2073 := argument = 0;
__v2071 := __v2072 || __v2073;
__v2074 := argument = nan;
__v2070 := __v2071 || __v2074;
if (__v2070) {
return false
} else {
return true
};
return true
};
__v2076 := "Type" (argument);
__v2075 := __v2076 = "String";
if (__v2075) {
__v2077 := argument = "";
if (__v2077) {
return false
} else {
return true
}
};
__v2079 := "Type" (argument);
__v2078 := __v2079 = "Object";
if (__v2078) {
return true
} };
function Delete (O, P, Throw) { print "Delete";
__v2080 := "GetOwnProperty" (O, P);
desc := __v2080;
__v2081 := desc = 'undefined;
if (__v2081) {
return true
};
__v2083 := desc["Configurable"];
__v2082 := __v2083 = true;
if (__v2082) {
__v2084 := O["JSProperties"];
delete __v2084[P];
return true
} else {
if (Throw) {
__v2085 := "TypeErrorException" ();
throw __v2085
}
};
return false };
function ArgumentsObjectGetOwnProperty (argumentsObject, P) { __v2086 := "GetOwnProperty" (argumentsObject, P);
desc := __v2086;
__v2087 := desc = 'undefined;
if (__v2087) {
return desc
};
__v2088 := argumentsObject["ParameterMap"];
map := __v2088;
__v2089 := "GetOwnProperty" (map, P);
isMapped := __v2089;
__v2091 := isMapped = 'undefined;
__v2090 := !(__v2091);
if (__v2090) {
__v2092 := "Get" (map, P);
desc["Value"] := __v2092
};
return desc };
function Construct (F, argumentList) { __v2093 := { };
obj := __v2093;
__v2094 := "setAllInternalMethodsOfObject" (obj);
obj["Class"] := "Object";
obj["Extensible"] := true;
__v2095 := "Get" (F, "Prototype");
proto := __v2095;
__v2097 := "Type" (proto);
__v2096 := __v2097 = "Object";
if (__v2096) {
obj["Prototype"] := proto
};
__v2100 := "Type" (proto);
__v2099 := __v2100 = "Object";
__v2098 := !(__v2099);
if (__v2098) {
obj["Prototype"] := "$loc_OBJ_PROTOTYPE"
};
__v2101 := "Call" (F, obj, argumentList);
result := __v2101;
__v2103 := "Type" (result);
__v2102 := __v2103 = "Object";
if (__v2102) {
return result
};
return obj };
function IsUnresolvableReference (V) { print "IsUnresolvableReference";
__v2106 := "GetBase" (V);
__v2105 := "Type" (__v2106);
__v2104 := __v2105 = "Undefined";
if (__v2104) {
return true
} else {
return false
} };
function createImmutableBinding (declarativeEnvRec, name) { __v2107 := "newImmutableBinding" ('undefined);
declarativeEnvRec[name] := __v2107;
return 'undefined };
function NewObject () { __v2108 := { };
__v2109 := { };
__v2108["JSProperties"] := __v2109;
__v2108["Prototype"] := 'null;
__v2108["Extensible"] := true;
__v2108["Class"] := "Object";
__v2108["Put"] := "Put";
__v2108["Get"] := "Get";
return __v2108 };
function DeleteBinding (envRec, N) { __v2110 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v2110) {
__v2111 := "DeleteBindingDeclarative" (envRec, N);
return __v2111
};
__v2112 := "DeleteBindingObject" (envRec, N);
return __v2112 };
function arrayToString (global, this, args) { __v2113 := "ToObject" (this);
array := __v2113;
__v2115 := array["Get"];
__v2114 := __v2115 (array, "join");
func := __v2114;
__v2117 := "IsCallable" (func);
__v2116 := __v2117 = false;
if (__v2116) {
__v2118 := "getObjectPrototypeToString" (global);
func := __v2118
};
__v2120 := func["Call"];
__v2121 := [  ];
__v2119 := __v2120 (func, array, __v2121);
return __v2119 };
function JS_Interpreter_TryStatement (TryStatement, scope) { __v2122 := "type" in_obj TryStatement;
__v2124 := TryStatement["type"];
__v2123 := __v2124 = "TryStatement";
__v2125 := "block" in_obj TryStatement;
__v2126 := "handler" in_obj TryStatement;
__v2127 := "finalizer" in_obj TryStatement;
__v2129 := TryStatement["finalizer"];
__v2128 := __v2129 = null;
if (true && __v2122 && __v2123 && __v2125 && __v2126 && __v2127 && __v2128) {
Block := TryStatement["block"];
Catch := TryStatement["handler"];
__v2130 := "JS_Interpreter_Stmt" (Block, scope);
B := __v2130;
__v2133 := "getCompletionType" (B);
__v2132 := __v2133 = 'throw;
__v2131 := !(__v2132);
if (__v2131) {
return B
};
__v2135 := "getCompletionValue" (B);
__v2134 := "JS_Interpreter_Catch" (Catch, __v2135, scope);
return __v2134
} else {
__v2136 := "type" in_obj TryStatement;
__v2138 := TryStatement["type"];
__v2137 := __v2138 = "TryStatement";
__v2139 := "block" in_obj TryStatement;
__v2140 := "handler" in_obj TryStatement;
__v2142 := TryStatement["handler"];
__v2141 := __v2142 = null;
__v2143 := "finalizer" in_obj TryStatement;
if (true && __v2136 && __v2137 && __v2139 && __v2140 && __v2141 && __v2143) {
Block := TryStatement["block"];
Finally := TryStatement["finalizer"];
__v2144 := "JS_Interpreter_Stmt" (Block, scope);
B := __v2144;
__v2145 := "JS_Interpreter_Stmt" (Finally, scope);
F := __v2145;
__v2147 := "getCompletionType" (F);
__v2146 := __v2147 = 'normal;
if (__v2146) {
return B
};
return F
} else {
__v2148 := "type" in_obj TryStatement;
__v2150 := TryStatement["type"];
__v2149 := __v2150 = "TryStatement";
__v2151 := "block" in_obj TryStatement;
__v2152 := "handler" in_obj TryStatement;
__v2153 := "finalizer" in_obj TryStatement;
if (true && __v2148 && __v2149 && __v2151 && __v2152 && __v2153) {
Block := TryStatement["block"];
Catch := TryStatement["handler"];
Finally := TryStatement["finalizer"];
__v2154 := "JS_Interpreter_Stmt" (Block, scope);
B := __v2154;
__v2156 := "getCompletionType" (B);
__v2155 := __v2156 = 'throw;
if (__v2155) {
__v2158 := "getCompletionValue" (B);
__v2157 := "JS_Interpreter_Catch" (Catch, __v2158, scope);
C := __v2157
} else {
C := B
};
__v2159 := "JS_Interpreter_Stmt" (Finally, scope);
F := __v2159;
__v2161 := "getCompletionType" (F);
__v2160 := __v2161 = 'normal;
if (__v2160) {
return C
};
return F
}
}
} };
function JS_Interpreter_VarDecl (variableDeclaration, scope) { __v2162 := "type" in_obj variableDeclaration;
__v2164 := variableDeclaration["type"];
__v2163 := __v2164 = "VariableDeclarator";
__v2165 := "id" in_obj variableDeclaration;
__v2166 := "init" in_obj variableDeclaration;
__v2168 := variableDeclaration["init"];
__v2167 := __v2168 = null;
if (true && __v2162 && __v2163 && __v2165 && __v2166 && __v2167) {
Identifier := variableDeclaration["id"];
return Identifier
} else {
__v2169 := "type" in_obj variableDeclaration;
__v2171 := variableDeclaration["type"];
__v2170 := __v2171 = "VariableDeclarator";
__v2172 := "id" in_obj variableDeclaration;
__v2173 := "init" in_obj variableDeclaration;
if (true && __v2169 && __v2170 && __v2172 && __v2173) {
Identifier := variableDeclaration["id"];
Initialiser := variableDeclaration["init"];
__v2174 := "JS_Interpreter_Expr" (Identifier, scope);
lhs := __v2174;
__v2175 := "JS_Interpreter_Expr" (Initialiser, scope);
rhs := __v2175;
__v2176 := "GetValue" (rhs);
value := __v2176;
__v2179 := "getLexicalEnvironment" (scope);
__v2178 := "getGlobalObject" (__v2179);
__v2177 := "PutValue" (lhs, value, __v2178);
return Identifier
} else {
__v2180 := "type" in_obj variableDeclaration;
__v2182 := variableDeclaration["type"];
__v2181 := __v2182 = "VariableDeclaration";
__v2183 := "declarations" in_obj variableDeclaration;
if (true && __v2180 && __v2181 && __v2183) {
VariableDeclarationListNoIn := variableDeclaration["declarations"];
ret := 'null;
i := 0;
__v2184 := l_len(VariableDeclarationListNoIn);
ldeclarations := __v2184;
__v2185 := ldeclarations > i;
while (__v2185) { __v2187 := l_nth(VariableDeclarationListNoIn, i);
__v2186 := "JS_Interpreter_VarDecl" (__v2187, scope);
ret := __v2186;
__v2188 := i + 1;
i := __v2188;
__v2185 := ldeclarations > i };
return ret
}
}
} };
function ImplicitThisValueDeclarative (declarativeEnvRec) { return 'undefined };
function ToInt32 (argument) { __v2189 := "ToNumber" (argument);
number := __v2189;
__v2190 := to_int32(number);
return __v2190 };
function CopyDescriptor (Desc) { __v2191 := "IsDataPropertyDescriptor" (Desc);
if (__v2191) {
__v2193 := Desc["Value"];
__v2194 := Desc["Writable"];
__v2195 := Desc["Enumerable"];
__v2196 := Desc["Configurable"];
__v2192 := "newDataPropertyDescriptorFull" (__v2193, __v2194, __v2195, __v2196);
newDesc := __v2192;
return newDesc
};
throw "Incomplete CopyDescriptor - TODO" };
function InitialGlobalExecutionContext (globalObject, program) { __v2197 := "createExecutionContext" ();
globalExecCtx := __v2197;
__v2198 := "GlobalEnvironment" (globalObject);
globalEnv := __v2198;
__v2199 := "setVariableEnvironment" (globalExecCtx, globalEnv);
__v2200 := "setLexicalEnvironment" (globalExecCtx, globalEnv);
__v2201 := "setThisBinding" (globalExecCtx, globalObject);
__v2203 := "isStrictModeCode" (program, globalExecCtx);
__v2202 := "setContainedInStrictCode" (globalExecCtx, __v2203);
return globalExecCtx };
function JS_Interpreter_ForStmt_VarDecl (forStmt, scope) { __v2204 := "type" in_obj forStmt;
__v2206 := forStmt["type"];
__v2205 := __v2206 = "ForStatement";
__v2207 := "init" in_obj forStmt;
__v2208 := "test" in_obj forStmt;
__v2209 := "update" in_obj forStmt;
__v2210 := "body" in_obj forStmt;
__v2211 := "labelSet" in_obj forStmt;
if (true && __v2204 && __v2205 && __v2207 && __v2208 && __v2209 && __v2210 && __v2211) {
VariableDeclarationListNoIn := forStmt["init"];
Expression1 := forStmt["test"];
Expression2 := forStmt["update"];
Statement := forStmt["body"];
currentLabelSet := forStmt["labelSet"];
__v2212 := "JS_Interpreter_Stmt" (VariableDeclarationListNoIn, scope);
V := 'empty;
__v2214 := Expression1 = null;
__v2213 := !(__v2214);
if (__v2213) {
__v2215 := "JS_Interpreter_Expr" (Expression1, scope);
testExprRef := __v2215;
__v2218 := "GetValue" (testExprRef);
__v2217 := "ToBoolean" (__v2218);
__v2216 := __v2217 = false;
if (__v2216) {
__v2219 := "normalEmptyCompletion" (V);
return __v2219
}
};
__v2220 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v2220;
__v2223 := "getCompletionValue" (stmt);
__v2222 := __v2223 = 'empty;
__v2221 := !(__v2222);
if (__v2221) {
__v2225 := "getCompletionValue" (stmt);
__v2224 := V = __v2225
};
__v2228 := "getCompletionType" (stmt);
__v2227 := __v2228 = 'break;
__v2230 := "getCompletionTarget" (stmt);
__v2229 := __v2230 in_list currentLabelSet;
__v2226 := __v2227 && __v2229;
if (__v2226) {
__v2231 := "normalEmptyCompletion" (V);
return __v2231
};
__v2235 := "getCompletionType" (stmt);
__v2234 := __v2235 = 'continue;
__v2233 := !(__v2234);
__v2238 := "getCompletionTarget" (stmt);
__v2237 := __v2238 in_list currentLabelSet;
__v2236 := !(__v2237);
__v2232 := __v2233 || __v2236;
if (__v2232) {
__v2239 := "isAnAbruptCompletion" (stmt);
if (__v2239) {
return stmt
}
};
__v2241 := Expression2 = null;
__v2240 := !(__v2241);
if (__v2240) {
__v2242 := "JS_Interpreter_Expr" (Expression2, scope);
incExprRef := __v2242;
__v2243 := "GetValue" (incExprRef)
};
while (!(false)) { __v2214 := Expression1 = null;
__v2213 := !(__v2214);
if (__v2213) {
__v2215 := "JS_Interpreter_Expr" (Expression1, scope);
testExprRef := __v2215;
__v2218 := "GetValue" (testExprRef);
__v2217 := "ToBoolean" (__v2218);
__v2216 := __v2217 = false;
if (__v2216) {
__v2219 := "normalEmptyCompletion" (V);
return __v2219
}
};
__v2220 := "JS_Interpreter_Stmt" (Statement, scope);
stmt := __v2220;
__v2223 := "getCompletionValue" (stmt);
__v2222 := __v2223 = 'empty;
__v2221 := !(__v2222);
if (__v2221) {
__v2225 := "getCompletionValue" (stmt);
__v2224 := V = __v2225
};
__v2228 := "getCompletionType" (stmt);
__v2227 := __v2228 = 'break;
__v2230 := "getCompletionTarget" (stmt);
__v2229 := __v2230 in_list currentLabelSet;
__v2226 := __v2227 && __v2229;
if (__v2226) {
__v2231 := "normalEmptyCompletion" (V);
return __v2231
};
__v2235 := "getCompletionType" (stmt);
__v2234 := __v2235 = 'continue;
__v2233 := !(__v2234);
__v2238 := "getCompletionTarget" (stmt);
__v2237 := __v2238 in_list currentLabelSet;
__v2236 := !(__v2237);
__v2232 := __v2233 || __v2236;
if (__v2232) {
__v2239 := "isAnAbruptCompletion" (stmt);
if (__v2239) {
return stmt
}
};
__v2241 := Expression2 = null;
__v2240 := !(__v2241);
if (__v2240) {
__v2242 := "JS_Interpreter_Expr" (Expression2, scope);
incExprRef := __v2242;
__v2243 := "GetValue" (incExprRef)
} }
} };
function IsDataPropertyDescriptor (Desc) { __v2244 := Desc = 'undefined;
if (__v2244) {
return false
};
__v2247 := "Value" in_obj Desc;
__v2246 := !(__v2247);
__v2249 := "Writable" in_obj Desc;
__v2248 := !(__v2249);
__v2245 := __v2246 && __v2248;
if (__v2245) {
return false
};
return true };
function IsPropertyReference (V) { print "IsPropertyReference";
__v2254 := typeof(V);
__v2253 := __v2254 = __$Tuple;
__v2256 := t_len(V);
__v2255 := __v2256 = 5;
__v2252 := __v2253 && __v2255;
__v2258 := t_nth(V, 0);
__v2257 := __v2258 = "R";
__v2251 := __v2252 && __v2257;
__v2260 := t_nth(V, 1);
__v2259 := __v2260 = "P";
__v2250 := __v2251 && __v2259;
return __v2250 };
function newValueReference (base, referencedName, strict) { __v2261 := ( "R", "V", base, referencedName, strict );
return __v2261 };
function GetBindingValueDeclarative (declarativeEnvRec, N, S) { envRec := declarativeEnvRec;
__v2262 := N in_obj envRec;
if (!(__v2262)) {
throw "Assert failed: N in_obj envRec"
};
__v2263 := "isUninitialisedBinding" (envRec, N);
if (__v2263) {
__v2264 := S = false;
if (__v2264) {
return 'undefined
};
__v2265 := "ReferenceErrorException" ();
throw __v2265
} else {
__v2266 := "getBindingValue" (envRec, N);
return __v2266
} };
function JS_Interpreter_CaseBlock (caseBlock, input, scope) { __v2268 := l_nth(caseBlock, 1);
__v2267 := __v2268 = null;
if (__v2267) {
__v2269 := l_nth(caseBlock, 0);
casesA := __v2269;
__v2270 := "JS_Interpreter_CaseBlock_CaseClauses" (casesA, input, scope);
return __v2270
} else {
__v2271 := l_nth(caseBlock, 0);
clausesA := __v2271;
__v2272 := l_nth(caseBlock, 1);
defaultClause := __v2272;
__v2273 := l_nth(caseBlock, 2);
clausesB := __v2273;
__v2274 := "JS_Interpreter_CaseBlock_ClausesA_DefaultClause_ClausesB" (clausesA, defaultClause, clausesB, input, scope);
return __v2274
} };
function arrayShift (global, this, args) { __v2275 := "ToObject" (this);
O := __v2275;
__v2277 := O["Get"];
__v2276 := __v2277 (O, "length");
lenVal := __v2276;
__v2278 := "ToUint32" (lenVal);
len := __v2278;
__v2279 := len = 0.;
if (__v2279) {
__v2281 := O["Put"];
__v2280 := __v2281 (O, "length", 0., true);
return 'undefined
};
__v2283 := O["Get"];
__v2282 := __v2283 (O, "0");
first := __v2282;
k := 1.;
__v2284 := k < len;
while (__v2284) { __v2285 := "ToString" (k);
from := __v2285;
__v2287 := k - 1.;
__v2286 := "ToString" (__v2287);
to := __v2286;
__v2289 := O["HasProperty"];
__v2288 := __v2289 (O, from);
fromPresent := __v2288;
__v2290 := fromPresent = true;
if (__v2290) {
__v2292 := O["Get"];
__v2291 := __v2292 (O, from);
fromVal := __v2291;
__v2294 := O["Put"];
__v2293 := __v2294 (O, to, fromVal, true)
} else {
__v2296 := O["Delete"];
__v2295 := __v2296 (O, to, true)
};
__v2297 := k + 1.;
k := __v2297;
__v2284 := k < len };
__v2299 := O["Delete"];
__v2301 := len - 1.;
__v2300 := "ToString" (__v2301);
__v2298 := __v2299 (O, __v2300, true);
__v2303 := O["Put"];
__v2304 := len - 1.;
__v2302 := __v2303 (O, "length", __v2304, true);
return first };
function arrayReverse (global, this, args) { __v2305 := "ToObject" (this);
O := __v2305;
__v2307 := O["Get"];
__v2306 := __v2307 (O, "length");
lenVal := __v2306;
__v2308 := "ToUint32" (lenVal);
len := __v2308;
__v2310 := len / 2.;
__v2309 := floor(__v2310);
middle := __v2309;
lower := 0.;
__v2312 := lower = middle;
__v2311 := !(__v2312);
while (__v2311) { __v2314 := len - lower;
__v2313 := __v2314 - 1.;
upper := __v2313;
__v2315 := "ToString" (upper);
upperP := __v2315;
__v2316 := "ToString" (lower);
lowerP := __v2316;
__v2318 := O["Get"];
__v2317 := __v2318 (O, lowerP);
lowerValue := __v2317;
__v2320 := O["Get"];
__v2319 := __v2320 (O, upperP);
upperValue := __v2319;
__v2322 := O["HasProperty"];
__v2321 := __v2322 (O, lowerP);
lowerExists := __v2321;
__v2324 := O["HasProperty"];
__v2323 := __v2324 (O, upperP);
upperExists := __v2323;
__v2327 := lowerExists = true;
__v2326 := __v2327 && upperExists;
__v2325 := __v2326 = true;
if (__v2325) {
__v2329 := O["Put"];
__v2328 := __v2329 (O, lowerP, upperValue, true);
__v2331 := O["Put"];
__v2330 := __v2331 (O, upperP, lowerValue, true)
};
__v2334 := lowerExists = false;
__v2333 := __v2334 && upperExists;
__v2332 := __v2333 = true;
if (__v2332) {
__v2336 := O["Put"];
__v2335 := __v2336 (O, lowerP, upperValue, true);
__v2338 := O["Delete"];
__v2337 := __v2338 (O, upperP, true)
};
__v2341 := lowerExists = true;
__v2340 := __v2341 && upperExists;
__v2339 := __v2340 = false;
if (__v2339) {
__v2343 := O["Delete"];
__v2342 := __v2343 (O, lowerP, true);
__v2345 := O["Put"];
__v2344 := __v2345 (O, upperP, lowerValue, true)
};
__v2348 := lowerExists = false;
__v2347 := __v2348 && upperExists;
__v2346 := __v2347 = false;
if (__v2346) {

};
__v2349 := lower + 1.;
lower := __v2349;
__v2312 := lower = middle;
__v2311 := !(__v2312) };
return O };
function internalNewArrayLen (arrayPrototype, len) { __v2350 := { };
__v2351 := { };
__v2350["JSProperties"] := __v2351;
__v2350["Prototype"] := 'null;
__v2350["Class"] := "Array";
__v2350["Extensible"] := true;
__v2350["Put"] := "Put";
__v2350["Get"] := "Get";
__v2350["HasProperty"] := "HasProperty";
__v2350["DefineOwnProperty"] := "DefineOwnPropertyArray";
__v2350["GetOwnProperty"] := "GetOwnProperty";
__v2350["Delete"] := "Delete";
arr := __v2350;
__v2353 := typeof(len);
__v2352 := __v2353 = __$Flt;
lenIsNumber := __v2352;
__v2356 := "ToUint32" (len);
__v2355 := __v2356 = len;
__v2354 := lenIsNumber && __v2355;
if (__v2354) {
__v2359 := "ToUint32" (len);
__v2358 := "newDataPropertyDescriptorFull" (__v2359, true, false, false);
__v2357 := "setJSProperty" (arr, "length", __v2358)
};
__v2363 := "ToUint32" (len);
__v2362 := __v2363 = len;
__v2361 := !(__v2362);
__v2360 := lenIsNumber && __v2361;
if (__v2360) {
__v2364 := "RangeErrorException" ();
throw __v2364
};
__v2365 := !(lenIsNumber);
if (__v2365) {
__v2368 := "ToUint32" (1.);
__v2367 := "newDataPropertyDescriptorFull" (__v2368, true, false, false);
__v2366 := "setJSProperty" (arr, "length", __v2367);
__v2370 := "newDataPropertyDescriptorFull" (len, true, true, true);
__v2369 := "setJSProperty" (arr, "0", __v2370)
};
return arr };
function IsGenericPropertyDescriptor (Desc) { __v2371 := Desc = 'undefined;
if (__v2371) {
return false
};
__v2374 := "IsAccessorPropertyDescriptor" (Desc);
__v2373 := !(__v2374);
__v2376 := "IsDataPropertyDescriptor" (Desc);
__v2375 := !(__v2376);
__v2372 := __v2373 && __v2375;
if (__v2372) {
return true
};
return false };
function isArray (global, this, args) { __v2377 := l_nth(args, 0);
arg := __v2377;
__v2380 := "Type" (arg);
__v2379 := __v2380 = "Object";
__v2378 := !(__v2379);
if (__v2378) {
return false
};
__v2382 := arg["Class"];
__v2381 := __v2382 = "Array";
if (__v2381) {
return true
};
return false };
function max (a, b) { __v2383 := a > b;
if (__v2383) {
return a
} else {
return b
} };
function formingTheValueOfTheNumericLiteral (literal) { __v2385 := typeof(literal);
__v2384 := __v2385 = __$Int;
if (__v2384) {
__v2386 := int_to_float(literal);
return __v2386
} else {
return literal
} };
function GetBindingValue (envRec, N, S) { print "GetBindingValue";
__v2387 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v2387) {
__v2388 := "GetBindingValueDeclarative" (envRec, N, S);
return __v2388
};
__v2389 := "GetBindingValueObject" (envRec, N, S);
return __v2389 };
function JS_Interpreter_Program (p) { __v2390 := "sourceType" in_obj p;
__v2392 := p["sourceType"];
__v2391 := __v2392 = "script";
__v2393 := "type" in_obj p;
__v2395 := p["type"];
__v2394 := __v2395 = "Program";
__v2396 := "body" in_obj p;
__v2397 := "strict" in_obj p;
if (true && __v2390 && __v2391 && __v2393 && __v2394 && __v2396 && __v2397) {
SourceElementsopt := p["body"];
strict := p["strict"];
__v2399 := [  ];
__v2398 := SourceElementsopt = __v2399;
if (__v2398) {
__v2400 := "normalEmptyCompletion" ('empty);
return __v2400
};
__v2401 := "EnteringGlobalCode" (p);
progCxt := __v2401;
__v2402 := "JS_Interpreter_SourceElements" (SourceElementsopt, progCxt);
result := __v2402;
print progCxt;
return result
} };
function isPropertyDescriptor (obj) { __v2404 := "Enumerable" in_obj obj;
__v2405 := "Configurable" in_obj obj;
__v2403 := __v2404 || __v2405;
return __v2403 };
function ToObject (V) { __v2406 := "Type" (V);
v_type := __v2406;
__v2408 := v_type = "Undefined";
__v2409 := v_type = "Null";
__v2407 := __v2408 || __v2409;
if (__v2407) {
__v2410 := "TypeErrorException" ();
throw __v2410
};
__v2411 := v_type = "Boolean";
if (__v2411) {
__v2412 := "newBoolean" (V);
return __v2412
};
__v2413 := v_type = "Number";
if (__v2413) {
__v2414 := "newNumber" (V);
return __v2414
};
__v2415 := v_type = "String";
if (__v2415) {
__v2416 := "newString" (V);
return __v2416
};
__v2417 := v_type = "Object";
if (__v2417) {
return V
} };
function getArrayPrototype (globalObject, strict) { __v2418 := "newPropertyReference" (globalObject, "Array", strict);
refArray := __v2418;
__v2419 := "GetValue" (refArray);
ArrayObject := __v2419;
__v2420 := "newPropertyReference" (ArrayObject, "prototype", strict);
refArrayProto := __v2420;
__v2421 := "GetValue" (refArrayProto);
objectArrayProto := __v2421;
return objectArrayProto };
function isJavaScriptObject (obj) { __v2422 := "Prototype" in_obj obj;
return __v2422 };
function arraySort (global, this, args) { __v2423 := l_nth(args, 0);
comparefn := __v2423;
__v2424 := "ToObject" (this);
obj := __v2424;
__v2427 := obj["Get"];
__v2426 := __v2427 (obj, "length");
__v2425 := "ToUint32" (__v2426);
len := __v2425;
__v2428 := obj["Prototype"];
proto := __v2428;
k := 1.;
__v2429 := k < len;
while (__v2429) { __v2430 := k - 1.;
j := __v2430;
__v2432 := j >= 0.;
__v2435 := j + 1.;
__v2434 := "SortCompare" (obj, comparefn, j, __v2435);
__v2433 := __v2434 > 0.;
__v2431 := __v2432 && __v2433;
while (__v2431) { __v2437 := obj["Get"];
__v2439 := j + 1.;
__v2438 := "ToString" (__v2439);
__v2436 := __v2437 (obj, __v2438);
jValNext := __v2436;
__v2441 := obj["Get"];
__v2442 := "ToString" (j);
__v2440 := __v2441 (obj, __v2442);
jVal := __v2440;
__v2444 := obj["Put"];
__v2446 := j + 1.;
__v2445 := "ToString" (__v2446);
__v2443 := __v2444 (obj, __v2445, jVal, true);
__v2448 := obj["Put"];
__v2449 := "ToString" (j);
__v2447 := __v2448 (obj, __v2449, jValNext, true);
__v2450 := j - 1.;
j := __v2450;
__v2432 := j >= 0.;
__v2435 := j + 1.;
__v2434 := "SortCompare" (obj, comparefn, j, __v2435);
__v2433 := __v2434 > 0.;
__v2431 := __v2432 && __v2433 };
__v2451 := k + 1.;
k := __v2451;
__v2429 := k < len };
return obj };
function isContainedInStrictCode (execCtx) { __v2452 := execCtx["strictCode"];
return __v2452 };
function JS_Interpreter_CaseBlock_CaseClauses (caseClauses, input, scope) { V := 'empty;
A := caseClauses;
searching := true;
i := 0;
__v2453 := "getNextCaseClause" (A, i);
C := __v2453;
__v2454 := i + 1;
i := __v2454;
__v2455 := C = "None";
if (__v2455) {
__v2456 := "normalEmptyCompletion" (V);
return __v2456
};
__v2457 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v2457;
__v2459 := "GetValue" (clauseSelector);
__v2460 := "GetValue" (input);
__v2458 := "StrictEqualityComparison" (__v2459, __v2460);
if (__v2458) {
searching := false;
__v2461 := "hasStatementList" (C);
if (__v2461) {
__v2463 := "getCaseClauseStatementList" (C);
__v2462 := "JS_Interpreter_StmtList" (__v2463, scope);
R := __v2462;
__v2464 := "isAnAbruptCompletion" (R);
if (__v2464) {
return R
};
__v2465 := "getCompletionValue" (R);
V := __v2465
}
};
__v2466 := searching = false;
while (!(__v2466)) { __v2453 := "getNextCaseClause" (A, i);
C := __v2453;
__v2454 := i + 1;
i := __v2454;
__v2455 := C = "None";
if (__v2455) {
__v2456 := "normalEmptyCompletion" (V);
return __v2456
};
__v2457 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v2457;
__v2459 := "GetValue" (clauseSelector);
__v2460 := "GetValue" (input);
__v2458 := "StrictEqualityComparison" (__v2459, __v2460);
if (__v2458) {
searching := false;
__v2461 := "hasStatementList" (C);
if (__v2461) {
__v2463 := "getCaseClauseStatementList" (C);
__v2462 := "JS_Interpreter_StmtList" (__v2463, scope);
R := __v2462;
__v2464 := "isAnAbruptCompletion" (R);
if (__v2464) {
return R
};
__v2465 := "getCompletionValue" (R);
V := __v2465
}
};
__v2466 := searching = false };
i := 0;
__v2467 := "getNextCaseClause" (A, i);
C := __v2467;
__v2468 := i + 1;
i := __v2468;
__v2469 := C = "None";
if (__v2469) {
__v2470 := "normalEmptyCompletion" (V);
return __v2470
};
__v2471 := "hasStatementList" (C);
if (__v2471) {
__v2473 := "getCaseClauseStatementList" (C);
__v2472 := "JS_Interpreter_StmtList" (__v2473, scope);
R := __v2472;
__v2476 := "getCompletionValue" (R);
__v2475 := __v2476 = 'empty;
__v2474 := !(__v2475);
if (__v2474) {
__v2477 := "getCompletionValue" (R);
V := __v2477
};
__v2478 := "isAnAbruptCompletion" (R);
if (__v2478) {
__v2480 := "getCompletionType" (R);
__v2481 := "getCompletionTarget" (R);
__v2479 := "newCompletion" (__v2480, V, __v2481);
return __v2479
}
};
while (!(false)) { __v2467 := "getNextCaseClause" (A, i);
C := __v2467;
__v2468 := i + 1;
i := __v2468;
__v2469 := C = "None";
if (__v2469) {
__v2470 := "normalEmptyCompletion" (V);
return __v2470
};
__v2471 := "hasStatementList" (C);
if (__v2471) {
__v2473 := "getCaseClauseStatementList" (C);
__v2472 := "JS_Interpreter_StmtList" (__v2473, scope);
R := __v2472;
__v2476 := "getCompletionValue" (R);
__v2475 := __v2476 = 'empty;
__v2474 := !(__v2475);
if (__v2474) {
__v2477 := "getCompletionValue" (R);
V := __v2477
};
__v2478 := "isAnAbruptCompletion" (R);
if (__v2478) {
__v2480 := "getCompletionType" (R);
__v2481 := "getCompletionTarget" (R);
__v2479 := "newCompletion" (__v2480, V, __v2481);
return __v2479
}
} } };
function internalNewArray (arrayPrototype, items) { __v2482 := { };
__v2483 := { };
__v2482["JSProperties"] := __v2483;
__v2482["Prototype"] := arrayPrototype;
__v2482["Extensible"] := true;
__v2482["Class"] := "Array";
__v2482["Put"] := "Put";
__v2482["Get"] := "Get";
__v2482["HasProperty"] := "HasProperty";
__v2482["DefineOwnProperty"] := "DefineOwnPropertyArray";
__v2482["GetOwnProperty"] := "GetOwnProperty";
__v2482["Delete"] := "Delete";
arr := __v2482;
i := 0;
__v2484 := l_len(items);
len := __v2484;
__v2487 := int_to_float(len);
__v2486 := "newDataPropertyDescriptorFull" (__v2487, true, false, false);
__v2485 := "setJSProperty" (arr, "length", __v2486);
__v2488 := i < len;
while (__v2488) { __v2489 := int_to_string(i);
i_str := __v2489;
__v2492 := l_nth(items, i);
__v2491 := "newDataPropertyDescriptorFull" (__v2492, true, true, true);
__v2490 := "setJSProperty" (arr, i_str, __v2491);
__v2493 := i + 1;
i := __v2493;
__v2488 := i < len };
return arr };
function getProvideThis (objectEnvRec) { __v2494 := objectEnvRec["provideThis"];
return __v2494 };
function setLexicalEnvironment (runningExecCtx, lexicalEnvironment) { runningExecCtx["LexicalEnvironment"] := lexicalEnvironment;
return 'undefined };
function PutValue (V, W, globalObject) { print "PutValue";
__v2497 := "Type" (V);
__v2496 := __v2497 = "Reference";
__v2495 := !(__v2496);
if (__v2495) {
__v2498 := "ReferenceErrorException" ();
throw __v2498
};
__v2499 := "GetBase" (V);
base := __v2499;
__v2500 := "IsUnresolvableReference" (V);
if (__v2500) {
__v2501 := "IsStrictReference" (V);
if (__v2501) {
__v2502 := "ReferenceErrorException" ();
throw __v2502
};
__v2504 := "GetReferencedName" (V);
__v2503 := "Put" (globalObject, __v2504, W, false)
} else {
__v2505 := "IsPropertyReference" (V);
if (__v2505) {
__v2507 := "HasPrimitiveBase" (V);
__v2506 := __v2507 = false;
if (__v2506) {
__v2508 := base["Put"];
put := __v2508
} else {
put := "Put_internal"
};
__v2510 := "GetReferencedName" (V);
__v2511 := "IsStrictReference" (V);
__v2509 := put (base, __v2510, W, __v2511)
} else {
__v2513 := "GetReferencedName" (V);
__v2514 := "IsStrictReference" (V);
__v2512 := "SetMutableBinding" (base, __v2513, W, __v2514)
}
};
return  };
function ArrayConstructor (global, this, items) { __v2515 := "getArrayPrototype" (global, false);
prototype := __v2515;
__v2516 := "internalNewArray" (prototype, items);
return __v2516 };
function newObjectEnvironmentRecord (bindingObj) { __v2517 := { };
__v2517["isObjectEnvRec"] := true;
__v2517["bindingObject"] := bindingObj;
__v2517["provideThis"] := false;
objEnvRec := __v2517;
return objEnvRec };
function DefineOwnProperty (O, P, Desc, Throw) { print "DefineOwnProperty";
__v2518 := "GetOwnProperty" (O, P);
current := __v2518;
__v2519 := O["Extensible"];
extensible := __v2519;
__v2521 := current = 'undefined;
__v2522 := extensible = false;
__v2520 := __v2521 && __v2522;
if (__v2520) {
__v2523 := "Reject" (Throw);
return __v2523
};
__v2525 := current = 'undefined;
__v2526 := extensible = true;
__v2524 := __v2525 && __v2526;
if (__v2524) {
__v2528 := "IsGenericPropertyDescriptor" (Desc);
__v2529 := "IsDataPropertyDescriptor" (Desc);
__v2527 := __v2528 || __v2529;
if (__v2527) {
__v2531 := "CreateDataPropertyFrom" (Desc);
__v2530 := "setJSProperty" (O, P, __v2531)
} else {
__v2533 := "CreateAccessorPropertyFrom" (Desc);
__v2532 := "setJSProperty" (O, P, __v2533)
};
return true
};
__v2534 := "EveryFieldIsAbsent" (Desc);
if (__v2534) {
return true
};
__v2542 := "Value" in_obj Desc;
__v2541 := !(__v2542);
if (__v2541 = true) {
__v2540 := true
} else {
__v2544 := "Value" in_obj current;
if (__v2544 = false) {
__v2543 := false
} else {
__v2546 := Desc["Value"];
__v2547 := current["Value"];
__v2545 := "SameValue" (__v2546, __v2547);
if (__v2545 = false) {
__v2543 := false
} else {
__v2543 := true
}
};
if (__v2543 = true) {
__v2540 := true
} else {
__v2540 := false
}
};
if (__v2540 = false) {
__v2539 := false
} else {
__v2550 := "Writable" in_obj Desc;
__v2549 := !(__v2550);
if (__v2549 = true) {
__v2548 := true
} else {
__v2552 := "Writable" in_obj current;
if (__v2552 = false) {
__v2551 := false
} else {
__v2554 := Desc["Writable"];
__v2555 := current["Writable"];
__v2553 := "SameValue" (__v2554, __v2555);
if (__v2553 = false) {
__v2551 := false
} else {
__v2551 := true
}
};
if (__v2551 = true) {
__v2548 := true
} else {
__v2548 := false
}
};
if (__v2548 = false) {
__v2539 := false
} else {
__v2539 := true
}
};
if (__v2539 = false) {
__v2538 := false
} else {
__v2558 := "Set" in_obj Desc;
__v2557 := !(__v2558);
if (__v2557 = true) {
__v2556 := true
} else {
__v2560 := "Set" in_obj current;
if (__v2560 = false) {
__v2559 := false
} else {
__v2562 := Desc["Set"];
__v2563 := current["Set"];
__v2561 := "SameValue" (__v2562, __v2563);
if (__v2561 = false) {
__v2559 := false
} else {
__v2559 := true
}
};
if (__v2559 = true) {
__v2556 := true
} else {
__v2556 := false
}
};
if (__v2556 = false) {
__v2538 := false
} else {
__v2538 := true
}
};
if (__v2538 = false) {
__v2537 := false
} else {
__v2566 := "Get" in_obj Desc;
__v2565 := !(__v2566);
if (__v2565 = true) {
__v2564 := true
} else {
__v2568 := "Get" in_obj current;
if (__v2568 = false) {
__v2567 := false
} else {
__v2570 := Desc["Get"];
__v2571 := current["Get"];
__v2569 := "SameValue" (__v2570, __v2571);
if (__v2569 = false) {
__v2567 := false
} else {
__v2567 := true
}
};
if (__v2567 = true) {
__v2564 := true
} else {
__v2564 := false
}
};
if (__v2564 = false) {
__v2537 := false
} else {
__v2537 := true
}
};
if (__v2537 = false) {
__v2536 := false
} else {
__v2574 := "Enumerable" in_obj Desc;
__v2573 := !(__v2574);
if (__v2573 = true) {
__v2572 := true
} else {
__v2576 := "Enumerable" in_obj current;
if (__v2576 = false) {
__v2575 := false
} else {
__v2578 := Desc["Enumerable"];
__v2579 := current["Enumerable"];
__v2577 := "SameValue" (__v2578, __v2579);
if (__v2577 = false) {
__v2575 := false
} else {
__v2575 := true
}
};
if (__v2575 = true) {
__v2572 := true
} else {
__v2572 := false
}
};
if (__v2572 = false) {
__v2536 := false
} else {
__v2536 := true
}
};
if (__v2536 = false) {
__v2535 := false
} else {
__v2582 := "Configurable" in_obj Desc;
__v2581 := !(__v2582);
if (__v2581 = true) {
__v2580 := true
} else {
__v2584 := "Configurable" in_obj current;
if (__v2584 = false) {
__v2583 := false
} else {
__v2586 := Desc["Configurable"];
__v2587 := current["Configurable"];
__v2585 := "SameValue" (__v2586, __v2587);
if (__v2585 = false) {
__v2583 := false
} else {
__v2583 := true
}
};
if (__v2583 = true) {
__v2580 := true
} else {
__v2580 := false
}
};
if (__v2580 = false) {
__v2535 := false
} else {
__v2535 := true
}
};
if (__v2535) {
return true
};
__v2589 := current["Configurable"];
__v2588 := __v2589 = false;
if (__v2588) {
__v2591 := Desc["Configurable"];
__v2590 := __v2591 = true;
if (__v2590) {
__v2592 := "Reject" (Throw);
return __v2592
};
__v2593 := "Enumerable" in_obj Desc;
if (__v2593) {
__v2596 := Desc["Enumerable"];
__v2595 := !(__v2596);
__v2597 := current["Enumerable"];
__v2594 := __v2595 = __v2597;
if (__v2594) {
__v2598 := "Reject" (Throw);
return __v2598
}
}
};
__v2599 := "IsGenericPropertyDescriptor" (Desc);
if (__v2599) {

} else {
__v2602 := "IsDataPropertyDescriptor" (current);
__v2603 := "IsDataPropertyDescriptor" (Desc);
__v2601 := __v2602 = __v2603;
__v2600 := !(__v2601);
if (__v2600) {
__v2605 := current["Configurable"];
__v2604 := __v2605 = false;
if (__v2604) {
__v2606 := "Reject" (Throw);
return __v2606
};
__v2607 := "IsDataPropertyDescriptor" (current);
if (__v2607) {
__v2609 := O["JSProperties"];
__v2608 := __v2609[P];
delete __v2608["Value"];
__v2611 := O["JSProperties"];
__v2610 := __v2611[P];
delete __v2610["Writable"];
__v2613 := O["JSProperties"];
__v2612 := __v2613[P];
__v2612["Set"] := 'undefined;
__v2615 := O["JSProperties"];
__v2614 := __v2615[P];
__v2614["Get"] := 'undefined
} else {
__v2617 := O["JSProperties"];
__v2616 := __v2617[P];
delete __v2616["Set"];
__v2619 := O["JSProperties"];
__v2618 := __v2619[P];
delete __v2618["Get"];
__v2621 := O["JSProperties"];
__v2620 := __v2621[P];
__v2620["Value"] := 'undefined;
__v2623 := O["JSProperties"];
__v2622 := __v2623[P];
__v2622["Writable"] := false
}
} else {
__v2625 := "IsDataPropertyDescriptor" (current);
__v2626 := "IsDataPropertyDescriptor" (Desc);
__v2624 := __v2625 && __v2626;
if (__v2624) {
__v2628 := current["Configurable"];
__v2627 := __v2628 = false;
if (__v2627) {
__v2631 := current["Writable"];
__v2630 := __v2631 = false;
__v2633 := Desc["Writable"];
__v2632 := __v2633 = true;
__v2629 := __v2630 && __v2632;
if (__v2629) {
__v2634 := "Reject" (Throw);
return __v2634
};
__v2636 := current["Writable"];
__v2635 := __v2636 = false;
if (__v2635) {
__v2638 := "Value" in_obj Desc;
__v2641 := Desc["Value"];
__v2642 := current["Value"];
__v2640 := "SameValue" (__v2641, __v2642);
__v2639 := __v2640 = false;
__v2637 := __v2638 && __v2639;
if (__v2637) {
__v2643 := "Reject" (Throw);
return __v2643
}
}
} else {

}
} else {
__v2645 := current["Configurable"];
__v2644 := __v2645 = false;
if (__v2644) {
__v2647 := "Set" in_obj Desc;
__v2650 := Desc["Set"];
__v2651 := current["Set"];
__v2649 := "SameValue" (__v2650, __v2651);
__v2648 := __v2649 = false;
__v2646 := __v2647 && __v2648;
if (__v2646) {
__v2652 := "Reject" (Throw);
return __v2652
};
__v2654 := "Get" in_obj Desc;
__v2657 := Desc["Get"];
__v2658 := current["Get"];
__v2656 := "SameValue" (__v2657, __v2658);
__v2655 := __v2656 = false;
__v2653 := __v2654 && __v2655;
if (__v2653) {
__v2659 := "Reject" (Throw);
return __v2659
}
}
}
}
};
__v2660 := "Value" in_obj Desc;
if (__v2660) {
__v2662 := O["JSProperties"];
__v2661 := __v2662[P];
__v2663 := Desc["Value"];
__v2661["Value"] := __v2663
};
__v2664 := "Writable" in_obj Desc;
if (__v2664) {
__v2666 := O["JSProperties"];
__v2665 := __v2666[P];
__v2667 := Desc["Writable"];
__v2665["Writable"] := __v2667
};
__v2668 := "Set" in_obj Desc;
if (__v2668) {
__v2670 := O["JSProperties"];
__v2669 := __v2670[P];
__v2671 := Desc["Set"];
__v2669["Set"] := __v2671
};
__v2672 := "Get" in_obj Desc;
if (__v2672) {
__v2674 := O["JSProperties"];
__v2673 := __v2674[P];
__v2675 := Desc["Get"];
__v2673["Get"] := __v2675
};
__v2676 := "Enumerable" in_obj Desc;
if (__v2676) {
__v2678 := O["JSProperties"];
__v2677 := __v2678[P];
__v2679 := Desc["Enumerable"];
__v2677["Enumerable"] := __v2679
};
__v2680 := "Configurable" in_obj Desc;
if (__v2680) {
__v2682 := O["JSProperties"];
__v2681 := __v2682[P];
__v2683 := Desc["Configurable"];
__v2681["Configurable"] := __v2683
};
return true };
function getCaseClauseStatementList (caseClause) { __v2684 := "type" in_obj caseClause;
__v2686 := caseClause["type"];
__v2685 := __v2686 = "SwitchCase";
__v2687 := "consequent" in_obj caseClause;
if (true && __v2684 && __v2685 && __v2687) {
StatementList := caseClause["consequent"];
return StatementList
} else {
if (true) {
__v2688 := "SyntaxErrorException" ();
throw __v2688
}
} };
function IsCallable (V) { __v2689 := "Type" (V);
v_type := __v2689;
__v2690 := v_type = "Object";
if (__v2690) {
__v2691 := "Call" in_obj V;
if (__v2691) {
return true
};
return false
};
return false };
function setThisBinding (runningExecCtx, thisBinding) { runningExecCtx["ThisBinding"] := thisBinding;
return 'undefined };
function RangeErrorException () { __v2692 := { };
__v2692["exception"] := "RangeError";
return __v2692 };
function JS_Interpreter_Expr (e, scope) { __v2693 := "type" in_obj e;
__v2695 := e["type"];
__v2694 := __v2695 = "ThisExpression";
if (true && __v2693 && __v2694) {
__v2696 := "getThisBinding" (scope);
return __v2696
} else {
__v2697 := "type" in_obj e;
__v2699 := e["type"];
__v2698 := __v2699 = "Identifier";
__v2700 := "name" in_obj e;
if (true && __v2697 && __v2698 && __v2700) {
name := e["name"];
__v2701 := "IdentifierResolution" (name, scope);
return __v2701
} else {
__v2702 := "type" in_obj e;
__v2704 := e["type"];
__v2703 := __v2704 = "Literal";
__v2705 := "value" in_obj e;
if (true && __v2702 && __v2703 && __v2705) {
value := e["value"];
__v2706 := "formingTheValueOfTheNumericLiteral" (value);
return __v2706
} else {
__v2707 := "type" in_obj e;
__v2709 := e["type"];
__v2708 := __v2709 = "ArrayExpression";
__v2710 := "elements" in_obj e;
if (true && __v2707 && __v2708 && __v2710) {
ElementList := e["elements"];
__v2712 := "getGlobalObject" (scope);
__v2711 := "getArrayPrototype" (__v2712, false);
arrayPrototype := __v2711;
__v2714 := [  ];
__v2713 := "internalNewArray" (arrayPrototype, __v2714);
array := __v2713;
__v2715 := l_len(ElementList);
len := __v2715;
i := 0;
__v2716 := i < len;
while (__v2716) { __v2717 := l_nth(ElementList, i);
el := __v2717;
__v2718 := el = null;
if (__v2718) {
initValue := 'undefined
} else {
__v2719 := "JS_Interpreter_Expr" (e, scope);
initResult := __v2719;
__v2720 := "GetValue" (initResult);
initValue := __v2720
};
__v2721 := "newDataPropertyDescriptorFull" (initValue, true, true, true);
descriptor := __v2721;
__v2723 := array["DefineOwnProperty"];
__v2725 := "ToUint32" (i);
__v2724 := "ToString" (__v2725);
__v2722 := __v2723 (array, __v2724, descriptor, false);
__v2726 := i + 1;
i := __v2726;
__v2716 := i < len };
return array
} else {
__v2727 := "type" in_obj e;
__v2729 := e["type"];
__v2728 := __v2729 = "ObjectExpression";
if (true && __v2727 && __v2728) {
__v2730 := "JS_Interpreter_ObjectInitializer" (e, scope);
return __v2730
} else {
__v2731 := "type" in_obj e;
__v2733 := e["type"];
__v2732 := __v2733 = "ProtoAssignment";
__v2734 := "object" in_obj e;
__v2735 := "value" in_obj e;
if (true && __v2731 && __v2732 && __v2734 && __v2735) {
Object := e["object"];
Expression := e["value"];
__v2736 := "JS_Interpreter_Expr" (Object, scope);
objectReference := __v2736;
__v2737 := "GetValue" (objectReference);
objectLocation := __v2737;
__v2738 := "JS_Interpreter_Expr" (Expression, scope);
valueReference := __v2738;
__v2739 := "GetValue" (valueReference);
value := __v2739;
objectLocation["Prototype"] := value;
return value
} else {
__v2740 := "type" in_obj e;
__v2742 := e["type"];
__v2741 := __v2742 = "ESLPrint";
__v2743 := "value" in_obj e;
if (true && __v2740 && __v2741 && __v2743) {
Argument := e["value"];
__v2744 := "JS_Interpreter_Expr" (Argument, scope);
arg := __v2744;
__v2745 := "GetValue" (arg);
argValue := __v2745;
__v2747 := [ "JSPrint - ", argValue ];
__v2746 := s_concat(__v2747);
print __v2746;
return argValue
} else {
__v2748 := "type" in_obj e;
__v2750 := e["type"];
__v2749 := __v2750 = "MemberExpression";
__v2751 := "object" in_obj e;
__v2752 := "property" in_obj e;
if (true && __v2748 && __v2749 && __v2751 && __v2752) {
MemberExpression := e["object"];
Expression := e["property"];
__v2753 := "JS_Interpreter_Expr" (MemberExpression, scope);
baseReference := __v2753;
__v2754 := "GetValue" (baseReference);
baseValue := __v2754;
__v2755 := "JS_Interpreter_Expr" (Expression, scope);
propertyNameReference := __v2755;
__v2756 := "GetValue" (propertyNameReference);
propertyNameValue := __v2756;
__v2757 := "CheckObjectCoercible" (baseValue);
__v2758 := "ToString" (propertyNameValue);
propertyNameString := __v2758;
__v2759 := "isContainedInStrictCode" (scope);
if (__v2759) {
strict := true
} else {
strict := false
};
__v2760 := "newPropertyReference" (baseValue, propertyNameString, strict);
return __v2760
} else {
__v2761 := "type" in_obj e;
__v2763 := e["type"];
__v2762 := __v2763 = "NewExpression";
__v2764 := "callee" in_obj e;
__v2765 := "arguments" in_obj e;
if (true && __v2761 && __v2762 && __v2764 && __v2765) {
MemberExpression := e["callee"];
Arguments := e["arguments"];
__v2766 := "JS_Interpreter_Expr" (MemberExpression, scope);
ref := __v2766;
__v2767 := "GetValue" (ref);
constructor := __v2767;
__v2768 := "JS_Interpreter_Arguments" (Arguments, scope);
argList := __v2768;
__v2771 := "Type" (constructor);
__v2770 := __v2771 = "Object";
__v2769 := !(__v2770);
if (__v2769) {
__v2772 := "TypeErrorException" ();
throw __v2772
};
__v2774 := "Construct" in_obj constructor;
__v2773 := !(__v2774);
if (__v2773) {
__v2775 := "TypeErrorException" ();
throw __v2775
};
__v2776 := "Construct" (constructor, argList);
return __v2776
} else {
__v2777 := "type" in_obj e;
__v2779 := e["type"];
__v2778 := __v2779 = "CallExpression";
__v2780 := "callee" in_obj e;
__v2781 := "arguments" in_obj e;
if (true && __v2777 && __v2778 && __v2780 && __v2781) {
MemberExpression := e["callee"];
Arguments := e["arguments"];
__v2782 := "JS_Interpreter_Expr" (MemberExpression, scope);
ref := __v2782;
__v2783 := "GetValue" (ref);
func := __v2783;
__v2784 := "JS_Interpreter_Arguments" (Arguments, scope);
argList := __v2784;
__v2787 := "Type" (func);
__v2786 := __v2787 = "Object";
__v2785 := !(__v2786);
if (__v2785) {
__v2788 := "TypeErrorException" ();
throw __v2788
};
__v2790 := "IsCallable" (func);
__v2789 := __v2790 = false;
if (__v2789) {
__v2791 := "TypeErrorException" ();
throw __v2791
};
__v2793 := "Type" (ref);
__v2792 := __v2793 = "Reference";
if (__v2792) {
__v2795 := "IsPropertyReference" (ref);
__v2794 := __v2795 = true;
if (__v2794) {
__v2796 := "GetBase" (ref);
thisValue := __v2796
} else {
__v2798 := "GetBase" (ref);
__v2797 := "ImplicitThisValue" (__v2798);
thisValue := __v2797
}
} else {
thisValue := 'undefined
};
__v2799 := "Call" (func, thisValue, argList);
return __v2799
} else {
__v2800 := "type" in_obj e;
__v2802 := e["type"];
__v2801 := __v2802 = "FunctionExpression";
__v2803 := "id" in_obj e;
__v2804 := "params" in_obj e;
__v2805 := "body" in_obj e;
if (true && __v2800 && __v2801 && __v2803 && __v2804 && __v2805) {
Identifier := e["id"];
FormalParameterList := e["params"];
FunctionBody := e["body"];
__v2806 := "JS_Interpreter_FunctionExpression" (e, scope);
return __v2806
} else {
__v2807 := "type" in_obj e;
__v2809 := e["type"];
__v2808 := __v2809 = "UpdateExpression";
__v2810 := "prefix" in_obj e;
__v2812 := e["prefix"];
__v2811 := __v2812 = false;
if (true && __v2807 && __v2808 && __v2810 && __v2811) {
__v2813 := "JS_Interpreter_PostfixExpressions" (e, scope);
return __v2813
} else {
__v2814 := "type" in_obj e;
__v2816 := e["type"];
__v2815 := __v2816 = "UpdateExpression";
__v2817 := "prefix" in_obj e;
__v2819 := e["prefix"];
__v2818 := __v2819 = true;
if (true && __v2814 && __v2815 && __v2817 && __v2818) {
__v2820 := "JS_Interpreter_UnaryOperator" (e, scope);
return __v2820
} else {
__v2821 := "type" in_obj e;
__v2823 := e["type"];
__v2822 := __v2823 = "UnaryExpression";
__v2824 := "prefix" in_obj e;
__v2826 := e["prefix"];
__v2825 := __v2826 = true;
if (true && __v2821 && __v2822 && __v2824 && __v2825) {
__v2827 := "JS_Interpreter_UnaryOperator" (e, scope);
return __v2827
} else {
__v2828 := "type" in_obj e;
__v2830 := e["type"];
__v2829 := __v2830 = "BinaryExpression";
if (true && __v2828 && __v2829) {
__v2831 := "JS_Interpreter_BinExpr" (e, scope);
return __v2831
} else {
__v2832 := "type" in_obj e;
__v2834 := e["type"];
__v2833 := __v2834 = "LogicalExpression";
if (true && __v2832 && __v2833) {
__v2835 := "JS_Interpreter_LogicalExpression" (e, scope);
return __v2835
} else {
__v2836 := "type" in_obj e;
__v2838 := e["type"];
__v2837 := __v2838 = "ConditionalExpression";
__v2839 := "test" in_obj e;
__v2840 := "consequent" in_obj e;
__v2841 := "alternate" in_obj e;
if (true && __v2836 && __v2837 && __v2839 && __v2840 && __v2841) {
LogicalORExpression := e["test"];
firstAssignmentExpression := e["consequent"];
secondAssignmentExpression := e["alternate"];
__v2842 := "JS_Interpreter_Expr" (LogicalORExpression, scope);
lref := __v2842;
__v2845 := "GetValue" (lref);
__v2844 := "ToBoolean" (__v2845);
__v2843 := __v2844 = true;
if (__v2843) {
__v2846 := "JS_Interpreter_Expr" (firstAssignmentExpression, scope);
trueRef := __v2846;
__v2847 := "GetValue" (trueRef);
return __v2847
} else {
__v2848 := "JS_Interpreter_Expr" (secondAssignmentExpression, scope);
falseRef := __v2848;
__v2849 := "GetValue" (falseRef);
return __v2849
}
} else {
__v2850 := "type" in_obj e;
__v2852 := e["type"];
__v2851 := __v2852 = "AssignmentExpression";
if (true && __v2850 && __v2851) {
__v2853 := "JS_Interpreter_AssignmentExpression" (e, scope);
return __v2853
} else {
__v2854 := "type" in_obj e;
__v2856 := e["type"];
__v2855 := __v2856 = "SequenceExpression";
__v2857 := "expressions" in_obj e;
if (true && __v2854 && __v2855 && __v2857) {
Expressions := e["expressions"];
__v2858 := l_len(Expressions);
lExpression := __v2858;
i := 0;
__v2859 := i < lExpression;
while (__v2859) { __v2861 := l_nth(Expressions, i);
__v2860 := "JS_Interpreter_Expr" (__v2861, scope);
ref := __v2860;
__v2862 := "GetValue" (ref);
val := __v2862;
__v2863 := i + 1;
i := __v2863;
__v2859 := i < lExpression };
return val
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function createExecutionContext () { __v2864 := { };
__v2864["LexicalEnvironment"] := 'undefined;
__v2864["VariableEnvironment"] := 'undefined;
__v2864["ThisBinding"] := 'undefined;
__v2864["strictCode"] := false;
return __v2864 };
function Put_internal (base, P, W, Throw) { __v2865 := "ToObject" (base);
O := __v2865;
__v2867 := "CanPut" (O, P);
__v2866 := __v2867 = false;
if (__v2866) {
__v2868 := Throw = true;
if (__v2868) {
__v2869 := "TypeErrorException" ();
throw __v2869
} else {
return 
}
};
__v2870 := "GetOwnProperty" (O, P);
ownDesc := __v2870;
__v2872 := "IsDataPropertyDescriptor" (ownDesc);
__v2871 := __v2872 = true;
if (__v2871) {
__v2873 := Throw = true;
if (__v2873) {
__v2874 := "TypeErrorException" ();
throw __v2874
} else {
return 
}
};
__v2875 := "GetProperty" (O, P);
desc := __v2875;
__v2877 := "IsAccessorPropertyDescriptor" (desc);
__v2876 := __v2877 = true;
if (__v2876) {
__v2878 := desc["Set"];
setter := __v2878;
__v2880 := [ W ];
__v2879 := "Call" (setter, base, __v2880)
} else {
__v2881 := Throw = true;
if (__v2881) {
__v2882 := "TypeErrorException" ();
throw __v2882
}
};
return  };
function EnteringFunctionCode (F, thisArg, argumentsList) { __v2883 := "createExecutionContext" ();
functionExecCtx := __v2883;
__v2885 := "isStrictFunctionObject" (F);
__v2884 := "setContainedInStrictCode" (functionExecCtx, __v2885);
__v2887 := "getFunctionCode" (F);
__v2886 := "isStrictModeCode" (__v2887, functionExecCtx);
if (__v2886) {
__v2888 := "setThisBinding" (functionExecCtx, thisArg)
};
__v2890 := thisArg = 'null;
__v2891 := thisArg = 'undefined;
__v2889 := __v2890 || __v2891;
if (__v2889) {
__v2894 := F["Scope"];
__v2893 := "getGlobalObject" (__v2894);
__v2892 := "setThisBinding" (functionExecCtx, __v2893)
} else {
__v2897 := "Type" (thisArg);
__v2896 := __v2897 = "Object";
__v2895 := !(__v2896);
if (__v2895) {
__v2899 := "ToObject" (thisArg);
__v2898 := "setThisBinding" (functionExecCtx, __v2899)
} else {
__v2900 := "setThisBinding" (functionExecCtx, thisArg)
}
};
__v2902 := F["Scope"];
__v2901 := "NewDeclarativeEnvironment" (__v2902);
localEnv := __v2901;
__v2903 := "setLexicalEnvironment" (functionExecCtx, localEnv);
__v2904 := "setVariableEnvironment" (functionExecCtx, localEnv);
__v2905 := F["Code"];
code := __v2905;
__v2906 := "DeclarationBindingInstantiation" (code, argumentsList, functionExecCtx, F);
return functionExecCtx };
function newGetAccessorPropertyDescriptor (get) { __v2907 := "NewPropertyDescriptor" ();
desc := __v2907;
desc["Get"] := get;
desc["Enumerable"] := true;
desc["Configurable"] := true;
return desc };
function getNextCaseClause (caseClauseItems, idx) { __v2909 := l_len(caseClauseItems);
__v2908 := __v2909 <= idx;
if (__v2908) {
return "None"
};
__v2910 := l_nth(caseClauseItems, idx);
return __v2910 };
function AbstractEqualityComparison (x, y) { __v2912 := "Type" (x);
__v2913 := "Type" (y);
__v2911 := __v2912 = __v2913;
if (__v2911) {
__v2915 := "Type" (x);
__v2914 := __v2915 = "Undefined";
if (__v2914) {
return true
};
__v2917 := "Type" (x);
__v2916 := __v2917 = "Null";
if (__v2916) {
return true
};
__v2919 := "Type" (x);
__v2918 := __v2919 = "Number";
if (__v2918) {
__v2920 := x = nan;
if (__v2920) {
return false
};
__v2921 := y = nan;
if (__v2921) {
return false
};
__v2922 := x = y;
if (__v2922) {
return true
};
return false
};
__v2924 := "Type" (x);
__v2923 := __v2924 = "String";
if (__v2923) {
__v2925 := x = y;
return __v2925
};
__v2927 := "Type" (x);
__v2926 := __v2927 = "Boolean";
if (__v2926) {
__v2928 := x = y;
return __v2928
};
__v2929 := x = y;
return __v2929
};
__v2931 := x = 'null;
__v2932 := y = 'undefined;
__v2930 := __v2931 && __v2932;
if (__v2930) {
return true
};
__v2934 := x = 'undefined;
__v2935 := y = 'null;
__v2933 := __v2934 && __v2935;
if (__v2933) {
return true
};
__v2938 := "Type" (x);
__v2937 := __v2938 = "Number";
__v2940 := "Type" (y);
__v2939 := __v2940 = "String";
__v2936 := __v2937 && __v2939;
if (__v2936) {
__v2942 := "ToNumber" (y);
__v2941 := "AbstractEqualityComparison" (x, __v2942);
return __v2941
};
__v2945 := "Type" (x);
__v2944 := __v2945 = "String";
__v2947 := "Type" (y);
__v2946 := __v2947 = "Number";
__v2943 := __v2944 && __v2946;
if (__v2943) {
__v2949 := "ToNumber" (x);
__v2948 := "AbstractEqualityComparison" (__v2949, y);
return __v2948
};
__v2951 := "Type" (x);
__v2950 := __v2951 = "Boolean";
if (__v2950) {
__v2953 := "ToNumber" (x);
__v2952 := "AbstractEqualityComparison" (__v2953, y);
return __v2952
};
__v2955 := "Type" (y);
__v2954 := __v2955 = "Boolean";
if (__v2954) {
__v2957 := "ToNumber" (y);
__v2956 := "AbstractEqualityComparison" (x, __v2957);
return __v2956
};
__v2961 := "Type" (x);
__v2960 := __v2961 = "String";
__v2963 := "Type" (x);
__v2962 := __v2963 = "Number";
__v2959 := __v2960 || __v2962;
__v2965 := "Type" (y);
__v2964 := __v2965 = "Object";
__v2958 := __v2959 && __v2964;
if (__v2958) {
__v2967 := "ToPrimitive" (y);
__v2966 := "AbstractEqualityComparison" (x, __v2967);
return __v2966
};
__v2970 := "Type" (x);
__v2969 := __v2970 = "Object";
__v2973 := "Type" (y);
__v2972 := __v2973 = "String";
__v2975 := "Type" (y);
__v2974 := __v2975 = "Number";
__v2971 := __v2972 || __v2974;
__v2968 := __v2969 && __v2971;
if (__v2968) {
__v2977 := "ToPrimitive" (x);
__v2976 := "AbstractEqualityComparison" (__v2977, y);
return __v2976
};
return false };
function GetBindingValueObject (objectEnvRec, N, S) { envRec := objectEnvRec;
__v2978 := "getBindingObject" (envRec);
bindings := __v2978;
__v2979 := "HasProperty" (bindings, N);
value := __v2979;
__v2980 := value = false;
if (__v2980) {
__v2981 := S = false;
if (__v2981) {
return 'undefined
};
__v2982 := "ReferenceErrorException" ();
throw __v2982
};
__v2983 := "Get" (bindings, N);
return __v2983 };
function getCompletionTarget (completion) { __v2984 := t_nth(completion, 3);
return __v2984 };
function getInternalProperty (object, pname) { __v2985 := object[pname];
return __v2985 };
function arrayUnshift (global, this, items) { __v2986 := "ToObject" (this);
O := __v2986;
__v2988 := O["Get"];
__v2987 := __v2988 (O, "length");
lenVal := __v2987;
__v2989 := "ToUint32" (lenVal);
len := __v2989;
__v2990 := l_len(items);
argCount := __v2990;
k := len;
__v2991 := k > 0.;
while (__v2991) { __v2993 := k - 1.;
__v2992 := "ToString" (__v2993);
from := __v2992;
__v2996 := k + argCount;
__v2995 := __v2996 - 1.;
__v2994 := "ToString" (__v2995);
to := __v2994;
__v2998 := O["HasProperty"];
__v2997 := __v2998 (O, from);
fromPresent := __v2997;
__v2999 := fromPresent = true;
if (__v2999) {
__v3001 := O["Get"];
__v3000 := __v3001 (O, from);
fromValue := __v3000;
__v3003 := O["Put"];
__v3002 := __v3003 (O, to, fromValue, true)
} else {
__v3005 := O["Delete"];
__v3004 := __v3005 (O, to, true)
};
__v3006 := k - 1.;
k := __v3006;
__v2991 := k > 0. };
j := 0.;
items := items;
__v3009 := [  ];
__v3008 := items = __v3009;
__v3007 := !(__v3008);
while (__v3007) { __v3010 := hd(items);
E := __v3010;
__v3011 := tl(items);
items := __v3011;
__v3013 := O["Put"];
__v3014 := "ToString" (j);
__v3012 := __v3013 (O, __v3014, E, true);
__v3015 := j + 1.;
j := __v3015;
__v3009 := [  ];
__v3008 := items = __v3009;
__v3007 := !(__v3008) };
__v3017 := O["Put"];
__v3018 := len + argCount;
__v3016 := __v3017 (O, "length", __v3018, true);
__v3019 := len + argCount;
return __v3019 };
function newLexicalEnvironment () { __v3020 := { };
__v3020["OuterEnvRef"] := 'undefined;
__v3020["EnvRec"] := 'undefined;
return __v3020 };
function NewDeclarativeEnvironment (E) { __v3021 := "newLexicalEnvironment" ();
env := __v3021;
__v3022 := "newDeclarativeEnvironmentRecord" ();
envRec := __v3022;
__v3023 := "setEnvironmentRecord" (env, envRec);
__v3024 := "setOuterLexicalEnvironmentReference" (env, E);
return env };
function EnteringGlobalCode (program) { __v3025 := "NewObject" ();
globalObject := __v3025;
__v3026 := "setAllInternalMethodsOfObject" (globalObject);
__v3027 := "initArrayLib" (globalObject, 'null, false);
__v3028 := "InitialGlobalExecutionContext" (globalObject, program);
globalScope := __v3028;
__v3030 := [  ];
__v3029 := "DeclarationBindingInstantiation" (program, __v3030, globalScope, null);
return globalScope };
function GetValueOrDefault (propDesc, propName) { __v3031 := { };
__v3031["Value"] := 'undefined;
__v3031["Get"] := 'undefined;
__v3031["Set"] := 'undefined;
__v3031["Writable"] := false;
__v3031["Enumerable"] := false;
__v3031["Configurable"] := false;
objectDefaultAttributeValues := __v3031;
__v3032 := propName in_obj propDesc;
if (__v3032) {
__v3033 := propDesc[propName];
return __v3033
} else {
__v3034 := objectDefaultAttributeValues[propName];
return __v3034
} };
function getEnumerableProperties (object, props) { i := 0;
__v3035 := obj_fields(object);
list := __v3035;
__v3036 := l_len(list);
llist := __v3036;
__v3037 := llist > i;
while (__v3037) { __v3038 := l_nth(list, i);
p_name := __v3038;
__v3039 := object[p_name];
p_value := __v3039;
__v3041 := typeof(p_value);
__v3040 := __v3041 = __$Obj;
if (__v3040) {
__v3043 := p_name = "Prototype";
if (__v3043 = true) {
__v3042 := true
} else {
__v3044 := p_name = "JSProperties";
if (__v3044 = true) {
__v3042 := true
} else {
__v3042 := false
}
};
if (__v3042) {
__v3045 := "getEnumerableProperties" (p_value, props);
props := __v3045
} else {
__v3048 := p_value["Enumerable"];
__v3047 := __v3048 = true;
__v3050 := p_name in_list props;
__v3049 := !(__v3050);
__v3046 := __v3047 && __v3049;
if (__v3046) {
__v3051 := l_add(props, p_name);
props := __v3051
}
}
};
__v3052 := i + 1;
i := __v3052;
__v3037 := llist > i };
return props };
function setContainedInStrictCode (execCtx, strictCode) { execCtx["strictCode"] := strictCode;
return 'undefined };
function ArrayConstructorLen (global, this, args) { __v3053 := l_nth(args, 0);
len := __v3053;
__v3054 := "getArrayPrototype" (global, false);
prototype := __v3054;
__v3055 := "internalNewArray" (prototype, len);
return __v3055 };
function getThisBinding (runningExecCtx) { __v3056 := runningExecCtx["ThisBinding"];
return __v3056 };
function CreateDataPropertyFrom (Desc) { __v3057 := { };
__v3058 := "GetValueOrDefault" (Desc, "Value");
__v3057["Value"] := __v3058;
__v3059 := "GetValueOrDefault" (Desc, "Writable");
__v3057["Writable"] := __v3059;
__v3060 := "GetValueOrDefault" (Desc, "Enumerable");
__v3057["Enumerable"] := __v3060;
__v3061 := "GetValueOrDefault" (Desc, "Configurable");
__v3057["Configurable"] := __v3061;
return __v3057 };
function SameValue (x, y) { __v3064 := "Type" (x);
__v3065 := "Type" (y);
__v3063 := __v3064 = __v3065;
__v3062 := !(__v3063);
if (__v3062) {
return false
};
__v3067 := "Type" (x);
__v3066 := __v3067 = "Undefined";
if (__v3066) {
return true
};
__v3069 := "Type" (x);
__v3068 := __v3069 = "Null";
if (__v3068) {
return true
};
__v3071 := "Type" (x);
__v3070 := __v3071 = "Number";
if (__v3070) {
__v3073 := x = nan;
__v3074 := y = nan;
__v3072 := __v3073 && __v3074;
if (__v3072) {
return true
};
__v3076 := x = 0;
__v3077 := y = 0;
__v3075 := __v3076 && __v3077;
if (__v3075) {
return false
};
__v3079 := x = 0;
__v3080 := y = 0;
__v3078 := __v3079 && __v3080;
if (__v3078) {
return false
};
__v3081 := x = y;
if (__v3081) {
return true
};
return false
};
__v3083 := "Type" (x);
__v3082 := __v3083 = "String";
if (__v3082) {
__v3084 := x = y;
return __v3084
};
__v3086 := "Type" (x);
__v3085 := __v3086 = "Boolean";
if (__v3085) {
__v3087 := x = y;
return __v3087
};
__v3088 := x = y;
return __v3088 };
function isBindingCannotBeDeleted (envRec, name) { __v3089 := envRec[name];
binding := __v3089;
__v3091 := t_nth(binding, 2);
__v3090 := !(__v3091);
return __v3090 };
function setAllInternalMethodsOfObject (obj) { obj["GetOwnProperty"] := "GetOwnProperty";
obj["GetProperty"] := "GetProperty";
obj["Get"] := "Get";
obj["CanPut"] := "CanPut";
obj["Put"] := "Put";
obj["HasProperty"] := "HasProperty";
obj["Delete"] := "Delete";
obj["DefaultValue"] := "DefaultValue";
obj["DefineOwnProperty"] := "DefineOwnProperty";
return obj };
function DeleteBindingObject (objectEnvRec, N) { envRec := objectEnvRec;
__v3092 := "getBindingObject" (envRec);
bindings := __v3092;
__v3093 := "Delete" (bindings, N, false);
return __v3093 };
function JS_Interpreter_CaseBlock_ClausesA_DefaultClause_ClausesB (clausesA, DefaultClause, clausesB, input, scope) { V := 'empty;
A := clausesA;
B := clausesB;
found := false;
i := 0;
__v3094 := "getNextCaseClause" (A, i);
C := __v3094;
__v3095 := i + 1;
i := __v3095;
__v3097 := C = "None";
__v3096 := !(__v3097);
if (__v3096) {
__v3098 := found = false;
if (__v3098) {
__v3099 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v3099;
__v3101 := "GetValue" (clauseSelector);
__v3102 := "GetValue" (input);
__v3100 := "StrictEqualityComparison" (__v3101, __v3102);
if (__v3100) {
found := true
}
};
__v3103 := found = true;
if (__v3103) {
__v3104 := "hasStatementList" (C);
if (__v3104) {
__v3106 := "getCaseClauseStatementList" (C);
__v3105 := "JS_Interpreter_StmtList" (__v3106, scope);
R := __v3105;
__v3109 := "getCompletionValue" (R);
__v3108 := __v3109 = 'empty;
__v3107 := !(__v3108);
if (__v3107) {
__v3110 := "getCompletionValue" (R);
V := __v3110
};
__v3111 := "isAnAbruptCompletion" (R);
if (__v3111) {
__v3113 := "getCompletionType" (R);
__v3114 := "getCompletionTarget" (R);
__v3112 := "newCompletion" (__v3113, V, __v3114);
return __v3112
}
}
}
};
__v3115 := C = "None";
while (!(__v3115)) { __v3094 := "getNextCaseClause" (A, i);
C := __v3094;
__v3095 := i + 1;
i := __v3095;
__v3097 := C = "None";
__v3096 := !(__v3097);
if (__v3096) {
__v3098 := found = false;
if (__v3098) {
__v3099 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v3099;
__v3101 := "GetValue" (clauseSelector);
__v3102 := "GetValue" (input);
__v3100 := "StrictEqualityComparison" (__v3101, __v3102);
if (__v3100) {
found := true
}
};
__v3103 := found = true;
if (__v3103) {
__v3104 := "hasStatementList" (C);
if (__v3104) {
__v3106 := "getCaseClauseStatementList" (C);
__v3105 := "JS_Interpreter_StmtList" (__v3106, scope);
R := __v3105;
__v3109 := "getCompletionValue" (R);
__v3108 := __v3109 = 'empty;
__v3107 := !(__v3108);
if (__v3107) {
__v3110 := "getCompletionValue" (R);
V := __v3110
};
__v3111 := "isAnAbruptCompletion" (R);
if (__v3111) {
__v3113 := "getCompletionType" (R);
__v3114 := "getCompletionTarget" (R);
__v3112 := "newCompletion" (__v3113, V, __v3114);
return __v3112
}
}
}
};
__v3115 := C = "None" };
foundInB := false;
i := 0;
__v3116 := found = false;
if (__v3116) {
__v3117 := "getNextCaseClause" (B, i);
C := __v3117;
__v3118 := i + 1;
i := __v3118;
__v3120 := C = "None";
__v3119 := !(__v3120);
if (__v3119) {
__v3121 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v3121;
__v3123 := "GetValue" (clauseSelector);
__v3124 := "GetValue" (input);
__v3122 := "StrictEqualityComparison" (__v3123, __v3124);
if (__v3122) {
foundInB := true;
__v3125 := "hasStatementList" (C);
if (__v3125) {
__v3127 := "getCaseClauseStatementList" (C);
__v3126 := "JS_Interpreter_StmtList" (__v3127, scope);
R := __v3126;
__v3130 := "getCompletionValue" (R);
__v3129 := __v3130 = 'empty;
__v3128 := !(__v3129);
if (__v3128) {
__v3131 := "getCompletionValue" (R);
V := __v3131
};
__v3132 := "isAnAbruptCompletion" (R);
if (__v3132) {
__v3134 := "getCompletionType" (R);
__v3135 := "getCompletionTarget" (R);
__v3133 := "newCompletion" (__v3134, V, __v3135);
return __v3133
}
}
}
};
__v3137 := foundInB = true;
__v3138 := C = "None";
__v3136 := __v3137 || __v3138;
while (!(__v3136)) { __v3117 := "getNextCaseClause" (B, i);
C := __v3117;
__v3118 := i + 1;
i := __v3118;
__v3120 := C = "None";
__v3119 := !(__v3120);
if (__v3119) {
__v3121 := "JS_Interpreter_SwitchCase" (C, scope);
clauseSelector := __v3121;
__v3123 := "GetValue" (clauseSelector);
__v3124 := "GetValue" (input);
__v3122 := "StrictEqualityComparison" (__v3123, __v3124);
if (__v3122) {
foundInB := true;
__v3125 := "hasStatementList" (C);
if (__v3125) {
__v3127 := "getCaseClauseStatementList" (C);
__v3126 := "JS_Interpreter_StmtList" (__v3127, scope);
R := __v3126;
__v3130 := "getCompletionValue" (R);
__v3129 := __v3130 = 'empty;
__v3128 := !(__v3129);
if (__v3128) {
__v3131 := "getCompletionValue" (R);
V := __v3131
};
__v3132 := "isAnAbruptCompletion" (R);
if (__v3132) {
__v3134 := "getCompletionType" (R);
__v3135 := "getCompletionTarget" (R);
__v3133 := "newCompletion" (__v3134, V, __v3135);
return __v3133
}
}
}
};
__v3137 := foundInB = true;
__v3138 := C = "None";
__v3136 := __v3137 || __v3138 }
};
__v3140 := foundInB = false;
__v3141 := "hasStatementList" (DefaultClause);
__v3139 := __v3140 && __v3141;
if (__v3139) {
__v3143 := "getCaseClauseStatementList" (DefaultClause);
__v3142 := "JS_Interpreter_StmtList" (__v3143, scope);
R := __v3142;
__v3146 := "getCompletionValue" (R);
__v3145 := __v3146 = 'empty;
__v3144 := !(__v3145);
if (__v3144) {
__v3147 := "getCompletionValue" (R);
V := __v3147
};
__v3148 := "isAnAbruptCompletion" (R);
if (__v3148) {
__v3150 := "getCompletionType" (R);
__v3151 := "getCompletionTarget" (R);
__v3149 := "newCompletion" (__v3150, V, __v3151);
return __v3149
}
};
__v3152 := "getNextCaseClause" (B, i);
C := __v3152;
__v3153 := i + 1;
i := __v3153;
__v3154 := C = "None";
if (__v3154) {
__v3155 := "normalEmptyCompletion" (V);
return __v3155
};
__v3156 := "hasStatementList" (C);
if (__v3156) {
__v3158 := "getCaseClauseStatementList" (C);
__v3157 := "JS_Interpreter_StmtList" (__v3158, scope);
R := __v3157;
__v3161 := "getCompletionValue" (R);
__v3160 := __v3161 = 'empty;
__v3159 := !(__v3160);
if (__v3159) {
__v3162 := "getCompletionValue" (R);
V := __v3162
};
__v3163 := "isAnAbruptCompletion" (R);
if (__v3163) {
__v3165 := "getCompletionType" (R);
__v3166 := "getCompletionTarget" (R);
__v3164 := "newCompletion" (__v3165, V, __v3166);
return __v3164
}
};
while (!(false)) { __v3152 := "getNextCaseClause" (B, i);
C := __v3152;
__v3153 := i + 1;
i := __v3153;
__v3154 := C = "None";
if (__v3154) {
__v3155 := "normalEmptyCompletion" (V);
return __v3155
};
__v3156 := "hasStatementList" (C);
if (__v3156) {
__v3158 := "getCaseClauseStatementList" (C);
__v3157 := "JS_Interpreter_StmtList" (__v3158, scope);
R := __v3157;
__v3161 := "getCompletionValue" (R);
__v3160 := __v3161 = 'empty;
__v3159 := !(__v3160);
if (__v3159) {
__v3162 := "getCompletionValue" (R);
V := __v3162
};
__v3163 := "isAnAbruptCompletion" (R);
if (__v3163) {
__v3165 := "getCompletionType" (R);
__v3166 := "getCompletionTarget" (R);
__v3164 := "newCompletion" (__v3165, V, __v3166);
return __v3164
}
} } };
function GetProps (Desc) { __v3167 := [  ];
list := __v3167;
__v3168 := "Value" in_obj Desc;
if (__v3168) {
__v3169 := l_add(list, "Value");
list := __v3169
};
__v3170 := "Writable" in_obj Desc;
if (__v3170) {
__v3171 := l_add(list, "Writable");
list := __v3171
};
__v3172 := "Get" in_obj Desc;
if (__v3172) {
__v3173 := l_add(list, "Get");
list := __v3173
};
__v3174 := "Set" in_obj Desc;
if (__v3174) {
__v3175 := l_add(list, "Set");
list := __v3175
};
__v3176 := "Enumerable" in_obj Desc;
if (__v3176) {
__v3177 := l_add(list, "Enumerable");
list := __v3177
};
__v3178 := "Configurable" in_obj Desc;
if (__v3178) {
__v3179 := l_add(list, "Configurable");
list := __v3179
};
return list };
function DefaultValue (O, hint) { print "DefaultValue";
__v3180 := hint = 'String;
if (__v3180) {
__v3181 := "Get" (O, "toString");
toString := __v3181;
__v3182 := "IsCallable" (toString);
if (__v3182) {
__v3184 := [  ];
__v3183 := "Call" (toString, O, __v3184);
str := __v3183;
__v3185 := "IsPrimitiveValue" (str);
if (__v3185) {
return str
}
};
__v3186 := "Get" (O, "valueOf");
valueOf := __v3186;
__v3187 := "IsCallable" (valueOf);
if (__v3187) {
__v3189 := [  ];
__v3188 := "Call" (valueOf, O, __v3189);
val := __v3188;
__v3190 := "IsPrimitiveValue" (val);
if (__v3190) {
return val
}
};
__v3191 := "TypeErrorException" ();
throw __v3191
} else {
__v3192 := hint = 'Number;
if (__v3192) {
__v3193 := "Get" (O, "valueOf");
valueOf := __v3193;
__v3194 := "IsCallable" (valueOf);
if (__v3194) {
__v3196 := [  ];
__v3195 := "Call" (valueOf, O, __v3196);
val := __v3195;
__v3197 := "IsPrimitiveValue" (val);
if (__v3197) {
return val
}
};
__v3198 := "Get" (O, "toString");
toString := __v3198;
__v3199 := "IsCallable" (toString);
if (__v3199) {
__v3201 := [  ];
__v3200 := "Call" (toString, O, __v3201);
str := __v3200;
__v3202 := "IsPrimitiveValue" (str);
if (__v3202) {
return str
}
};
__v3203 := "TypeErrorException" ();
throw __v3203
}
} };
function getLexicalEnvironment (runningExecCtx) { __v3204 := runningExecCtx["LexicalEnvironment"];
return __v3204 };
function applyOperator (operator, lval, rval) { __v3207 := operator = "*=";
__v3208 := operator = "/=";
__v3206 := __v3207 || __v3208;
__v3209 := operator = "%=";
__v3205 := __v3206 || __v3209;
if (__v3205) {
__v3210 := "ToNumber" (leftValue);
leftNum := __v3210;
__v3211 := "ToNumber" (rightValue);
rightNum := __v3211;
__v3212 := operator = "*=";
if (__v3212) {
__v3213 := leftNum * rightNum;
return __v3213
};
__v3214 := operator = "/=";
if (__v3214) {
__v3215 := leftNum / rightNum;
return __v3215
};
__v3216 := operator = "%=";
if (__v3216) {
__v3217 := leftNum % rightNum;
return __v3217
}
};
__v3218 := operator = "+=";
if (__v3218) {
__v3219 := "ToPrimitive" (lval, "Number");
lprim := __v3219;
__v3220 := "ToPrimitive" (rval, "Number");
rprim := __v3220;
__v3223 := "Type" (lprim);
__v3222 := __v3223 = "String";
__v3225 := "Type" (rprim);
__v3224 := __v3225 = "String";
__v3221 := __v3222 || __v3224;
if (__v3221) {
__v3228 := "ToString" (lprim);
__v3229 := "ToString" (rprim);
__v3227 := [ __v3228, __v3229 ];
__v3226 := s_concat(__v3227);
return __v3226
};
__v3231 := "ToNumber" (lprim);
__v3232 := "ToNumber" (rprim);
__v3230 := "applyingTheAdditionOperation" (__v3231, __v3232);
return __v3230
};
__v3233 := operator = "-=";
if (__v3233) {
__v3234 := "ToNumber" (lval);
lnum := __v3234;
__v3235 := "ToNumber" (rval);
rnum := __v3235;
__v3236 := "applyingTheSubtractionOperation" (lnum, rnum);
return __v3236
};
__v3239 := operator = "<<=";
__v3240 := operator = ">>=";
__v3238 := __v3239 || __v3240;
__v3241 := operator = ">>>=";
__v3237 := __v3238 || __v3241;
if (__v3237) {
__v3242 := "ToInt32" (lval);
lnum := __v3242;
__v3243 := "ToUint32" (rval);
rnum := __v3243;
__v3244 := "maskOutBits" (rnum);
shiftCount := __v3244;
__v3245 := operator = "<<=";
if (__v3245) {
__v3246 := lnum << shiftCount;
return __v3246
};
__v3247 := operator = ">>=";
if (__v3247) {
__v3248 := lnum >> shiftCount;
return __v3248
};
__v3249 := operator = ">>>=";
if (__v3249) {
__v3250 := lnum >>> shiftCount;
return __v3250
}
};
__v3253 := operator = "&=";
__v3254 := operator = "^=";
__v3252 := __v3253 || __v3254;
__v3255 := operator = "|=";
__v3251 := __v3252 || __v3255;
if (__v3251) {
__v3256 := "ToInt32" (lval);
lnum := __v3256;
__v3257 := "ToInt32" (rval);
rnum := __v3257;
__v3258 := "applyBitwiseOperator" (operator, lval, rval);
return __v3258
} };
function NewECMAScriptObject () { __v3259 := { };
__v3260 := { };
__v3259["JSProperties"] := __v3260;
__v3259["Class"] := "Object";
__v3259["Extensible"] := true;
__v3259["Prototype"] := 'null;
return __v3259 };
function arrayPush (global, this, items) { __v3261 := "ToObject" (this);
O := __v3261;
__v3263 := O["Get"];
__v3262 := __v3263 (O, "length");
lenVal := __v3262;
__v3264 := "ToUint32" (lenVal);
n := __v3264;
items := items;
__v3267 := [  ];
__v3266 := items = __v3267;
__v3265 := !(__v3266);
while (__v3265) { __v3268 := hd(items);
E := __v3268;
__v3269 := tl(items);
items := __v3269;
__v3271 := O["Put"];
__v3272 := "ToString" (n);
__v3270 := __v3271 (O, __v3272, E, true);
__v3273 := n + 1;
n := __v3273;
__v3267 := [  ];
__v3266 := items = __v3267;
__v3265 := !(__v3266) };
__v3275 := O["Put"];
__v3274 := __v3275 (O, "length", n, true);
return n };
function getCompletionValue (completion) { __v3276 := t_nth(completion, 2);
return __v3276 };
function JS_Interpreter_PropertyAssignment (PropertyAssignment, scope) { __v3277 := "type" in_obj PropertyAssignment;
__v3279 := PropertyAssignment["type"];
__v3278 := __v3279 = "Property";
__v3280 := "key" in_obj PropertyAssignment;
__v3281 := "value" in_obj PropertyAssignment;
__v3282 := "kind" in_obj PropertyAssignment;
__v3284 := PropertyAssignment["kind"];
__v3283 := __v3284 = "init";
if (true && __v3277 && __v3278 && __v3280 && __v3281 && __v3282 && __v3283) {
PropertyName := PropertyAssignment["key"];
AssignmentExpression := PropertyAssignment["value"];
__v3285 := "JS_Interpreter_PropertyName" (PropertyName, scope);
propName := __v3285;
__v3286 := "JS_Interpreter_Expr" (AssignmentExpression, scope);
exprValue := __v3286;
__v3287 := "GetValue" (exprValue);
propValue := __v3287;
__v3288 := "newDataPropertyDescriptor" (propValue);
desc := __v3288;
__v3289 := "newPropertyIdentifier" (propName, desc);
return __v3289
} else {
__v3290 := "type" in_obj PropertyAssignment;
__v3292 := PropertyAssignment["type"];
__v3291 := __v3292 = "Property";
__v3293 := "key" in_obj PropertyAssignment;
__v3294 := "value" in_obj PropertyAssignment;
__v3295 := "kind" in_obj PropertyAssignment;
__v3297 := PropertyAssignment["kind"];
__v3296 := __v3297 = "get";
if (true && __v3290 && __v3291 && __v3293 && __v3294 && __v3295 && __v3296) {
PropertyName := PropertyAssignment["key"];
FunctionExpression := PropertyAssignment["value"];
__v3298 := "JS_Interpreter_PropertyName" (PropertyName, scope);
propName := __v3298;
__v3299 := "JS_Interpreter_FunctionExpression" (FunctionExpression, scope);
closure := __v3299;
__v3300 := "newGetAccessorPropertyDescriptor" (closure);
desc := __v3300;
__v3301 := "newPropertyIdentifier" (propName, desc);
return __v3301
} else {
__v3302 := "type" in_obj PropertyAssignment;
__v3304 := PropertyAssignment["type"];
__v3303 := __v3304 = "Property";
__v3305 := "key" in_obj PropertyAssignment;
__v3306 := "value" in_obj PropertyAssignment;
__v3307 := "kind" in_obj PropertyAssignment;
__v3309 := PropertyAssignment["kind"];
__v3308 := __v3309 = "set";
if (true && __v3302 && __v3303 && __v3305 && __v3306 && __v3307 && __v3308) {
PropertyName := PropertyAssignment["key"];
FunctionExpression := PropertyAssignment["value"];
__v3310 := "JS_Interpreter_PropertyName" (PropertyName, scope);
propName := __v3310;
__v3311 := "JS_Interpreter_FunctionExpression" (FunctionExpression, scope);
closure := __v3311;
__v3312 := "newSetAccessorPropertyDescriptor" (closure);
desc := __v3312;
__v3313 := "newPropertyIdentifier" (propName, desc);
return __v3313
}
}
} };
function getGlobalObject (lexicalEnvironment) { lex := lexicalEnvironment;
__v3314 := "getOuterEnvironmentReference" (lexicalEnvironment);
outer := __v3314;
__v3316 := outer = 'null;
__v3315 := !(__v3316);
while (__v3315) { lex := outer;
__v3317 := "getOuterEnvironmentReference" (lex);
outer := __v3317;
__v3316 := outer = 'null;
__v3315 := !(__v3316) };
__v3319 := "getEnvironmentRecord" (lex);
__v3318 := "getBindingObject" (__v3319);
return __v3318 };
function Call (F, this, args) { __v3322 := F["Code"];
__v3321 := typeof(__v3322);
__v3320 := __v3321 = __$Str;
if (__v3320) {
__v3324 := F["Code"];
__v3323 := __v3324 (null, this, args);
return __v3323
};
__v3325 := "EnteringFunctionCode" (F, this, args);
funcCtx := __v3325;
__v3328 := "Code" in_obj F;
__v3327 := !(__v3328);
__v3333 := F["Code"];
__v3332 := typeof(__v3333);
__v3331 := __v3332 = __$Obj;
if (__v3331 = false) {
__v3330 := false
} else {
__v3335 := F["Code"];
__v3334 := "body" in_obj __v3335;
if (__v3334 = false) {
__v3330 := false
} else {
__v3330 := true
}
};
if (__v3330 = false) {
__v3329 := false
} else {
__v3338 := F["Code"];
__v3337 := __v3338["body"];
__v3339 := [  ];
__v3336 := __v3337 = __v3339;
if (__v3336 = false) {
__v3329 := false
} else {
__v3329 := true
}
};
__v3326 := __v3327 || __v3329;
if (__v3326) {
__v3340 := "normalEmptyCompletion" ('undefined);
return __v3340
};
__v3342 := F["Code"];
__v3341 := "JS_Interpreter_FunctionBody" (__v3342, funcCtx);
result := __v3341;
__v3344 := "getCompletionType" (result);
__v3343 := __v3344 = 'throw;
if (__v3343) {
__v3345 := "getCompletionValue" (result);
throw __v3345
};
__v3347 := "getCompletionType" (result);
__v3346 := __v3347 = 'return;
if (__v3346) {
__v3348 := "getCompletionValue" (result);
return __v3348
};
return 'undefined };
function newNumber (value) { __v3349 := { };
__v3349["Prototype"] := 'null;
__v3349["Class"] := "Number";
__v3349["Extensible"] := true;
ret := __v3349;
__v3350 := value = null;
if (__v3350) {
ret["PrimitiveValue"] := 0
} else {
__v3351 := "ToNumber" (value);
ret["PrimitiveValue"] := __v3351
};
return ret };
function isAnAbruptCompletion (completion) { __v3354 := "getCompletionType" (completion);
__v3353 := __v3354 = 'normal;
__v3352 := !(__v3353);
if (__v3352) {
return true
};
return false };
function MakeArgGetter (name, env) { __v3356 := [ "return ", name, ";" ];
__v3355 := s_concat(__v3356);
body := __v3355;
__v3358 := [  ];
__v3357 := "CreateFunctionObject" (__v3358, body, env, true);
return __v3357 };
function isSparseArray (O) { __v3360 := O["Get"];
__v3359 := __v3360 (O, "length");
len := __v3359;
i := 0;
__v3361 := "ToUint32" (len);
lenUint := __v3361;
__v3362 := i < lenUint;
while (__v3362) { __v3364 := O["GetOwnProperty"];
__v3365 := "ToString" (i);
__v3363 := __v3364 (O, __v3365);
elem := __v3363;
__v3366 := elem = 'undefined;
if (__v3366) {
return true
};
__v3362 := i < lenUint };
return false };
function ToUint32 (argument) { __v3367 := "ToNumber" (argument);
number := __v3367;
__v3368 := to_uint32(number);
return __v3368 };
function ImplicitThisValue (envRec) { __v3369 := "isDeclarativeEnvironmentRecord" (envRec);
if (__v3369) {
__v3370 := "ImplicitThisValueDeclarative" (envRec);
return __v3370
};
__v3371 := "ImplicitThisValueObject" (envRec);
return __v3371 };
function IsStrictReference (V) { print "IsStrictReference";
__v3372 := t_nth(V, 4);
return __v3372 };
function CanPut (O, P) { print "CanPut";
__v3373 := "GetOwnProperty" (O, P);
desc := __v3373;
__v3375 := desc = 'undefined;
__v3374 := !(__v3375);
if (__v3374) {
__v3376 := "IsAccessorPropertyDescriptor" (desc);
if (__v3376) {
__v3378 := desc["Set"];
__v3377 := __v3378 = 'undefined;
if (__v3377) {
return false
} else {
return true
}
} else {
__v3379 := desc["Writable"];
return __v3379
}
};
__v3380 := O["Prototype"];
proto := __v3380;
__v3381 := proto = 'null;
if (__v3381) {
__v3382 := O["Extensible"];
return __v3382
};
__v3383 := "GetProperty" (proto, P);
inherited := __v3383;
__v3384 := inherited = 'undefined;
if (__v3384) {
__v3385 := O["Extensible"];
return __v3385
};
__v3386 := "IsAccessorPropertyDescriptor" (inherited);
if (__v3386) {
__v3388 := inherited["Set"];
__v3387 := __v3388 = 'undefined;
if (__v3387) {
return false
} else {
return true
}
} else {
__v3389 := "IsDataPropertyDescriptor" (inherited);
if (__v3389) {
__v3391 := O["Extensible"];
__v3390 := __v3391 = false;
if (__v3390) {
return false
} else {
__v3392 := inherited["Writable"];
return __v3392
}
}
} };
function arrayReduceRight (global, this, args) { __v3393 := l_nth(args, 0);
callbackfn := __v3393;
__v3394 := l_nth(args, 1);
initialValue := __v3394;
__v3395 := "ToObject" (this);
O := __v3395;
__v3397 := O["Get"];
__v3396 := __v3397 (O, "length");
lenVal := __v3396;
__v3398 := "ToUint32" (lenVal);
len := __v3398;
__v3400 := "IsCallable" (callbackfn);
__v3399 := __v3400 = false;
if (__v3399) {
__v3401 := "TypeErrorException" ();
throw __v3401
};
__v3403 := len = 0;
__v3404 := initialValue = 'undefined;
__v3402 := __v3403 && __v3404;
if (__v3402) {
__v3405 := "TypeErrorException" ();
throw __v3405
};
__v3406 := len - 1.;
k := __v3406;
__v3408 := initialValue = 'undefined;
__v3407 := !(__v3408);
if (__v3407) {
accumulator := initialValue
} else {
kPresent := false;
__v3410 := kPresent = false;
__v3411 := k >= 0.;
__v3409 := __v3410 && __v3411;
while (__v3409) { __v3412 := "ToString" (k);
Pk := __v3412;
__v3414 := O["HasProperty"];
__v3413 := __v3414 (O, Pk);
kPresent := __v3413;
__v3415 := kPresent = true;
if (__v3415) {
__v3417 := O["Get"];
__v3416 := __v3417 (O, Pk);
accumulator := __v3416
};
__v3418 := k - 1.;
k := __v3418;
__v3410 := kPresent = false;
__v3411 := k >= 0.;
__v3409 := __v3410 && __v3411 };
__v3419 := kPresent = false;
if (__v3419) {
__v3420 := "TypeErrorException" ();
throw __v3420
}
};
__v3421 := k >= 0.;
while (__v3421) { __v3422 := "ToString" (k);
Pk := __v3422;
__v3424 := O["HasProperty"];
__v3423 := __v3424 (O, Pk);
kPresent := __v3423;
__v3425 := kPresent = true;
if (__v3425) {
__v3427 := O["Get"];
__v3426 := __v3427 (O, Pk);
kValue := __v3426;
__v3429 := callbackfn["Call"];
__v3430 := [ accumulator, kValue, k, O ];
__v3428 := __v3429 (callbackfn, 'undefined, __v3430);
accumulator := __v3428
};
__v3431 := k - 1.;
k := __v3431;
__v3421 := k >= 0. };
return accumulator };
function JS_Interpreter_FunctionDeclaration (FunctionDeclaration, scope) { print "JS_Interpreter_FunctionDeclaration";
print FunctionDeclaration;
__v3432 := "id" in_obj FunctionDeclaration;
__v3433 := "params" in_obj FunctionDeclaration;
__v3434 := "body" in_obj FunctionDeclaration;
if (true && __v3432 && __v3433 && __v3434) {
Identifier := FunctionDeclaration["id"];
FormalParameterListopt := FunctionDeclaration["params"];
FunctionBody := FunctionDeclaration["body"];
__v3436 := "getVariableEnvironment" (scope);
__v3437 := "isStrictModeCode" (FunctionBody, scope);
__v3435 := "CreateFunctionObject" (FormalParameterListopt, FunctionBody, __v3436, __v3437);
return __v3435
} };
function JS_Interpreter_ObjectInitializer (objExpr, scope) { __v3438 := "type" in_obj objExpr;
__v3440 := objExpr["type"];
__v3439 := __v3440 = "ObjectExpression";
__v3441 := "properties" in_obj objExpr;
if (true && __v3438 && __v3439 && __v3441) {
PropertyNameAndValueList := objExpr["properties"];
__v3443 := l_len(PropertyNameAndValueList);
__v3442 := __v3443 = 0;
if (__v3442) {
__v3444 := "NewObject" ();
return __v3444
};
__v3445 := "NewObject" ();
obj := __v3445;
__v3446 := l_len(PropertyNameAndValueList);
lPropList := __v3446;
i := 0;
__v3447 := i < lPropList;
while (__v3447) { __v3449 := l_nth(PropertyNameAndValueList, i);
__v3448 := "JS_Interpreter_PropertyAssignment" (__v3449, scope);
propId := __v3448;
__v3451 := "getPropertyName" (propId);
__v3450 := "GetOwnProperty" (obj, __v3451);
previous := __v3450;
__v3453 := previous = 'undefined;
__v3452 := !(__v3453);
if (__v3452) {
__v3456 := "isContainedInStrictCode" (scope);
__v3458 := "IsDataPropertyDescriptor" (previous);
__v3457 := __v3458 = true;
__v3455 := __v3456 && __v3457;
__v3461 := "getPropertyDescriptor" (propId);
__v3460 := "IsDataPropertyDescriptor" (__v3461);
__v3459 := __v3460 = true;
__v3454 := __v3455 && __v3459;
if (__v3454) {
__v3462 := "SyntaxErrorException" ();
throw __v3462
};
__v3465 := "IsDataPropertyDescriptor" (previous);
__v3464 := __v3465 = true;
__v3468 := "getPropertyDescriptor" (propId);
__v3467 := "IsAccessorPropertyDescriptor" (__v3468);
__v3466 := __v3467 = true;
__v3463 := __v3464 && __v3466;
if (__v3463) {
__v3469 := "SyntaxErrorException" ();
throw __v3469
};
__v3472 := "IsAccessorPropertyDescriptor" (previous);
__v3471 := __v3472 = true;
__v3475 := "getPropertyDescriptor" (propId);
__v3474 := "IsDataPropertyDescriptor" (__v3475);
__v3473 := __v3474 = true;
__v3470 := __v3471 && __v3473;
if (__v3470) {
__v3476 := "SyntaxErrorException" ();
throw __v3476
};
__v3480 := "IsAccessorPropertyDescriptor" (previous);
__v3479 := __v3480 = true;
__v3483 := "getPropertyDescriptor" (propId);
__v3482 := "IsAccessorPropertyDescriptor" (__v3483);
__v3481 := __v3482 = true;
__v3478 := __v3479 && __v3481;
__v3488 := "Get" in_obj previous;
__v3491 := previous["Get"];
__v3490 := __v3491 = 'undefined;
__v3489 := !(__v3490);
__v3487 := __v3488 && __v3489;
__v3493 := "getPropertyDescriptor" (propId);
__v3492 := "Get" in_obj __v3493;
__v3486 := __v3487 && __v3492;
__v3497 := "getPropertyDescriptor" (propId);
__v3496 := __v3497["Get"];
__v3495 := __v3496 = 'undefined;
__v3494 := !(__v3495);
__v3485 := __v3486 && __v3494;
__v3501 := "Set" in_obj previous;
__v3504 := previous["Set"];
__v3503 := __v3504 = 'undefined;
__v3502 := !(__v3503);
__v3500 := __v3501 && __v3502;
__v3506 := "getPropertyDescriptor" (propId);
__v3505 := "Set" in_obj __v3506;
__v3499 := __v3500 && __v3505;
__v3510 := "getPropertyDescriptor" (propId);
__v3509 := __v3510["Set"];
__v3508 := __v3509 = 'undefined;
__v3507 := !(__v3508);
__v3498 := __v3499 && __v3507;
__v3484 := __v3485 || __v3498;
__v3477 := __v3478 && __v3484;
if (__v3477) {
__v3511 := "SyntaxErrorException" ();
throw __v3511
}
};
__v3513 := "getPropertyName" (propId);
__v3514 := "getPropertyDescriptor" (propId);
__v3512 := "DefineOwnProperty" (obj, __v3513, __v3514, false);
__v3515 := i + 1;
i := __v3515;
__v3447 := i < lPropList };
return obj
} };
function newMutableBinding (value) { __v3516 := "newBinding" (true, value, false, true);
return __v3516 };
function JS_Interpreter_BinExpr (e, scope) { __v3517 := "type" in_obj e;
__v3519 := e["type"];
__v3518 := __v3519 = "BinaryExpression";
__v3520 := "operator" in_obj e;
__v3522 := e["operator"];
__v3521 := __v3522 = "*";
__v3523 := "left" in_obj e;
__v3524 := "right" in_obj e;
if (true && __v3517 && __v3518 && __v3520 && __v3521 && __v3523 && __v3524) {
MultiplicativeExpression := e["left"];
UnaryExpression := e["right"];
__v3525 := "JS_Interpreter_Expr" (MultiplicativeExpression, scope);
left := __v3525;
__v3526 := "GetValue" (left);
leftValue := __v3526;
__v3527 := "JS_Interpreter_Expr" (UnaryExpression, scope);
right := __v3527;
__v3528 := "GetValue" (right);
rightValue := __v3528;
__v3529 := "ToNumber" (leftValue);
leftNum := __v3529;
__v3530 := "ToNumber" (rightValue);
rightNum := __v3530;
__v3531 := leftNum * rightNum;
return __v3531
} else {
__v3532 := "type" in_obj e;
__v3534 := e["type"];
__v3533 := __v3534 = "BinaryExpression";
__v3535 := "operator" in_obj e;
__v3537 := e["operator"];
__v3536 := __v3537 = "/";
__v3538 := "left" in_obj e;
__v3539 := "right" in_obj e;
if (true && __v3532 && __v3533 && __v3535 && __v3536 && __v3538 && __v3539) {
MultiplicativeExpression := e["left"];
UnaryExpression := e["right"];
__v3540 := "JS_Interpreter_Expr" (MultiplicativeExpression, scope);
left := __v3540;
__v3541 := "GetValue" (left);
leftValue := __v3541;
__v3542 := "JS_Interpreter_Expr" (UnaryExpression, scope);
right := __v3542;
__v3543 := "GetValue" (right);
rightValue := __v3543;
__v3544 := "ToNumber" (leftValue);
leftNum := __v3544;
__v3545 := "ToNumber" (rightValue);
rightNum := __v3545;
__v3546 := leftNum / rightNum;
return __v3546
} else {
__v3547 := "type" in_obj e;
__v3549 := e["type"];
__v3548 := __v3549 = "BinaryExpression";
__v3550 := "operator" in_obj e;
__v3552 := e["operator"];
__v3551 := __v3552 = "%";
__v3553 := "left" in_obj e;
__v3554 := "right" in_obj e;
if (true && __v3547 && __v3548 && __v3550 && __v3551 && __v3553 && __v3554) {
MultiplicativeExpression := e["left"];
UnaryExpression := e["right"];
__v3555 := "JS_Interpreter_Expr" (MultiplicativeExpression, scope);
left := __v3555;
__v3556 := "GetValue" (left);
leftValue := __v3556;
__v3557 := "JS_Interpreter_Expr" (UnaryExpression, scope);
right := __v3557;
__v3558 := "GetValue" (right);
rightValue := __v3558;
__v3559 := "ToNumber" (leftValue);
leftNum := __v3559;
__v3560 := "ToNumber" (rightValue);
rightNum := __v3560;
__v3561 := leftNum % rightNum;
return __v3561
} else {
__v3562 := "type" in_obj e;
__v3564 := e["type"];
__v3563 := __v3564 = "BinaryExpression";
__v3565 := "operator" in_obj e;
__v3567 := e["operator"];
__v3566 := __v3567 = "+";
__v3568 := "left" in_obj e;
__v3569 := "right" in_obj e;
if (true && __v3562 && __v3563 && __v3565 && __v3566 && __v3568 && __v3569) {
AdditiveExpression := e["left"];
MultiplicativeExpression := e["right"];
__v3570 := "JS_Interpreter_Expr" (AdditiveExpression, scope);
lref := __v3570;
__v3571 := "GetValue" (lref);
lval := __v3571;
__v3572 := "JS_Interpreter_Expr" (MultiplicativeExpression, scope);
rref := __v3572;
__v3573 := "GetValue" (rref);
rval := __v3573;
__v3574 := "ToPrimitive" (lval, "Number");
lprim := __v3574;
__v3575 := "ToPrimitive" (rval, "Number");
rprim := __v3575;
__v3578 := "Type" (lprim);
__v3577 := __v3578 = "String";
__v3580 := "Type" (rprim);
__v3579 := __v3580 = "String";
__v3576 := __v3577 || __v3579;
if (__v3576) {
__v3583 := "ToString" (lprim);
__v3584 := "ToString" (rprim);
__v3582 := [ __v3583, __v3584 ];
__v3581 := s_concat(__v3582);
return __v3581
};
__v3586 := "ToNumber" (lprim);
__v3587 := "ToNumber" (rprim);
__v3585 := "applyingTheAdditionOperation" (__v3586, __v3587);
return __v3585
} else {
__v3588 := "type" in_obj e;
__v3590 := e["type"];
__v3589 := __v3590 = "BinaryExpression";
__v3591 := "operator" in_obj e;
__v3593 := e["operator"];
__v3592 := __v3593 = "-";
__v3594 := "left" in_obj e;
__v3595 := "right" in_obj e;
if (true && __v3588 && __v3589 && __v3591 && __v3592 && __v3594 && __v3595) {
AdditiveExpression := e["left"];
MultiplicativeExpression := e["right"];
__v3596 := "JS_Interpreter_Expr" (AdditiveExpression, scope);
lref := __v3596;
__v3597 := "GetValue" (lref);
lval := __v3597;
__v3598 := "JS_Interpreter_Expr" (MultiplicativeExpression, scope);
rref := __v3598;
__v3599 := "GetValue" (rref);
rval := __v3599;
__v3600 := "ToNumber" (lval);
lnum := __v3600;
__v3601 := "ToNumber" (rval);
rnum := __v3601;
__v3602 := "applyingTheSubtractionOperation" (lnum, rnum);
return __v3602
} else {
__v3603 := "type" in_obj e;
__v3605 := e["type"];
__v3604 := __v3605 = "BinaryExpression";
__v3606 := "operator" in_obj e;
__v3608 := e["operator"];
__v3607 := __v3608 = "<<";
__v3609 := "left" in_obj e;
__v3610 := "right" in_obj e;
if (true && __v3603 && __v3604 && __v3606 && __v3607 && __v3609 && __v3610) {
ShiftExpression := e["left"];
AdditiveExpression := e["right"];
__v3611 := "JS_Interpreter_Expr" (ShiftExpression, scope);
lref := __v3611;
__v3612 := "GetValue" (lref);
lval := __v3612;
__v3613 := "JS_Interpreter_Expr" (AdditiveExpression, scope);
rref := __v3613;
__v3614 := "GetValue" (rref);
rval := __v3614;
__v3615 := "ToInt32" (lval);
lnum := __v3615;
__v3616 := "ToUint32" (rval);
rnum := __v3616;
__v3617 := "maskOutBits" (rnum);
shiftCount := __v3617;
__v3618 := lnum << shiftCount;
return __v3618
} else {
__v3619 := "type" in_obj e;
__v3621 := e["type"];
__v3620 := __v3621 = "BinaryExpression";
__v3622 := "operator" in_obj e;
__v3624 := e["operator"];
__v3623 := __v3624 = ">>";
__v3625 := "left" in_obj e;
__v3626 := "right" in_obj e;
if (true && __v3619 && __v3620 && __v3622 && __v3623 && __v3625 && __v3626) {
ShiftExpression := e["left"];
AdditiveExpression := e["right"];
__v3627 := "JS_Interpreter_Expr" (ShiftExpression, scope);
lref := __v3627;
__v3628 := "GetValue" (lref);
lval := __v3628;
__v3629 := "JS_Interpreter_Expr" (AdditiveExpression, scope);
rref := __v3629;
__v3630 := "GetValue" (rref);
rval := __v3630;
__v3631 := "ToInt32" (lval);
lnum := __v3631;
__v3632 := "ToUint32" (rval);
rnum := __v3632;
__v3633 := "maskOutBits" (rnum);
shiftCount := __v3633;
__v3634 := lnum >> shiftCount;
return __v3634
} else {
__v3635 := "type" in_obj e;
__v3637 := e["type"];
__v3636 := __v3637 = "BinaryExpression";
__v3638 := "operator" in_obj e;
__v3640 := e["operator"];
__v3639 := __v3640 = ">>>";
__v3641 := "left" in_obj e;
__v3642 := "right" in_obj e;
if (true && __v3635 && __v3636 && __v3638 && __v3639 && __v3641 && __v3642) {
ShiftExpression := e["left"];
AdditiveExpression := e["right"];
__v3643 := "JS_Interpreter_Expr" (ShiftExpression, scope);
lref := __v3643;
__v3644 := "GetValue" (lref);
lval := __v3644;
__v3645 := "JS_Interpreter_Expr" (AdditiveExpression, scope);
rref := __v3645;
__v3646 := "GetValue" (rref);
rval := __v3646;
__v3647 := "ToInt32" (lval);
lnum := __v3647;
__v3648 := "ToUint32" (rval);
rnum := __v3648;
__v3649 := "maskOutBits" (rnum);
shiftCount := __v3649;
__v3650 := lnum >>> shiftCount;
return __v3650
} else {
__v3651 := "type" in_obj e;
__v3653 := e["type"];
__v3652 := __v3653 = "BinaryExpression";
__v3654 := "operator" in_obj e;
__v3656 := e["operator"];
__v3655 := __v3656 = "<";
__v3657 := "left" in_obj e;
__v3658 := "right" in_obj e;
if (true && __v3651 && __v3652 && __v3654 && __v3655 && __v3657 && __v3658) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3659 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3659;
__v3660 := "GetValue" (lref);
lval := __v3660;
__v3661 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3661;
__v3662 := "GetValue" (rref);
rval := __v3662;
__v3663 := "AbstractRelationalComparison" (lval, rval, true);
r := __v3663;
__v3664 := r = 'undefined;
if (__v3664) {
return false
};
return r
} else {
__v3665 := "type" in_obj e;
__v3667 := e["type"];
__v3666 := __v3667 = "BinaryExpression";
__v3668 := "operator" in_obj e;
__v3670 := e["operator"];
__v3669 := __v3670 = ">";
__v3671 := "left" in_obj e;
__v3672 := "right" in_obj e;
if (true && __v3665 && __v3666 && __v3668 && __v3669 && __v3671 && __v3672) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3673 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3673;
__v3674 := "GetValue" (lref);
lval := __v3674;
__v3675 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3675;
__v3676 := "GetValue" (rref);
rval := __v3676;
__v3677 := "AbstractRelationalComparison" (rval, lval, false);
r := __v3677;
__v3678 := r = 'undefined;
if (__v3678) {
return false
};
return r
} else {
__v3679 := "type" in_obj e;
__v3681 := e["type"];
__v3680 := __v3681 = "BinaryExpression";
__v3682 := "operator" in_obj e;
__v3684 := e["operator"];
__v3683 := __v3684 = "<=";
__v3685 := "left" in_obj e;
__v3686 := "right" in_obj e;
if (true && __v3679 && __v3680 && __v3682 && __v3683 && __v3685 && __v3686) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3687 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3687;
__v3688 := "GetValue" (lref);
lval := __v3688;
__v3689 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3689;
__v3690 := "GetValue" (rref);
rval := __v3690;
__v3691 := "AbstractRelationalComparison" (rval, lval, false);
r := __v3691;
__v3693 := r = true;
__v3694 := r = 'undefined;
__v3692 := __v3693 || __v3694;
if (__v3692) {
return false
};
return true
} else {
__v3695 := "type" in_obj e;
__v3697 := e["type"];
__v3696 := __v3697 = "BinaryExpression";
__v3698 := "operator" in_obj e;
__v3700 := e["operator"];
__v3699 := __v3700 = ">=";
__v3701 := "left" in_obj e;
__v3702 := "right" in_obj e;
if (true && __v3695 && __v3696 && __v3698 && __v3699 && __v3701 && __v3702) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3703 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3703;
__v3704 := "GetValue" (lref);
lval := __v3704;
__v3705 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3705;
__v3706 := "GetValue" (rref);
rval := __v3706;
__v3707 := "AbstractRelationalComparison" (lval, rval);
r := __v3707;
__v3709 := r = true;
__v3710 := r = 'undefined;
__v3708 := __v3709 || __v3710;
if (__v3708) {
return false
};
return true
} else {
__v3711 := "type" in_obj e;
__v3713 := e["type"];
__v3712 := __v3713 = "BinaryExpression";
__v3714 := "operator" in_obj e;
__v3716 := e["operator"];
__v3715 := __v3716 = "instanceof";
__v3717 := "left" in_obj e;
__v3718 := "right" in_obj e;
if (true && __v3711 && __v3712 && __v3714 && __v3715 && __v3717 && __v3718) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3719 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3719;
__v3720 := "GetValue" (lref);
lval := __v3720;
__v3721 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3721;
__v3722 := "GetValue" (rref);
rval := __v3722;
__v3725 := "Type" (rval);
__v3724 := __v3725 = "Object";
__v3723 := !(__v3724);
if (__v3723) {
__v3726 := "TypeErrorException" ();
throw __v3726
};
__v3727 := "HasInstance" in_obj rval;
if (__v3727) {
__v3728 := "TypeErrorException" ();
throw __v3728
};
__v3729 := "HasInstance" (rval, lval);
return __v3729
} else {
__v3730 := "type" in_obj e;
__v3732 := e["type"];
__v3731 := __v3732 = "BinaryExpression";
__v3733 := "operator" in_obj e;
__v3735 := e["operator"];
__v3734 := __v3735 = "in";
__v3736 := "left" in_obj e;
__v3737 := "right" in_obj e;
if (true && __v3730 && __v3731 && __v3733 && __v3734 && __v3736 && __v3737) {
RelationalExpression := e["left"];
ShiftExpression := e["right"];
__v3738 := "JS_Interpreter_Expr" (RelationalExpression, scope);
lref := __v3738;
__v3739 := "GetValue" (lref);
lval := __v3739;
__v3740 := "JS_Interpreter_Expr" (ShiftExpression, scope);
rref := __v3740;
__v3741 := "GetValue" (rref);
rval := __v3741;
__v3744 := "Type" (rval);
__v3743 := __v3744 = "Object";
__v3742 := !(__v3743);
if (__v3742) {
__v3745 := "TypeErrorException" ();
throw __v3745
};
__v3747 := "ToString" (lval);
__v3746 := "HasProperty" (rval, __v3747);
return __v3746
} else {
__v3748 := "type" in_obj e;
__v3750 := e["type"];
__v3749 := __v3750 = "BinaryExpression";
__v3751 := "operator" in_obj e;
__v3753 := e["operator"];
__v3752 := __v3753 = "==";
__v3754 := "left" in_obj e;
__v3755 := "right" in_obj e;
if (true && __v3748 && __v3749 && __v3751 && __v3752 && __v3754 && __v3755) {
EqualityExpression := e["left"];
RelationalExpression := e["right"];
__v3756 := "JS_Interpreter_Expr" (EqualityExpression, scope);
lref := __v3756;
__v3757 := "GetValue" (lref);
lval := __v3757;
__v3758 := "JS_Interpreter_Expr" (RelationalExpression, scope);
rref := __v3758;
__v3759 := "GetValue" (rref);
rval := __v3759;
__v3760 := "AbstractEqualityComparison" (rval, lval);
return __v3760
} else {
__v3761 := "type" in_obj e;
__v3763 := e["type"];
__v3762 := __v3763 = "BinaryExpression";
__v3764 := "operator" in_obj e;
__v3766 := e["operator"];
__v3765 := __v3766 = "!=";
__v3767 := "left" in_obj e;
__v3768 := "right" in_obj e;
if (true && __v3761 && __v3762 && __v3764 && __v3765 && __v3767 && __v3768) {
EqualityExpression := e["left"];
RelationalExpression := e["right"];
__v3769 := "JS_Interpreter_Expr" (EqualityExpression, scope);
lref := __v3769;
__v3770 := "GetValue" (lref);
lval := __v3770;
__v3771 := "JS_Interpreter_Expr" (RelationalExpression, scope);
rref := __v3771;
__v3772 := "GetValue" (rref);
rval := __v3772;
__v3773 := "AbstractEqualityComparison" (rval, lval);
r := __v3773;
__v3774 := r = true;
if (__v3774) {
return false
};
return true
} else {
__v3775 := "type" in_obj e;
__v3777 := e["type"];
__v3776 := __v3777 = "BinaryExpression";
__v3778 := "operator" in_obj e;
__v3780 := e["operator"];
__v3779 := __v3780 = "===";
__v3781 := "left" in_obj e;
__v3782 := "right" in_obj e;
if (true && __v3775 && __v3776 && __v3778 && __v3779 && __v3781 && __v3782) {
EqualityExpression := e["left"];
RelationalExpression := e["right"];
__v3783 := "JS_Interpreter_Expr" (EqualityExpression, scope);
lref := __v3783;
__v3784 := "GetValue" (lref);
lval := __v3784;
__v3785 := "JS_Interpreter_Expr" (RelationalExpression, scope);
rref := __v3785;
__v3786 := "GetValue" (rref);
rval := __v3786;
__v3787 := "StrictEqualityComparison" (rval, lval);
return __v3787
} else {
__v3788 := "type" in_obj e;
__v3790 := e["type"];
__v3789 := __v3790 = "BinaryExpression";
__v3791 := "operator" in_obj e;
__v3793 := e["operator"];
__v3792 := __v3793 = "!==";
__v3794 := "left" in_obj e;
__v3795 := "right" in_obj e;
if (true && __v3788 && __v3789 && __v3791 && __v3792 && __v3794 && __v3795) {
EqualityExpression := e["left"];
RelationalExpression := e["right"];
__v3796 := "JS_Interpreter_Expr" (EqualityExpression, scope);
lref := __v3796;
__v3797 := "GetValue" (lref);
lval := __v3797;
__v3798 := "JS_Interpreter_Expr" (RelationalExpression, scope);
rref := __v3798;
__v3799 := "GetValue" (rref);
rval := __v3799;
__v3800 := "StrictEqualityComparison" (rval, lval);
r := __v3800;
__v3801 := r = true;
if (__v3801) {
return false
};
return true
} else {
__v3802 := "type" in_obj e;
__v3804 := e["type"];
__v3803 := __v3804 = "BinaryExpression";
__v3805 := "operator" in_obj e;
__v3806 := "left" in_obj e;
__v3807 := "right" in_obj e;
if (true && __v3802 && __v3803 && __v3805 && __v3806 && __v3807) {
operator := e["operator"];
A := e["left"];
B := e["right"];
__v3808 := "JS_Interpreter_Expr" (A, scope);
lref := __v3808;
__v3809 := "GetValue" (lref);
lval := __v3809;
__v3810 := "JS_Interpreter_Expr" (B, scope);
rref := __v3810;
__v3811 := "GetValue" (rref);
rval := __v3811;
__v3812 := "ToInt32" (lval);
lnum := __v3812;
__v3813 := "ToInt32" (rval);
rnum := __v3813;
__v3814 := "applyBitwiseOperator" (operator, lnum, rnum);
return __v3814
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} };
function newBinding (initialised, value, deletable, modifiable) { __v3815 := ( initialised, value, deletable, modifiable );
return __v3815 }