/* 10.6 Arguments Object */

/* When control enters an execution context for function code, an arguments object is created unless (as
   specified in 10.5) the identifier arguments occurs as an Identifier in the function‘s FormalParameterList or
   occurs as the Identifier of a VariableDeclaration or FunctionDeclaration contained in the function code. */

/* The arguments object is created by calling the abstract operation CreateArgumentsObject with arguments func
   the function object whose code is to be evaluated, names a List containing the function‘s formal parameter
   names, args the actual arguments passed to the [[Call]] internal method, env the variable environment for the
   function code, and strict a Boolean that indicates whether or not the function code is strict code. When
   CreateArgumentsObject is called the following steps are performed: */

function CreateArgumentsObject(func, names, args, env, strict) {
  /* 1. Let len be the number of elements in args. */
  len := l_len args;
  /* 2. Let obj be the result of creating a new ECMAScript object. */
  obj := NewECMAScriptObject();
  /* 3. Set all the internal methods of obj as specified in 8.12. */
  setAllInternalMethodsOfObject(obj);
  /* 4. Set the [[Class]] internal property of obj to "Arguments". */
  obj.Class := "Arguments";
  /* 5. Let Object be the standard built-in Object constructor (15.2.2). */
  /* TODO */
  /* 6. Set the [[Prototype]] internal property of obj to the standard built-in Object prototype object (15.2.4). */
  obj.Prototype := $loc_OBJ_PROTOTYPE; /* TODO */
  /* 7. Call the [[DefineOwnProperty]] internal method on obj passing "length", the Property Descriptor
        {[[Value]]: len, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as arguments. */
  DefineOwnProperty(obj, "length", {
    Value: len,
    Writable: true,
    Enumerable: false,
    Configurable: true
  }, false);
  /* 8. Let map be the result of creating a new object as if by the expression new Object() where Object is
        the standard built-in constructor with that name */
  map := NewObject();
  /* 9. Let mappedNames be an empty List. */
  mappedNames := [];
  /* 10. Let indx = len - 1. */
  indx := len - 1;
  /* 11. Repeat while indx >= 0, */
  repeat {
    /* a. Let val be the element of args at 0-origined list position indx. */
    val := l_nth(args, indx);
    /* b. Call the [[DefineOwnProperty]] internal method on obj passing ToString(indx), the property
          descriptor {[[Value]]: val, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and
          false as arguments. */
    DefineOwnProperty(obj, ToString(int_to_float indx), { /* TODO check this int_to_float */
      Value: val,
      Writable: true,
      Enumerable: true,
      Configurable: true
    }, false);
    /* c. If indx is less than the number of elements in names, then */
    if (indx < l_len names) {
      /* i. Let name be the element of names at 0-origined list position indx. */
      name := l_nth(names, indx);
      /* ii. If strict is false and name is not an element of mappedNames, then */
      if ((strict = false) && !(name in_list mappedNames)) {
        /* 1. Add name as an element of the list mappedNames. */
        mappedNames := l_add(mappedNames, name);
        /* 2. Let g be the result of calling the MakeArgGetter abstract operation with arguments
              name and env. */
        g := MakeArgGetter(name, env);
        /* 3. Let p be the result of calling the MakeArgSetter abstract operation with arguments
              name and env. */
        p := MakeArgSetter(name, env);
        /* 4. Call the [[DefineOwnProperty]] internal method of map passing ToString(indx), the
              Property Descriptor {[[Set]]: p, [[Get]]: g, [[Configurable]]: true}, and false as
              arguments. */
        DefineOwnProperty(map, ToString(int_to_float indx), { /* TODO check this int_to_float */
          Set: p,
          Get: g,
          Configurable: true
        }, false)
      }
    };
    /* d. Let indx = indx - 1 */
    indx := indx - 1
  } until indx < 0;
  /* 12. If mappedNames is not empty, then */
  if (l_len mappedNames > 0) {
    /* a. Set the [[ParameterMap]] internal property of obj to map. */
    obj.ParameterMap := map;
    /* b. Set the [[Get]], [[GetOwnProperty]], [[DefineOwnProperty]], and [[Delete]] internal methods of obj
          to the definitions provided below. */
    obj.Get               := "ArgumentsObjectGet";
    obj.GetOwnProperty    := "ArgumentsObjectGetOwnProperty";
    obj.DefineOwnProperty := "ArgumentsObjectDefineOwnProperty";
    obj.Delete            := "ArgumentsObjectDelete"
  };
  /* 13. If strict is false, then */
  if (true) { /* TODO */
    /* a. Call the [[DefineOwnProperty]] internal method on obj passing "callee", the property descriptor
          {[[Value]]: func, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}, and false as
          arguments. */
    DefineOwnProperty(obj, "callee", {
      Value: func,
      Writable: true,
      Enumerable: false,
      Configurable: true
    }, false)
  }
  /* 14. Else, strict is true so */
  else {
    /* a. Let thrower be the [[ThrowTypeError]] function Object (13.2.3). */
    thrower := null; /* TODO */
    /* b. Call the [[DefineOwnProperty]] internal method of obj with arguments "caller",
          PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]:
          false}, and false. */
    DefineOwnProperty(obj, "caller", {
      Get: thrower,
      Set: thrower,
      Enumerable: false,
      Configurable: false
    }, false);
    /* c. Call the [[DefineOwnProperty]] internal method of obj with arguments "callee",
          PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]:
          false}, and false. */
    DefineOwnProperty(obj, "callee", {
      Get: thrower,
      Set: thrower,
      Enumerable: false,
      Configurable: false
    }, false)
  };
  /* 15. Return obj */
  return obj
};

function MakeArgGetter(name, env) {
  /* The abstract operation MakeArgGetter called with String name and environment record env creates a function
     object that when executed returns the value bound for name in env. It performs the following steps: */

  /* 1. Let body be the result of concatenating the Strings "return ", name, and ";". */
  body := s_concat(["return ", name, ";"]);
  /* 2. Return the result of creating a function object as described in 13.2 using no FormalParameterList, body for
        FunctionBody, env as Scope, and true for Strict. */
  return CreateFunctionObject([], body, env, true)
};

function MakeArgSetter(name, env) {
  /* The abstract operation MakeArgSetter called with String name and environment record env creates a function
     object that when executed sets the value bound for name in env. It performs the following steps: */

  /* 1. Let param be the String name concatenated with the String "_arg". */
  param := s_concat([name, "_arg"]);
  /* 2. Let body be the String "<name> = <param>;" with <name> replaced by the value of name and <param>
        replaced by the value of param. */
  body := s_concat([name, " = ", param, ";"]);
  /* 3. Return the result of creating a function object as described in 13.2 using a List containing the single String
        param as FormalParameterList, body for FunctionBody, env as Scope, and true for Strict. */
  return CreateFunctionObject([param], body, env, true)
};

function ArgumentsObjectGet(argumentObject, P) {
  /* The [[Get]] internal method of an arguments object for a non-strict mode function with formal parameters when
     called with a property name P performs the following steps: */

  /* 1. Let map be the value of the [[ParameterMap]] internal property of the arguments object. */
  map := argumentObject.ParameterMap;
  /* 2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the
        argument. */
  isMapped := GetOwnProperty(map, P);
  /* 3. If the value of isMapped is undefined, then */
  if (isMapped = 'undefined) {
    /* a. Let v be the result of calling the default [[Get]] internal method (8.12.3) on the arguments object
          passing P as the argument. */
    v := Get(argumentObject, P);
    /* b. If P is "caller" and v is a strict mode Function object, throw a TypeError exception. */
    if ((P = "caller") && false) { /* TODO */
      throw TypeErrorException()
    };
    /* c. Return v. */
    return v
  }
  /* 4. Else, map contains a formal parameter mapping for P so, */
  else {
    /* a. Return the result of calling the [[Get]] internal method of map passing P as the argument. */
    return Get(map, P)
  }
};

function ArgumentsObjectGetOwnProperty(argumentsObject, P) {
  /* The [[GetOwnProperty]] internal method of an arguments object for a non-strict mode function with formal
     parameters when called with a property name P performs the following steps: */

  /* 1. Let desc be the result of calling the default [[GetOwnProperty]] internal method (8.12.1) on the arguments
        object passing P as the argument. */
  desc := GetOwnProperty(argumentsObject, P);
  /* 2. If desc is undefined then return desc. */
  if (desc = 'undefined) {
    return desc
  };
  /* 3. Let map be the value of the [[ParameterMap]] internal property of the arguments object. */
  map := argumentsObject.ParameterMap;
  /* 4. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the
        argument. */
  isMapped := GetOwnProperty(map, P);
  /* 5. If the value of isMapped is not undefined, then */
  if (!(isMapped = 'undefined)) {
    /* a. Set desc.[[Value]] to the result of calling the [[Get]] internal method of map passing P as the argument. */
    desc.Value := Get(map, P)
  };
  /* 6. Return desc. */
  return desc
};

function ArgumentsObjectDefineOwnProperty(argumentsObject, P, Desc, Throw) {
  /* The [[DefineOwnProperty]] internal method of an arguments object for a non-strict mode function with formal
     parameters when called with a property name P, Property Descriptor Desc, and Boolean flag Throw performs
     the following steps: */

  /* 1. Let map be the value of the [[ParameterMap]] internal property of the arguments object. */
  map := argumentsObject.ParameterMap;
  /* 2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the
        argument. */
  isMapped := GetOwnProperty(map, P);
  /* 3. Let allowed be the result of calling the default [[DefineOwnProperty]] internal method (8.12. 9) on the
        arguments object passing P, Desc, and false as the arguments. */
  allowed := DefineOwnProperty(argumentsObject, P, Desc, false);
  /* 4. If allowed is false, then */
  if (allowed = false) {
    /* a. If Throw is true then throw a TypeError exception, otherwise return false. */
    if (Throw = true) {
      throw TypeErrorException()
    } else {
      return false
    }
  };
  /* 5. If the value of isMapped is not undefined, then */
  if (!(isMapped = 'undefined)) {
    /* a. If IsAccessorDescriptor(Desc) is true, then */
    if (IsAccessorDescriptor(Desc)) {
      /* i. Call the [[Delete]] internal method of map passing P, and false as the arguments. */
      Delete(map, P, false)
    }
    /* b. Else */
    else {
      /* i.If Desc.[[Value]] is present, then */
      if ("Value" in_obj Desc) {
        /* 1. Call the [[Put]] internal method of map passing P, Desc.[[Value]], and Throw as the arguments. */
        Put(map, P, Desc.Value, Throw)
      };
      /* ii. If Desc.[[Writable]] is present and its value is false, then */
      if (("Writable" in_obj Desc) && (Desc.Writable = false)) {
        /* 1. Call the [[Delete]] internal method of map passing P and false as arguments. */
        Delete(map, P, false)
      }
    }
  };
  /* 6. Return true. */
  return true
};

function ArgumentsObjectDelete(argumentsObject, P, Throw) {
  /* The [[Delete]] internal method of an arguments object for a non-strict mode function with formal parameters
     when called with a property name P and Boolean flag Throw performs the following steps: */

  /* 1. Let map be the value of the [[ParameterMap]] internal property of the arguments object. */
  map := argumentsObject.ParameterMap;
  /* 2. Let isMapped be the result of calling the [[GetOwnProperty]] internal method of map passing P as the
        argument. */
  isMapped := GetOwnProperty(map, P);
  /* 3. Let result be the result of calling the default [[Delete]] internal method (8.12.7) on the arguments object
        passing P and Throw as the arguments. */
  result := Delete(argumentsObject, P, Throw);
  /* 4. If result is true and the value of isMapped is not undefined, then */
  if ((result = true) && !(isMapped = 'undefined)) {
    /* a. Call the [[Delete]] internal method of map passing P, and false as the arguments. */
    Delete(map, P, false)
  };
  /* 5. Return result. */
  return result
}
