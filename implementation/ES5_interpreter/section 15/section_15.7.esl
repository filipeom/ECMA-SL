/* 15.7 Number Objects */

function initNumberObject(globalObject, ObjectPrototype, strict) {
  numberPrototype := initNumberPrototype(ObjectPrototype);
  numberConstructor := initNumberConstructor(numberPrototype, globalObject, strict);

  fillNumberPrototype(numberPrototype, numberConstructor, globalObject, strict);

  return numberConstructor
};

/* 15.7.1 The Number Constructor Called as a Function */
/* When Number is called as a function rather than as a constructor, it performs a type conversion. */

/* 15.7.1.1 Number ( [ value ] ) */
/* Returns a Number value (not a Number object) computed by ToNumber(value) if value was supplied, else
   returns +0. */
function NumberConstructorCalledAsFunction(value) {
  if (value = undefined) {
    return 0.
  };
  return ToNumber(value)
};

/* 15.7.2 The Number Constructor */
function initNumberConstructor(NumberPrototype, globalObject, strict) {
  /* When Number is called as part of a new expression it is a constructor: it initialises the newly created object. */

  /* 15.7.3 Properties of the Number Constructor */
  /* The value of the [[Prototype]] internal property of the Number constructor is the Function prototype object
     (15.3.4). */
  NumberConstructor := CreateFunctionObject(["value"], "NumberConstructor", globalObject, strict, null);
  /* Besides the internal properties and the length property (whose value is 1), the Number constructor has the
     following properties: */

  /* 15.7.3.1 Number.prototype */
  /* The initial value of Number.prototype is the Number prototype object (15.7.4). */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "prototype", NumberPrototype, false, false, false);

  /* 15.7.3.2 Number.MAX_VALUE */
  /* The value of Number.MAX_VALUE is the largest positive finite value of the Number type, which is
     approximately 1.7976931348623157 x 10^308 . */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "MAX_VALUE", MAX_VALUE, false, false, false);

  /* 15.7.3.3 Number.MIN_VALUE */
  /* The value of Number.MIN_VALUE is the smallest positive value of the Number type, which is approximately
     5 x 10^-324 . */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "MIN_VALUE", MIN_VALUE, false, false, false);

  /* 15.7.3.4 Number.NaN */
  /* The value of Number.NaN is NaN. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "NaN", NaN, false, false, false);

  /* 15.7.3.5 Number.NEGATIVE_INFINITY
   * The value of Number.NEGATIVE_INFINITY is -∞.
   * This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "NEGATIVE_INFINITY", -Infinity, false, false, false);

  /* 15.7.3.6 Number.POSITIVE_INFINITY
   * The value of Number.POSITIVE_INFINITY is +∞.
   * This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "POSITIVE_INFINITY", Infinity, false, false, false);

  return NumberConstructor
};


/* 15.7.4 Properties of the Number Prototype Object */
function initNumberPrototype(objectPrototypeObject) {
  numberPrototypeObject := NewECMAScriptObject();
  setAllInternalMethodsOfObject(numberPrototypeObject);

  /* The Number prototype object is itself a Number object (its [[Class]] is "Number") whose value is +0. */
  setInternalProperty(numberPrototypeObject, "Class", "Number");
  setInternalProperty(numberPrototypeObject, "PrimitiveValue", 0.);
  /* The value of the [[Prototype]] internal property of the Number prototype object is the standard built-in Object
     prototype object (15.2.4). */
  setInternalProperty(numberPrototypeObject, "Prototype", objectPrototypeObject);

  return numberPrototypeObject
};

/* 15.7.4 Properties of the Number Prototype Object */
function fillNumberPrototype(numberPrototypeObject, NumberConstructor, globalObject, strict) {
  /* Unless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic
     and the this value passed to them must be either a Number value or an Object for which the value of the
     [[Class]] internal property is "Number". */

  /* In the following descriptions of functions that are properties of the Number prototype object, the phrase "this
     Number object" refers to either the object that is the this value for the invocation of the function or, if
     Type(this value) is Number, an object that is created as if by the expression new Number(this value)
     where Number is the standard built-in constructor with that name. Also, the phrase "this Number value" refers
     to either the Number value represented by this Number object, that is, the value of the [[PrimitiveValue]]
     internal property of this Number object or the this value if its type is Number. A TypeError exception is
     thrown if the this value is neither an object for which the value of the [[Class]] internal property is "Number"
     or a value whose type is Number. */

  /* 15.7.4.1 Number.prototype.constructor */
  /* The initial value of Number.prototype.constructor is the built-in Number constructor. */
  createBuiltInProperty(numberPrototypeObject, "constructor", NumberConstructor);

  /* 15.7.4.2 Number.prototype.toString ( [ radix ] ) */
  toString := CreateBuiltInFunctionObject([ "radix" ], "numberToString", globalObject, strict, null);
  createBuiltInProperty(numberPrototypeObject, "toString", toString);

  /* 15.7.4.3 Number.prototype.toLocaleString() */
  toLocaleString := CreateBuiltInFunctionObject([], "numberToLocaleString", globalObject, strict, null);
  createBuiltInProperty(numberPrototypeObject, "toLocaleString", toLocaleString);

  /* 15.7.4.4 Number.prototype.valueOf ( ) */
  valueOf := CreateBuiltInFunctionObject([], "NumberPrototypeValueOf", globalObject, strict, null);
  createBuiltInProperty(numberPrototypeObject, "valueOf", valueOf);

  /* 15.7.4.5 Number.prototype.toFixed (fractionDigits) */

  /* 15.7.4.6 Number.prototype.toExponential (fractionDigits) */

  /* 15.7.4.7 Number.prototype.toPrecision (precision) */

  return
};

/* 15.7.5 Properties of Number Instances */
/* Number instances inherit properties from the Number prototype object and their [[Class]] internal property
   value is "Number". Number instances also have a [[PrimitiveValue]] internal property. */
/* The [[PrimitiveValue]] internal property is the Number value represented by this Number object. */

/* 15.7.2.1 new Number ( [ value ] ) */
function NumberConstructor(globalObject, this, strict, params) {
  value := getOptionalParam(params, 0);

  if (this = 'undefined) {
    return NumberConstructorCalledAsFunction(value)
  };

  /* When Number is called as part of a new expression it is a constructor: it initialises the newly created object. */
  newlyConstructedObject := NewECMAScriptObject();
  setAllInternalMethodsOfObject(newlyConstructedObject);

  /* The [[Prototype]] internal property of the newly constructed object is set to the original Number prototype
     object, the one that is the initial value of Number.prototype (15.7.3.1). */
  setInternalProperty(newlyConstructedObject, "Prototype", getNumberPrototype(strict));
  /* The [[Class]] internal property of the newly constructed object is set to "Number". */
  setInternalProperty(newlyConstructedObject, "Class", "Number");
  /* The [[PrimitiveValue]] internal property of the newly constructed object is set to ToNumber(value) if value was
     supplied, else to +0. */
  if (value = undefined) {
    setInternalProperty(newlyConstructedObject, "PrimitiveValue", 0.)
  } else {
    setInternalProperty(newlyConstructedObject, "PrimitiveValue", ToNumber(value))
  };
  /* The [[Extensible]] internal property of the newly constructed object is set to true. */
  setInternalProperty(newlyConstructedObject, "Extensible", true);

  return newlyConstructedObject
};

/* Luis TODO */
/**
 * 15.7.4.2 Number.prototype.toString ( [ radix ] )
 *
 * The optional radix should be an integer value in the inclusive range 2 to 36.
 * If radix not present or is undefined the Number 10 is used as the value of radix.
 * If ToInteger(radix) is the Number 10 then this Number value is given as an argument
 * to the ToString abstract operation; the resulting String value is returned.
 *
 * If ToInteger(radix) is not an integer between 2 and 36 inclusive throw a RangeError
 * exception. If ToInteger(radix) is an integer from 2 to 36, but not 10, the result is
 * a String representation of this Number value using the specified radix. Letters a-z
 * are used for digits with values 10 through 35. The precise algorithm is
 * implementation-dependent if the radix is not 10, however the algorithm should be a
 * generalization of that specified in 9.8.1.
 *
 * The toString function is not generic; it throws a TypeError exception if its this
 * value is not a Number or a Number object. Therefore, it cannot be transferred to other
 * kinds of objects for use as a method.
 */
function numberToString(global, this, strict, args) {
  if (!isNumberOrNumberObject(this)) {
    return throwEmptyCompletion(TypeErrorConstructorInternal())
  };
  if (Type(this) = "Number") {
    num := this
  } else {
    num := this.PrimitiveValue
  };
  return ToString(num)
};

/* 15.7.4.3 Number.prototype.toLocaleString() */
function numberToLocaleString(global, this, strict, args) {
  /* Produces a String value that represents this Number value formatted according to the conventions of the host
     environment‘s current locale. This function is implementation-dependent, and it is permissible, but not
     encouraged, for it to return the same thing as toString. */

  /* NOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended
          that implementations do not use this parameter position for anything else. */
  if (!isNumberOrNumberObject(this)) {
    return throwEmptyCompletion(TypeErrorConstructorInternal())
  };
  if (Type(this) = "Number") {
    num := this
  } else {
    num := this.PrimitiveValue
  };
  return ToString(num)
};

/* 15.7.4.4 Number.prototype.valueOf ( ) */
function NumberPrototypeValueOf(global, this, strict, params) {
  /* Returns this Number value. */

  /* The valueOf function is not generic; it throws a TypeError exception if its this value is not a Number or a
     Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method. */
  if (!isNumberOrNumberObject(this)) {
    return throwEmptyCompletion(TypeErrorConstructorInternal())
  };
  if (Type(this) = "Number") {
    return this
  };
  return getInternalProperty(this, "PrimitiveValue")
};


/* Auxiliary functions */
function getNumberPrototype(strict) {
  refNumber := newPropertyReference(|global|, "Number", strict);
  NumberObject := GetValue(refNumber);

  refNumberProto := newPropertyReference(NumberObject, "prototype", strict);
  objectNumberProto := GetValue(refNumberProto);

  return objectNumberProto
};

function isNumberOrNumberObject(arg) {
  if (Type(arg) = "Number") {
    return true
  };
  if ((Type(arg) = "Object") &&& (getInternalProperty(arg, "Class") = "Number")) {
    return true
  };
  return false
}
