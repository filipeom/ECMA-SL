/* Auxiliary functions */

/* Checks if neither string or any prefix of string satisfies the syntax of a StrDecimalLiteral (see 9.3.1) */
/* StrDecimalLiteral :::
      StrUnsignedDecimalLiteral
      + StrUnsignedDecimalLiteral
      - StrUnsignedDecimalLiteral
*/
function satisfiesTheSyntaxOfStrDecimalLiteral(string) {
  string_len := s_len string;
  if (string_len = 0) {
    return false
  };

  /* Is a string containing only a single char? */
  if (string_len = 1) {
    if (isDecimalDigit(string)) {
      return true
    };
    return false
  };

  /* Check first character */
  firstChar := s_nth(string, 0);

  /* Starts with "+" or "-"? */
  if (firstChar = "+" ||| firstChar = "-") {
    return satisfiesTheSyntaxOfStrUnsignedDecimalLiteral(s_substr(string, 1, string_len - 1))
  };

  return satisfiesTheSyntaxOfStrUnsignedDecimalLiteral(string)
};

/* StrUnsignedDecimalLiteral :::
      Infinity
      DecimalDigits . DecimalDigitsopt ExponentPartopt
      . DecimalDigits ExponentPartopt
      DecimalDigits ExponentPartopt
 */
function satisfiesTheSyntaxOfStrUnsignedDecimalLiteral(string) {
  strLen := s_len string;
  if (strLen >= 8 &&& s_substr(string, 0, 8) = "Infinity") {
    return true
  };

  firstChar := s_nth(string, 0);
  if (isDecimalDigit(firstChar)) {
    return true
  };

  if (firstChar = "." &&& strLen >= 2) {
    return isDecimalDigit(s_nth(string, 1))
  };

  return false
};



/* Returns the longest substring that satisfies the syntax of a StrDecimalLiteral. */
function getStrDecimalLiteral(string) {
  retStr := "";
  subLen := s_len string;

  /* Is HexIntegerLiteral? */
  if (isHexIntegerLiteral(string)) {
    return "0"
  };

  if (!(is_NaN (float_of_string string))) {
    return string
  };

  while(subLen > 0) {
    subLen := subLen - 1;

    subStr := s_substr(string, 0, subLen);
    if (!(is_NaN (float_of_string subStr))) {
      return subStr
    }
  };

  return retStr
};

/* DecimalDigit */
function isDecimalDigit(char) {
  return char >= "0" &&& char <= "9"
};

function isHexIntegerLiteral(string) {
  if (s_len(string) < 2) {
    return false
  };

  firstTwoChars := s_substr(string, 0, 2);
  if (firstTwoChars = "0x" ||| firstTwoChars = "0X") {
    return true
  };

  return false
}
