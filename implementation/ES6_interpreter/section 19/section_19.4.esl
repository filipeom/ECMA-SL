function initSymbolPrototype(global, objectPrototype, strict) {
  prototype := NewECMAScriptObjectFull(objectPrototype, "Symbol", true);
  setAllInternalMethodsOfObject(prototype);

  /* 19.4.3.2 Symbol.prototype.toString () */
  toStringFunctionObject := CreateBuiltInFunctionObject([], "symbolToString", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(toStringFunctionObject, true, false, true);
  setJSProperty(prototype, "toString", descriptor);
  setJSProperty(toStringFunctionObject, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(toStringFunctionObject, "name", newDataPropertyDescriptorFull("toString", false, false, true));
  
  /* 19.4.3.3 Symbol.prototype.valueOf () */
  valueOfFunctionObject := CreateBuiltInFunctionObject([], "symbolValueOf", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(valueOfFunctionObject, true, false, true);
  setJSProperty(prototype, "valueOf", descriptor);
  setJSProperty(valueOfFunctionObject, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(valueOfFunctionObject, "name", newDataPropertyDescriptorFull("valueOf", false, false, true));

  /* 19.4.3.4 Symbol.prototype [@@toPrimitive] () */
  toPrimitiveFunctionObject := CreateBuiltInFunctionObject([], "symbolValueOf", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(toPrimitiveFunctionObject, false, false, true);
  setJSProperty(prototype, "Symbol(toPrimitive)", descriptor);
  setJSProperty(toPrimitiveFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(toPrimitiveFunctionObject, "name", newDataPropertyDescriptorFull("[Symbol.toPrimitive]", false, false, true));

  /* 19.4.3.5 Symbol.prototype [@@toStringTag] () */
  descriptor := newDataPropertyDescriptorFull("Symbol", false, false, true);
  setJSProperty(prototype, "Symbol(toStringTag)", descriptor);

  setInternalProperty(prototype, "SymbolData", "");
  setInternalProperty(prototype, "Description", "");

  /* Symbol.prototype.description: Existe apenas no ES10 */
  descriptionFunctionObject := CreateFunctionObject([], "getSymbolDescriptionAccessorProperty", global, false, null);
  descriptor := newGetAccessorPropertyDescriptorFull(descriptionFunctionObject, false, true);
  setJSProperty(prototype, "description", descriptor);

  return prototype
};

function initSymbolObject(global, objectPrototype, strict) {
  objSymbolPrototype := initSymbolPrototype(global, objectPrototype, strict);
  objSymbolConstructor := CreateFunctionObject(["items"], "SymbolConstructor", global, strict, 0.);
  setJSProperty(objSymbolConstructor, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(objSymbolConstructor, "name", newDataPropertyDescriptorFull("Symbol", false, false, true));
  setJSProperty(objSymbolConstructor, "species", newDataPropertyDescriptorFull("species", false, false, true));

  descriptor := newDataPropertyDescriptorFull(objSymbolConstructor, true, false, true);
  setJSProperty(objSymbolPrototype, "constructor", descriptor);

  /* 19.4.2.1 Symbol.for (key) */
  forFunctionObject := CreateBuiltInFunctionObject([], "symbolFor", global, strict, 0.);
  descriptor := newDataPropertyDescriptorFull(forFunctionObject, true, false, true);
  setJSProperty(objSymbolConstructor, "for", descriptor);
  setJSProperty(forFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(forFunctionObject, "name", newDataPropertyDescriptorFull("for", false, false, true));

  /* 19.4.2.2 Symbol.hasInstance 
    The initial value of Symbol.hasInstance is the well known symbol @@hasInstance.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  hasInstanceSymbol := internalSymbolConstructor2(objSymbolPrototype, "hasInstance", "hasInstance", strict);
  descriptor := newDataPropertyDescriptorFull(hasInstanceSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "hasInstance", descriptor);

  /* 19.4.2.3 Symbol.isConcatSpreadable 
    The initial value of Symbol.isConcatSpreadable is the well known symbol @@isConcatSpreadable.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  isConcatSpreadableSymbol := internalSymbolConstructor2(objSymbolPrototype, "isConcatSpreadable", "isConcatSpreadable", strict);
  descriptor := newDataPropertyDescriptorFull(isConcatSpreadableSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "isConcatSpreadable", descriptor);

  /* 19.4.2.4 Symbol.iterator 
    The initial value of Symbol.iterator is the well known symbol @@iterator.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  iteratorSymbol := internalSymbolConstructor2(objSymbolPrototype, "iterator", "iterator", strict);
  descriptor := newDataPropertyDescriptorFull(iteratorSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "iterator", descriptor);

  /* 19.4.2.5 Symbol.keyFor (key) */
  keyForFunctionObject := CreateBuiltInFunctionObject([], "symbolKeyFor", global, strict, 0.);
  descriptor := newDataPropertyDescriptorFull(keyForFunctionObject, true, false, true);
  setJSProperty(objSymbolConstructor, "keyFor", descriptor);
  setJSProperty(keyForFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(keyForFunctionObject, "name", newDataPropertyDescriptorFull("keyFor", false, false, true));

  /* 19.4.2.6 Symbol.match 
    The initial value of Symbol.match is the well known symbol @@match.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  matchSymbol := internalSymbolConstructor2(objSymbolPrototype, "match", "match", strict);
  descriptor := newDataPropertyDescriptorFull(matchSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "match", descriptor);

  /* 19.4.2.7 Symbol.prototype 
    The initial value of Symbol.prototype the intrinsic object %SymbolPrototype%.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.*/
  descriptor := newDataPropertyDescriptorFull(objSymbolPrototype, false, false, false);
  setJSProperty(objSymbolConstructor, "prototype", descriptor);

  /* 19.4.2.8 Symbol.replace 
    The initial value of Symbol.replace is the well known symbol @@replace.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  replaceSymbol := internalSymbolConstructor2(objSymbolPrototype, "replace", "replace", strict);
  descriptor := newDataPropertyDescriptorFull(replaceSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "replace", descriptor);

  /* 19.4.2.9 Symbol.search 
    The initial value of Symbol.search is the well known symbol @@search.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  searchSymbol := internalSymbolConstructor2(objSymbolPrototype, "search", "search", strict);
  descriptor := newDataPropertyDescriptorFull(searchSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "search", descriptor);

  /* 19.4.2.10 Symbol.species 
    The initial value of Symbol.species is the well known symbol @@species.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  speciesSymbol := internalSymbolConstructor2(objSymbolPrototype, "species", "species", strict);
  descriptor := newDataPropertyDescriptorFull(speciesSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "species", descriptor);
  
  /* 19.4.2.11 Symbol.split 
    The initial value of Symbol.split is the well known symbol @@split.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  splitSymbol := internalSymbolConstructor2(objSymbolPrototype, "split", "split", strict);
  descriptor := newDataPropertyDescriptorFull(splitSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "split", descriptor);

  /* 19.4.2.12 Symbol.toPrimitive
    The initial value of Symbol.toPrimitive is the well known symbol @@toPrimitive.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  toPrimitiveSymbol := internalSymbolConstructor2(objSymbolPrototype, "toPrimitive", "toPrimitive", strict);
  descriptor := newDataPropertyDescriptorFull(toPrimitiveSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "toPrimitive", descriptor);

  /* 19.4.2.13 Symbol.toStringTag 
    The initial value of Symbol.toStringTag is the well known symbol @@toStringTag.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  toStringTagSymbol := internalSymbolConstructor2(objSymbolPrototype, "toStringTag", "toStringTag", strict);
  descriptor := newDataPropertyDescriptorFull(toStringTagSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "toStringTag", descriptor);

  /* 19.4.2.14 Symbol.unscopables 
    The initial value of Symbol.unscopables is the well known symbol @@unscopables.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  unscopablesSymbol := internalSymbolConstructor2(objSymbolPrototype, "unscopables", "unscopables", strict);
  descriptor := newDataPropertyDescriptorFull(unscopablesSymbol, false, false, false);
  setJSProperty(objSymbolConstructor, "unscopables", descriptor);

  return objSymbolConstructor
};

function getSymbolPrototype (strict) { 
  refSymbol := newPropertyReference(|global|, "Symbol", strict);
  SymbolObject := GetValue(refSymbol);
  refSymbolProto := newPropertyReference(SymbolObject, "prototype", strict);
  objectSymbolProto := GetValue(refSymbolProto);
  return objectSymbolProto
}; 

function newSymbolData() {
  cur := |__CUR__SYMB__|; 
  |__CUR__SYMB__| := cur + 1; 
  return cur
};

function internalSymbolConstructor(descString, strict) { 
  symbolPrototype := getSymbolPrototype(strict);

  newlyConstructedSymbol := NewECMAScriptObject();
  setAllInternalMethodsOfObject(newlyConstructedSymbol);

  setInternalProperty(newlyConstructedSymbol, "Prototype", symbolPrototype);
  setInternalProperty(newlyConstructedSymbol, "Extensible", false);
  setInternalProperty(newlyConstructedSymbol, "Class", "Symbol");
  
  newlyConstructedSymbol.Description := descString;
  newlyConstructedSymbol.SymbolData := newSymbolData(); 

  return newlyConstructedSymbol
};

function internalSymbolConstructor2(symbolPrototype, symbolData, descString, strict) { 

  newlyConstructedSymbol := NewECMAScriptObject();
  setAllInternalMethodsOfObject(newlyConstructedSymbol);

  setInternalProperty(newlyConstructedSymbol, "Prototype", symbolPrototype);
  setInternalProperty(newlyConstructedSymbol, "Extensible", false);
  setInternalProperty(newlyConstructedSymbol, "Class", "Symbol");
  
  newlyConstructedSymbol.Description := descString;
  newlyConstructedSymbol.SymbolData := symbolData; 

  return newlyConstructedSymbol
};

/* 19.4.1.1 Symbol ([description]) */
function SymbolConstructor(global, NewTarget, strict, args) {
  description := getOptionalParam(args, 0); 

  /* 1. If NewTarget is not undefined, throw a TypeError exception. */ 
  if (!(NewTarget = 'undefined)) {
    throw TypeErrorConstructorInternal()
  }; 
  
  /* 2. If description is undefined, let descString be undefined. */
  if (description = null || description = 'undefined) { 
    descString := 'undefined
  } else {
    descString := ToString(description)
  }; 
  
  /* 3. ReturnIfAbrupt(descString). */
  @ReturnIfAbrupt(descString);

  /* 4. Return a new unique Symbol value whose [[Description]] value is descString. */
  return internalSymbolConstructor(descString, strict)
};


/* 19.4.2.1 Symbol.for (key) */
function symbolFor(global, this, strict, args) {
  
  key := l_nth(args, 0);

  /* 1. Let stringKey be ToString(key). */
  stringKey := ToString(key);

  /* 2. ReturnIfAbrupt(stringKey). */
  @ReturnIfAbrupt(stringKey);

  /* 3. For each element e of the GlobalSymbolRegistry List */
  i := 0;
  len := l_len(|GlobalSymbolRegistry|);

  while (i < len){
    e := l_nth(|GlobalSymbolRegistry|, i);
    /* 3a. If SameValue(e.[[key]], stringKey) is true, return e.[[symbol]]. */
    if (SameValue(e.key, stringKey)){
      return e.symbol
    };
    i := i + 1
  };

  /* 4. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey. */
  assert(!(stringKey in_list |GlobalSymbolRegistry|));

  /* 5. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey. */
  newSymbol := SymbolConstructor(global, 'undefined, strict, [stringKey]);

  /* 6. Append the record { [[key]]: stringKey, [[symbol]]: newSymbol } to the GlobalSymbolRegistry List. */
  |GlobalSymbolRegistry| := l_add(|GlobalSymbolRegistry|, {key: stringKey, symbol: newSymbol});

  /* 7. Return newSymbol. */
  return newSymbol
};

/* 19.4.2.5 Symbol.keyFor (sym) */
function symbolKeyFor(global, this, strict, args) {

  sym := l_nth(args, 0);
  
  /* 1. If Type(sym) is not Symbol, throw a TypeError exception. */
  if (!(Type(sym) = "Symbol")) {
    throw TypeErrorConstructorInternal()
  };

  /* 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1), */
  i := 0;
  len := l_len(|GlobalSymbolRegistry|);

  while (i < len){
    e := l_nth(|GlobalSymbolRegistry|, i);

    /* 2a. If SameValue(e.[[symbol]], sym) is true, return e.[[key]]. */
    if (SameValue(e.symbol, sym)){
      return e.key
    };

    i := i + 1
  };

  /* 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym. */
  assert(!(sym in_list |GlobalSymbolRegistry|));

  /* 4. Return undefined. */
  return 'undefined
};

/* 19.4.3.2 Symbol.prototype.toString () */
function symbolToString(global, this, strict, args){

  /* 1. Let s be the this value. */
  s := this;

  /* 2. If Type(s) is Symbol, let sym be s. */
  if (Type(s) = "Symbol") {
    sym := s
  }

  /* 3. Else */
  else{

    /* 3a. If Type(s) is not Object, throw a TypeError exception. */
    if (!(Type(s) = "Object")) {
      throw TypeErrorConstructorInternal()
    };

    /* 3b. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception. */
    if (!("SymbolData" in_obj s)) {
      throw TypeErrorConstructorInternal()
    };

    /* 3c. Let sym be the value of s’s [[SymbolData]] internal slot. */
    sym := s.SymbolData
  };

  /* 4. Return SymbolDescriptiveString(sym). */
  return symbolDescriptiveString(sym)
};

/* 19.4.3.2.1 SymbolDescriptiveString (sym) */
function symbolDescriptiveString(sym){

  /* 1. Assert: Type(sym) is Symbol.*/
  assert(Type(sym) = "Symbol");

  /* 2. Let desc be sym’s [[Description]] value. */
  desc := sym.Description;
  
  /* 3. If desc is undefined, let desc be the empty string.*/
  if (desc = 'undefined){
    desc := ""
  };

  /* 4. Assert: Type(desc) is String. */
  assert(Type(desc) = "String");

  /* 5. Return the result of concatenating the strings "Symbol(", desc, and ")". */
  return s_concat ["Symbol(", desc, ")"]
};

/* 19.4.3.3 Symbol.prototype.valueOf () */
function symbolValueOf(global, this, strict, args){
  
  /* 1. Let s be the this value. */
  s := this;
  
  /* 2. If Type(s) is Symbol, return s. */
  if (Type(s) = "Symbol") {
    return s
  };

  /* 3. If Type(s) is not Object, throw a TypeError exception. */
  if (!(Type(s) = "Object")) {
    throw TypeErrorConstructorInternal()
  };

  /* 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception. */
  if (!("SymbolData" in_obj s)) {
    throw TypeErrorConstructorInternal()
  };

  /* 5. Return the value of s’s [[SymbolData]] internal slot. */
  return s.SymbolData
};

function thisSymbolValue(value){

  /* 1. If Type(value) is Symbol, return value. */
  if (Type(value) = "Symbol"){
    return value
  };

  /* 2. If Type(value) is Object and value has a [[SymbolData]] internal slot, then */
  if (Type(value) = "Object" &&& "SymbolData" in_obj value){

    /* 2a. Let s be value.[[SymbolData]]. */
    s := value.SymbolData;

    /* 2b. Assert: Type(s) is Symbol. */
    assert(Type(s) = "Symbol");

    /* 2c. Return s. */
    return s
  };
        
  /* 3. Throw a TypeError exception. */
  throw TypeErrorConstructorInternal()
};

function getSymbolDescriptionAccessorProperty(global, this, strict, args){

  /* 1. Let s be the this value. */
  s := this;

  /* 2. Let sym be ? thisSymbolValue(s). */
  sym := thisSymbolValue(s);

  /* 3. Return sym.[[Description]]. */
  return sym.Description
};


function getSpeciesPropertyName() {
  return "Symbol(species)"
};

function getIteratorPropertyName() {
  return "Symbol(iterator)"
};

function getToStringTagPropertyName() {
  return "Symbol(toStringTag)"
};

function getMatchPropertyName(){
  return "Symbol(match)"
};

function getReplacePropertyName(){
  return "Symbol(replace)"
};

function getSearchPropertyName(){
  return "Symbol(search)"
};

function getSplitPropertyName(){
  return "Symbol(split)"
};

function getToPrimitivePropertyName() {
  return "Symbol(toPrimitive)"
};

function getUnscopablesPropertyName() {
  return "Symbol(unscopables)"
};

function getIsConcatSpreadablePropertyName () {
  return "Symbol(isConcatSpreadable)"
}