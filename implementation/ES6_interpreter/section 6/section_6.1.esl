/**
 * 6.1.5 The Symbol Type
 * 
 * The Symbol type is the set of all non-String values that may be used as the key of an Object property (6.1.7).
 *
 * Each possible Symbol value is unique and immutable.
 *
 * Each Symbol value immutably holds an associated value called [[Description]] that is either undefined or a String value.
 */
function InternalSymbolConstructor(description) {
  sym := {
    Description: description,
    _id: |__CUR__SYMB__|
  };
  |__CUR__SYMB__| := |__CUR__SYMB__| + 1;
  return sym
};

/**
 * 6.1.5.1 Well-Known Symbols
 */
function initWellKnownSymbols() {
  wellKnownSymbols := ["Symbol.hasInstance","Symbol.isConcatSpreadable",
                       "Symbol.iterator", "Symbol.match",
                       "Symbol.replace", "Symbol.search",
                       "Symbol.species", "Symbol.split", "Symbol.toPrimitive",
                       "Symbol.toStringTag", "Symbol.unscopables"];

  foreach (sym : wellKnownSymbols) {
    initWellKnownSymbol(sym)
  };

  return
};

function initWellKnownSymbol(description) {
  sym := InternalSymbolConstructor(description);
  rec := {
    key: description,
    symbol: sym
  };
  |GlobalSymbolRegistry|[description] := rec;
  return
};

function getWellKnownSymbol(key) {
  if (key in_obj |GlobalSymbolRegistry|) {
    return |GlobalSymbolRegistry|[key].symbol
  };
  return 'undefined
};

/** 6.1.7.4 Well-Known Intrinsic Objects
    Just initializing the intrinsic container here and assign the well-known objects when they are created (section 18/section_18.esl)
*/
function initIntrinsics(intrinsic, strict) {
  |Intrinsics| := intrinsic;

  initWellKnownSymbols();

  objectPrototype := intrinsic.objectPrototype;
  funcPrototype := intrinsic.FunctionPrototype;

  |Intrinsics|["IteratorPrototype"] := initIteratorPrototype(intrinsic, objectPrototype, strict);

  /* Array */
  ArrayObject := initArrayObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Array"] := ArrayObject;
  |Intrinsics|["ArrayPrototype"] := getPrototypeValue(ArrayObject);
  |Intrinsics|["ArrayProto_values"] := getJSProperty(getPrototypeValue(ArrayObject), "values").Value;
  |Intrinsics|["ArrayIteratorPrototype"] := initArrayIteratorPrototype(intrinsic, objectPrototype, strict);
  
  /* ArrayBuffer */
  ArrayBufferObject := initArrayBufferObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["ArrayBuffer"] := ArrayBufferObject
  |Intrinsics|["ArrayBufferPrototype"] := getPrototypeValue(ArrayBufferObject);
  
  /* Boolean */
  BooleanObject := initBooleanObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Boolean"] := BooleanObject;
  |Intrinsics|["BooleanPrototype"] := getPrototypeValue(BooleanObject);

  /* DataView */
  DataViewObject := initDataViewObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["DataView"] := DataViewObject;
  |Intrinsics|["DataViewPrototype"] := getPrototypeValue(DataViewObject);

  /* Date */
  DateObject := initDateObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Date"] := DateObject;
  |Intrinsics|["DatePrototype"] := getPrototypeValue(DateObject);

  /* decodeURI */
  decodeURI := CreateBuiltInFunctionObject(["encodedURI"], "GlobalObjectDecodeURI", intrinsic, strict, null);
  |Intrinsics|["decodeURI"] := decodeURI;
  
  decodeURIComponent := CreateBuiltInFunctionObject(["encodedURIComponent"], "GlobalObjectDecodeURIComponent", intrinsic, strict, null);
  |Intrinsics|["decodeURIcomponent"] := decodeURIComponent;
  
  /* encodeURI */
  encodeURI := CreateBuiltInFunctionObject(["uri"], "GlobalObjectEncodeURI", intrinsic, strict, null);
  |Intrinsics|["encodeURI"] := encodeURI;

  encodeURIComponent := CreateBuiltInFunctionObject(["uriComponent"], "GlobalObjectEncodeURIComponent", intrinsic, strict, null);
  |Intrinsics|["encodeURIcomponent"] := encodeURIComponent;

  /* Error */
  ErrorObject := initErrorObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Error"] := ErrorObject;
  |Intrinsics|["ErrorPrototype"] := getPrototypeValue(ErrorObject);
 
 /* eval */
  eval := CreateBuiltInFunctionObject(["x"], "GlobalObjectEval", intrinsic, strict, null);
  |Intrinsics|["eval"] := eval;

  /* Eval Error */
  EvalErrorObject := initEvalErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["EvalError"] := EvalErrorObject;
  |Intrinsics|["EvalErrorPrototype"] := getPrototypeValue(EvalErrorObject);
 
  /* TypedArray */
  typedArray := initTypedArrayMainConstructor(intrinsic, objectPrototype, strict);
  |Intrinsics|["TypedArray"] := typedArray;
  |Intrinsics|["TypedArrayPrototype"] := getPrototypeValue(typedArray);

 /* Float32Array */
  Float32ArrayObject := initTypedArrayObject(intrinsic, strict, "Float32", typedArray);
  |Intrinsics|["Float32Array"] := Float32ArrayObject;
  |Intrinsics|["Float32ArrayPrototype"] := getPrototypeValue(Float32ArrayObject);
 
  /* Float64Array */
  Float64ArrayObject := initTypedArrayObject(intrinsic, strict, "Float64", typedArray);
  |Intrinsics|["Float64Array"] := Float64ArrayObject;
  |Intrinsics|["Float64ArrayPrototype"] := getPrototypeValue(Float64ArrayObject);
 
  FunctionConstructor := initFunctionConstructor(funcProto, intrinsic, strict);
  |Intrinsics|["Function"] := getProp(intrinsic, "Function", strict);
 
  /* TODO GENERATOR */

  /* Int8 Array */
  Int8ArrayObject := initTypedArrayObject(intrinsic, strict, "Int8", typedArray);
  |Intrinsics|["Int8Array"] := Int8ArrayObject;
  |Intrinsics|["Int8ArrayPrototype"] := getPrototypeValue(Int8ArrayObject);
 
  /* Int16 Array */
  Int16ArrayObject := initTypedArrayObject(intrinsic, strict, "Int16", typedArray);
  |Intrinsics|["Int16Array"] := Int16ArrayObject;
  |Intrinsics|["Int16ArrayPrototype"] := getPrototypeValue(Int16ArrayObject);

  /* Int32 Array */
  Int32ArrayObject := initTypedArrayObject(intrinsic, strict, "Int32", typedArray);
  |Intrinsics|["Int32Array"] := Int32ArrayObject;
  |Intrinsics|["Int32ArrayPrototype"] := getPrototypeValue(Int32ArrayObject);

  /* isFinite */
  isFinite := CreateBuiltInFunctionObject(["number"], "GlobalObjectIsFinite", intrinsic, strict, null);
  |Intrinsics|["isFinite"] := isFinite;

  /* isNaN */
  isNaN := CreateBuiltInFunctionObject(["number"], "GlobalObjectIsNaN", intrinsic, strict, null);
  |Intrinsics|["isNaN"] := isNaN;

  /* JSON */
  JsonObject := initJsonObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["JSON"] := JsonObject;

  /* Map */
  MapObject := initMapObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Map"] := MapObject;
  |Intrinsics|["MapIteratorPrototype"] := initMapIteratorPrototype(intrinsic, objectPrototype, strict);
  |Intrinsics|["MapPrototype"] := getPrototypeValue(MapObject);

  /* Math */
  MathObject := initMathObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Math"] := MathObject;

  /* Number */
  NumberObject := initNumberObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Number"] := NumberObject;
  |Intrinsics|["NumberPrototype"] := getPrototypeValue(NumberObject);
 
  /* Object */
  ObjectConstructor := initObjectConstructor(objectPrototype, funcProto, intrinsic, strict);
  |objectConstructor| := ObjectConstructor;
  |Intrinsics|["Object"] := ObjectConstructor;
  |Intrinsics|["ObjProto_toString"] := getJSProperty(objectPrototype, "toString").Value;

  /* parseFloat */
  parseFloat := CreateBuiltInFunctionObject(["string"], "GlobalObjectParseFloat", intrinsic, strict, null);
  |Intrinsics|["parseFloat"] := parseFloat;

  /* parseInt */
  parseInt := CreateBuiltInFunctionObject(["string", "radix"], "GlobalObjectParseInt", intrinsic, strict, null);
  |Intrinsics|["parseInt"] := parseInt;

  /* Promise */
  PromiseObject := initPromiseObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Promise"] := PromiseObject;
  |Intrinsics|["PromisePrototype"] := getPrototypeValue(PromiseObject);
 
  /* Proxy */
  ProxyObject := initProxyObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Proxy"] := ProxyObject;

  /* RangeError */
  RangeErrorObject := initRangeErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["RangeError"] := RangeErrorObject;
  |Intrinsics|["RangeErrorPrototype"] := getPrototypeValue(RangeErrorObject);

  /* ReferenceError */
  ReferenceErrorObject := initReferenceErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["ReferenceError"] := ReferenceErrorObject;
  |Intrinsics|["ReferenceErrorPrototype"] := getPrototypeValue(ReferenceErrorObject);
 
  /* Reflect */
  ReflectObject := initReflectObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Reflect"] := ReflectObject;

  /* RegExp */
  RegExpObject := initRegExpObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["RegExp"] := RegExpObject;
  |Intrinsics|["RegExpPrototype"] := getPrototypeValue(RegExpObject);
  
  /* Set */
  SetObject := initSetObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Set"] := SetObject;
  |Intrinsics|["SetIteratorPrototype"] := initSetIteratorPrototype(intrinsic, objectPrototype, strict);
  |Intrinsics|["SetPrototype"] := getPrototypeValue(SetObject);
  
  /* String */
  StringObject := initStringObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["String"] := StringObject;
  |Intrinsics|["StringIteratorPrototype"] := initStringIteratorPrototype(intrinsic, objectPrototype, strict);
  |Intrinsics|["StringPrototype"] := getPrototypeValue(StringObject);
  
  /* Symbol */
  symbolObject := initSymbolObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["Symbol"] := symbolObject;
  |Intrinsics|["SymbolPrototype"] := getPrototypeValue(symbolObject);
  
  /* SyntaxError */
  SyntaxErrorObject := initSyntaxErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["SyntaxError"] := SyntaxErrorObject;
  |Intrinsics|["SyntaxErrorPrototype"] := getPrototypeValue(SyntaxErrorObject);
  
  /* TypeError */
  TypeErrorObject := initTypeErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["TypeError"] := TypeErrorObject;
  |Intrinsics|["TypeErrorPrototype"] := getPrototypeValue(TypeErrorObject);

  /* Uint8Array */
  Uint8ArrayObject := initTypedArrayObject(intrinsic, strict, "Uint8", typedArray);
  |Intrinsics|["Uint8Array"] := Uint8ArrayObject;
  |Intrinsics|["Uint8ArrayPrototype"] := getPrototypeValue(Uint8ArrayObject);

  /* Uint8ClampedArray */
  Uint8ClampedArrayObject := initTypedArrayObject(intrinsic, strict, "Uint8Clamped", typedArray);
  |Intrinsics|["Uint8ClampedArray"] := Uint8ClampedArrayObject;
  |Intrinsics|["Uint8ClampedArrayPrototype"] := getPrototypeValue(Uint8ClampedArrayObject);

  /* Uint16Array */
  Uint16ArrayObject := initTypedArrayObject(intrinsic, strict, "Uint16", typedArray);
  |Intrinsics|["Uint16Array"] := Uint16ArrayObject;
  |Intrinsics|["Uint16ArrayPrototype"] := getPrototypeValue(Uint16ArrayObject);

  /* Uint32Array */
  Uint32ArrayObject := initTypedArrayObject(intrinsic, strict, "Uint32", typedArray);
  |Intrinsics|["Uint32Array"] := Uint32ArrayObject;
  |Intrinsics|["Uint32ArrayPrototype"] := getPrototypeValue(Uint32ArrayObject);

  /* URIError */
  URIErrorObject := initURIErrorObject(intrinsic, getErrorPrototype(strict), strict);
  |Intrinsics|["URIError"] := URIErrorObject;
  |Intrinsics|["URIErrorPrototype"] := getPrototypeValue(URIErrorObject);

  /* WeakMap */
  WeakMapObject := initWeakMapObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["WeakMap"] := WeakMapObject;
  |Intrinsics|["WeakMapPrototype"] := getPrototypeValue(WeakMapObject);

  /* WeakSet */
  WeakSetObject := initWeakSetObject(intrinsic, objectPrototype, strict);
  |Intrinsics|["WeakSet"] := WeakSetObject;
  |Intrinsics|["WeakSetPrototype"] := getPrototypeValue(WeakSetObject);

  fillObjectPrototype(intrinsic.ObjectPrototype, intrinsic.Object, intrinsic, strict);
  fillFunctionPrototype(intrinsic.FunctionPrototype, intrinsic.Function, intrinsic, strict);
  fillObjectConstructor(intrinsic.Object, intrinsic, strict);
  fillFunctionConstructor(intrinsic.Function, intrinsic, strict);
};

function getProp(global, prop, strict) {
  ref := newPropertyReference(global, prop, strict);
  obj := GetValue(ref);
  return obj
};

function getConstructorProto(global, constructor, strict) {
  ref := newPropertyReference(global, constructor, strict);
  obj := GetValue(ref);

  proto := getJSProperty(obj, "prototype").Value;
  return proto
};

function getPrototypeValue(object) {
  return getJSProperty(object, "prototype").Value;
};

function isIntrinsic(name) {
  return name in_obj |Intrinsics|
}