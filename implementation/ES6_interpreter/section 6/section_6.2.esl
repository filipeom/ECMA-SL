/*
*   6.2.2.4 ReturnIfAbrupt
*/
macro ReturnIfAbrupt (argument) {

    if (!(Type(argument) = "Completion")) {
    } elif (isAnAbruptCompletion(argument)) {
        /* 1. If argument is an abrupt completion, return argument. */
        return argument
    } else {
        /* 2. Else if argument is a Completion Record, let argument be argument.[[value]]. */
        argument := getCompletionValue(argument)
    }
};

/* 6.2.6.1 CreateByteDataBlock(size) */
function CreateByteDataBlock(size) {
    /* 1. Assert: size ≥ 0. */
    assert (size >= (0.));
    /* 2. TODO Let db be a new Data Block value consisting of size bytes. If it is impossible to create such a Data Block, throw a RangeError exception. */
    /* 3. TODO Set all of the bytes of db to 0. */
    /* 4. Return db. */
    return db
};

/* 6.2.6.1 CreateByteDataBlock(size) */
function InternalCreateByteDataBlock(size) {
    /* 1. Assert: size ≥ 0. */
    assert (size >= (0.));
    /* 2. Let db be a new Data Block value consisting of size bytes. If it is impossible to create such a Data Block, throw a RangeError exception. */
    /* TODO lista de inteiros  */
    /* db := [0 * size]; */
    /* 3. TODO Set all of the bytes of db to 0. */
    /* 4. Return db. */
    return db
}