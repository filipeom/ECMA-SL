/* 7.1 Type Conversion */

/* 7.1.15 ToLength ( argument ) */
function ToLength(argument){
    /* 1. ReturnIfAbrupt(argument). */
    @ReturnIfAbrupt(argument);

    /* 2. Let len be ToInteger(argument). */
    len := ToInteger(argument);

    /* 3. ReturnIfAbrupt(len). */
    @ReturnIfAbrupt(len);

    /* 4. If len ≤ +0, return +0. */
    if (len <= 0.){
        return 0.
    };
    
    /* 5. If len is +, return 253-1. */
    if (len = Infinity){
        return (2. ** 53.) - 1.
    };

    /* 6. Return min(len, 253-1). */
    return min(len, (2. ** 53.) - 1.)
};

/* 7.1.14 ToPropertyKey (argument) */
function ToPropertyKey(argument){

    /* 1. Let key be ToPrimitive(argument, hint String).*/
    key := ToPrimitive(argument, 'String);

    /* 2. ReturnIfAbrupt(key). */
    @ReturnIfAbrupt(key);

    /* 3. If Type(key) is Symbol, then return key. */
    if (Type(key) = "Symbol"){
        return key
    };

    /* 4. Return ToString(key). */
    return ToString(key)
};

/* 7.1.16 CanonicalNumericIndexString ( argument ) */
function CanonicalNumericIndexString(argument){
    /* 1. Assert: Type(argument) is String. */
    assert(Type(argument) = "String");

    /* 2. If argument is "-0", return −0. */
    if (argument = "-0"){
        return -(0.)
    };

    /* 3. Let n be ToNumber(argument). */
    n := ToNumber(argument);

    /* 4. If SameValue(ToString(n), argument) is false, return undefined. */
    if (SameValue(ToString(n), argument) = false){
        return 'undefined
    };

    /* 5. Return n. */
    return n
}

