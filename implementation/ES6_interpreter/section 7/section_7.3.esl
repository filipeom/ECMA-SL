

function GetES6 (O, P) { 
    ref := newPropertyReference(O, P, false);
    v := GetValue(ref);
    return v 
}; 


/*
*   7.3.9 GetMethod (O, P)
*/
function GetMethod(O, P) {
    /* 1.Assert: IsPropertyKey(P) is true. */
    
    /* 2. Let func be GetV(O, P). */
    func := GetES6(O, P);

    /* 3. ReturnIfAbrupt(func). */
    @ReturnIfAbrupt(func);

    /* 4. If func is either undefined or null, return undefined. */
    if ((func = 'undefined) || (func = 'null)) {
        return 'undefined
    }; 

    /* 5. If IsCallable(func) is false, throw a TypeError exception. */
    if (IsCallable(func) = false) { 
        throw TypeErrorConstructorInternal() 
    }; 

    /* 6. Return func. */
    return func 
}; 

function Invoke(O, P, argumentsList) {
  func := GetES6(O, P);
  return Call(null, null, func, O, argumentsList)
}; 

function CreateArrayFromList(elements) {
  arrayPrototype := getArrayPrototype(false);
  array := internalNewArray(arrayPrototype, []);
  len := l_len elements;
  i := 0;
  while (i < len) {
    vl := l_nth (elements, i);

    if (!(vl = null)) {
      descriptor := newDataPropertyDescriptorFull(vl, true, true, true);
      {array.DefineOwnProperty}(array, ToString(ToUint32(int_to_float i)), descriptor, false)
    };
    i := i + 1
  };
  descriptor := newDataPropertyDescriptorFull(ToUint32(int_to_float i), true, false, false);
  {array.DefineOwnProperty}(array, "length", descriptor, false);

  return array
};

/* 7.3.20 SpeciesConstructor ( O, defaultConstructor ) */
/**
 * The abstract operation SpeciesConstructor is used to retrieve the constructor that should 
 * be used to create new objects that are derived from the argument object O. The defaultConstructor
 * argument is the constructor to use if a constructor @@species property cannot be found starting
 * from O. This abstract operation performs the following steps:
 */
function SpeciesConstructor(O, defaultConstructor){
    /* 1. Assert: Type(O) is Object. */
    assert(Type(O) = "Object");

    /* 2. Let C be Get(O, "constructor"). */
    C := GetNew(O, "constructor");

    /* 3. ReturnIfAbrupt(C). */
    @ReturnIfAbrupt(C);

    /* 4. If C is undefined, return defaultConstructor. */
    if (C = 'undefined){
        return defaultConstructor
    };

    /* 5. If Type(C) is not Object, throw a TypeError exception. */
    if (!(Type(C) = "Object")){
        throw TypeErrorConstructorInternal()
    };

    /* 6. Let S be Get(C, @@species). */
    S := GetNew(C, getSpeciesPropertyName());

    /* 7. ReturnIfAbrupt(S). */
    @ReturnIfAbrupt(S);

    /* 8. If S is either undefined or null, return defaultConstructor. */
    if ((S = 'undefined) ||| (S = null) ||| (S = 'null)){
        return defaultConstructor
    };

    /* 9. If IsConstructor(S) is true, return S. */
    if (IsConstructor(S) = true){
        return S
    };

    /* 10. Throw a TypeError exception. */
    throw TypeErrorConstructorInternal()
}


