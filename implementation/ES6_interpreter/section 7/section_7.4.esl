function InternalObjectCreate(proto) {

    newlyConstructedObject := NewECMAScriptObject();
    setAllInternalMethodsOfObject(newlyConstructedObject);

    setInternalProperty(newlyConstructedObject, "Prototype", proto);
  
    setInternalProperty(newlyConstructedObject, "Extensible", true);
  
    setInternalProperty(newlyConstructedObject, "Class", "Object");

    return newlyConstructedObject
};

function CreateDataProperty (obj, prop, val) {
    descriptor := newDataPropertyDescriptorFull(val, true, true, true);
    setJSProperty(obj, prop, descriptor); 
    return null 
};


/* CreateIterResultObject ( value, done )*/
function CreateIterResultObject ( value, done ) {
    /* 1. Let obj be ObjectCreate(%ObjectPrototype%). */
    obj := InternalObjectCreate(|ObjectPrototype|); 

    /* 2. Perform CreateDataProperty(obj, "value", value). */
    CreateDataProperty(obj, "value", value); 

    /* 3. Perform CreateDataProperty(obj, "done", done). */
    CreateDataProperty(obj, "done", done);

    /* 4. Return obj. */
    return obj 
};

/*
* 7.4.1 GetIterator ( obj, method )
*/
function GetIterator(obj, method) {

    /* 1. ReturnIfAbrupt(obj). */
    @ReturnIfAbrupt(obj); 

    /* 2. If method was not passed, then */
    if(method = null) {
        /* a. Let method be GetMethod(obj, @@iterator). */
        method := GetMethodWSet(obj, obj.IteratorFunction);

        /* b. ReturnIfAbrupt(method). */
        @ReturnIfAbrupt(method)
    }; 

    /* 3. Let iterator be Call(method,obj). */
    iterator := Call(null, null, method, obj, []); 
    
    /* 4. ReturnIfAbrupt(iterator). */
    @ReturnIfAbrupt(obj); 

    /* If Type(iterator) is not Object, throw a TypeError exception. */
    if (!(Type(iterator) = "Object")) {
        throw TypeErrorConstructorInternal() 
    }; 

    /* Return iterator. */
    return iterator
}

/*
* 7.4.5 IteratorStep ( iterator )
*/
function IteratorStep(iterator) {
    result := IteratorNext(iterator);
    ReturnIfAbrupt(result);
    done := IteratorComplete(result);
    ReturnIfAbrupt(done);
    if (done = true) {
        return false
    };
    return result;
}

/*
* 7.4.4 IteratorValue ( iterResult )
*/
function IteratorValue(iterResult) {
    assert Type(iterResult) = "Object";
    return Get(iterResult, "value");
}