/* 8.2 Code Realms */
/* Before it is evaluated, all ECMAScript code must be associated with a Realm. Conceptually, a realm
   consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code
   that is loaded within the scope of that global environment, and other associated state and resources.
   
   A Realm is specified as a Record with the fields specified in Table 21: 
*/

/* 8.2.1 CreateRealm ( ) */
/* The abstract operation CreateRealm with no arguments performs the following steps: */
function CreateRealm(strict) {
    /* Let realmRec be a new Record. */
    realmRec := {};
    
    /* Perform CreateIntrinsics(realmRec). */
    CreateIntrinsics(realmRec, strict);
    
    /* Set realmRec.[[globalThis]] to undefined. */
    realmRec.globalThis := 'undefined;
    
    /* Set realmRec.[[globalEnv]] to undefined. */
    realmRec.globalEnv := 'undefined;
    
    /* Set realmRec.[[templateMap]] to a new empty List. */
    realmRec.templateMap := [];
    
    /* Return realmRec. */
    return realmRec
};

/* 8.2.2 CreateIntrinsics ( realmRec ) */
/* When the abstract operation CreateIntrinsics with argument realmRec performs the following
 steps: */
function OldCreateIntrinsics(realmRec, strict) {
    initWellKnownSymbols();
    
    /* Let intrinsics be a new Record. */
    intrinsics := {};

    /* Set realmRec.[[intrinsics]] to intrinsics. */
    realmRec.intrinsics := intrinsics;

    /* Criar global Object */
    globalObject := NewECMAScriptObjectFull('null, "Object", true);
    |global| := globalObject;
    setAllInternalMethodsOfOrdinaryObject(globalObject);

    intrinsics.GlobalObject := globalObject;

    /* Let objProto be ObjectCreate(null). */
    /* objProto := ObjectCreate(null, null); */
    objProto := initObjectPrototype();

    /* Set intrinsics.[[%ObjectPrototype%]] to objProto. */
    intrinsics.ObjectPrototype := objProto;

    /* Let throwerSteps be the algorithm steps specified in 9.2.7.1 for the %ThrowTypeError% function. */
    throwerSteps := "ThrowTypeError";

    /* Let thrower be CreateBuiltinFunction(realmRec, throwerSteps, null). */
    /* thrower := CreateBuiltinFunction(realmRec, throwerSteps, null); */
    /* thrower := CreateGeneralBuiltInFunctionObject(null, [], throwerSteps, intrinsics, strict, null);
    thrower.Realm := realmRec;
    thrower.Prototype := null; */

    /* Let noSteps be an empty sequence of algorithm steps. */
    noSteps := "functionPrototypeFunction";

    /* Let funcProto be CreateBuiltinFunction(realmRec, noSteps, objProto). */
    /* funcProto := CreateBuiltinFunction(realmRec, noSteps, objProto); */
    /* funcProto := CreateGeneralBuiltInFunctionObject(objProto, [], noSteps, intrinsics, strict, null);
    funcProto.Realm := realmRec;
    funcProto.Prototype := objProto; */

    FunctionPrototype := initFunctionPrototype(objProto, globalObject, strict);
    
    intrinsics.FunctionPrototype := FunctionPrototype;

    ObjectConstructor := initObjectConstructor(objProto, FunctionPrototype, globalObject, strict);
    |objectConstructor| := ObjectConstructor;
     
    FunctionConstructor := initFunctionConstructor(FunctionPrototype, globalObject, strict);
    /* setInternalProperty(globalObject, "Prototype", ObjectPrototype); */

    intrinsics.Object := ObjectConstructor;
    intrinsics.Function := FunctionConstructor;

    createBuiltInProperty(globalObject, "Object", ObjectConstructor);
    createBuiltInProperty(globalObject, "Function", FunctionConstructor);

    fillObjectPrototype(ObjectPrototype, ObjectConstructor, globalObject, strict);
    fillFunctionPrototype(FunctionPrototype, FunctionConstructor, globalObject, strict);
    fillObjectConstructor(ObjectConstructor, globalObject, strict);
    fillFunctionConstructor(FunctionConstructor, globalObject, strict);


    /* Set intrinsics.[[%FunctionPrototype%]] to funcProto. */

    /* CHECK THROWER */
    /* thrower := createThrowTypeErrorFunctionObject(funcProto, strict); */

    /* Set intrinsics.[[%ThrowTypeError%]] to thrower. */
    /* intrinsics.ThrowTypeError := thrower; */

    /* Call thrower.[[SetPrototypeOf]](funcProto). */
    /* {thrower.SetPrototypeOf}(thrower, funcProto); */

    /* Perform AddRestrictedFunctionProperties(funcProto, realmRec). */
    /* AddRestrictedFunctionProperties(funcProto, realmRec); */

    /* Set fields of intrinsics with the values listed in Table 7 that have not already been handled
       above. The field names are the names listed in column one of the table. The value of each
       field is a new object value fully and recursively populated with property values as defined by
       the specification of each object in clauses 18-26. All object property values are newly created 
       object values. All values that are built-in function objects are created by performing 
       CreateBuiltinFunction(realmRec, <steps>, <prototype>, <slots>) where <steps> is the definition
       of that function provided by this specification, <prototype> is the specified value of
       the functionâ€™s [[Prototype]] internal slot and <slots> is a list of the names, if any, of the functions
       specified internal slots. The creation of the intrinsics and their properties must be ordered to
       avoid any dependencies upon objects that have not yet been created. */
    initIntrinsics(intrinsics, strict);
    
    /* Return intrinsics. */
    return intrinsics
};

function CreateIntrinsics(realmRec, strict) {
    /* Initializing global symbols */
    initWellKnownSymbols();
    
    /* Let intrinsics be a new Record. */
    intrinsics := {};

    /* Set realmRec.[[intrinsics]] to intrinsics. */
    realmRec.intrinsics := intrinsics;

    /* Criar global Object */
    globalObject := NewECMAScriptObjectFull('null, "Object", true);
    |global| := globalObject;
    setAllInternalMethodsOfOrdinaryObject(globalObject);
    intrinsics.GlobalObject := globalObject;

    /* Set intrinsics.[[%ObjectPrototype%]] to ObjectPrototype. */
    /* ObjectPrototype := initObjectPrototype(); */
    ObjectPrototype := ObjectCreate('null, null);
    
    intrinsics.ObjectPrototype := ObjectPrototype;
    setInternalProperty(globalObject, "Prototype", ObjectPrototype);

    /* Set intrinsics.[[%FunctionPrototype%]] to FunctionPrototype. */
    FunctionPrototype := initFunctionPrototype(ObjectPrototype, globalObject, strict);
    intrinsics.FunctionPrototype := FunctionPrototype;

    /* Initializing ObjectConstructor */
    ObjectConstructor := initObjectConstructor(ObjectPrototype, FunctionPrototype, globalObject, strict);
    |objectConstructor| := ObjectConstructor;
    intrinsics.Object := ObjectConstructor;
    createBuiltInProperty(globalObject, "Object", ObjectConstructor);

    /* Initializing FunctionConstructor */
    FunctionConstructor := initFunctionConstructor(FunctionPrototype, globalObject, strict);
    intrinsics.Function := FunctionConstructor;
    createBuiltInProperty(globalObject, "Function", FunctionConstructor);

    /* Filling Protos and Constructors */
    fillObjectPrototype(ObjectPrototype, ObjectConstructor, globalObject, strict);
    fillFunctionPrototype(FunctionPrototype, FunctionConstructor, globalObject, strict);
    fillObjectConstructor(ObjectConstructor, globalObject, strict);
    fillFunctionConstructor(FunctionConstructor, globalObject, strict);

    /* ThrowTypeError */
    thrower := CreateGeneralBuiltInFunctionObject(FunctionPrototype, [], "internalTypeErrorThrower", globalObject, strict, null);
    intrinsics.ThrowTypeError := thrower;

    AddRestrictedFunctionProperties(FunctionPrototype, realmRec);

    /* Initializing Intrinsics */
    initIntrinsics(intrinsics, strict);
    
    /* Return intrinsics. */
    return intrinsics
};

/* 8.2.3 SetRealmGlobalObject ( realmRec, globalObj ) */

/* The abstract operation SetRealmGlobalObject with arguments realmRec and globalObj performs
   the following steps: */
function SetRealmGlobalObject(realmRec, globalObj) {
    /* If globalObj is undefined, then */
    if ( globalObj = 'undefined )
    {
        /* Let intrinsics be realmRec.[[intrinsics]]. */
        intrinsics := realmRec.intrinsics;

        /* Let globalObj be ObjectCreate(intrinsics.[[%ObjectPrototype%]]). */
        globalObj := ObjectCreate(intrinsics.ObjectPrototype, null)
    };

    /* Assert: Type(globalObj) is Object. */
    assert( Type(globalObj) = "Object" );

    /* Set realmRec.[[globalThis]] to globalObj. */
    realmRec.globalThis := globalObj;

    /* Let newGlobalEnv be NewGlobalEnvironment(globalObj). */
    newGlobalEnv := NewGlobalEnvironment(globalObj);

    /* Set realmRec.[[globalEnv]] to newGlobalEnv. */
    realmRec.globalEnv := newGlobalEnv;

    /* Return realmRec. */
    return realmRec
};

/* 8.2.4 SetDefaultGlobalBindings ( realmRec ) */

/* The abstract operation SetDefaultGlobalBindings with argument realmRec performs the following
   steps: */
function SetDefaultGlobalBindings(realmRec, strict) {
    /* Let global be realmRec.[[globalThis]]. */
    global := realmRec.globalThis;

    /* For each property of the Global Object specified in clause 18, do */
        /* Let name be the String value of the property name. */

        
        /* Let desc be the fully populated data property descriptor for the property containing the
           specified attributes for the property. For properties listed in 18.2, 18.3, or 18.4 the value
           of the [[Value]] attribute is the corresponding intrinsic object from realmRec. */

        /* Let status be DefinePropertyOrThrow(global, name, desc). */

        /* ReturnIfAbrupt(status). */
    initGlobalObject(global, realmRec.intrinsics, strict);

    /* Return global. */
    return global
}