/* 8.3.1 ResolveBinding ( name, [env] ) */

/* The ResolveBinding abstract operation is used to determine the binding of name passed as a String
  value. The optional argument env can be used to explicitly provide the Lexical Environment that is
  to be searched for the binding. During execution of ECMAScript code, ResolveBinding is performed
  using the following algorithm: */
function ResolveBinding(scope, name, env)  {
  
  /* If env was not passed or if env is undefined, then */
  if ( env = 'undefined ||| env = null )
  {
    /* Let env be the running execution context’s LexicalEnvironment. */
    env := getLexicalEnvironment(scope)
  };

  /* Assert: env is a Lexical Environment. */
  /* assert( isLexicalEnvironment(env) ); */

  /* If the code matching the syntactic production that is being evaluated is contained in strict
  mode code, let strict be true, else let strict be false. */

  strict := false;

  /* Return GetIdentifierReference(env, name, strict ). */
  return GetIdentifierReference(env, name, strict)

  /* NOTE The result of ResolveBinding is always a Reference value with its referenced name component equal to the name argument. */
};

/* 8.3.2 GetThisEnvironment ( )
 * 
 * The abstract operation GetThisEnvironment finds the Environment Record that currently supplies the binding of the keyword this. GetThisEnvironment performs the following steps:
 */
function GetThisEnvironment(scope) {
  /* 1. Let lex be the running execution context’s LexicalEnvironment. */
  lex := getLexicalEnvironment(scope);
  /* 2. Repeat */
  repeat {
    /* a. Let envRec be lex’s EnvironmentRecord. */
    envRec := lex.EnvRec;
    /* b. Let exists be envRec.HasThisBinding(). */
    exists := {envRec.HasThisBinding}(envRec);
    /* c. If exists is true, return envRec. */
    if (exists) {
      return envRec
    };
    /* d. Let outer be the value of lex’s outer environment reference. */
    outer := lex.OuterEnvRef;
    /* e. Let lex be outer. */
    lex := outer
  }
};
/* NOTE: The loop in step 2 will always terminate because the list of environments always ends with the global environment which has a this binding. */

/* 8.3.3 ResolveThisBinding ( )
 *
 * The abstract operation ResolveThisBinding determines the binding of the keyword this using the LexicalEnvironment of the running execution context.
 * ResolveThisBinding performs the following steps:
 */
function ResolveThisBinding(scope) {
  /* 1. Let envRec be GetThisEnvironment( ). */
  envRec := GetThisEnvironment(scope);
  /* 2. Return envRec.GetThisBinding(). */
  return {envRec.GetThisBinding}(envRec)
};

/* 8.3.4 GetNewTarget ( )
 *
 * The abstract operation GetNewTarget determines the NewTarget value using the LexicalEnvironment of the running execution context.
 * GetNewTarget performs the following steps:
 */
function GetNewTarget(scope) {
  /* 1. Let envRec be GetThisEnvironment( ). */
  envRec := GetThisEnvironment(scope);
  /* 2. Assert: envRec has a [[NewTarget]] field. */
  assert("NewTarget" in_obj envRec);
  /* 3. Return envRec.[[NewTarget]]. */
  return envRec.NewTarget
}
