/* 9.12 The SameValue Algorithm

  The internal comparison abstract operation SameValue(x, y), where x and y are ECMAScript language values, produces true or false.
  Such a comparison is performed as follows: */
function SameValue (x, y) {
  /* 1. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 2. ReturnIfAbrupt(y). */
  @ReturnIfAbrupt(y);
  
  /* 3. If Type(x) is different from Type(y), return false. */
  if (!(Type(x) = Type(y))) { return false };
  /* 4. If Type(x) is Undefined, return true. */
  if (Type(x) = "Undefined") { return true };
  /* 5. If Type(x) is Null, return true. */
  if (Type(x) = "Null") { return true };
  /* 6. If Type(x) is Number, then. */
  if (Type(x) = "Number") {
    /* a. If x is NaN and y is NaN, return true. */
    if ((is_NaN x) && (is_NaN y)) { return true };
    /* b. If x is +0 and y is -0, return false. */
    if (isZero(x) && isMinusZero(y)) { return false };
    /* c. If x is -0 and y is +0, return false. */
    if (isMinusZero(x) && isZero(y)) { return false };
    /* d. If x is the same Number value as y, return true. */
    if (x = y) { return true };
    /* e. Return false. */
    return false
  };
  /* 7. If Type(x) is String, then */
  if (Type(x) = "String"){
    /* a. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices) return true; otherwise, return false. */
    return x = y
  };
  
  /* 8. If Type(x) is Boolean, then */
  if (Type(x) = "Boolean"){
    /* a. If x and y are both true or both false, return true; otherwise, return false. */
    return x = y
  };
  
  /* 9. If Type(x) is Symbol, then */
  if (Type(x) = "Symbol"){
    /* a. If x and y are both the same Symbol value, return true; otherwise, return false. */
    return x = y
  };

  /* 10. Return true if x and y are the same Object value. Otherwise, return false.  */
  return x = y   
};

/* Auxiliary functions */
function isZero(x) {
  return (x = 0.) &&& ((1. / x) = Infinity)
};

function isMinusZero(x) {
  return (x = 0.) &&& ((1. / x) = -Infinity)
}
