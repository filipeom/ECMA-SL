function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "ArrayExpression";
__n10 := [  ];
__n9["elements"] := __n10;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "length";
__n15["raw"] := "\"length\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["left"] := __n13;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "NaN";
__n12["right"] := __n16;
__n11["expression"] := __n12;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1.1: x = []; x.length = NaN throw RangeError. Actual: x.length === ";
__n22["raw"] := "'#1.1: x = []; x.length = NaN throw RangeError. Actual: x.length === '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "x";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "length";
__n25["raw"] := "\"length\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n4 := [ __n5, __n11, __n17 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n26 := {  };
__n26["type"] := "CatchClause";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["param"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "instanceof";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "RangeError";
__n32["right"] := __n34;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n31["right"] := __n35;
__n30["test"] := __n31;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#1.2: x = []; x.length = NaN throw RangeError. Actual: ";
__n43["raw"] := "'#1.2: x = []; x.length = NaN throw RangeError. Actual: '";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "e";
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n30["consequent"] := __n36;
__n30["alternate"] := null;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n26["body"] := __n28;
__n2["handler"] := __n26;
__n2["finalizer"] := null;
__n45 := {  };
__n45["type"] := "TryStatement";
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "AssignmentExpression";
__n49["operator"] := "=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "x";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "ArrayExpression";
__n52 := [  ];
__n51["elements"] := __n52;
__n49["right"] := __n51;
__n48["expression"] := __n49;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "length";
__n57["raw"] := "\"length\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Number";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "POSITIVE_INFINITY";
__n60["raw"] := "\"POSITIVE_INFINITY\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n54["right"] := __n58;
__n53["expression"] := __n54;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#2.1: x = []; x.length = Number.POSITIVE_INFINITY throw RangeError. Actual: x.length === ";
__n66["raw"] := "'#2.1: x = []; x.length = Number.POSITIVE_INFINITY throw RangeError. Actual: x.length === '";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "MemberExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "x";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "length";
__n69["raw"] := "\"length\"";
__n67["property"] := __n69;
__n67["computed"] := true;
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n47 := [ __n48, __n53, __n61 ];
__n46["body"] := __n47;
__n45["block"] := __n46;
__n70 := {  };
__n70["type"] := "CatchClause";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "e";
__n70["param"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "instanceof";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "e";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "RangeError";
__n76["right"] := __n78;
__n75["left"] := __n76;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := true;
__n79["raw"] := "true";
__n75["right"] := __n79;
__n74["test"] := __n75;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "+";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#2.2: x = []; x.length = Number.POSITIVE_INFINITY throw RangeError. Actual: ";
__n87["raw"] := "'#2.2: x = []; x.length = Number.POSITIVE_INFINITY throw RangeError. Actual: '";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "e";
__n86["right"] := __n88;
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n81 := [ __n82 ];
__n80["body"] := __n81;
__n74["consequent"] := __n80;
__n74["alternate"] := null;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n70["body"] := __n72;
__n45["handler"] := __n70;
__n45["finalizer"] := null;
__n89 := {  };
__n89["type"] := "TryStatement";
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "AssignmentExpression";
__n93["operator"] := "=";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "x";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "ArrayExpression";
__n96 := [  ];
__n95["elements"] := __n96;
__n93["right"] := __n95;
__n92["expression"] := __n93;
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "AssignmentExpression";
__n98["operator"] := "=";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "x";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "length";
__n101["raw"] := "\"length\"";
__n99["property"] := __n101;
__n99["computed"] := true;
__n98["left"] := __n99;
__n102 := {  };
__n102["type"] := "MemberExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "Number";
__n102["object"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "NEGATIVE_INFINITY";
__n104["raw"] := "\"NEGATIVE_INFINITY\"";
__n102["property"] := __n104;
__n102["computed"] := true;
__n98["right"] := __n102;
__n97["expression"] := __n98;
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#3.1: x = []; x.length = Number.NEGATIVE_INFINITY throw RangeError. Actual: x.length === ";
__n110["raw"] := "'#3.1: x = []; x.length = Number.NEGATIVE_INFINITY throw RangeError. Actual: x.length === '";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "MemberExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "x";
__n111["object"] := __n112;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "length";
__n113["raw"] := "\"length\"";
__n111["property"] := __n113;
__n111["computed"] := true;
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n91 := [ __n92, __n97, __n105 ];
__n90["body"] := __n91;
__n89["block"] := __n90;
__n114 := {  };
__n114["type"] := "CatchClause";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "e";
__n114["param"] := __n115;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!==";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "instanceof";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "e";
__n120["left"] := __n121;
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "RangeError";
__n120["right"] := __n122;
__n119["left"] := __n120;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := true;
__n123["raw"] := "true";
__n119["right"] := __n123;
__n118["test"] := __n119;
__n124 := {  };
__n124["type"] := "BlockStatement";
__n126 := {  };
__n126["type"] := "ExpressionStatement";
__n127 := {  };
__n127["type"] := "CallExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "$ERROR";
__n127["callee"] := __n128;
__n130 := {  };
__n130["type"] := "BinaryExpression";
__n130["operator"] := "+";
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "#3.2: x = []; x.length = Number.NEGATIVE_INFINITY throw RangeError. Actual: ";
__n131["raw"] := "'#3.2: x = []; x.length = Number.NEGATIVE_INFINITY throw RangeError. Actual: '";
__n130["left"] := __n131;
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "e";
__n130["right"] := __n132;
__n129 := [ __n130 ];
__n127["arguments"] := __n129;
__n126["expression"] := __n127;
__n125 := [ __n126 ];
__n124["body"] := __n125;
__n118["consequent"] := __n124;
__n118["alternate"] := null;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n114["body"] := __n116;
__n89["handler"] := __n114;
__n89["finalizer"] := null;
__n133 := {  };
__n133["type"] := "TryStatement";
__n134 := {  };
__n134["type"] := "BlockStatement";
__n136 := {  };
__n136["type"] := "ExpressionStatement";
__n137 := {  };
__n137["type"] := "AssignmentExpression";
__n137["operator"] := "=";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "x";
__n137["left"] := __n138;
__n139 := {  };
__n139["type"] := "ArrayExpression";
__n140 := [  ];
__n139["elements"] := __n140;
__n137["right"] := __n139;
__n136["expression"] := __n137;
__n141 := {  };
__n141["type"] := "ExpressionStatement";
__n142 := {  };
__n142["type"] := "AssignmentExpression";
__n142["operator"] := "=";
__n143 := {  };
__n143["type"] := "MemberExpression";
__n144 := {  };
__n144["type"] := "Identifier";
__n144["name"] := "x";
__n143["object"] := __n144;
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "length";
__n145["raw"] := "\"length\"";
__n143["property"] := __n145;
__n143["computed"] := true;
__n142["left"] := __n143;
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "undefined";
__n142["right"] := __n146;
__n141["expression"] := __n142;
__n147 := {  };
__n147["type"] := "ExpressionStatement";
__n148 := {  };
__n148["type"] := "CallExpression";
__n149 := {  };
__n149["type"] := "Identifier";
__n149["name"] := "$ERROR";
__n148["callee"] := __n149;
__n151 := {  };
__n151["type"] := "BinaryExpression";
__n151["operator"] := "+";
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := "#4.1: x = []; x.length = undefined throw RangeError. Actual: x.length === ";
__n152["raw"] := "'#4.1: x = []; x.length = undefined throw RangeError. Actual: x.length === '";
__n151["left"] := __n152;
__n153 := {  };
__n153["type"] := "MemberExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "x";
__n153["object"] := __n154;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := "length";
__n155["raw"] := "\"length\"";
__n153["property"] := __n155;
__n153["computed"] := true;
__n151["right"] := __n153;
__n150 := [ __n151 ];
__n148["arguments"] := __n150;
__n147["expression"] := __n148;
__n135 := [ __n136, __n141, __n147 ];
__n134["body"] := __n135;
__n133["block"] := __n134;
__n156 := {  };
__n156["type"] := "CatchClause";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "e";
__n156["param"] := __n157;
__n158 := {  };
__n158["type"] := "BlockStatement";
__n160 := {  };
__n160["type"] := "IfStatement";
__n161 := {  };
__n161["type"] := "BinaryExpression";
__n161["operator"] := "!==";
__n162 := {  };
__n162["type"] := "BinaryExpression";
__n162["operator"] := "instanceof";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "e";
__n162["left"] := __n163;
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "RangeError";
__n162["right"] := __n164;
__n161["left"] := __n162;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := true;
__n165["raw"] := "true";
__n161["right"] := __n165;
__n160["test"] := __n161;
__n166 := {  };
__n166["type"] := "BlockStatement";
__n168 := {  };
__n168["type"] := "ExpressionStatement";
__n169 := {  };
__n169["type"] := "CallExpression";
__n170 := {  };
__n170["type"] := "Identifier";
__n170["name"] := "$ERROR";
__n169["callee"] := __n170;
__n172 := {  };
__n172["type"] := "BinaryExpression";
__n172["operator"] := "+";
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "#4.2: x = []; x.length = undefined throw RangeError. Actual: ";
__n173["raw"] := "'#4.2: x = []; x.length = undefined throw RangeError. Actual: '";
__n172["left"] := __n173;
__n174 := {  };
__n174["type"] := "Identifier";
__n174["name"] := "e";
__n172["right"] := __n174;
__n171 := [ __n172 ];
__n169["arguments"] := __n171;
__n168["expression"] := __n169;
__n167 := [ __n168 ];
__n166["body"] := __n167;
__n160["consequent"] := __n166;
__n160["alternate"] := null;
__n159 := [ __n160 ];
__n158["body"] := __n159;
__n156["body"] := __n158;
__n133["handler"] := __n156;
__n133["finalizer"] := null;
__n1 := [ __n2, __n45, __n89, __n133 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n175 := [ "x" ];
__n0["variableDeclarations"] := __n175;
__n176 := [  ];
__n0["functionDeclarations"] := __n176;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}