function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "instanceof";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n9["computed"] := true;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Array";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "prototype";
__n15["raw"] := "\"prototype\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["object"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "concat";
__n16["raw"] := "\"concat\"";
__n12["property"] := __n16;
__n12["computed"] := true;
__n11["object"] := __n12;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "call";
__n17["raw"] := "\"call\"";
__n11["property"] := __n17;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n18 := [ __n19 ];
__n10["arguments"] := __n18;
__n9["object"] := __n10;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n9["property"] := __n20;
__n8["left"] := __n9;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Boolean";
__n8["right"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := true;
__n22["raw"] := "true";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "The result of `(Array.prototype.concat.call(true)[0] instanceof Boolean)` is true";
__n23["raw"] := "'The result of `(Array.prototype.concat.call(true)[0] instanceof Boolean)` is true'";
__n7 := [ __n8, __n22, __n23 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "assert";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "sameValue";
__n28["raw"] := "\"sameValue\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "instanceof";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n31["computed"] := true;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Array";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "prototype";
__n37["raw"] := "\"prototype\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["object"] := __n35;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "concat";
__n38["raw"] := "\"concat\"";
__n34["property"] := __n38;
__n34["computed"] := true;
__n33["object"] := __n34;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "call";
__n39["raw"] := "\"call\"";
__n33["property"] := __n39;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := false;
__n41["raw"] := "false";
__n40 := [ __n41 ];
__n32["arguments"] := __n40;
__n31["object"] := __n32;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.;
__n42["raw"] := "0";
__n31["property"] := __n42;
__n30["left"] := __n31;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Boolean";
__n30["right"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := true;
__n44["raw"] := "true";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "The result of `(Array.prototype.concat.call(false)[0] instanceof Boolean)` is true";
__n45["raw"] := "'The result of `(Array.prototype.concat.call(false)[0] instanceof Boolean)` is true'";
__n29 := [ __n30, __n44, __n45 ];
__n25["arguments"] := __n29;
__n24["expression"] := __n25;
__n1 := [ __n2, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [  ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}