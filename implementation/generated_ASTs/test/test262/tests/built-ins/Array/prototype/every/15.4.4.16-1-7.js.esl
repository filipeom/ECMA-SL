function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "sameValue";
__n8["raw"] := "\"sameValue\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Array";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "prototype";
__n15["raw"] := "\"prototype\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["object"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "every";
__n16["raw"] := "\"every\"";
__n12["property"] := __n16;
__n12["computed"] := true;
__n11["object"] := __n12;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "call";
__n17["raw"] := "\"call\"";
__n11["property"] := __n17;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "hello
world\\!";
__n19["raw"] := "\"hello\\nworld\\\\!\"";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "callbackfn";
__n18 := [ __n19, __n20 ];
__n10["arguments"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := false;
__n21["raw"] := "false";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "Array.prototype.every.call(\"hello
world\\!\", callbackfn)";
__n22["raw"] := "'Array.prototype.every.call(\"hello\\nworld\\\\!\", callbackfn)'";
__n9 := [ __n10, __n21, __n22 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n23 := [  ];
__n0["variableDeclarations"] := __n23;
__n25 := {  };
__n25["type"] := "FunctionDeclaration";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "callbackfn";
__n25["id"] := __n26;
__n27 := [ "val", "idx", "obj" ];
__n25["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "!";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "instanceof";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "obj";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "String";
__n32["right"] := __n34;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["argument"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n35 := [  ];
__n28["variableDeclarations"] := __n35;
__n36 := [  ];
__n28["functionDeclarations"] := __n36;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n25["body"] := __n28;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n24 := [ __n25 ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}