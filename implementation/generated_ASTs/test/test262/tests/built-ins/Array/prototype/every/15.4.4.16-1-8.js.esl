function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "NewExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "String";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "hello
world\\!";
__n11["raw"] := "\"hello\\nworld\\\\!\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "assert";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "sameValue";
__n16["raw"] := "\"sameValue\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Array";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "prototype";
__n23["raw"] := "\"prototype\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["object"] := __n21;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "every";
__n24["raw"] := "\"every\"";
__n20["property"] := __n24;
__n20["computed"] := true;
__n19["object"] := __n20;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "call";
__n25["raw"] := "\"call\"";
__n19["property"] := __n25;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "obj";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "callbackfn";
__n26 := [ __n27, __n28 ];
__n18["arguments"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := false;
__n29["raw"] := "false";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "Array.prototype.every.call(obj, callbackfn)";
__n30["raw"] := "'Array.prototype.every.call(obj, callbackfn)'";
__n17 := [ __n18, __n29, __n30 ];
__n13["arguments"] := __n17;
__n12["expression"] := __n13;
__n1 := [ __n2, __n4, __n12 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n31 := [ "obj" ];
__n0["variableDeclarations"] := __n31;
__n33 := {  };
__n33["type"] := "FunctionDeclaration";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "callbackfn";
__n33["id"] := __n34;
__n35 := [ "val", "idx", "obj" ];
__n33["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ReturnStatement";
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "!";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "instanceof";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "obj";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "String";
__n40["right"] := __n42;
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n38["argument"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n43 := [  ];
__n36["variableDeclarations"] := __n43;
__n44 := [  ];
__n36["functionDeclarations"] := __n44;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n33["body"] := __n36;
__n33["generator"] := false;
__n33["expression"] := false;
__n33["async"] := false;
__n32 := [ __n33 ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}