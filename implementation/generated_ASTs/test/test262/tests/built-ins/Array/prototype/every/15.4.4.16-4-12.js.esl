function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "sameValue";
__n8["raw"] := "\"sameValue\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "ArrayExpression";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 11.;
__n14["raw"] := "11";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 9.;
__n15["raw"] := "9";
__n13 := [ __n14, __n15 ];
__n12["elements"] := __n13;
__n11["object"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "every";
__n16["raw"] := "\"every\"";
__n11["property"] := __n16;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "callbackfn";
__n17 := [ __n18 ];
__n10["arguments"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := false;
__n19["raw"] := "false";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "[11, 9].every(callbackfn)";
__n20["raw"] := "'[11, 9].every(callbackfn)'";
__n9 := [ __n10, __n19, __n20 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n21 := [  ];
__n0["variableDeclarations"] := __n21;
__n23 := {  };
__n23["type"] := "FunctionDeclaration";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "callbackfn";
__n23["id"] := __n24;
__n25 := [ "val", "idx", "obj" ];
__n23["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ReturnStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := ">";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "val";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 10.;
__n31["raw"] := "10";
__n29["right"] := __n31;
__n28["argument"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n32 := [  ];
__n26["variableDeclarations"] := __n32;
__n33 := [  ];
__n26["functionDeclarations"] := __n33;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n23["body"] := __n26;
__n23["generator"] := false;
__n23["expression"] := false;
__n23["async"] := false;
__n22 := [ __n23 ];
__n0["functionDeclarations"] := __n22;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}