function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "objArray";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n12 := [  ];
__n11["elements"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "callbackfn";
__n13["expression"] := __n14;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "assert";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "ArrayExpression";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 11.;
__n23["raw"] := "11";
__n22 := [ __n23 ];
__n21["elements"] := __n22;
__n20["object"] := __n21;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "every";
__n24["raw"] := "\"every\"";
__n20["property"] := __n24;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "callbackfn";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "objArray";
__n25 := [ __n26, __n27 ];
__n19["arguments"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "[11].every(callbackfn, objArray) !== true";
__n28["raw"] := "'[11].every(callbackfn, objArray) !== true'";
__n18 := [ __n19, __n28 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "assert";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "accessed";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "accessed !== true";
__n34["raw"] := "'accessed !== true'";
__n32 := [ __n33, __n34 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n1 := [ __n2, __n7, __n13, __n15, __n29 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n35 := [ "accessed", "objArray" ];
__n0["variableDeclarations"] := __n35;
__n37 := {  };
__n37["type"] := "FunctionDeclaration";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "callbackfn";
__n37["id"] := __n38;
__n39 := [ "val", "idx", "obj" ];
__n37["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "accessed";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := true;
__n45["raw"] := "true";
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "===";
__n48 := {  };
__n48["type"] := "ThisExpression";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "objArray";
__n47["right"] := __n49;
__n46["argument"] := __n47;
__n41 := [ __n42, __n46 ];
__n40["body"] := __n41;
__n50 := [  ];
__n40["variableDeclarations"] := __n50;
__n51 := [  ];
__n40["functionDeclarations"] := __n51;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n37["body"] := __n40;
__n37["generator"] := false;
__n37["expression"] := false;
__n37["async"] := false;
__n36 := [ __n37 ];
__n0["functionDeclarations"] := __n36;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}