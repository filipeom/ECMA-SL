function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "objNumber";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "callbackfn";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "ArrayExpression";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 11.;
__n24["raw"] := "11";
__n23 := [ __n24 ];
__n22["elements"] := __n23;
__n21["object"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "every";
__n25["raw"] := "\"every\"";
__n21["property"] := __n25;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "callbackfn";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "objNumber";
__n26 := [ __n27, __n28 ];
__n20["arguments"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "[11].every(callbackfn, objNumber) !== true";
__n29["raw"] := "'[11].every(callbackfn, objNumber) !== true'";
__n19 := [ __n20, __n29 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "assert";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "accessed";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "accessed !== true";
__n35["raw"] := "'accessed !== true'";
__n33 := [ __n34, __n35 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n1 := [ __n2, __n7, __n14, __n16, __n30 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [ "accessed", "objNumber" ];
__n0["variableDeclarations"] := __n36;
__n38 := {  };
__n38["type"] := "FunctionDeclaration";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "callbackfn";
__n38["id"] := __n39;
__n40 := [ "val", "idx", "obj" ];
__n38["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "AssignmentExpression";
__n44["operator"] := "=";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "accessed";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := true;
__n46["raw"] := "true";
__n44["right"] := __n46;
__n43["expression"] := __n44;
__n47 := {  };
__n47["type"] := "ReturnStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "===";
__n49 := {  };
__n49["type"] := "ThisExpression";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "objNumber";
__n48["right"] := __n50;
__n47["argument"] := __n48;
__n42 := [ __n43, __n47 ];
__n41["body"] := __n42;
__n51 := [  ];
__n41["variableDeclarations"] := __n51;
__n52 := [  ];
__n41["functionDeclarations"] := __n52;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n38["body"] := __n41;
__n38["generator"] := false;
__n38["expression"] := false;
__n38["async"] := false;
__n37 := [ __n38 ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}