function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "arr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ArrayExpression";
__n9 := [  ];
__n8["elements"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n12["computed"] := true;
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Array";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "prototype";
__n15["raw"] := "\"prototype\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["object"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.;
__n16["raw"] := "0";
__n12["property"] := __n16;
__n11["left"] := __n12;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 10.;
__n17["raw"] := "10";
__n11["right"] := __n17;
__n10["expression"] := __n11;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Object";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "defineProperty";
__n22["raw"] := "\"defineProperty\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "arr";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "0";
__n25["raw"] := "\"0\"";
__n26 := {  };
__n26["type"] := "ObjectExpression";
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "get";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n30["id"] := null;
__n31 := [  ];
__n30["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 111.;
__n35["raw"] := "111";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n36 := [  ];
__n32["variableDeclarations"] := __n36;
__n37 := [  ];
__n32["functionDeclarations"] := __n37;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n30["body"] := __n32;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n38 := {  };
__n38["type"] := "Property";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "configurable";
__n38["key"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n38["value"] := __n40;
__n38["computed"] := false;
__n38["kind"] := "init";
__n38["shorthand"] := false;
__n27 := [ __n28, __n38 ];
__n26["properties"] := __n27;
__n23 := [ __n24, __n25, __n26 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "assert";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "sameValue";
__n45["raw"] := "\"sameValue\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "arr";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "every";
__n50["raw"] := "\"every\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "callbackfn";
__n51 := [ __n52 ];
__n47["arguments"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := false;
__n53["raw"] := "false";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "arr.every(callbackfn)";
__n54["raw"] := "'arr.every(callbackfn)'";
__n46 := [ __n47, __n53, __n54 ];
__n42["arguments"] := __n46;
__n41["expression"] := __n42;
__n1 := [ __n2, __n4, __n10, __n18, __n41 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n55 := [ "arr" ];
__n0["variableDeclarations"] := __n55;
__n57 := {  };
__n57["type"] := "FunctionDeclaration";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "callbackfn";
__n57["id"] := __n58;
__n59 := [ "val", "idx", "obj" ];
__n57["params"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "===";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "idx";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 0.;
__n65["raw"] := "0";
__n63["right"] := __n65;
__n62["test"] := __n63;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ReturnStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "===";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "val";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 10.;
__n71["raw"] := "10";
__n69["right"] := __n71;
__n68["argument"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n62["consequent"] := __n66;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ReturnStatement";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n74["argument"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n62["alternate"] := __n72;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n76 := [  ];
__n60["variableDeclarations"] := __n76;
__n77 := [  ];
__n60["functionDeclarations"] := __n77;
__n60["codeType"] := "function";
__n60["strict"] := false;
__n57["body"] := __n60;
__n57["generator"] := false;
__n57["expression"] := false;
__n57["async"] := false;
__n56 := [ __n57 ];
__n0["functionDeclarations"] := __n56;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}