function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "called";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "assert";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "ArrayExpression";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 11.;
__n17["raw"] := "11";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 12.;
__n18["raw"] := "12";
__n16 := [ __n17, __n18 ];
__n15["elements"] := __n16;
__n14["object"] := __n15;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "every";
__n19["raw"] := "\"every\"";
__n14["property"] := __n19;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "callbackfn";
__n20 := [ __n21 ];
__n13["arguments"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "[11, 12].every(callbackfn) !== true";
__n22["raw"] := "'[11, 12].every(callbackfn) !== true'";
__n12 := [ __n13, __n22 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "assert";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "sameValue";
__n27["raw"] := "\"sameValue\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "called";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 2.;
__n30["raw"] := "2";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "called";
__n31["raw"] := "'called'";
__n28 := [ __n29, __n30, __n31 ];
__n24["arguments"] := __n28;
__n23["expression"] := __n24;
__n1 := [ __n2, __n7, __n9, __n23 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n32 := [ "called" ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "callbackfn";
__n34["id"] := __n35;
__n36 := [ "val" ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "UpdateExpression";
__n40["operator"] := "++";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "called";
__n40["argument"] := __n41;
__n40["prefix"] := false;
__n39["expression"] := __n40;
__n42 := {  };
__n42["type"] := "ReturnStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := ">";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "val";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 10.;
__n45["raw"] := "10";
__n43["right"] := __n45;
__n42["argument"] := __n43;
__n38 := [ __n39, __n42 ];
__n37["body"] := __n38;
__n46 := [  ];
__n37["variableDeclarations"] := __n46;
__n47 := [  ];
__n37["functionDeclarations"] := __n47;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["expression"] := false;
__n34["async"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}