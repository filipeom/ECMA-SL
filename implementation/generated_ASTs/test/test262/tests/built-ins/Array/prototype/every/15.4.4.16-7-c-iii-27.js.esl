function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "accessed";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "assert";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "ArrayExpression";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 11.;
__n22["raw"] := "11";
__n21 := [ __n22 ];
__n20["elements"] := __n21;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "every";
__n23["raw"] := "\"every\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "callbackfn";
__n24 := [ __n25 ];
__n18["arguments"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "[11].every(callbackfn) !== true";
__n26["raw"] := "'[11].every(callbackfn) !== true'";
__n17 := [ __n18, __n26 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "assert";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "accessed";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "accessed !== true";
__n32["raw"] := "'accessed !== true'";
__n30 := [ __n31, __n32 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n1 := [ __n2, __n7, __n12, __n14, __n27 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n33 := [ "global", "accessed" ];
__n0["variableDeclarations"] := __n33;
__n35 := {  };
__n35["type"] := "FunctionDeclaration";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "callbackfn";
__n35["id"] := __n36;
__n37 := [ "val", "idx", "obj" ];
__n35["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "accessed";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := true;
__n43["raw"] := "true";
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "global";
__n44["argument"] := __n45;
__n39 := [ __n40, __n44 ];
__n38["body"] := __n39;
__n46 := [  ];
__n38["variableDeclarations"] := __n46;
__n47 := [  ];
__n38["functionDeclarations"] := __n47;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n35["body"] := __n38;
__n35["generator"] := false;
__n35["expression"] := false;
__n35["async"] := false;
__n34 := [ __n35 ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}