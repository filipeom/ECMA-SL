function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "obj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 11.;
__n15["raw"] := "11";
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n16 := {  };
__n16["type"] := "Property";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "length";
__n16["key"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 1.;
__n18["raw"] := "1";
__n16["value"] := __n18;
__n16["computed"] := false;
__n16["kind"] := "init";
__n16["shorthand"] := false;
__n12 := [ __n13, __n16 ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "callbackfn";
__n19["expression"] := __n20;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Array";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "prototype";
__n30["raw"] := "\"prototype\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["object"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "every";
__n31["raw"] := "\"every\"";
__n27["property"] := __n31;
__n27["computed"] := true;
__n26["object"] := __n27;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "call";
__n32["raw"] := "\"call\"";
__n26["property"] := __n32;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "obj";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "callbackfn";
__n33 := [ __n34, __n35 ];
__n25["arguments"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "Array.prototype.every.call(obj, callbackfn) !== true";
__n36["raw"] := "'Array.prototype.every.call(obj, callbackfn) !== true'";
__n24 := [ __n25, __n36 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "accessed";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "accessed !== true";
__n42["raw"] := "'accessed !== true'";
__n40 := [ __n41, __n42 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n1 := [ __n2, __n7, __n19, __n21, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n43 := [ "accessed", "obj" ];
__n0["variableDeclarations"] := __n43;
__n45 := {  };
__n45["type"] := "FunctionDeclaration";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "callbackfn";
__n45["id"] := __n46;
__n47 := [ "val", "idx", "obj" ];
__n45["params"] := __n47;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "AssignmentExpression";
__n51["operator"] := "=";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "accessed";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n51["right"] := __n53;
__n50["expression"] := __n51;
__n54 := {  };
__n54["type"] := "ReturnStatement";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := true;
__n55["raw"] := "true";
__n54["argument"] := __n55;
__n49 := [ __n50, __n54 ];
__n48["body"] := __n49;
__n56 := [  ];
__n48["variableDeclarations"] := __n56;
__n57 := [  ];
__n48["functionDeclarations"] := __n57;
__n48["codeType"] := "function";
__n48["strict"] := false;
__n45["body"] := __n48;
__n45["generator"] := false;
__n45["expression"] := false;
__n45["async"] := false;
__n44 := [ __n45 ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}