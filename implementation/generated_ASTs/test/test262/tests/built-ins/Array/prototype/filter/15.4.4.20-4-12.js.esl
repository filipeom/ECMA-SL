function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "newArr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 11.;
__n12["raw"] := "11";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 9.;
__n13["raw"] := "9";
__n11 := [ __n12, __n13 ];
__n10["elements"] := __n11;
__n9["object"] := __n10;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "filter";
__n14["raw"] := "\"filter\"";
__n9["property"] := __n14;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "callbackfn";
__n15 := [ __n16 ];
__n8["arguments"] := __n15;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "newArr";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "length";
__n25["raw"] := "\"length\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "newArr.length";
__n27["raw"] := "'newArr.length'";
__n22 := [ __n23, __n26, __n27 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "assert";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "sameValue";
__n32["raw"] := "\"sameValue\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "MemberExpression";
__n34["computed"] := true;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "newArr";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n34["property"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 9.;
__n37["raw"] := "9";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "newArr[0]";
__n38["raw"] := "'newArr[0]'";
__n33 := [ __n34, __n37, __n38 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n1 := [ __n2, __n4, __n17, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [ "newArr" ];
__n0["variableDeclarations"] := __n39;
__n41 := {  };
__n41["type"] := "FunctionDeclaration";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "callbackfn";
__n41["id"] := __n42;
__n43 := [ "val", "idx", "obj" ];
__n41["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "===";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "idx";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n47["right"] := __n49;
__n46["test"] := __n47;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ReturnStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "===";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "val";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 9.;
__n55["raw"] := "9";
__n53["right"] := __n55;
__n52["argument"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n46["consequent"] := __n50;
__n46["alternate"] := null;
__n56 := {  };
__n56["type"] := "ReturnStatement";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := false;
__n57["raw"] := "false";
__n56["argument"] := __n57;
__n45 := [ __n46, __n56 ];
__n44["body"] := __n45;
__n58 := [  ];
__n44["variableDeclarations"] := __n58;
__n59 := [  ];
__n44["functionDeclarations"] := __n59;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n41["body"] := __n44;
__n41["generator"] := false;
__n41["expression"] := false;
__n41["async"] := false;
__n40 := [ __n41 ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}