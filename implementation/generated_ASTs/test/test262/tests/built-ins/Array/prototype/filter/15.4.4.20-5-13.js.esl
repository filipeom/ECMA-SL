function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "objNumber";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "callbackfn";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "newArr";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "ArrayExpression";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 11.;
__n24["raw"] := "11";
__n23 := [ __n24 ];
__n22["elements"] := __n23;
__n21["object"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "filter";
__n25["raw"] := "\"filter\"";
__n21["property"] := __n25;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "callbackfn";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "objNumber";
__n26 := [ __n27, __n28 ];
__n20["arguments"] := __n26;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "assert";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "sameValue";
__n33["raw"] := "\"sameValue\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "MemberExpression";
__n35["computed"] := true;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "newArr";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 0.;
__n37["raw"] := "0";
__n35["property"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 11.;
__n38["raw"] := "11";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "newArr[0]";
__n39["raw"] := "'newArr[0]'";
__n34 := [ __n35, __n38, __n39 ];
__n30["arguments"] := __n34;
__n29["expression"] := __n30;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "assert";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "accessed";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "accessed !== true";
__n45["raw"] := "'accessed !== true'";
__n43 := [ __n44, __n45 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n1 := [ __n2, __n7, __n14, __n16, __n29, __n40 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n46 := [ "accessed", "objNumber", "newArr" ];
__n0["variableDeclarations"] := __n46;
__n48 := {  };
__n48["type"] := "FunctionDeclaration";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "callbackfn";
__n48["id"] := __n49;
__n50 := [ "val", "idx", "obj" ];
__n48["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "accessed";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := true;
__n56["raw"] := "true";
__n54["right"] := __n56;
__n53["expression"] := __n54;
__n57 := {  };
__n57["type"] := "ReturnStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "===";
__n59 := {  };
__n59["type"] := "ThisExpression";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "objNumber";
__n58["right"] := __n60;
__n57["argument"] := __n58;
__n52 := [ __n53, __n57 ];
__n51["body"] := __n52;
__n61 := [  ];
__n51["variableDeclarations"] := __n61;
__n62 := [  ];
__n51["functionDeclarations"] := __n62;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n48["body"] := __n51;
__n48["generator"] := false;
__n48["expression"] := false;
__n48["async"] := false;
__n47 := [ __n48 ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}