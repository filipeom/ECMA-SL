function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "func";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n8["id"] := null;
__n9 := [ "a", "b" ];
__n8["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ReturnStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Array";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "prototype";
__n18["raw"] := "\"prototype\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "filter";
__n19["raw"] := "\"filter\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["object"] := __n15;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "call";
__n20["raw"] := "\"call\"";
__n14["property"] := __n20;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arguments";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "callbackfn";
__n21 := [ __n22, __n23 ];
__n13["arguments"] := __n21;
__n12["argument"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n24 := [  ];
__n10["variableDeclarations"] := __n24;
__n25 := [  ];
__n10["functionDeclarations"] := __n25;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n8["body"] := __n10;
__n8["generator"] := false;
__n8["expression"] := false;
__n8["async"] := false;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n26 := {  };
__n26["type"] := "VariableDeclaration";
__n28 := {  };
__n28["type"] := "VariableDeclarator";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "newArr";
__n28["id"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "func";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 11.;
__n33["raw"] := "11";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 12.;
__n34["raw"] := "12";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 9.;
__n35["raw"] := "9";
__n32 := [ __n33, __n34, __n35 ];
__n30["arguments"] := __n32;
__n28["init"] := __n30;
__n27 := [ __n28 ];
__n26["declarations"] := __n27;
__n26["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "newArr";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "length";
__n44["raw"] := "\"length\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 3.;
__n45["raw"] := "3";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "newArr.length";
__n46["raw"] := "'newArr.length'";
__n41 := [ __n42, __n45, __n46 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "sameValue";
__n51["raw"] := "\"sameValue\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n53 := {  };
__n53["type"] := "MemberExpression";
__n53["computed"] := true;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "newArr";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n53["property"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 11.;
__n56["raw"] := "11";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "newArr[0]";
__n57["raw"] := "'newArr[0]'";
__n52 := [ __n53, __n56, __n57 ];
__n48["arguments"] := __n52;
__n47["expression"] := __n48;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "assert";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "sameValue";
__n62["raw"] := "\"sameValue\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "newArr";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n64["property"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 12.;
__n67["raw"] := "12";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "newArr[1]";
__n68["raw"] := "'newArr[1]'";
__n63 := [ __n64, __n67, __n68 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "assert";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "sameValue";
__n73["raw"] := "\"sameValue\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n70["callee"] := __n71;
__n75 := {  };
__n75["type"] := "MemberExpression";
__n75["computed"] := true;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "newArr";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 2.;
__n77["raw"] := "2";
__n75["property"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 9.;
__n78["raw"] := "9";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "newArr[2]";
__n79["raw"] := "'newArr[2]'";
__n74 := [ __n75, __n78, __n79 ];
__n70["arguments"] := __n74;
__n69["expression"] := __n70;
__n1 := [ __n2, __n4, __n26, __n36, __n47, __n58, __n69 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n80 := [ "func", "newArr" ];
__n0["variableDeclarations"] := __n80;
__n82 := {  };
__n82["type"] := "FunctionDeclaration";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "callbackfn";
__n82["id"] := __n83;
__n84 := [ "val", "idx", "obj" ];
__n82["params"] := __n84;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "===";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "idx";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 0.;
__n90["raw"] := "0";
__n88["right"] := __n90;
__n87["test"] := __n88;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ReturnStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "===";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "val";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 11.;
__n96["raw"] := "11";
__n94["right"] := __n96;
__n93["argument"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n87["consequent"] := __n91;
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "===";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "idx";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := 1.;
__n100["raw"] := "1";
__n98["right"] := __n100;
__n97["test"] := __n98;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ReturnStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "===";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "val";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 12.;
__n106["raw"] := "12";
__n104["right"] := __n106;
__n103["argument"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n97["consequent"] := __n101;
__n107 := {  };
__n107["type"] := "IfStatement";
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "===";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "idx";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 2.;
__n110["raw"] := "2";
__n108["right"] := __n110;
__n107["test"] := __n108;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ReturnStatement";
__n114 := {  };
__n114["type"] := "BinaryExpression";
__n114["operator"] := "===";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "val";
__n114["left"] := __n115;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := 9.;
__n116["raw"] := "9";
__n114["right"] := __n116;
__n113["argument"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n107["consequent"] := __n111;
__n117 := {  };
__n117["type"] := "BlockStatement";
__n119 := {  };
__n119["type"] := "ReturnStatement";
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := false;
__n120["raw"] := "false";
__n119["argument"] := __n120;
__n118 := [ __n119 ];
__n117["body"] := __n118;
__n107["alternate"] := __n117;
__n97["alternate"] := __n107;
__n87["alternate"] := __n97;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n121 := [  ];
__n85["variableDeclarations"] := __n121;
__n122 := [  ];
__n85["functionDeclarations"] := __n122;
__n85["codeType"] := "function";
__n85["strict"] := false;
__n82["body"] := __n85;
__n82["generator"] := false;
__n82["expression"] := false;
__n82["async"] := false;
__n81 := [ __n82 ];
__n0["functionDeclarations"] := __n81;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}