function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "newArr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 11.;
__n12["raw"] := "11";
__n11 := [ __n12 ];
__n10["elements"] := __n11;
__n9["object"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "filter";
__n13["raw"] := "\"filter\"";
__n9["property"] := __n13;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "callbackfn";
__n14 := [ __n15 ];
__n8["arguments"] := __n14;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "assert";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "sameValue";
__n20["raw"] := "\"sameValue\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "newArr";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "length";
__n24["raw"] := "\"length\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "newArr.length";
__n26["raw"] := "'newArr.length'";
__n21 := [ __n22, __n25, __n26 ];
__n17["arguments"] := __n21;
__n16["expression"] := __n17;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "assert";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "sameValue";
__n31["raw"] := "\"sameValue\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n33["computed"] := true;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "newArr";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n33["property"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 11.;
__n36["raw"] := "11";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "newArr[0]";
__n37["raw"] := "'newArr[0]'";
__n32 := [ __n33, __n36, __n37 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n1 := [ __n2, __n4, __n16, __n27 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [ "newArr" ];
__n0["variableDeclarations"] := __n38;
__n40 := {  };
__n40["type"] := "FunctionDeclaration";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "callbackfn";
__n40["id"] := __n41;
__n42 := [  ];
__n40["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ReturnStatement";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := true;
__n46["raw"] := "true";
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n47 := [  ];
__n43["variableDeclarations"] := __n47;
__n48 := [  ];
__n43["functionDeclarations"] := __n48;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n40["body"] := __n43;
__n40["generator"] := false;
__n40["expression"] := false;
__n40["async"] := false;
__n39 := [ __n40 ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}