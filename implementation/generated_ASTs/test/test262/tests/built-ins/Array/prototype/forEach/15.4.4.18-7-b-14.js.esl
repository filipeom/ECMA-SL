function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "testResult";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := true;
__n11["raw"] := "true";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "arr";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "ArrayExpression";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 2.;
__n22["raw"] := "2";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "last";
__n23["raw"] := "\"last\"";
__n19 := [ __n20, __n21, __n22, __n23 ];
__n18["elements"] := __n19;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Object";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "defineProperty";
__n28["raw"] := "\"defineProperty\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "arr";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "0";
__n31["raw"] := "\"0\"";
__n32 := {  };
__n32["type"] := "ObjectExpression";
__n34 := {  };
__n34["type"] := "Property";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "get";
__n34["key"] := __n35;
__n36 := {  };
__n36["type"] := "FunctionExpression";
__n36["id"] := null;
__n37 := [  ];
__n36["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "arr";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "length";
__n44["raw"] := "\"length\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["left"] := __n42;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 3.;
__n45["raw"] := "3";
__n41["right"] := __n45;
__n40["expression"] := __n41;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n46["argument"] := __n47;
__n39 := [ __n40, __n46 ];
__n38["body"] := __n39;
__n48 := [  ];
__n38["variableDeclarations"] := __n48;
__n49 := [  ];
__n38["functionDeclarations"] := __n49;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n36["body"] := __n38;
__n36["generator"] := false;
__n36["expression"] := false;
__n36["async"] := false;
__n34["value"] := __n36;
__n34["computed"] := false;
__n34["kind"] := "init";
__n34["shorthand"] := false;
__n50 := {  };
__n50["type"] := "Property";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "configurable";
__n50["key"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := true;
__n52["raw"] := "true";
__n50["value"] := __n52;
__n50["computed"] := false;
__n50["kind"] := "init";
__n50["shorthand"] := false;
__n33 := [ __n34, __n50 ];
__n32["properties"] := __n33;
__n29 := [ __n30, __n31, __n32 ];
__n25["arguments"] := __n29;
__n24["expression"] := __n25;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "arr";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "forEach";
__n57["raw"] := "\"forEach\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "callbackfn";
__n58 := [ __n59 ];
__n54["arguments"] := __n58;
__n53["expression"] := __n54;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "assert";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "testResult";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "testResult !== true";
__n65["raw"] := "'testResult !== true'";
__n63 := [ __n64, __n65 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "assert";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "accessed";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "accessed !== true";
__n71["raw"] := "'accessed !== true'";
__n69 := [ __n70, __n71 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n1 := [ __n2, __n7, __n12, __n14, __n24, __n53, __n60, __n66 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n72 := [ "accessed", "testResult", "arr" ];
__n0["variableDeclarations"] := __n72;
__n74 := {  };
__n74["type"] := "FunctionDeclaration";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "callbackfn";
__n74["id"] := __n75;
__n76 := [ "val", "idx", "obj" ];
__n74["params"] := __n76;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "AssignmentExpression";
__n80["operator"] := "=";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "accessed";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := true;
__n82["raw"] := "true";
__n80["right"] := __n82;
__n79["expression"] := __n80;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "===";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "idx";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 3.;
__n86["raw"] := "3";
__n84["right"] := __n86;
__n83["test"] := __n84;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "AssignmentExpression";
__n90["operator"] := "=";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "testResult";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := false;
__n92["raw"] := "false";
__n90["right"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n83["consequent"] := __n87;
__n83["alternate"] := null;
__n78 := [ __n79, __n83 ];
__n77["body"] := __n78;
__n93 := [  ];
__n77["variableDeclarations"] := __n93;
__n94 := [  ];
__n77["functionDeclarations"] := __n94;
__n77["codeType"] := "function";
__n77["strict"] := false;
__n74["body"] := __n77;
__n74["generator"] := false;
__n74["expression"] := false;
__n74["async"] := false;
__n73 := [ __n74 ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}