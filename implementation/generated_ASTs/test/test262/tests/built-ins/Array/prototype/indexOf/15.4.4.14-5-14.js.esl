function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n11 := [ __n12 ];
__n10["elements"] := __n11;
__n9["object"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "indexOf";
__n13["raw"] := "\"indexOf\"";
__n9["property"] := __n13;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := true;
__n15["raw"] := "true";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "NaN";
__n14 := [ __n15, __n16 ];
__n8["arguments"] := __n14;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.;
__n17["raw"] := "0";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "[true].indexOf(true, NaN)";
__n18["raw"] := "'[true].indexOf(true, NaN)'";
__n7 := [ __n8, __n17, __n18 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "assert";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "sameValue";
__n23["raw"] := "\"sameValue\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "ArrayExpression";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n28 := [ __n29 ];
__n27["elements"] := __n28;
__n26["object"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "indexOf";
__n30["raw"] := "\"indexOf\"";
__n26["property"] := __n30;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := true;
__n32["raw"] := "true";
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "-";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "NaN";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n31 := [ __n32, __n33 ];
__n25["arguments"] := __n31;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "[true].indexOf(true, -NaN)";
__n36["raw"] := "'[true].indexOf(true, -NaN)'";
__n24 := [ __n25, __n35, __n36 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n1 := [ __n2, __n19 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n37 := [  ];
__n0["variableDeclarations"] := __n37;
__n38 := [  ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}