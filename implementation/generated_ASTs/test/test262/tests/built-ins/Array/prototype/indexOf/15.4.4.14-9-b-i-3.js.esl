function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n4["computed"] := true;
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Array";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "prototype";
__n7["raw"] := "\"prototype\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["object"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n4["property"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := false;
__n9["raw"] := "false";
__n3["right"] := __n9;
__n2["expression"] := __n3;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "assert";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "sameValue";
__n14["raw"] := "\"sameValue\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "ArrayExpression";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n19 := [ __n20 ];
__n18["elements"] := __n19;
__n17["object"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "indexOf";
__n21["raw"] := "\"indexOf\"";
__n17["property"] := __n21;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n22 := [ __n23 ];
__n16["arguments"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "[true].indexOf(true)";
__n25["raw"] := "'[true].indexOf(true)'";
__n15 := [ __n16, __n24, __n25 ];
__n11["arguments"] := __n15;
__n10["expression"] := __n11;
__n1 := [ __n2, __n10 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n26 := [  ];
__n0["variableDeclarations"] := __n26;
__n27 := [  ];
__n0["functionDeclarations"] := __n27;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}