function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arr";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n12 := [  ];
__n11["elements"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "defineProperty";
__n17["raw"] := "\"defineProperty\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "arr";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "0";
__n20["raw"] := "\"0\"";
__n21 := {  };
__n21["type"] := "ObjectExpression";
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "get";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ThrowStatement";
__n30 := {  };
__n30["type"] := "NewExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "TypeError";
__n30["callee"] := __n31;
__n32 := [  ];
__n30["arguments"] := __n32;
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n33 := [  ];
__n27["variableDeclarations"] := __n33;
__n34 := [  ];
__n27["functionDeclarations"] := __n34;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n35 := {  };
__n35["type"] := "Property";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "configurable";
__n35["key"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := true;
__n37["raw"] := "true";
__n35["value"] := __n37;
__n35["computed"] := false;
__n35["kind"] := "init";
__n35["shorthand"] := false;
__n22 := [ __n23, __n35 ];
__n21["properties"] := __n22;
__n18 := [ __n19, __n20, __n21 ];
__n14["arguments"] := __n18;
__n13["expression"] := __n14;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Object";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "defineProperty";
__n42["raw"] := "\"defineProperty\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "arr";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "1";
__n45["raw"] := "\"1\"";
__n46 := {  };
__n46["type"] := "ObjectExpression";
__n48 := {  };
__n48["type"] := "Property";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "get";
__n48["key"] := __n49;
__n50 := {  };
__n50["type"] := "FunctionExpression";
__n50["id"] := null;
__n51 := [  ];
__n50["params"] := __n51;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "=";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "accessed";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := true;
__n57["raw"] := "true";
__n55["right"] := __n57;
__n54["expression"] := __n55;
__n58 := {  };
__n58["type"] := "ReturnStatement";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := true;
__n59["raw"] := "true";
__n58["argument"] := __n59;
__n53 := [ __n54, __n58 ];
__n52["body"] := __n53;
__n60 := [  ];
__n52["variableDeclarations"] := __n60;
__n61 := [  ];
__n52["functionDeclarations"] := __n61;
__n52["codeType"] := "function";
__n52["strict"] := false;
__n50["body"] := __n52;
__n50["generator"] := false;
__n50["expression"] := false;
__n50["async"] := false;
__n48["value"] := __n50;
__n48["computed"] := false;
__n48["kind"] := "init";
__n48["shorthand"] := false;
__n62 := {  };
__n62["type"] := "Property";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "configurable";
__n62["key"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := true;
__n64["raw"] := "true";
__n62["value"] := __n64;
__n62["computed"] := false;
__n62["kind"] := "init";
__n62["shorthand"] := false;
__n47 := [ __n48, __n62 ];
__n46["properties"] := __n47;
__n43 := [ __n44, __n45, __n46 ];
__n39["arguments"] := __n43;
__n38["expression"] := __n39;
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "MemberExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "assert";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "throws";
__n69["raw"] := "\"throws\"";
__n67["property"] := __n69;
__n67["computed"] := true;
__n66["callee"] := __n67;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "TypeError";
__n72 := {  };
__n72["type"] := "FunctionExpression";
__n72["id"] := null;
__n73 := [  ];
__n72["params"] := __n73;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "arr";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "indexOf";
__n80["raw"] := "\"indexOf\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["callee"] := __n78;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := true;
__n82["raw"] := "true";
__n81 := [ __n82 ];
__n77["arguments"] := __n81;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n83 := [  ];
__n74["variableDeclarations"] := __n83;
__n84 := [  ];
__n74["functionDeclarations"] := __n84;
__n74["codeType"] := "function";
__n74["strict"] := false;
__n72["body"] := __n74;
__n72["generator"] := false;
__n72["expression"] := false;
__n72["async"] := false;
__n70 := [ __n71, __n72 ];
__n66["arguments"] := __n70;
__n65["expression"] := __n66;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "MemberExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "assert";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "sameValue";
__n89["raw"] := "\"sameValue\"";
__n87["property"] := __n89;
__n87["computed"] := true;
__n86["callee"] := __n87;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "accessed";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := false;
__n92["raw"] := "false";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "accessed";
__n93["raw"] := "'accessed'";
__n90 := [ __n91, __n92, __n93 ];
__n86["arguments"] := __n90;
__n85["expression"] := __n86;
__n1 := [ __n2, __n7, __n13, __n38, __n65, __n85 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n94 := [ "accessed", "arr" ];
__n0["variableDeclarations"] := __n94;
__n95 := [  ];
__n0["functionDeclarations"] := __n95;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}