function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "toStringAccessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "valueOfAccessed";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "fromIndex";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "toString";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "toStringAccessed";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := true;
__n27["raw"] := "true";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n28 := {  };
__n28["type"] := "ReturnStatement";
__n29 := {  };
__n29["type"] := "ObjectExpression";
__n30 := [  ];
__n29["properties"] := __n30;
__n28["argument"] := __n29;
__n23 := [ __n24, __n28 ];
__n22["body"] := __n23;
__n31 := [  ];
__n22["variableDeclarations"] := __n31;
__n32 := [  ];
__n22["functionDeclarations"] := __n32;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "valueOf";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "valueOfAccessed";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := true;
__n42["raw"] := "true";
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "ObjectExpression";
__n45 := [  ];
__n44["properties"] := __n45;
__n43["argument"] := __n44;
__n38 := [ __n39, __n43 ];
__n37["body"] := __n38;
__n46 := [  ];
__n37["variableDeclarations"] := __n46;
__n47 := [  ];
__n37["functionDeclarations"] := __n47;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["expression"] := false;
__n35["async"] := false;
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n17 := [ __n18, __n33 ];
__n16["properties"] := __n17;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "assert";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "throws";
__n52["raw"] := "\"throws\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "TypeError";
__n55 := {  };
__n55["type"] := "FunctionExpression";
__n55["id"] := null;
__n56 := [  ];
__n55["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "ArrayExpression";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 'null;
__n65["raw"] := "\"'null\"";
__n63 := [ __n64, __n65 ];
__n62["elements"] := __n63;
__n61["object"] := __n62;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "lastIndexOf";
__n66["raw"] := "\"lastIndexOf\"";
__n61["property"] := __n66;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 'null;
__n68["raw"] := "\"'null\"";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "fromIndex";
__n67 := [ __n68, __n69 ];
__n60["arguments"] := __n67;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n70 := [  ];
__n57["variableDeclarations"] := __n70;
__n71 := [  ];
__n57["functionDeclarations"] := __n71;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n55["body"] := __n57;
__n55["generator"] := false;
__n55["expression"] := false;
__n55["async"] := false;
__n53 := [ __n54, __n55 ];
__n49["arguments"] := __n53;
__n48["expression"] := __n49;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "assert";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "toStringAccessed";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "toStringAccessed";
__n77["raw"] := "'toStringAccessed'";
__n75 := [ __n76, __n77 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "assert";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "valueOfAccessed";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "valueOfAccessed";
__n83["raw"] := "'valueOfAccessed'";
__n81 := [ __n82, __n83 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n1 := [ __n2, __n7, __n12, __n48, __n72, __n78 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n84 := [ "toStringAccessed", "valueOfAccessed", "fromIndex" ];
__n0["variableDeclarations"] := __n84;
__n85 := [  ];
__n0["functionDeclarations"] := __n85;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}