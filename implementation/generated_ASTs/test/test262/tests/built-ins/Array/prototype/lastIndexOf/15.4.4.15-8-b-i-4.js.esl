function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n4["computed"] := true;
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Object";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "prototype";
__n7["raw"] := "\"prototype\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["object"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n4["property"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := false;
__n9["raw"] := "false";
__n3["right"] := __n9;
__n2["expression"] := __n3;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "assert";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "sameValue";
__n14["raw"] := "\"sameValue\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Array";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "prototype";
__n21["raw"] := "\"prototype\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["object"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "lastIndexOf";
__n22["raw"] := "\"lastIndexOf\"";
__n18["property"] := __n22;
__n18["computed"] := true;
__n17["object"] := __n18;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "call";
__n23["raw"] := "\"call\"";
__n17["property"] := __n23;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n25 := {  };
__n25["type"] := "ObjectExpression";
__n27 := {  };
__n27["type"] := "Property";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n27["key"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n27["value"] := __n29;
__n27["computed"] := false;
__n27["kind"] := "init";
__n27["shorthand"] := false;
__n30 := {  };
__n30["type"] := "Property";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n30["key"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n30["value"] := __n32;
__n30["computed"] := false;
__n30["kind"] := "init";
__n30["shorthand"] := false;
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "length";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 2.;
__n35["raw"] := "2";
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n26 := [ __n27, __n30, __n33 ];
__n25["properties"] := __n26;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n24 := [ __n25, __n36 ];
__n16["arguments"] := __n24;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 0.;
__n37["raw"] := "0";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "Array.prototype.lastIndexOf.call({ 0: true, 1: 1, length: 2 }, true)";
__n38["raw"] := "'Array.prototype.lastIndexOf.call({ 0: true, 1: 1, length: 2 }, true)'";
__n15 := [ __n16, __n37, __n38 ];
__n11["arguments"] := __n15;
__n10["expression"] := __n11;
__n1 := [ __n2, __n10 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [  ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}