function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "kValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "abc";
__n6["raw"] := "\"abc\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "proto";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "length";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 2.;
__n17["raw"] := "2";
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n14 := [ __n15 ];
__n13["properties"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Object";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "defineProperty";
__n22["raw"] := "\"defineProperty\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "proto";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "0";
__n25["raw"] := "\"0\"";
__n26 := {  };
__n26["type"] := "ObjectExpression";
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "get";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n30["id"] := null;
__n31 := [  ];
__n30["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "kValue";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n36 := [  ];
__n32["variableDeclarations"] := __n36;
__n37 := [  ];
__n32["functionDeclarations"] := __n37;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n30["body"] := __n32;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n38 := {  };
__n38["type"] := "Property";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "configurable";
__n38["key"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n38["value"] := __n40;
__n38["computed"] := false;
__n38["kind"] := "init";
__n38["shorthand"] := false;
__n27 := [ __n28, __n38 ];
__n26["properties"] := __n27;
__n23 := [ __n24, __n25, __n26 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n41 := {  };
__n41["type"] := "VariableDeclaration";
__n43 := {  };
__n43["type"] := "VariableDeclarator";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Con";
__n43["id"] := __n44;
__n45 := {  };
__n45["type"] := "FunctionExpression";
__n45["id"] := null;
__n46 := [  ];
__n45["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n48 := [  ];
__n47["body"] := __n48;
__n49 := [  ];
__n47["variableDeclarations"] := __n49;
__n50 := [  ];
__n47["functionDeclarations"] := __n50;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n45["body"] := __n47;
__n45["generator"] := false;
__n45["expression"] := false;
__n45["async"] := false;
__n43["init"] := __n45;
__n42 := [ __n43 ];
__n41["declarations"] := __n42;
__n41["kind"] := "var";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "AssignmentExpression";
__n52["operator"] := "=";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Con";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "prototype";
__n55["raw"] := "\"prototype\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["left"] := __n53;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "proto";
__n52["right"] := __n56;
__n51["expression"] := __n52;
__n57 := {  };
__n57["type"] := "VariableDeclaration";
__n59 := {  };
__n59["type"] := "VariableDeclarator";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "child";
__n59["id"] := __n60;
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Con";
__n61["callee"] := __n62;
__n63 := [  ];
__n61["arguments"] := __n63;
__n59["init"] := __n61;
__n58 := [ __n59 ];
__n57["declarations"] := __n58;
__n57["kind"] := "var";
__n64 := {  };
__n64["type"] := "VariableDeclaration";
__n66 := {  };
__n66["type"] := "VariableDeclarator";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "testResult";
__n66["id"] := __n67;
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "Array";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "prototype";
__n73["raw"] := "\"prototype\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n70["object"] := __n71;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "map";
__n74["raw"] := "\"map\"";
__n70["property"] := __n74;
__n70["computed"] := true;
__n69["object"] := __n70;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "call";
__n75["raw"] := "\"call\"";
__n69["property"] := __n75;
__n69["computed"] := true;
__n68["callee"] := __n69;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "child";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "callbackfn";
__n76 := [ __n77, __n78 ];
__n68["arguments"] := __n76;
__n66["init"] := __n68;
__n65 := [ __n66 ];
__n64["declarations"] := __n65;
__n64["kind"] := "var";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "assert";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "sameValue";
__n83["raw"] := "\"sameValue\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["callee"] := __n81;
__n85 := {  };
__n85["type"] := "MemberExpression";
__n85["computed"] := true;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "testResult";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 0.;
__n87["raw"] := "0";
__n85["property"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := true;
__n88["raw"] := "true";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "testResult[0]";
__n89["raw"] := "'testResult[0]'";
__n84 := [ __n85, __n88, __n89 ];
__n80["arguments"] := __n84;
__n79["expression"] := __n80;
__n1 := [ __n2, __n7, __n9, __n18, __n41, __n51, __n57, __n64, __n79 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n90 := [ "kValue", "proto", "Con", "child", "testResult" ];
__n0["variableDeclarations"] := __n90;
__n92 := {  };
__n92["type"] := "FunctionDeclaration";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "callbackfn";
__n92["id"] := __n93;
__n94 := [ "val", "idx", "obj" ];
__n92["params"] := __n94;
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "===";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "idx";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := 0.;
__n100["raw"] := "0";
__n98["right"] := __n100;
__n97["test"] := __n98;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ReturnStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "===";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "val";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "kValue";
__n104["right"] := __n106;
__n103["argument"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n97["consequent"] := __n101;
__n97["alternate"] := null;
__n107 := {  };
__n107["type"] := "ReturnStatement";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := false;
__n108["raw"] := "false";
__n107["argument"] := __n108;
__n96 := [ __n97, __n107 ];
__n95["body"] := __n96;
__n109 := [  ];
__n95["variableDeclarations"] := __n109;
__n110 := [  ];
__n95["functionDeclarations"] := __n110;
__n95["codeType"] := "function";
__n95["strict"] := false;
__n92["body"] := __n95;
__n92["generator"] := false;
__n92["expression"] := false;
__n92["async"] := false;
__n91 := [ __n92 ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}