function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "func";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n8["id"] := null;
__n9 := [ "a", "b" ];
__n8["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ReturnStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Array";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "prototype";
__n18["raw"] := "\"prototype\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "map";
__n19["raw"] := "\"map\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["object"] := __n15;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "call";
__n20["raw"] := "\"call\"";
__n14["property"] := __n20;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arguments";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "callbackfn";
__n21 := [ __n22, __n23 ];
__n13["arguments"] := __n21;
__n12["argument"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n24 := [  ];
__n10["variableDeclarations"] := __n24;
__n25 := [  ];
__n10["functionDeclarations"] := __n25;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n8["body"] := __n10;
__n8["generator"] := false;
__n8["expression"] := false;
__n8["async"] := false;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n26 := {  };
__n26["type"] := "VariableDeclaration";
__n28 := {  };
__n28["type"] := "VariableDeclarator";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "testResult";
__n28["id"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "func";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 9.;
__n33["raw"] := "9";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 11.;
__n34["raw"] := "11";
__n32 := [ __n33, __n34 ];
__n30["arguments"] := __n32;
__n28["init"] := __n30;
__n27 := [ __n28 ];
__n26["declarations"] := __n27;
__n26["kind"] := "var";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "assert";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "sameValue";
__n39["raw"] := "\"sameValue\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n36["callee"] := __n37;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n41["computed"] := true;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "testResult";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n41["property"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := true;
__n44["raw"] := "true";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "testResult[0]";
__n45["raw"] := "'testResult[0]'";
__n40 := [ __n41, __n44, __n45 ];
__n36["arguments"] := __n40;
__n35["expression"] := __n36;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "assert";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "sameValue";
__n50["raw"] := "\"sameValue\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n52["computed"] := true;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "testResult";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1.;
__n54["raw"] := "1";
__n52["property"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := true;
__n55["raw"] := "true";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "testResult[1]";
__n56["raw"] := "'testResult[1]'";
__n51 := [ __n52, __n55, __n56 ];
__n47["arguments"] := __n51;
__n46["expression"] := __n47;
__n1 := [ __n2, __n4, __n26, __n35, __n46 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n57 := [ "func", "testResult" ];
__n0["variableDeclarations"] := __n57;
__n59 := {  };
__n59["type"] := "FunctionDeclaration";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "callbackfn";
__n59["id"] := __n60;
__n61 := [ "val", "idx", "obj" ];
__n59["params"] := __n61;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "===";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "idx";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n65["right"] := __n67;
__n64["test"] := __n65;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ReturnStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "===";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "val";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 9.;
__n73["raw"] := "9";
__n71["right"] := __n73;
__n70["argument"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n64["consequent"] := __n68;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "===";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "idx";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n75["right"] := __n77;
__n74["test"] := __n75;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ReturnStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "===";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "val";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 11.;
__n83["raw"] := "11";
__n81["right"] := __n83;
__n80["argument"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n74["consequent"] := __n78;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ReturnStatement";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := false;
__n87["raw"] := "false";
__n86["argument"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n74["alternate"] := __n84;
__n64["alternate"] := __n74;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n88 := [  ];
__n62["variableDeclarations"] := __n88;
__n89 := [  ];
__n62["functionDeclarations"] := __n89;
__n62["codeType"] := "function";
__n62["strict"] := false;
__n59["body"] := __n62;
__n59["generator"] := false;
__n59["expression"] := false;
__n59["async"] := false;
__n58 := [ __n59 ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}