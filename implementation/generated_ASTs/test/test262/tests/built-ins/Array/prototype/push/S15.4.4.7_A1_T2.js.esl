function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "length";
__n12["raw"] := "\"length\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n9["right"] := __n13;
__n8["test"] := __n9;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: x = []; x.length === 0. Actual: ";
__n21["raw"] := "'#1: x = []; x.length === 0. Actual: '";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "x";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "length";
__n24["raw"] := "\"length\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n8["consequent"] := __n14;
__n8["alternate"] := null;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n27["computed"] := true;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n27["property"] := __n29;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n26["right"] := __n30;
__n25["expression"] := __n26;
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "push";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "push";
__n38["raw"] := "\"push\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Number";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "POSITIVE_INFINITY";
__n43["raw"] := "\"POSITIVE_INFINITY\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "NaN";
__n44["raw"] := "\"NaN\"";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "1";
__n45["raw"] := "\"1\"";
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "-";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n39 := [ __n40, __n41, __n44, __n45, __n46 ];
__n35["arguments"] := __n39;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "push";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 6.;
__n51["raw"] := "6";
__n49["right"] := __n51;
__n48["test"] := __n49;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#2: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1) === 6. Actual: ";
__n59["raw"] := "'#2: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1) === 6. Actual: '";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "push";
__n58["right"] := __n60;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n48["consequent"] := __n52;
__n48["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "MemberExpression";
__n63["computed"] := true;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "x";
__n63["object"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 0.;
__n65["raw"] := "0";
__n63["property"] := __n65;
__n62["left"] := __n63;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 0.;
__n66["raw"] := "0";
__n62["right"] := __n66;
__n61["test"] := __n62;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[0] === 0. Actual: ";
__n74["raw"] := "'#3: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[0] === 0. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "MemberExpression";
__n75["computed"] := true;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "x";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 0.;
__n77["raw"] := "0";
__n75["property"] := __n77;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n61["consequent"] := __n67;
__n61["alternate"] := null;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!==";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n80["computed"] := true;
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "x";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := 1.;
__n82["raw"] := "1";
__n80["property"] := __n82;
__n79["left"] := __n80;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := true;
__n83["raw"] := "true";
__n79["right"] := __n83;
__n78["test"] := __n79;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "+";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#4: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[1] === true. Actual: ";
__n91["raw"] := "'#4: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[1] === true. Actual: '";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "MemberExpression";
__n92["computed"] := true;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "x";
__n92["object"] := __n93;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 1.;
__n94["raw"] := "1";
__n92["property"] := __n94;
__n90["right"] := __n92;
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n78["consequent"] := __n84;
__n78["alternate"] := null;
__n95 := {  };
__n95["type"] := "IfStatement";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "!==";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n97["computed"] := true;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "x";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 2.;
__n99["raw"] := "2";
__n97["property"] := __n99;
__n96["left"] := __n97;
__n100 := {  };
__n100["type"] := "MemberExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Number";
__n100["object"] := __n101;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "POSITIVE_INFINITY";
__n102["raw"] := "\"POSITIVE_INFINITY\"";
__n100["property"] := __n102;
__n100["computed"] := true;
__n96["right"] := __n100;
__n95["test"] := __n96;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#5: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[2] === Number.POSITIVE_INFINITY. Actual: ";
__n110["raw"] := "'#5: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[2] === Number.POSITIVE_INFINITY. Actual: '";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "MemberExpression";
__n111["computed"] := true;
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "x";
__n111["object"] := __n112;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 2.;
__n113["raw"] := "2";
__n111["property"] := __n113;
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n95["consequent"] := __n103;
__n95["alternate"] := null;
__n114 := {  };
__n114["type"] := "IfStatement";
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "!==";
__n116 := {  };
__n116["type"] := "MemberExpression";
__n116["computed"] := true;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "x";
__n116["object"] := __n117;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 3.;
__n118["raw"] := "3";
__n116["property"] := __n118;
__n115["left"] := __n116;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "NaN";
__n119["raw"] := "\"NaN\"";
__n115["right"] := __n119;
__n114["test"] := __n115;
__n120 := {  };
__n120["type"] := "BlockStatement";
__n122 := {  };
__n122["type"] := "ExpressionStatement";
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "$ERROR";
__n123["callee"] := __n124;
__n126 := {  };
__n126["type"] := "BinaryExpression";
__n126["operator"] := "+";
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := "#6: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[3] === \"NaN\". Actual: ";
__n127["raw"] := "'#6: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[3] === \"NaN\". Actual: '";
__n126["left"] := __n127;
__n128 := {  };
__n128["type"] := "MemberExpression";
__n128["computed"] := true;
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "x";
__n128["object"] := __n129;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := 3.;
__n130["raw"] := "3";
__n128["property"] := __n130;
__n126["right"] := __n128;
__n125 := [ __n126 ];
__n123["arguments"] := __n125;
__n122["expression"] := __n123;
__n121 := [ __n122 ];
__n120["body"] := __n121;
__n114["consequent"] := __n120;
__n114["alternate"] := null;
__n131 := {  };
__n131["type"] := "IfStatement";
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "!==";
__n133 := {  };
__n133["type"] := "MemberExpression";
__n133["computed"] := true;
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "x";
__n133["object"] := __n134;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 4.;
__n135["raw"] := "4";
__n133["property"] := __n135;
__n132["left"] := __n133;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := "1";
__n136["raw"] := "\"1\"";
__n132["right"] := __n136;
__n131["test"] := __n132;
__n137 := {  };
__n137["type"] := "BlockStatement";
__n139 := {  };
__n139["type"] := "ExpressionStatement";
__n140 := {  };
__n140["type"] := "CallExpression";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "$ERROR";
__n140["callee"] := __n141;
__n143 := {  };
__n143["type"] := "BinaryExpression";
__n143["operator"] := "+";
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "#7: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[4] === \"1\". Actual: ";
__n144["raw"] := "'#7: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[4] === \"1\". Actual: '";
__n143["left"] := __n144;
__n145 := {  };
__n145["type"] := "MemberExpression";
__n145["computed"] := true;
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "x";
__n145["object"] := __n146;
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := 4.;
__n147["raw"] := "4";
__n145["property"] := __n147;
__n143["right"] := __n145;
__n142 := [ __n143 ];
__n140["arguments"] := __n142;
__n139["expression"] := __n140;
__n138 := [ __n139 ];
__n137["body"] := __n138;
__n131["consequent"] := __n137;
__n131["alternate"] := null;
__n148 := {  };
__n148["type"] := "IfStatement";
__n149 := {  };
__n149["type"] := "BinaryExpression";
__n149["operator"] := "!==";
__n150 := {  };
__n150["type"] := "MemberExpression";
__n150["computed"] := true;
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "x";
__n150["object"] := __n151;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := 5.;
__n152["raw"] := "5";
__n150["property"] := __n152;
__n149["left"] := __n150;
__n153 := {  };
__n153["type"] := "UnaryExpression";
__n153["operator"] := "-";
__n154 := {  };
__n154["type"] := "Literal";
__n154["value"] := 1.;
__n154["raw"] := "1";
__n153["argument"] := __n154;
__n153["prefix"] := true;
__n149["right"] := __n153;
__n148["test"] := __n149;
__n155 := {  };
__n155["type"] := "BlockStatement";
__n157 := {  };
__n157["type"] := "ExpressionStatement";
__n158 := {  };
__n158["type"] := "CallExpression";
__n159 := {  };
__n159["type"] := "Identifier";
__n159["name"] := "$ERROR";
__n158["callee"] := __n159;
__n161 := {  };
__n161["type"] := "BinaryExpression";
__n161["operator"] := "+";
__n162 := {  };
__n162["type"] := "Literal";
__n162["value"] := "#8: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[5] === -1. Actual: ";
__n162["raw"] := "'#8: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x[5] === -1. Actual: '";
__n161["left"] := __n162;
__n163 := {  };
__n163["type"] := "MemberExpression";
__n163["computed"] := true;
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "x";
__n163["object"] := __n164;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := 5.;
__n165["raw"] := "5";
__n163["property"] := __n165;
__n161["right"] := __n163;
__n160 := [ __n161 ];
__n158["arguments"] := __n160;
__n157["expression"] := __n158;
__n156 := [ __n157 ];
__n155["body"] := __n156;
__n148["consequent"] := __n155;
__n148["alternate"] := null;
__n166 := {  };
__n166["type"] := "IfStatement";
__n167 := {  };
__n167["type"] := "BinaryExpression";
__n167["operator"] := "!==";
__n168 := {  };
__n168["type"] := "MemberExpression";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "x";
__n168["object"] := __n169;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := "length";
__n170["raw"] := "\"length\"";
__n168["property"] := __n170;
__n168["computed"] := true;
__n167["left"] := __n168;
__n171 := {  };
__n171["type"] := "Literal";
__n171["value"] := 6.;
__n171["raw"] := "6";
__n167["right"] := __n171;
__n166["test"] := __n167;
__n172 := {  };
__n172["type"] := "BlockStatement";
__n174 := {  };
__n174["type"] := "ExpressionStatement";
__n175 := {  };
__n175["type"] := "CallExpression";
__n176 := {  };
__n176["type"] := "Identifier";
__n176["name"] := "$ERROR";
__n175["callee"] := __n176;
__n178 := {  };
__n178["type"] := "BinaryExpression";
__n178["operator"] := "+";
__n179 := {  };
__n179["type"] := "Literal";
__n179["value"] := "#9: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x.length === 6. Actual: ";
__n179["raw"] := "'#9: x = []; x[0] = 0; x.push(true, Number.POSITIVE_INFINITY, \"NaN\", \"1\", -1); x.length === 6. Actual: '";
__n178["left"] := __n179;
__n180 := {  };
__n180["type"] := "MemberExpression";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "x";
__n180["object"] := __n181;
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := "length";
__n182["raw"] := "\"length\"";
__n180["property"] := __n182;
__n180["computed"] := true;
__n178["right"] := __n180;
__n177 := [ __n178 ];
__n175["arguments"] := __n177;
__n174["expression"] := __n175;
__n173 := [ __n174 ];
__n172["body"] := __n173;
__n166["consequent"] := __n172;
__n166["alternate"] := null;
__n1 := [ __n2, __n8, __n25, __n31, __n48, __n61, __n78, __n95, __n114, __n131, __n148, __n166 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n183 := [ "x", "push" ];
__n0["variableDeclarations"] := __n183;
__n184 := [  ];
__n0["functionDeclarations"] := __n184;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}