function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "srcArr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ArrayExpression";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "1";
__n10["raw"] := "'1'";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "2";
__n11["raw"] := "'2'";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "3";
__n12["raw"] := "'3'";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "4";
__n13["raw"] := "'4'";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "5";
__n14["raw"] := "'5'";
__n9 := [ __n10, __n11, __n12, __n13, __n14 ];
__n8["elements"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "sameValue";
__n19["raw"] := "\"sameValue\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "srcArr";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "reduce";
__n24["raw"] := "\"reduce\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "callbackfn";
__n25 := [ __n26 ];
__n21["arguments"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "12345";
__n27["raw"] := "'12345'";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "srcArr.reduce(callbackfn)";
__n28["raw"] := "'srcArr.reduce(callbackfn)'";
__n20 := [ __n21, __n27, __n28 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n1 := [ __n2, __n4, __n15 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n29 := [ "srcArr" ];
__n0["variableDeclarations"] := __n29;
__n31 := {  };
__n31["type"] := "FunctionDeclaration";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "callbackfn";
__n31["id"] := __n32;
__n33 := [ "prevVal", "curVal", "idx", "obj" ];
__n31["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "prevVal";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "curVal";
__n37["right"] := __n39;
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n40 := [  ];
__n34["variableDeclarations"] := __n40;
__n41 := [  ];
__n34["functionDeclarations"] := __n41;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n31["body"] := __n34;
__n31["generator"] := false;
__n31["expression"] := false;
__n31["async"] := false;
__n30 := [ __n31 ];
__n0["functionDeclarations"] := __n30;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}