function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n11["computed"] := true;
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Array";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "prototype";
__n14["raw"] := "\"prototype\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["object"] := __n12;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n11["property"] := __n15;
__n10["left"] := __n11;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "9";
__n16["raw"] := "\"9\"";
__n10["right"] := __n16;
__n9["expression"] := __n10;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "ArrayExpression";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 0.;
__n22["raw"] := "0";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 2.;
__n24["raw"] := "2";
__n21 := [ __n22, __n23, __n24 ];
__n20["elements"] := __n21;
__n19["object"] := __n20;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "reduce";
__n25["raw"] := "\"reduce\"";
__n19["property"] := __n25;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "callbackfn";
__n26 := [ __n27 ];
__n18["arguments"] := __n26;
__n17["expression"] := __n18;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "assert";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "testResult";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "testResult !== true";
__n33["raw"] := "'testResult !== true'";
__n31 := [ __n32, __n33 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n1 := [ __n2, __n7, __n9, __n17, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n34 := [ "testResult" ];
__n0["variableDeclarations"] := __n34;
__n36 := {  };
__n36["type"] := "FunctionDeclaration";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "callbackfn";
__n36["id"] := __n37;
__n38 := [ "prevVal", "curVal", "idx", "obj" ];
__n36["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "idx";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n42["right"] := __n44;
__n41["test"] := __n42;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "AssignmentExpression";
__n48["operator"] := "=";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "testResult";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "===";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "prevVal";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 0.;
__n52["raw"] := "0";
__n50["right"] := __n52;
__n48["right"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n41["consequent"] := __n45;
__n41["alternate"] := null;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n53 := [  ];
__n39["variableDeclarations"] := __n53;
__n54 := [  ];
__n39["functionDeclarations"] := __n54;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n36["body"] := __n39;
__n36["generator"] := false;
__n36["expression"] := false;
__n36["async"] := false;
__n35 := [ __n36 ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}