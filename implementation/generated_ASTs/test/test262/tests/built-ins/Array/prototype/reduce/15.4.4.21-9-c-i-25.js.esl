function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "initialValue";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "func";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [ "a", "b", "c" ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Array";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "prototype";
__n28["raw"] := "\"prototype\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["object"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "reduce";
__n29["raw"] := "\"reduce\"";
__n25["property"] := __n29;
__n25["computed"] := true;
__n24["object"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "call";
__n30["raw"] := "\"call\"";
__n24["property"] := __n30;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "arguments";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "callbackfn";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "initialValue";
__n31 := [ __n32, __n33, __n34 ];
__n23["arguments"] := __n31;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n35 := [  ];
__n20["variableDeclarations"] := __n35;
__n36 := [  ];
__n20["functionDeclarations"] := __n36;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["expression"] := false;
__n18["async"] := false;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "func";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.;
__n42["raw"] := "1";
__n40 := [ __n41, __n42 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "testResult";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "testResult !== true";
__n48["raw"] := "'testResult !== true'";
__n46 := [ __n47, __n48 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n1 := [ __n2, __n7, __n12, __n14, __n37, __n43 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n49 := [ "testResult", "initialValue", "func" ];
__n0["variableDeclarations"] := __n49;
__n51 := {  };
__n51["type"] := "FunctionDeclaration";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "callbackfn";
__n51["id"] := __n52;
__n53 := [ "prevVal", "curVal", "idx", "obj" ];
__n51["params"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "===";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "idx";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.;
__n59["raw"] := "1";
__n57["right"] := __n59;
__n56["test"] := __n57;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "AssignmentExpression";
__n63["operator"] := "=";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "testResult";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "===";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "curVal";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n65["right"] := __n67;
__n63["right"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n56["consequent"] := __n60;
__n56["alternate"] := null;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n68 := [  ];
__n54["variableDeclarations"] := __n68;
__n69 := [  ];
__n54["functionDeclarations"] := __n69;
__n54["codeType"] := "function";
__n54["strict"] := false;
__n51["body"] := __n54;
__n51["generator"] := false;
__n51["expression"] := false;
__n51["async"] := false;
__n50 := [ __n51 ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}