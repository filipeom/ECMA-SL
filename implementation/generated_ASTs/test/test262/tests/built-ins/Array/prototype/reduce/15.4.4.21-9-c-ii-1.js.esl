function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "arr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ArrayExpression";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 'null;
__n13["raw"] := "\"'null\"";
__n14 := {  };
__n14["type"] := "NewExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Object";
__n14["callee"] := __n15;
__n16 := [  ];
__n14["arguments"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "five";
__n17["raw"] := "\"five\"";
__n9 := [ __n10, __n11, __n12, __n13, __n14, __n17 ];
__n8["elements"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "sameValue";
__n22["raw"] := "\"sameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "arr";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "reduce";
__n27["raw"] := "\"reduce\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "callbackfn";
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "five";
__n30["raw"] := "\"five\"";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "arr.reduce(callbackfn)";
__n31["raw"] := "'arr.reduce(callbackfn)'";
__n23 := [ __n24, __n30, __n31 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n1 := [ __n2, __n4, __n18 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n32 := [ "arr" ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "callbackfn";
__n34["id"] := __n35;
__n36 := [ "prevVal", "curVal", "idx", "obj" ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "LogicalExpression";
__n40["operator"] := "&&";
__n41 := {  };
__n41["type"] := "LogicalExpression";
__n41["operator"] := "&&";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := ">";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "idx";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 0.;
__n44["raw"] := "0";
__n42["right"] := __n44;
__n41["left"] := __n42;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "===";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n46["computed"] := true;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "obj";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "idx";
__n46["property"] := __n48;
__n45["left"] := __n46;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "curVal";
__n45["right"] := __n49;
__n41["right"] := __n45;
__n40["left"] := __n41;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "===";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n51["computed"] := true;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "obj";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "-";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "idx";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 1.;
__n55["raw"] := "1";
__n53["right"] := __n55;
__n51["property"] := __n53;
__n50["left"] := __n51;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "prevVal";
__n50["right"] := __n56;
__n40["right"] := __n50;
__n39["test"] := __n40;
__n57 := {  };
__n57["type"] := "ReturnStatement";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "curVal";
__n57["argument"] := __n58;
__n39["consequent"] := __n57;
__n59 := {  };
__n59["type"] := "ReturnStatement";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := false;
__n60["raw"] := "false";
__n59["argument"] := __n60;
__n39["alternate"] := __n59;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n61 := [  ];
__n37["variableDeclarations"] := __n61;
__n62 := [  ];
__n37["functionDeclarations"] := __n62;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["expression"] := false;
__n34["async"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}