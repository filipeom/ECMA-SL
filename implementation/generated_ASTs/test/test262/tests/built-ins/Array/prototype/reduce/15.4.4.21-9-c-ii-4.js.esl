function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 2.;
__n10["raw"] := "2";
__n7 := [ __n8, __n9, __n10 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "lastIdx";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "result";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "accessed";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := false;
__n25["raw"] := "false";
__n23["init"] := __n25;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "callbackfn";
__n26["expression"] := __n27;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "arr";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "reduce";
__n32["raw"] := "\"reduce\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "callbackfn";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 11.;
__n35["raw"] := "11";
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "assert";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "result";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "result !== true";
__n41["raw"] := "'result !== true'";
__n39 := [ __n40, __n41 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "assert";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "accessed";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "accessed !== true";
__n47["raw"] := "'accessed !== true'";
__n45 := [ __n46, __n47 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n1 := [ __n2, __n11, __n16, __n21, __n26, __n28, __n36, __n42 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n48 := [ "arr", "lastIdx", "result", "accessed" ];
__n0["variableDeclarations"] := __n48;
__n50 := {  };
__n50["type"] := "FunctionDeclaration";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "callbackfn";
__n50["id"] := __n51;
__n52 := [ "prevVal", "curVal", "idx", "obj" ];
__n50["params"] := __n52;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "AssignmentExpression";
__n56["operator"] := "=";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "accessed";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := true;
__n58["raw"] := "true";
__n56["right"] := __n58;
__n55["expression"] := __n56;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "lastIdx";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "idx";
__n60["right"] := __n62;
__n59["test"] := __n60;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "AssignmentExpression";
__n66["operator"] := "=";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "result";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := false;
__n68["raw"] := "false";
__n66["right"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n59["consequent"] := __n63;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "UpdateExpression";
__n72["operator"] := "++";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "lastIdx";
__n72["argument"] := __n73;
__n72["prefix"] := false;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n59["alternate"] := __n69;
__n54 := [ __n55, __n59 ];
__n53["body"] := __n54;
__n74 := [  ];
__n53["variableDeclarations"] := __n74;
__n75 := [  ];
__n53["functionDeclarations"] := __n75;
__n53["codeType"] := "function";
__n53["strict"] := false;
__n50["body"] := __n53;
__n50["generator"] := false;
__n50["expression"] := false;
__n50["async"] := false;
__n49 := [ __n50 ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}