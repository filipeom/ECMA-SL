function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "foo";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "prototype";
__n6["raw"] := "\"prototype\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Array";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 3.;
__n13["raw"] := "3";
__n9 := [ __n10, __n11, __n12, __n13 ];
__n7["arguments"] := __n9;
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "foo";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "f";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "NewExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "foo";
__n20["callee"] := __n21;
__n22 := [  ];
__n20["arguments"] := __n22;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "cb";
__n23["expression"] := __n24;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "assert";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "sameValue";
__n29["raw"] := "\"sameValue\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "f";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "reduceRight";
__n34["raw"] := "\"reduceRight\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "cb";
__n35 := [ __n36 ];
__n31["arguments"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 6.;
__n37["raw"] := "6";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "f.reduceRight(cb)";
__n38["raw"] := "'f.reduceRight(cb)'";
__n30 := [ __n31, __n37, __n38 ];
__n26["arguments"] := __n30;
__n25["expression"] := __n26;
__n1 := [ __n2, __n14, __n16, __n23, __n25 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [ "f" ];
__n0["variableDeclarations"] := __n39;
__n41 := {  };
__n41["type"] := "FunctionDeclaration";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "foo";
__n41["id"] := __n42;
__n43 := [  ];
__n41["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n45 := [  ];
__n44["body"] := __n45;
__n46 := [  ];
__n44["variableDeclarations"] := __n46;
__n47 := [  ];
__n44["functionDeclarations"] := __n47;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n41["body"] := __n44;
__n41["generator"] := false;
__n41["expression"] := false;
__n41["async"] := false;
__n48 := {  };
__n48["type"] := "FunctionDeclaration";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "cb";
__n48["id"] := __n49;
__n50 := [ "prevVal", "curVal", "idx", "obj" ];
__n48["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ReturnStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "prevVal";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "curVal";
__n54["right"] := __n56;
__n53["argument"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n57 := [  ];
__n51["variableDeclarations"] := __n57;
__n58 := [  ];
__n51["functionDeclarations"] := __n58;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n48["body"] := __n51;
__n48["generator"] := false;
__n48["expression"] := false;
__n48["async"] := false;
__n40 := [ __n41, __n48 ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}