function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "obj";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.;
__n16["raw"] := "0";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 11.;
__n17["raw"] := "11";
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 12.;
__n20["raw"] := "12";
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n14 := [ __n15, __n18 ];
__n13["properties"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Object";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "defineProperty";
__n25["raw"] := "\"defineProperty\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "obj";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "length";
__n28["raw"] := "\"length\"";
__n29 := {  };
__n29["type"] := "ObjectExpression";
__n31 := {  };
__n31["type"] := "Property";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "set";
__n31["key"] := __n32;
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [  ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n36 := [  ];
__n35["body"] := __n36;
__n37 := [  ];
__n35["variableDeclarations"] := __n37;
__n38 := [  ];
__n35["functionDeclarations"] := __n38;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["expression"] := false;
__n33["async"] := false;
__n31["value"] := __n33;
__n31["computed"] := false;
__n31["kind"] := "init";
__n31["shorthand"] := false;
__n39 := {  };
__n39["type"] := "Property";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "configurable";
__n39["key"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n39["value"] := __n41;
__n39["computed"] := false;
__n39["kind"] := "init";
__n39["shorthand"] := false;
__n30 := [ __n31, __n39 ];
__n29["properties"] := __n30;
__n26 := [ __n27, __n28, __n29 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "sameValue";
__n46["raw"] := "\"sameValue\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Array";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "prototype";
__n53["raw"] := "\"prototype\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["object"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "reduceRight";
__n54["raw"] := "\"reduceRight\"";
__n50["property"] := __n54;
__n50["computed"] := true;
__n49["object"] := __n50;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "call";
__n55["raw"] := "\"call\"";
__n49["property"] := __n55;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "obj";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "callbackfn";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 111.;
__n59["raw"] := "111";
__n56 := [ __n57, __n58, __n59 ];
__n48["arguments"] := __n56;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 111.;
__n60["raw"] := "111";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "Array.prototype.reduceRight.call(obj, callbackfn, 111)";
__n61["raw"] := "'Array.prototype.reduceRight.call(obj, callbackfn, 111)'";
__n47 := [ __n48, __n60, __n61 ];
__n43["arguments"] := __n47;
__n42["expression"] := __n43;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "sameValue";
__n66["raw"] := "\"sameValue\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "accessed";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := false;
__n69["raw"] := "false";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "accessed";
__n70["raw"] := "'accessed'";
__n67 := [ __n68, __n69, __n70 ];
__n63["arguments"] := __n67;
__n62["expression"] := __n63;
__n1 := [ __n2, __n7, __n9, __n21, __n42, __n62 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n71 := [ "accessed", "obj" ];
__n0["variableDeclarations"] := __n71;
__n73 := {  };
__n73["type"] := "FunctionDeclaration";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "callbackfn";
__n73["id"] := __n74;
__n75 := [ "prevVal", "curVal", "idx", "obj" ];
__n73["params"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "AssignmentExpression";
__n79["operator"] := "=";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "accessed";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := true;
__n81["raw"] := "true";
__n79["right"] := __n81;
__n78["expression"] := __n79;
__n82 := {  };
__n82["type"] := "ReturnStatement";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "===";
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "typeof";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "obj";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "length";
__n87["raw"] := "\"length\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n83["left"] := __n84;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "undefined";
__n88["raw"] := "\"undefined\"";
__n83["right"] := __n88;
__n82["argument"] := __n83;
__n77 := [ __n78, __n82 ];
__n76["body"] := __n77;
__n89 := [  ];
__n76["variableDeclarations"] := __n89;
__n90 := [  ];
__n76["functionDeclarations"] := __n90;
__n76["codeType"] := "function";
__n76["strict"] := false;
__n73["body"] := __n76;
__n73["generator"] := false;
__n73["expression"] := false;
__n73["async"] := false;
__n72 := [ __n73 ];
__n0["functionDeclarations"] := __n72;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}