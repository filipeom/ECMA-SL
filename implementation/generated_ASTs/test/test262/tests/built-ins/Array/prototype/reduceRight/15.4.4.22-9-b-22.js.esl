function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "testResult";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := true;
__n11["raw"] := "true";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "arr";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "ArrayExpression";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 2.;
__n21["raw"] := "2";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 4.;
__n22["raw"] := "4";
__n19 := [ __n20, __n21, __n22 ];
__n18["elements"] := __n19;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Object";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "defineProperty";
__n27["raw"] := "\"defineProperty\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "arr";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "1";
__n30["raw"] := "\"1\"";
__n31 := {  };
__n31["type"] := "ObjectExpression";
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "get";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "6.99";
__n40["raw"] := "\"6.99\"";
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n41 := [  ];
__n37["variableDeclarations"] := __n41;
__n42 := [  ];
__n37["functionDeclarations"] := __n42;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["expression"] := false;
__n35["async"] := false;
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n43 := {  };
__n43["type"] := "Property";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "configurable";
__n43["key"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := true;
__n45["raw"] := "true";
__n43["value"] := __n45;
__n43["computed"] := false;
__n43["kind"] := "init";
__n43["shorthand"] := false;
__n32 := [ __n33, __n43 ];
__n31["properties"] := __n32;
__n28 := [ __n29, __n30, __n31 ];
__n24["arguments"] := __n28;
__n23["expression"] := __n24;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Object";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "defineProperty";
__n50["raw"] := "\"defineProperty\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "arr";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "2";
__n53["raw"] := "\"2\"";
__n54 := {  };
__n54["type"] := "ObjectExpression";
__n56 := {  };
__n56["type"] := "Property";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "get";
__n56["key"] := __n57;
__n58 := {  };
__n58["type"] := "FunctionExpression";
__n58["id"] := null;
__n59 := [  ];
__n58["params"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "UnaryExpression";
__n63["operator"] := "delete";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "arr";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n64["property"] := __n66;
__n63["argument"] := __n64;
__n63["prefix"] := true;
__n62["expression"] := __n63;
__n67 := {  };
__n67["type"] := "ReturnStatement";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 0.;
__n68["raw"] := "0";
__n67["argument"] := __n68;
__n61 := [ __n62, __n67 ];
__n60["body"] := __n61;
__n69 := [  ];
__n60["variableDeclarations"] := __n69;
__n70 := [  ];
__n60["functionDeclarations"] := __n70;
__n60["codeType"] := "function";
__n60["strict"] := false;
__n58["body"] := __n60;
__n58["generator"] := false;
__n58["expression"] := false;
__n58["async"] := false;
__n56["value"] := __n58;
__n56["computed"] := false;
__n56["kind"] := "init";
__n56["shorthand"] := false;
__n71 := {  };
__n71["type"] := "Property";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "configurable";
__n71["key"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := true;
__n73["raw"] := "true";
__n71["value"] := __n73;
__n71["computed"] := false;
__n71["kind"] := "init";
__n71["shorthand"] := false;
__n55 := [ __n56, __n71 ];
__n54["properties"] := __n55;
__n51 := [ __n52, __n53, __n54 ];
__n47["arguments"] := __n51;
__n46["expression"] := __n47;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "arr";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "reduceRight";
__n78["raw"] := "\"reduceRight\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "callbackfn";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "initialValue";
__n81["raw"] := "\"initialValue\"";
__n79 := [ __n80, __n81 ];
__n75["arguments"] := __n79;
__n74["expression"] := __n75;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "assert";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "testResult";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "testResult !== true";
__n87["raw"] := "'testResult !== true'";
__n85 := [ __n86, __n87 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "assert";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "accessed";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "accessed !== true";
__n93["raw"] := "'accessed !== true'";
__n91 := [ __n92, __n93 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n1 := [ __n2, __n7, __n12, __n14, __n23, __n46, __n74, __n82, __n88 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n94 := [ "accessed", "testResult", "arr" ];
__n0["variableDeclarations"] := __n94;
__n96 := {  };
__n96["type"] := "FunctionDeclaration";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "callbackfn";
__n96["id"] := __n97;
__n98 := [ "prevVal", "curVal", "idx", "obj" ];
__n96["params"] := __n98;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "AssignmentExpression";
__n102["operator"] := "=";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "accessed";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := true;
__n104["raw"] := "true";
__n102["right"] := __n104;
__n101["expression"] := __n102;
__n105 := {  };
__n105["type"] := "IfStatement";
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "===";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "idx";
__n106["left"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 1.;
__n108["raw"] := "1";
__n106["right"] := __n108;
__n105["test"] := __n106;
__n109 := {  };
__n109["type"] := "BlockStatement";
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "AssignmentExpression";
__n112["operator"] := "=";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "testResult";
__n112["left"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := false;
__n114["raw"] := "false";
__n112["right"] := __n114;
__n111["expression"] := __n112;
__n110 := [ __n111 ];
__n109["body"] := __n110;
__n105["consequent"] := __n109;
__n105["alternate"] := null;
__n100 := [ __n101, __n105 ];
__n99["body"] := __n100;
__n115 := [  ];
__n99["variableDeclarations"] := __n115;
__n116 := [  ];
__n99["functionDeclarations"] := __n116;
__n99["codeType"] := "function";
__n99["strict"] := false;
__n96["body"] := __n99;
__n96["generator"] := false;
__n96["expression"] := false;
__n96["async"] := false;
__n95 := [ __n96 ];
__n0["functionDeclarations"] := __n95;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}