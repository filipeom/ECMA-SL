function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "arr";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ArrayExpression";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 2.;
__n16["raw"] := "2";
__n14 := [ __n15, null, __n16 ];
__n13["elements"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Object";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "defineProperty";
__n21["raw"] := "\"defineProperty\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "arr";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "1";
__n24["raw"] := "\"1\"";
__n25 := {  };
__n25["type"] := "ObjectExpression";
__n27 := {  };
__n27["type"] := "Property";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "get";
__n27["key"] := __n28;
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1.;
__n34["raw"] := "1";
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n35 := [  ];
__n31["variableDeclarations"] := __n35;
__n36 := [  ];
__n31["functionDeclarations"] := __n36;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["expression"] := false;
__n29["async"] := false;
__n27["value"] := __n29;
__n27["computed"] := false;
__n27["kind"] := "init";
__n27["shorthand"] := false;
__n37 := {  };
__n37["type"] := "Property";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "configurable";
__n37["key"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n37["value"] := __n39;
__n37["computed"] := false;
__n37["kind"] := "init";
__n37["shorthand"] := false;
__n26 := [ __n27, __n37 ];
__n25["properties"] := __n26;
__n22 := [ __n23, __n24, __n25 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "arr";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "reduceRight";
__n44["raw"] := "\"reduceRight\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "callbackfn";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "initialValue";
__n47["raw"] := "\"initialValue\"";
__n45 := [ __n46, __n47 ];
__n41["arguments"] := __n45;
__n40["expression"] := __n41;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "testResult";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "testResult !== true";
__n53["raw"] := "'testResult !== true'";
__n51 := [ __n52, __n53 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n1 := [ __n2, __n7, __n9, __n17, __n40, __n48 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n54 := [ "testResult", "arr" ];
__n0["variableDeclarations"] := __n54;
__n56 := {  };
__n56["type"] := "FunctionDeclaration";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "callbackfn";
__n56["id"] := __n57;
__n58 := [ "prevVal", "curVal", "idx", "obj" ];
__n56["params"] := __n58;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "===";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "idx";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n62["right"] := __n64;
__n61["test"] := __n62;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "AssignmentExpression";
__n68["operator"] := "=";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "testResult";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "===";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "curVal";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n70["right"] := __n72;
__n68["right"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n61["consequent"] := __n65;
__n61["alternate"] := null;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n73 := [  ];
__n59["variableDeclarations"] := __n73;
__n74 := [  ];
__n59["functionDeclarations"] := __n74;
__n59["codeType"] := "function";
__n59["strict"] := false;
__n56["body"] := __n59;
__n56["generator"] := false;
__n56["expression"] := false;
__n56["async"] := false;
__n55 := [ __n56 ];
__n0["functionDeclarations"] := __n55;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}