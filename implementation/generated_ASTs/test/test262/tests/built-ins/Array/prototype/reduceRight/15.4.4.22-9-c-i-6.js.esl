function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Object";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "defineProperty";
__n13["raw"] := "\"defineProperty\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Array";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "prototype";
__n17["raw"] := "\"prototype\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "1";
__n18["raw"] := "\"1\"";
__n19 := {  };
__n19["type"] := "ObjectExpression";
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "get";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ReturnStatement";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "11";
__n28["raw"] := "\"11\"";
__n27["argument"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n29 := [  ];
__n25["variableDeclarations"] := __n29;
__n30 := [  ];
__n25["functionDeclarations"] := __n30;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["expression"] := false;
__n23["async"] := false;
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n31 := {  };
__n31["type"] := "Property";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "configurable";
__n31["key"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n31["value"] := __n33;
__n31["computed"] := false;
__n31["kind"] := "init";
__n31["shorthand"] := false;
__n20 := [ __n21, __n31 ];
__n19["properties"] := __n20;
__n14 := [ __n15, __n18, __n19 ];
__n10["arguments"] := __n14;
__n9["expression"] := __n10;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "ArrayExpression";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.;
__n39["raw"] := "0";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 2.;
__n41["raw"] := "2";
__n38 := [ __n39, __n40, __n41 ];
__n37["elements"] := __n38;
__n36["object"] := __n37;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "reduceRight";
__n42["raw"] := "\"reduceRight\"";
__n36["property"] := __n42;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "callbackfn";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "initialValue";
__n45["raw"] := "\"initialValue\"";
__n43 := [ __n44, __n45 ];
__n35["arguments"] := __n43;
__n34["expression"] := __n35;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "assert";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "testResult";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "testResult !== true";
__n51["raw"] := "'testResult !== true'";
__n49 := [ __n50, __n51 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n1 := [ __n2, __n7, __n9, __n34, __n46 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n52 := [ "testResult" ];
__n0["variableDeclarations"] := __n52;
__n54 := {  };
__n54["type"] := "FunctionDeclaration";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "callbackfn";
__n54["id"] := __n55;
__n56 := [ "prevVal", "curVal", "idx", "obj" ];
__n54["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "===";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "idx";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 1.;
__n62["raw"] := "1";
__n60["right"] := __n62;
__n59["test"] := __n60;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "AssignmentExpression";
__n66["operator"] := "=";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "testResult";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "===";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "curVal";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n68["right"] := __n70;
__n66["right"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n59["consequent"] := __n63;
__n59["alternate"] := null;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n71 := [  ];
__n57["variableDeclarations"] := __n71;
__n72 := [  ];
__n57["functionDeclarations"] := __n72;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n54["body"] := __n57;
__n54["generator"] := false;
__n54["expression"] := false;
__n54["async"] := false;
__n53 := [ __n54 ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}