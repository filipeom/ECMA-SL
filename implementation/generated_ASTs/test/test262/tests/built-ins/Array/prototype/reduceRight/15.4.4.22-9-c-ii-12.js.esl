function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arr";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 12.;
__n14["raw"] := "12";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 13.;
__n15["raw"] := "13";
__n12 := [ __n13, __n14, __n15 ];
__n11["elements"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "initVal";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 6.99;
__n20["raw"] := "6.99";
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "callbackfn";
__n21["expression"] := __n22;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "assert";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "sameValue";
__n27["raw"] := "\"sameValue\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "arr";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "reduceRight";
__n32["raw"] := "\"reduceRight\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "callbackfn";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "initVal";
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "arr.reduceRight(callbackfn, initVal)";
__n37["raw"] := "'arr.reduceRight(callbackfn, initVal)'";
__n28 := [ __n29, __n36, __n37 ];
__n24["arguments"] := __n28;
__n23["expression"] := __n24;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "assert";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "testResult";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "testResult !== true";
__n43["raw"] := "'testResult !== true'";
__n41 := [ __n42, __n43 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n1 := [ __n2, __n7, __n16, __n21, __n23, __n38 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n44 := [ "testResult", "arr", "initVal" ];
__n0["variableDeclarations"] := __n44;
__n46 := {  };
__n46["type"] := "FunctionDeclaration";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "callbackfn";
__n46["id"] := __n47;
__n48 := [ "prevVal", "curVal", "idx" ];
__n46["params"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "===";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "idx";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 2.;
__n54["raw"] := "2";
__n52["right"] := __n54;
__n51["test"] := __n52;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "AssignmentExpression";
__n58["operator"] := "=";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "testResult";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "===";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "prevVal";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "initVal";
__n60["right"] := __n62;
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n51["consequent"] := __n55;
__n51["alternate"] := null;
__n63 := {  };
__n63["type"] := "ReturnStatement";
__n64 := {  };
__n64["type"] := "LogicalExpression";
__n64["operator"] := "&&";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := ">";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "curVal";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 10.;
__n67["raw"] := "10";
__n65["right"] := __n67;
__n64["left"] := __n65;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "===";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n69["computed"] := true;
__n70 := {  };
__n70["type"] := "MemberExpression";
__n70["computed"] := true;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arguments";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 3.;
__n72["raw"] := "3";
__n70["property"] := __n72;
__n69["object"] := __n70;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "idx";
__n69["property"] := __n73;
__n68["left"] := __n69;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "curVal";
__n68["right"] := __n74;
__n64["right"] := __n68;
__n63["argument"] := __n64;
__n50 := [ __n51, __n63 ];
__n49["body"] := __n50;
__n75 := [  ];
__n49["variableDeclarations"] := __n75;
__n76 := [  ];
__n49["functionDeclarations"] := __n76;
__n49["codeType"] := "function";
__n49["strict"] := false;
__n46["body"] := __n49;
__n46["generator"] := false;
__n46["expression"] := false;
__n46["async"] := false;
__n45 := [ __n46 ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}