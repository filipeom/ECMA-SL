function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 11.;
__n8["raw"] := "11";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 12.;
__n9["raw"] := "12";
__n7 := [ __n8, __n9 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "testResult";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := false;
__n14["raw"] := "false";
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "initVal";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 6.99;
__n19["raw"] := "6.99";
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "callbackfn";
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "arr";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "reduceRight";
__n26["raw"] := "\"reduceRight\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "callbackfn";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "initVal";
__n27 := [ __n28, __n29 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "assert";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "testResult";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "testResult !== true";
__n35["raw"] := "'testResult !== true'";
__n33 := [ __n34, __n35 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n1 := [ __n2, __n10, __n15, __n20, __n22, __n30 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [ "arr", "testResult", "initVal" ];
__n0["variableDeclarations"] := __n36;
__n38 := {  };
__n38["type"] := "FunctionDeclaration";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "callbackfn";
__n38["id"] := __n39;
__n40 := [ "prevVal", "curVal", "idx", "obj" ];
__n38["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "idx";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.;
__n46["raw"] := "1";
__n44["right"] := __n46;
__n43["test"] := __n44;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "testResult";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "===";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "prevVal";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "initVal";
__n52["right"] := __n54;
__n50["right"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n43["consequent"] := __n47;
__n43["alternate"] := null;
__n55 := {  };
__n55["type"] := "ReturnStatement";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "curVal";
__n55["argument"] := __n56;
__n42 := [ __n43, __n55 ];
__n41["body"] := __n42;
__n57 := [  ];
__n41["variableDeclarations"] := __n57;
__n58 := [  ];
__n41["functionDeclarations"] := __n58;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n38["body"] := __n41;
__n38["generator"] := false;
__n38["expression"] := false;
__n38["async"] := false;
__n37 := [ __n38 ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}