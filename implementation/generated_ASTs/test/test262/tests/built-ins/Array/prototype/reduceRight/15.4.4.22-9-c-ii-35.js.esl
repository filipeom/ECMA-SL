function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arg";
__n9["id"] := __n10;
__n9["init"] := null;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "callbackfn";
__n11["expression"] := __n12;
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "obj";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "ObjectExpression";
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n19["key"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 11.;
__n21["raw"] := "11";
__n19["value"] := __n21;
__n19["computed"] := false;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n22 := {  };
__n22["type"] := "Property";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "length";
__n22["key"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n22["value"] := __n24;
__n22["computed"] := false;
__n22["kind"] := "init";
__n22["shorthand"] := false;
__n18 := [ __n19, __n22 ];
__n17["properties"] := __n18;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "FunctionExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "fun";
__n27["id"] := __n28;
__n29 := [  ];
__n27["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "AssignmentExpression";
__n33["operator"] := "=";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "arg";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arguments";
__n33["right"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n36 := [  ];
__n30["variableDeclarations"] := __n36;
__n37 := [  ];
__n30["functionDeclarations"] := __n37;
__n30["codeType"] := "function";
__n30["strict"] := false;
__n27["body"] := __n30;
__n27["generator"] := false;
__n27["expression"] := false;
__n27["async"] := false;
__n26["callee"] := __n27;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 10.;
__n39["raw"] := "10";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 11.;
__n40["raw"] := "11";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 12.;
__n41["raw"] := "12";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 13.;
__n42["raw"] := "13";
__n38 := [ __n39, __n40, __n41, __n42 ];
__n26["arguments"] := __n38;
__n25["expression"] := __n26;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "sameValue";
__n47["raw"] := "\"sameValue\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Array";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "prototype";
__n54["raw"] := "\"prototype\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["object"] := __n52;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "reduceRight";
__n55["raw"] := "\"reduceRight\"";
__n51["property"] := __n55;
__n51["computed"] := true;
__n50["object"] := __n51;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "call";
__n56["raw"] := "\"call\"";
__n50["property"] := __n56;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "obj";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "callbackfn";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "arg";
__n57 := [ __n58, __n59, __n60 ];
__n49["arguments"] := __n57;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := true;
__n61["raw"] := "true";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "Array.prototype.reduceRight.call(obj, callbackfn, arg)";
__n62["raw"] := "'Array.prototype.reduceRight.call(obj, callbackfn, arg)'";
__n48 := [ __n49, __n61, __n62 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "accessed";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "accessed !== true";
__n68["raw"] := "'accessed !== true'";
__n66 := [ __n67, __n68 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n1 := [ __n2, __n7, __n11, __n13, __n25, __n43, __n63 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n69 := [ "accessed", "arg", "obj" ];
__n0["variableDeclarations"] := __n69;
__n71 := {  };
__n71["type"] := "FunctionDeclaration";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "callbackfn";
__n71["id"] := __n72;
__n73 := [ "prevVal", "curVal", "idx", "obj" ];
__n71["params"] := __n73;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := "=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "accessed";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := true;
__n79["raw"] := "true";
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n80 := {  };
__n80["type"] := "ReturnStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "===";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "prevVal";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "arg";
__n81["right"] := __n83;
__n80["argument"] := __n81;
__n75 := [ __n76, __n80 ];
__n74["body"] := __n75;
__n84 := [  ];
__n74["variableDeclarations"] := __n84;
__n85 := [  ];
__n74["functionDeclarations"] := __n85;
__n74["codeType"] := "function";
__n74["strict"] := false;
__n71["body"] := __n74;
__n71["generator"] := false;
__n71["expression"] := false;
__n71["async"] := false;
__n70 := [ __n71 ];
__n0["functionDeclarations"] := __n70;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}