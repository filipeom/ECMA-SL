function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "reverse";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "reverse";
__n15["raw"] := "\"reverse\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n16 := [  ];
__n12["arguments"] := __n16;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "reverse";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "x";
__n18["right"] := __n20;
__n17["test"] := __n18;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: x = []; x.reverse() === x. Actual: ";
__n28["raw"] := "'#1: x = []; x.reverse() === x. Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "reverse";
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n17["consequent"] := __n21;
__n17["alternate"] := null;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "ArrayExpression";
__n34 := [  ];
__n33["elements"] := __n34;
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "AssignmentExpression";
__n36["operator"] := "=";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n37["computed"] := true;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.;
__n39["raw"] := "0";
__n37["property"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n36["right"] := __n40;
__n35["expression"] := __n36;
__n41 := {  };
__n41["type"] := "VariableDeclaration";
__n43 := {  };
__n43["type"] := "VariableDeclarator";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "reverse";
__n43["id"] := __n44;
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "reverse";
__n48["raw"] := "\"reverse\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["callee"] := __n46;
__n49 := [  ];
__n45["arguments"] := __n49;
__n43["init"] := __n45;
__n42 := [ __n43 ];
__n41["declarations"] := __n42;
__n41["kind"] := "var";
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "reverse";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n51["right"] := __n53;
__n50["test"] := __n51;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#2: x = []; x[0] = 1; x.reverse() === x. Actual: ";
__n61["raw"] := "'#2: x = []; x[0] = 1; x.reverse() === x. Actual: '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "reverse";
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n50["consequent"] := __n54;
__n50["alternate"] := null;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "AssignmentExpression";
__n64["operator"] := "=";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "NewExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "Array";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 1.;
__n69["raw"] := "1";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 2.;
__n70["raw"] := "2";
__n68 := [ __n69, __n70 ];
__n66["arguments"] := __n68;
__n64["right"] := __n66;
__n63["expression"] := __n64;
__n71 := {  };
__n71["type"] := "VariableDeclaration";
__n73 := {  };
__n73["type"] := "VariableDeclarator";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "reverse";
__n73["id"] := __n74;
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "reverse";
__n78["raw"] := "\"reverse\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n79 := [  ];
__n75["arguments"] := __n79;
__n73["init"] := __n75;
__n72 := [ __n73 ];
__n71["declarations"] := __n72;
__n71["kind"] := "var";
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "reverse";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "x";
__n81["right"] := __n83;
__n80["test"] := __n81;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "+";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#3: x = new Array(1,2); x.reverse() === x. Actual: ";
__n91["raw"] := "'#3: x = new Array(1,2); x.reverse() === x. Actual: '";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "reverse";
__n90["right"] := __n92;
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n80["consequent"] := __n84;
__n80["alternate"] := null;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "MemberExpression";
__n95["computed"] := true;
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "x";
__n95["object"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 0.;
__n97["raw"] := "0";
__n95["property"] := __n97;
__n94["left"] := __n95;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 2.;
__n98["raw"] := "2";
__n94["right"] := __n98;
__n93["test"] := __n94;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#4: x = new Array(1,2); x.reverse(); x[0] === 2. Actual: ";
__n106["raw"] := "'#4: x = new Array(1,2); x.reverse(); x[0] === 2. Actual: '";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "MemberExpression";
__n107["computed"] := true;
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "x";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := 0.;
__n109["raw"] := "0";
__n107["property"] := __n109;
__n105["right"] := __n107;
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n93["consequent"] := __n99;
__n93["alternate"] := null;
__n110 := {  };
__n110["type"] := "IfStatement";
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "!==";
__n112 := {  };
__n112["type"] := "MemberExpression";
__n112["computed"] := true;
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "x";
__n112["object"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 1.;
__n114["raw"] := "1";
__n112["property"] := __n114;
__n111["left"] := __n112;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 1.;
__n115["raw"] := "1";
__n111["right"] := __n115;
__n110["test"] := __n111;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "ExpressionStatement";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "$ERROR";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "BinaryExpression";
__n122["operator"] := "+";
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "#5: x = new Array(1,2); x.reverse(); x[1] === 1. Actual: ";
__n123["raw"] := "'#5: x = new Array(1,2); x.reverse(); x[1] === 1. Actual: '";
__n122["left"] := __n123;
__n124 := {  };
__n124["type"] := "MemberExpression";
__n124["computed"] := true;
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "x";
__n124["object"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 1.;
__n126["raw"] := "1";
__n124["property"] := __n126;
__n122["right"] := __n124;
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["expression"] := __n119;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n110["consequent"] := __n116;
__n110["alternate"] := null;
__n127 := {  };
__n127["type"] := "IfStatement";
__n128 := {  };
__n128["type"] := "BinaryExpression";
__n128["operator"] := "!==";
__n129 := {  };
__n129["type"] := "MemberExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "x";
__n129["object"] := __n130;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "length";
__n131["raw"] := "\"length\"";
__n129["property"] := __n131;
__n129["computed"] := true;
__n128["left"] := __n129;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 2.;
__n132["raw"] := "2";
__n128["right"] := __n132;
__n127["test"] := __n128;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$ERROR";
__n136["callee"] := __n137;
__n139 := {  };
__n139["type"] := "BinaryExpression";
__n139["operator"] := "+";
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "#6: x = new Array(1,2); x.reverse(); x.length === 2. Actual: ";
__n140["raw"] := "'#6: x = new Array(1,2); x.reverse(); x.length === 2. Actual: '";
__n139["left"] := __n140;
__n141 := {  };
__n141["type"] := "MemberExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "x";
__n141["object"] := __n142;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "length";
__n143["raw"] := "\"length\"";
__n141["property"] := __n143;
__n141["computed"] := true;
__n139["right"] := __n141;
__n138 := [ __n139 ];
__n136["arguments"] := __n138;
__n135["expression"] := __n136;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n127["consequent"] := __n133;
__n127["alternate"] := null;
__n1 := [ __n2, __n8, __n17, __n30, __n35, __n41, __n50, __n63, __n71, __n80, __n93, __n110, __n127 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n144 := [ "x", "reverse" ];
__n0["variableDeclarations"] := __n144;
__n145 := [  ];
__n0["functionDeclarations"] := __n145;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}