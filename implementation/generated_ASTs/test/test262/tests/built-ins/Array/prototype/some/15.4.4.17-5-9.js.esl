function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "objFunction";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n9 := [  ];
__n8["body"] := __n9;
__n10 := [  ];
__n8["variableDeclarations"] := __n10;
__n11 := [  ];
__n8["functionDeclarations"] := __n11;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "assert";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "ArrayExpression";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 11.;
__n22["raw"] := "11";
__n21 := [ __n22 ];
__n20["elements"] := __n21;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "some";
__n23["raw"] := "\"some\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "callbackfn";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "objFunction";
__n24 := [ __n25, __n26 ];
__n18["arguments"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "[11].some(callbackfn, objFunction) !== true";
__n27["raw"] := "'[11].some(callbackfn, objFunction) !== true'";
__n17 := [ __n18, __n27 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n1 := [ __n2, __n12, __n14 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n28 := [ "objFunction" ];
__n0["variableDeclarations"] := __n28;
__n30 := {  };
__n30["type"] := "FunctionDeclaration";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "callbackfn";
__n30["id"] := __n31;
__n32 := [ "val", "idx", "obj" ];
__n30["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "===";
__n37 := {  };
__n37["type"] := "ThisExpression";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "objFunction";
__n36["right"] := __n38;
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n39 := [  ];
__n33["variableDeclarations"] := __n39;
__n40 := [  ];
__n33["functionDeclarations"] := __n40;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n30["body"] := __n33;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n29 := [ __n30 ];
__n0["functionDeclarations"] := __n29;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}