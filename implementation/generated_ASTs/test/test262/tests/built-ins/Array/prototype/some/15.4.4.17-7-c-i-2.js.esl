function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "kValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "callbackfn";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "assert";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "ArrayExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "kValue";
__n17 := [ __n18 ];
__n16["elements"] := __n17;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "some";
__n19["raw"] := "\"some\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "callbackfn";
__n20 := [ __n21 ];
__n14["arguments"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "[kValue].some(callbackfn) !== true";
__n22["raw"] := "'[kValue].some(callbackfn) !== true'";
__n13 := [ __n14, __n22 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n1 := [ __n2, __n8, __n10 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n23 := [ "kValue" ];
__n0["variableDeclarations"] := __n23;
__n25 := {  };
__n25["type"] := "FunctionDeclaration";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "callbackfn";
__n25["id"] := __n26;
__n27 := [ "val", "idx", "obj" ];
__n25["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "idx";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 0.;
__n33["raw"] := "0";
__n31["right"] := __n33;
__n30["test"] := __n31;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "===";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "kValue";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "val";
__n37["right"] := __n39;
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n30["consequent"] := __n34;
__n30["alternate"] := null;
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := false;
__n41["raw"] := "false";
__n40["argument"] := __n41;
__n29 := [ __n30, __n40 ];
__n28["body"] := __n29;
__n42 := [  ];
__n28["variableDeclarations"] := __n42;
__n43 := [  ];
__n28["functionDeclarations"] := __n43;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n25["body"] := __n28;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n24 := [ __n25 ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}