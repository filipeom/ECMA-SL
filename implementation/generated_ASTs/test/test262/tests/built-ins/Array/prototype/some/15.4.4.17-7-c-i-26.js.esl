function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "firstResult";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "secondResult";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "func";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [ "a", "b" ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ReturnStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Array";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "prototype";
__n28["raw"] := "\"prototype\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["object"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "some";
__n29["raw"] := "\"some\"";
__n25["property"] := __n29;
__n25["computed"] := true;
__n24["object"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "call";
__n30["raw"] := "\"call\"";
__n24["property"] := __n30;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "arguments";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "callbackfn";
__n31 := [ __n32, __n33 ];
__n23["arguments"] := __n31;
__n22["argument"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n34 := [  ];
__n20["variableDeclarations"] := __n34;
__n35 := [  ];
__n20["functionDeclarations"] := __n35;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["expression"] := false;
__n18["async"] := false;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "func";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 11.;
__n45["raw"] := "11";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 9.;
__n46["raw"] := "9";
__n44 := [ __n45, __n46 ];
__n42["arguments"] := __n44;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := false;
__n47["raw"] := "false";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "func(11, 9)";
__n48["raw"] := "'func(11, 9)'";
__n41 := [ __n42, __n47, __n48 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "assert";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "firstResult";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "firstResult !== true";
__n54["raw"] := "'firstResult !== true'";
__n52 := [ __n53, __n54 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "assert";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "secondResult";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "secondResult !== true";
__n60["raw"] := "'secondResult !== true'";
__n58 := [ __n59, __n60 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n1 := [ __n2, __n7, __n12, __n14, __n36, __n49, __n55 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n61 := [ "firstResult", "secondResult", "func" ];
__n0["variableDeclarations"] := __n61;
__n63 := {  };
__n63["type"] := "FunctionDeclaration";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "callbackfn";
__n63["id"] := __n64;
__n65 := [ "val", "idx", "obj" ];
__n63["params"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "===";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "idx";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 0.;
__n71["raw"] := "0";
__n69["right"] := __n71;
__n68["test"] := __n69;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "AssignmentExpression";
__n75["operator"] := "=";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "firstResult";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "===";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "val";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 11.;
__n79["raw"] := "11";
__n77["right"] := __n79;
__n75["right"] := __n77;
__n74["expression"] := __n75;
__n80 := {  };
__n80["type"] := "ReturnStatement";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := false;
__n81["raw"] := "false";
__n80["argument"] := __n81;
__n73 := [ __n74, __n80 ];
__n72["body"] := __n73;
__n68["consequent"] := __n72;
__n82 := {  };
__n82["type"] := "IfStatement";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "===";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "idx";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 1.;
__n85["raw"] := "1";
__n83["right"] := __n85;
__n82["test"] := __n83;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "AssignmentExpression";
__n89["operator"] := "=";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "secondResult";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "===";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "val";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 9.;
__n93["raw"] := "9";
__n91["right"] := __n93;
__n89["right"] := __n91;
__n88["expression"] := __n89;
__n94 := {  };
__n94["type"] := "ReturnStatement";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := false;
__n95["raw"] := "false";
__n94["argument"] := __n95;
__n87 := [ __n88, __n94 ];
__n86["body"] := __n87;
__n82["consequent"] := __n86;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ReturnStatement";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := true;
__n99["raw"] := "true";
__n98["argument"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n82["alternate"] := __n96;
__n68["alternate"] := __n82;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n100 := [  ];
__n66["variableDeclarations"] := __n100;
__n101 := [  ];
__n66["functionDeclarations"] := __n101;
__n66["codeType"] := "function";
__n66["strict"] := false;
__n63["body"] := __n66;
__n63["generator"] := false;
__n63["expression"] := false;
__n63["async"] := false;
__n62 := [ __n63 ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}