function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "arr";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ArrayExpression";
__n14 := [  ];
__n13["elements"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "=";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n17["computed"] := true;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "arr";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 10.;
__n19["raw"] := "10";
__n17["property"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 100.;
__n20["raw"] := "100";
__n16["right"] := __n20;
__n15["expression"] := __n16;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Object";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "defineProperty";
__n25["raw"] := "\"defineProperty\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "arr";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "0";
__n28["raw"] := "\"0\"";
__n29 := {  };
__n29["type"] := "ObjectExpression";
__n31 := {  };
__n31["type"] := "Property";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "get";
__n31["key"] := __n32;
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [  ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ThrowStatement";
__n38 := {  };
__n38["type"] := "NewExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "RangeError";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "unhandle exception happened in getter";
__n41["raw"] := "\"unhandle exception happened in getter\"";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["argument"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n42 := [  ];
__n35["variableDeclarations"] := __n42;
__n43 := [  ];
__n35["functionDeclarations"] := __n43;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["expression"] := false;
__n33["async"] := false;
__n31["value"] := __n33;
__n31["computed"] := false;
__n31["kind"] := "init";
__n31["shorthand"] := false;
__n44 := {  };
__n44["type"] := "Property";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "configurable";
__n44["key"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := true;
__n46["raw"] := "true";
__n44["value"] := __n46;
__n44["computed"] := false;
__n44["kind"] := "init";
__n44["shorthand"] := false;
__n30 := [ __n31, __n44 ];
__n29["properties"] := __n30;
__n26 := [ __n27, __n28, __n29 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "throws";
__n51["raw"] := "\"throws\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "RangeError";
__n54 := {  };
__n54["type"] := "FunctionExpression";
__n54["id"] := null;
__n55 := [  ];
__n54["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "arr";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "some";
__n62["raw"] := "\"some\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "callbackfn";
__n63 := [ __n64 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n65 := [  ];
__n56["variableDeclarations"] := __n65;
__n66 := [  ];
__n56["functionDeclarations"] := __n66;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n54["body"] := __n56;
__n54["generator"] := false;
__n54["expression"] := false;
__n54["async"] := false;
__n52 := [ __n53, __n54 ];
__n48["arguments"] := __n52;
__n47["expression"] := __n48;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "assert";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "sameValue";
__n71["raw"] := "\"sameValue\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n68["callee"] := __n69;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "accessed";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := false;
__n74["raw"] := "false";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "accessed";
__n75["raw"] := "'accessed'";
__n72 := [ __n73, __n74, __n75 ];
__n68["arguments"] := __n72;
__n67["expression"] := __n68;
__n1 := [ __n2, __n7, __n9, __n15, __n21, __n47, __n67 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n76 := [ "accessed", "arr" ];
__n0["variableDeclarations"] := __n76;
__n78 := {  };
__n78["type"] := "FunctionDeclaration";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "callbackfn";
__n78["id"] := __n79;
__n80 := [ "val", "idx", "obj" ];
__n78["params"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := ">";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "idx";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 0.;
__n86["raw"] := "0";
__n84["right"] := __n86;
__n83["test"] := __n84;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "AssignmentExpression";
__n90["operator"] := "=";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "accessed";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := true;
__n92["raw"] := "true";
__n90["right"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n83["consequent"] := __n87;
__n83["alternate"] := null;
__n93 := {  };
__n93["type"] := "ReturnStatement";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := true;
__n94["raw"] := "true";
__n93["argument"] := __n94;
__n82 := [ __n83, __n93 ];
__n81["body"] := __n82;
__n95 := [  ];
__n81["variableDeclarations"] := __n95;
__n96 := [  ];
__n81["functionDeclarations"] := __n96;
__n81["codeType"] := "function";
__n81["strict"] := false;
__n78["body"] := __n81;
__n78["generator"] := false;
__n78["expression"] := false;
__n78["async"] := false;
__n77 := [ __n78 ];
__n0["functionDeclarations"] := __n77;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}