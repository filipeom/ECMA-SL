function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "kValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "abc";
__n6["raw"] := "\"abc\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n11["computed"] := true;
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Array";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "prototype";
__n14["raw"] := "\"prototype\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["object"] := __n12;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n11["property"] := __n15;
__n10["left"] := __n11;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 11.;
__n16["raw"] := "11";
__n10["right"] := __n16;
__n9["expression"] := __n10;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "assert";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "ArrayExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "kValue";
__n24 := [ __n25 ];
__n23["elements"] := __n24;
__n22["object"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "some";
__n26["raw"] := "\"some\"";
__n22["property"] := __n26;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "callbackfn";
__n27 := [ __n28 ];
__n21["arguments"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "[kValue].some(callbackfn) !== true";
__n29["raw"] := "'[kValue].some(callbackfn) !== true'";
__n20 := [ __n21, __n29 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n1 := [ __n2, __n7, __n9, __n17 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n30 := [ "kValue" ];
__n0["variableDeclarations"] := __n30;
__n32 := {  };
__n32["type"] := "FunctionDeclaration";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "callbackfn";
__n32["id"] := __n33;
__n34 := [ "val", "idx", "obj" ];
__n32["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "===";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "idx";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.;
__n40["raw"] := "0";
__n38["right"] := __n40;
__n37["test"] := __n38;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "val";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "kValue";
__n44["right"] := __n46;
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n37["consequent"] := __n41;
__n37["alternate"] := null;
__n47 := {  };
__n47["type"] := "ReturnStatement";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := false;
__n48["raw"] := "false";
__n47["argument"] := __n48;
__n36 := [ __n37, __n47 ];
__n35["body"] := __n36;
__n49 := [  ];
__n35["variableDeclarations"] := __n49;
__n50 := [  ];
__n35["functionDeclarations"] := __n50;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n32["body"] := __n35;
__n32["generator"] := false;
__n32["expression"] := false;
__n32["async"] := false;
__n31 := [ __n32 ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}