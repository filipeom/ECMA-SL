function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "arr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ArrayExpression";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 3.;
__n13["raw"] := "3";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 4.;
__n14["raw"] := "4";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 5.;
__n15["raw"] := "5";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 6.;
__n16["raw"] := "6";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 7.;
__n17["raw"] := "7";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 8.;
__n18["raw"] := "8";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 9.;
__n19["raw"] := "9";
__n9 := [ __n10, __n11, __n12, __n13, __n14, __n15, __n16, __n17, __n18, __n19 ];
__n8["elements"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "sameValue";
__n24["raw"] := "\"sameValue\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "arr";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "some";
__n29["raw"] := "\"some\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "callbackfn";
__n30 := [ __n31 ];
__n26["arguments"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := false;
__n32["raw"] := "false";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "arr.some(callbackfn)";
__n33["raw"] := "'arr.some(callbackfn)'";
__n25 := [ __n26, __n32, __n33 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n1 := [ __n2, __n4, __n20 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n34 := [ "arr" ];
__n0["variableDeclarations"] := __n34;
__n36 := {  };
__n36["type"] := "FunctionDeclaration";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "callbackfn";
__n36["id"] := __n37;
__n38 := [ "val", "idx", "obj" ];
__n36["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n43["computed"] := true;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "obj";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "idx";
__n43["property"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "val";
__n42["right"] := __n46;
__n41["test"] := __n42;
__n47 := {  };
__n47["type"] := "ReturnStatement";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := false;
__n48["raw"] := "false";
__n47["argument"] := __n48;
__n41["consequent"] := __n47;
__n49 := {  };
__n49["type"] := "ReturnStatement";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := true;
__n50["raw"] := "true";
__n49["argument"] := __n50;
__n41["alternate"] := __n49;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n51 := [  ];
__n39["variableDeclarations"] := __n51;
__n52 := [  ];
__n39["functionDeclarations"] := __n52;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n36["body"] := __n39;
__n36["generator"] := false;
__n36["expression"] := false;
__n36["async"] := false;
__n35 := [ __n36 ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}