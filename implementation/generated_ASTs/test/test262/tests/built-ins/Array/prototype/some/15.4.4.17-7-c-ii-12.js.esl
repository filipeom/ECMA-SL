function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "assert";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 9.;
__n12["raw"] := "9";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 12.;
__n13["raw"] := "12";
__n11 := [ __n12, __n13 ];
__n10["elements"] := __n11;
__n9["object"] := __n10;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "some";
__n14["raw"] := "\"some\"";
__n9["property"] := __n14;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "callbackfn";
__n15 := [ __n16 ];
__n8["arguments"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "[9, 12].some(callbackfn) !== true";
__n17["raw"] := "'[9, 12].some(callbackfn) !== true'";
__n7 := [ __n8, __n17 ];
__n5["arguments"] := __n7;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n18 := [  ];
__n0["variableDeclarations"] := __n18;
__n20 := {  };
__n20["type"] := "FunctionDeclaration";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "callbackfn";
__n20["id"] := __n21;
__n22 := [ "val", "idx", "obj" ];
__n20["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ReturnStatement";
__n26 := {  };
__n26["type"] := "LogicalExpression";
__n26["operator"] := "&&";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := ">";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "val";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 10.;
__n29["raw"] := "10";
__n27["right"] := __n29;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "===";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n31["computed"] := true;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "obj";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "idx";
__n31["property"] := __n33;
__n30["left"] := __n31;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "val";
__n30["right"] := __n34;
__n26["right"] := __n30;
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n35 := [  ];
__n23["variableDeclarations"] := __n35;
__n36 := [  ];
__n23["functionDeclarations"] := __n36;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n20["body"] := __n23;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19 := [ __n20 ];
__n0["functionDeclarations"] := __n19;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}