function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 2.;
__n10["raw"] := "2";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 3.;
__n11["raw"] := "3";
__n7 := [ __n8, __n9, __n10, __n11 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "arr";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "splice";
__n19["raw"] := "\"splice\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "ObjectExpression";
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "valueOf";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n31 := [  ];
__n27["variableDeclarations"] := __n31;
__n32 := [  ];
__n27["functionDeclarations"] := __n32;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "toString";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 3.;
__n40["raw"] := "3";
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n41 := [  ];
__n37["variableDeclarations"] := __n41;
__n42 := [  ];
__n37["functionDeclarations"] := __n42;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["expression"] := false;
__n35["async"] := false;
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n22 := [ __n23, __n33 ];
__n21["properties"] := __n22;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 3.;
__n43["raw"] := "3";
__n20 := [ __n21, __n43 ];
__n16["arguments"] := __n20;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "AssignmentExpression";
__n45["operator"] := "=";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "arr";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "getClass";
__n48["raw"] := "\"getClass\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["left"] := __n46;
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Object";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "prototype";
__n52["raw"] := "\"prototype\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["object"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "toString";
__n53["raw"] := "\"toString\"";
__n49["property"] := __n53;
__n49["computed"] := true;
__n45["right"] := __n49;
__n44["expression"] := __n45;
__n54 := {  };
__n54["type"] := "IfStatement";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "!==";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "arr";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "getClass";
__n59["raw"] := "\"getClass\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n60 := [  ];
__n56["arguments"] := __n60;
__n55["left"] := __n56;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "[object ";
__n63["raw"] := "\"[object \"";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "Array";
__n64["raw"] := "\"Array\"";
__n62["right"] := __n64;
__n61["left"] := __n62;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "]";
__n65["raw"] := "\"]\"";
__n61["right"] := __n65;
__n55["right"] := __n61;
__n54["test"] := __n55;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#1: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr is Array object. Actual: ";
__n73["raw"] := "'#1: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr is Array object. Actual: '";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "arr";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "getClass";
__n77["raw"] := "\"getClass\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n74["callee"] := __n75;
__n78 := [  ];
__n74["arguments"] := __n78;
__n72["right"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n54["consequent"] := __n66;
__n54["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "!==";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "arr";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "length";
__n83["raw"] := "\"length\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 3.;
__n84["raw"] := "3";
__n80["right"] := __n84;
__n79["test"] := __n80;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#2: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr.length === 3. Actual: ";
__n92["raw"] := "'#2: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr.length === 3. Actual: '";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "MemberExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "arr";
__n93["object"] := __n94;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "length";
__n95["raw"] := "\"length\"";
__n93["property"] := __n95;
__n93["computed"] := true;
__n91["right"] := __n93;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n79["consequent"] := __n85;
__n79["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "MemberExpression";
__n98["computed"] := true;
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "arr";
__n98["object"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := 0.;
__n100["raw"] := "0";
__n98["property"] := __n100;
__n97["left"] := __n98;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 0.;
__n101["raw"] := "0";
__n97["right"] := __n101;
__n96["test"] := __n97;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$ERROR";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "+";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#3: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[0] === 0. Actual: ";
__n109["raw"] := "'#3: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[0] === 0. Actual: '";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "MemberExpression";
__n110["computed"] := true;
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "arr";
__n110["object"] := __n111;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 0.;
__n112["raw"] := "0";
__n110["property"] := __n112;
__n108["right"] := __n110;
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n103 := [ __n104 ];
__n102["body"] := __n103;
__n96["consequent"] := __n102;
__n96["alternate"] := null;
__n113 := {  };
__n113["type"] := "IfStatement";
__n114 := {  };
__n114["type"] := "BinaryExpression";
__n114["operator"] := "!==";
__n115 := {  };
__n115["type"] := "MemberExpression";
__n115["computed"] := true;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "arr";
__n115["object"] := __n116;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 1.;
__n117["raw"] := "1";
__n115["property"] := __n117;
__n114["left"] := __n115;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 1.;
__n118["raw"] := "1";
__n114["right"] := __n118;
__n113["test"] := __n114;
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "$ERROR";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "BinaryExpression";
__n125["operator"] := "+";
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "#4: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[1] === 1. Actual: ";
__n126["raw"] := "'#4: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[1] === 1. Actual: '";
__n125["left"] := __n126;
__n127 := {  };
__n127["type"] := "MemberExpression";
__n127["computed"] := true;
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "arr";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := 1.;
__n129["raw"] := "1";
__n127["property"] := __n129;
__n125["right"] := __n127;
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n120 := [ __n121 ];
__n119["body"] := __n120;
__n113["consequent"] := __n119;
__n113["alternate"] := null;
__n130 := {  };
__n130["type"] := "IfStatement";
__n131 := {  };
__n131["type"] := "BinaryExpression";
__n131["operator"] := "!==";
__n132 := {  };
__n132["type"] := "MemberExpression";
__n132["computed"] := true;
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "arr";
__n132["object"] := __n133;
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 2.;
__n134["raw"] := "2";
__n132["property"] := __n134;
__n131["left"] := __n132;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 2.;
__n135["raw"] := "2";
__n131["right"] := __n135;
__n130["test"] := __n131;
__n136 := {  };
__n136["type"] := "BlockStatement";
__n138 := {  };
__n138["type"] := "ExpressionStatement";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "$ERROR";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "BinaryExpression";
__n142["operator"] := "+";
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "#5: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[2] === 2. Actual: ";
__n143["raw"] := "'#5: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); arr[2] === 2. Actual: '";
__n142["left"] := __n143;
__n144 := {  };
__n144["type"] := "MemberExpression";
__n144["computed"] := true;
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "arr";
__n144["object"] := __n145;
__n146 := {  };
__n146["type"] := "Literal";
__n146["value"] := 2.;
__n146["raw"] := "2";
__n144["property"] := __n146;
__n142["right"] := __n144;
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["expression"] := __n139;
__n137 := [ __n138 ];
__n136["body"] := __n137;
__n130["consequent"] := __n136;
__n130["alternate"] := null;
__n147 := {  };
__n147["type"] := "IfStatement";
__n148 := {  };
__n148["type"] := "BinaryExpression";
__n148["operator"] := "!==";
__n149 := {  };
__n149["type"] := "MemberExpression";
__n150 := {  };
__n150["type"] := "Identifier";
__n150["name"] := "x";
__n149["object"] := __n150;
__n151 := {  };
__n151["type"] := "Literal";
__n151["value"] := "length";
__n151["raw"] := "\"length\"";
__n149["property"] := __n151;
__n149["computed"] := true;
__n148["left"] := __n149;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := 1.;
__n152["raw"] := "1";
__n148["right"] := __n152;
__n147["test"] := __n148;
__n153 := {  };
__n153["type"] := "BlockStatement";
__n155 := {  };
__n155["type"] := "ExpressionStatement";
__n156 := {  };
__n156["type"] := "CallExpression";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "$ERROR";
__n156["callee"] := __n157;
__n159 := {  };
__n159["type"] := "BinaryExpression";
__n159["operator"] := "+";
__n160 := {  };
__n160["type"] := "Literal";
__n160["value"] := "#6: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); x.length === 1. Actual: ";
__n160["raw"] := "'#6: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); x.length === 1. Actual: '";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "MemberExpression";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "x";
__n161["object"] := __n162;
__n163 := {  };
__n163["type"] := "Literal";
__n163["value"] := "length";
__n163["raw"] := "\"length\"";
__n161["property"] := __n163;
__n161["computed"] := true;
__n159["right"] := __n161;
__n158 := [ __n159 ];
__n156["arguments"] := __n158;
__n155["expression"] := __n156;
__n154 := [ __n155 ];
__n153["body"] := __n154;
__n147["consequent"] := __n153;
__n147["alternate"] := null;
__n164 := {  };
__n164["type"] := "IfStatement";
__n165 := {  };
__n165["type"] := "BinaryExpression";
__n165["operator"] := "!==";
__n166 := {  };
__n166["type"] := "MemberExpression";
__n166["computed"] := true;
__n167 := {  };
__n167["type"] := "Identifier";
__n167["name"] := "x";
__n166["object"] := __n167;
__n168 := {  };
__n168["type"] := "Literal";
__n168["value"] := 0.;
__n168["raw"] := "0";
__n166["property"] := __n168;
__n165["left"] := __n166;
__n169 := {  };
__n169["type"] := "Literal";
__n169["value"] := 3.;
__n169["raw"] := "3";
__n165["right"] := __n169;
__n164["test"] := __n165;
__n170 := {  };
__n170["type"] := "BlockStatement";
__n172 := {  };
__n172["type"] := "ExpressionStatement";
__n173 := {  };
__n173["type"] := "CallExpression";
__n174 := {  };
__n174["type"] := "Identifier";
__n174["name"] := "$ERROR";
__n173["callee"] := __n174;
__n176 := {  };
__n176["type"] := "BinaryExpression";
__n176["operator"] := "+";
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := "#7: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); x[0] === 3. Actual: ";
__n177["raw"] := "'#7: var x = [0,1,2,3]; var arr = x.splice({valueOf: function() {return 0}, toString: function() {return 3}},3); x[0] === 3. Actual: '";
__n176["left"] := __n177;
__n178 := {  };
__n178["type"] := "MemberExpression";
__n178["computed"] := true;
__n179 := {  };
__n179["type"] := "Identifier";
__n179["name"] := "x";
__n178["object"] := __n179;
__n180 := {  };
__n180["type"] := "Literal";
__n180["value"] := 0.;
__n180["raw"] := "0";
__n178["property"] := __n180;
__n176["right"] := __n178;
__n175 := [ __n176 ];
__n173["arguments"] := __n175;
__n172["expression"] := __n173;
__n171 := [ __n172 ];
__n170["body"] := __n171;
__n164["consequent"] := __n170;
__n164["alternate"] := null;
__n1 := [ __n2, __n12, __n44, __n54, __n79, __n96, __n113, __n130, __n147, __n164 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n181 := [ "x", "arr" ];
__n0["variableDeclarations"] := __n181;
__n182 := [  ];
__n0["functionDeclarations"] := __n182;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}