function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n10["computed"] := true;
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "0";
__n12["raw"] := "\"0\"";
__n10["property"] := __n12;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n9["right"] := __n13;
__n8["expression"] := __n9;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "assert";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "sameValue";
__n18["raw"] := "\"sameValue\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n20 := {  };
__n20["type"] := "MemberExpression";
__n20["computed"] := true;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "x";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 0.;
__n22["raw"] := "0";
__n20["property"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "The value of x[0] is expected to be 0";
__n24["raw"] := "'The value of x[0] is expected to be 0'";
__n19 := [ __n20, __n23, __n24 ];
__n15["arguments"] := __n19;
__n14["expression"] := __n15;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "y";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "ArrayExpression";
__n30 := [  ];
__n29["elements"] := __n30;
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := "=";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n33["computed"] := true;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "y";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "1";
__n35["raw"] := "\"1\"";
__n33["property"] := __n35;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n32["right"] := __n36;
__n31["expression"] := __n32;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "assert";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "sameValue";
__n41["raw"] := "\"sameValue\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n43 := {  };
__n43["type"] := "MemberExpression";
__n43["computed"] := true;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "y";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 1.;
__n45["raw"] := "1";
__n43["property"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.;
__n46["raw"] := "1";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "The value of y[1] is expected to be 1";
__n47["raw"] := "'The value of y[1] is expected to be 1'";
__n42 := [ __n43, __n46, __n47 ];
__n38["arguments"] := __n42;
__n37["expression"] := __n38;
__n1 := [ __n2, __n8, __n14, __n25, __n31, __n37 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n48 := [ "x", "y" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}