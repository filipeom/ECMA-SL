function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "throws";
__n6["raw"] := "\"throws\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "TypeError";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Array";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "from";
__n17["raw"] := "\"from\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "ArrayExpression";
__n20 := [  ];
__n19["elements"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 'null;
__n21["raw"] := "\"'null\"";
__n18 := [ __n19, __n21 ];
__n14["arguments"] := __n18;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n22 := [  ];
__n11["variableDeclarations"] := __n22;
__n23 := [  ];
__n11["functionDeclarations"] := __n23;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "Array.from([], null) throws a TypeError exception";
__n24["raw"] := "'Array.from([], null) throws a TypeError exception'";
__n7 := [ __n8, __n9, __n24 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "assert";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "throws";
__n29["raw"] := "\"throws\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "TypeError";
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [  ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "Array";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "from";
__n40["raw"] := "\"from\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "ArrayExpression";
__n43 := [  ];
__n42["elements"] := __n43;
__n44 := {  };
__n44["type"] := "ObjectExpression";
__n45 := [  ];
__n44["properties"] := __n45;
__n41 := [ __n42, __n44 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n46 := [  ];
__n34["variableDeclarations"] := __n46;
__n47 := [  ];
__n34["functionDeclarations"] := __n47;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "Array.from([], {}) throws a TypeError exception";
__n48["raw"] := "'Array.from([], {}) throws a TypeError exception'";
__n30 := [ __n31, __n32, __n48 ];
__n26["arguments"] := __n30;
__n25["expression"] := __n26;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "assert";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "throws";
__n53["raw"] := "\"throws\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "TypeError";
__n56 := {  };
__n56["type"] := "FunctionExpression";
__n56["id"] := null;
__n57 := [  ];
__n56["params"] := __n57;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Array";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "from";
__n64["raw"] := "\"from\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "ArrayExpression";
__n67 := [  ];
__n66["elements"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "string";
__n68["raw"] := "'string'";
__n65 := [ __n66, __n68 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n69 := [  ];
__n58["variableDeclarations"] := __n69;
__n70 := [  ];
__n58["functionDeclarations"] := __n70;
__n58["codeType"] := "function";
__n58["strict"] := false;
__n56["body"] := __n58;
__n56["generator"] := false;
__n56["async"] := false;
__n56["expression"] := false;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "Array.from([], \"string\") throws a TypeError exception";
__n71["raw"] := "'Array.from([], \"string\") throws a TypeError exception'";
__n54 := [ __n55, __n56, __n71 ];
__n50["arguments"] := __n54;
__n49["expression"] := __n50;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "assert";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "throws";
__n76["raw"] := "\"throws\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n73["callee"] := __n74;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "TypeError";
__n79 := {  };
__n79["type"] := "FunctionExpression";
__n79["id"] := null;
__n80 := [  ];
__n79["params"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Array";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "from";
__n87["raw"] := "\"from\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["callee"] := __n85;
__n89 := {  };
__n89["type"] := "ArrayExpression";
__n90 := [  ];
__n89["elements"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := true;
__n91["raw"] := "true";
__n88 := [ __n89, __n91 ];
__n84["arguments"] := __n88;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n92 := [  ];
__n81["variableDeclarations"] := __n92;
__n93 := [  ];
__n81["functionDeclarations"] := __n93;
__n81["codeType"] := "function";
__n81["strict"] := false;
__n79["body"] := __n81;
__n79["generator"] := false;
__n79["async"] := false;
__n79["expression"] := false;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "Array.from([], true) throws a TypeError exception";
__n94["raw"] := "'Array.from([], true) throws a TypeError exception'";
__n77 := [ __n78, __n79, __n94 ];
__n73["arguments"] := __n77;
__n72["expression"] := __n73;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "assert";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "throws";
__n99["raw"] := "\"throws\"";
__n97["property"] := __n99;
__n97["computed"] := true;
__n96["callee"] := __n97;
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "TypeError";
__n102 := {  };
__n102["type"] := "FunctionExpression";
__n102["id"] := null;
__n103 := [  ];
__n102["params"] := __n103;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "MemberExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "Array";
__n108["object"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "from";
__n110["raw"] := "\"from\"";
__n108["property"] := __n110;
__n108["computed"] := true;
__n107["callee"] := __n108;
__n112 := {  };
__n112["type"] := "ArrayExpression";
__n113 := [  ];
__n112["elements"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 42.;
__n114["raw"] := "42";
__n111 := [ __n112, __n114 ];
__n107["arguments"] := __n111;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n115 := [  ];
__n104["variableDeclarations"] := __n115;
__n116 := [  ];
__n104["functionDeclarations"] := __n116;
__n104["codeType"] := "function";
__n104["strict"] := false;
__n102["body"] := __n104;
__n102["generator"] := false;
__n102["async"] := false;
__n102["expression"] := false;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "Array.from([], 42) throws a TypeError exception";
__n117["raw"] := "'Array.from([], 42) throws a TypeError exception'";
__n100 := [ __n101, __n102, __n117 ];
__n96["arguments"] := __n100;
__n95["expression"] := __n96;
__n1 := [ __n2, __n25, __n49, __n72, __n95 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n118 := [  ];
__n0["variableDeclarations"] := __n118;
__n119 := [  ];
__n0["functionDeclarations"] := __n119;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}