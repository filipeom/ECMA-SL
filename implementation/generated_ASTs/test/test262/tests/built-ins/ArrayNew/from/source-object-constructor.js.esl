function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Array";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "from";
__n13["raw"] := "\"from\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["object"] := __n11;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "call";
__n14["raw"] := "\"call\"";
__n10["property"] := __n14;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n17 := {  };
__n17["type"] := "ArrayExpression";
__n18 := [  ];
__n17["elements"] := __n18;
__n15 := [ __n16, __n17 ];
__n9["arguments"] := __n15;
__n8["object"] := __n9;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "constructor";
__n19["raw"] := "\"constructor\"";
__n8["property"] := __n19;
__n8["computed"] := true;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Object";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "The value of Array.from.call(Object, []).constructor is expected to equal the value of Object";
__n21["raw"] := "'The value of Array.from.call(Object, []).constructor is expected to equal the value of Object'";
__n7 := [ __n8, __n20, __n21 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n22 := [  ];
__n0["variableDeclarations"] := __n22;
__n23 := [  ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}