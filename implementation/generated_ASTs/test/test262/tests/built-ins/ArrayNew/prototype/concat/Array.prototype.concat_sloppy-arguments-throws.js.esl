function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "args";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [ "a" ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ReturnStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "arguments";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n6["callee"] := __n7;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 2.;
__n17["raw"] := "2";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 3.;
__n18["raw"] := "3";
__n15 := [ __n16, __n17, __n18 ];
__n6["arguments"] := __n15;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Object";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "defineProperty";
__n23["raw"] := "\"defineProperty\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "args";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n27 := {  };
__n27["type"] := "ObjectExpression";
__n29 := {  };
__n29["type"] := "Property";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "get";
__n29["key"] := __n30;
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [  ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ThrowStatement";
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Test262Error";
__n36["callee"] := __n37;
__n38 := [  ];
__n36["arguments"] := __n38;
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n39 := [  ];
__n33["variableDeclarations"] := __n39;
__n40 := [  ];
__n33["functionDeclarations"] := __n40;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n29["value"] := __n31;
__n29["computed"] := false;
__n29["kind"] := "init";
__n29["shorthand"] := false;
__n28 := [ __n29 ];
__n27["properties"] := __n28;
__n24 := [ __n25, __n26, __n27 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n43["computed"] := true;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "args";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Symbol";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "isConcatSpreadable";
__n47["raw"] := "\"isConcatSpreadable\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n43["property"] := __n45;
__n42["left"] := __n43;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n42["right"] := __n48;
__n41["expression"] := __n42;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "assert";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "throws";
__n53["raw"] := "\"throws\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Test262Error";
__n56 := {  };
__n56["type"] := "FunctionExpression";
__n56["id"] := null;
__n57 := [  ];
__n56["params"] := __n57;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ReturnStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "ArrayExpression";
__n64 := [  ];
__n63["elements"] := __n64;
__n62["object"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "concat";
__n65["raw"] := "\"concat\"";
__n62["property"] := __n65;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "args";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "args";
__n66 := [ __n67, __n68 ];
__n61["arguments"] := __n66;
__n60["argument"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n69 := [  ];
__n58["variableDeclarations"] := __n69;
__n70 := [  ];
__n58["functionDeclarations"] := __n70;
__n58["codeType"] := "function";
__n58["strict"] := false;
__n56["body"] := __n58;
__n56["generator"] := false;
__n56["async"] := false;
__n56["expression"] := false;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "return [].concat(args, args) throws a Test262Error exception";
__n71["raw"] := "'return [].concat(args, args) throws a Test262Error exception'";
__n54 := [ __n55, __n56, __n71 ];
__n50["arguments"] := __n54;
__n49["expression"] := __n50;
__n1 := [ __n2, __n19, __n41, __n49 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n72 := [ "args" ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}