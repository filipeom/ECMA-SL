function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "length";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 5.;
__n10["raw"] := "5";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n13["computed"] := true;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "obj";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Symbol";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "isConcatSpreadable";
__n17["raw"] := "\"isConcatSpreadable\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n13["property"] := __n15;
__n12["left"] := __n13;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := true;
__n18["raw"] := "true";
__n12["right"] := __n18;
__n11["expression"] := __n12;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "assert";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "compareArray";
__n23["raw"] := "\"compareArray\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "ArrayExpression";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "void";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "void";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "void";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 0.;
__n32["raw"] := "0";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "void";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 0.;
__n34["raw"] := "0";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "void";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n26 := [ __n27, __n29, __n31, __n33, __n35 ];
__n25["elements"] := __n26;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "ArrayExpression";
__n40 := [  ];
__n39["elements"] := __n40;
__n38["object"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "concat";
__n41["raw"] := "\"concat\"";
__n38["property"] := __n41;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "obj";
__n42 := [ __n43 ];
__n37["arguments"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "[void 0, void 0, void 0, void 0, void 0] must return the same value returned by [].concat(obj)";
__n44["raw"] := "'[void 0, void 0, void 0, void 0, void 0] must return the same value returned by [].concat(obj)'";
__n24 := [ __n25, __n37, __n44 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "AssignmentExpression";
__n46["operator"] := "=";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "obj";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "length";
__n49["raw"] := "\"length\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 4000.;
__n50["raw"] := "4000";
__n46["right"] := __n50;
__n45["expression"] := __n46;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "compareArray";
__n55["raw"] := "\"compareArray\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "NewExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Array";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 4000.;
__n60["raw"] := "4000";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "ArrayExpression";
__n64 := [  ];
__n63["elements"] := __n64;
__n62["object"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "concat";
__n65["raw"] := "\"concat\"";
__n62["property"] := __n65;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "obj";
__n66 := [ __n67 ];
__n61["arguments"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "new Array(4000) must return the same value returned by [].concat(obj)";
__n68["raw"] := "'new Array(4000) must return the same value returned by [].concat(obj)'";
__n56 := [ __n57, __n61, __n68 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n1 := [ __n2, __n11, __n19, __n45, __n51 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n69 := [ "obj" ];
__n0["variableDeclarations"] := __n69;
__n70 := [  ];
__n0["functionDeclarations"] := __n70;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}