function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "A";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [ "_length" ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "ThisExpression";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "length";
__n14["raw"] := "\"length\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["left"] := __n12;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n11["right"] := __n15;
__n10["expression"] := __n11;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Object";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "preventExtensions";
__n20["raw"] := "\"preventExtensions\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "ThisExpression";
__n21 := [ __n22 ];
__n17["arguments"] := __n21;
__n16["expression"] := __n17;
__n9 := [ __n10, __n16 ];
__n8["body"] := __n9;
__n23 := [  ];
__n8["variableDeclarations"] := __n23;
__n24 := [  ];
__n8["functionDeclarations"] := __n24;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["async"] := false;
__n6["expression"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "arr";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "ArrayExpression";
__n30 := [  ];
__n29["elements"] := __n30;
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := "=";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "arr";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "constructor";
__n35["raw"] := "\"constructor\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "ObjectExpression";
__n37 := [  ];
__n36["properties"] := __n37;
__n32["right"] := __n36;
__n31["expression"] := __n32;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "AssignmentExpression";
__n39["operator"] := "=";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n40["computed"] := true;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arr";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "constructor";
__n43["raw"] := "\"constructor\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["object"] := __n41;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Symbol";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "species";
__n46["raw"] := "\"species\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n40["property"] := __n44;
__n39["left"] := __n40;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "A";
__n39["right"] := __n47;
__n38["expression"] := __n39;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "assert";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "throws";
__n52["raw"] := "\"throws\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "TypeError";
__n55 := {  };
__n55["type"] := "FunctionExpression";
__n55["id"] := null;
__n56 := [  ];
__n55["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "arr";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "concat";
__n63["raw"] := "\"concat\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "ArrayExpression";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n66 := [ __n67 ];
__n65["elements"] := __n66;
__n64 := [ __n65 ];
__n60["arguments"] := __n64;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n68 := [  ];
__n57["variableDeclarations"] := __n68;
__n69 := [  ];
__n57["functionDeclarations"] := __n69;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n55["body"] := __n57;
__n55["generator"] := false;
__n55["async"] := false;
__n55["expression"] := false;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "arr.concat([1]) throws a TypeError exception";
__n70["raw"] := "'arr.concat([1]) throws a TypeError exception'";
__n53 := [ __n54, __n55, __n70 ];
__n49["arguments"] := __n53;
__n48["expression"] := __n49;
__n1 := [ __n2, __n25, __n31, __n38, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n71 := [ "A", "arr" ];
__n0["variableDeclarations"] := __n71;
__n72 := [  ];
__n0["functionDeclarations"] := __n72;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}