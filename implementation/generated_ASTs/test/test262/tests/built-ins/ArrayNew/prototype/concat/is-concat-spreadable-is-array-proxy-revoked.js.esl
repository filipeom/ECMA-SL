function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "target";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "handle";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Proxy";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "revocable";
__n15["raw"] := "\"revocable\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "target";
__n18 := {  };
__n18["type"] := "ObjectExpression";
__n20 := {  };
__n20["type"] := "Property";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "get";
__n20["key"] := __n21;
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [ "_", "key" ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "===";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "key";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Symbol";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "isConcatSpreadable";
__n31["raw"] := "\"isConcatSpreadable\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n27["right"] := __n29;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "handle";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "revoke";
__n38["raw"] := "\"revoke\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n39 := [  ];
__n35["arguments"] := __n39;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n41["computed"] := true;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "target";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "key";
__n41["property"] := __n43;
__n40["argument"] := __n41;
__n25 := [ __n26, __n40 ];
__n24["body"] := __n25;
__n44 := [  ];
__n24["variableDeclarations"] := __n44;
__n45 := [  ];
__n24["functionDeclarations"] := __n45;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["async"] := false;
__n22["expression"] := false;
__n20["value"] := __n22;
__n20["computed"] := false;
__n20["kind"] := "init";
__n20["shorthand"] := false;
__n19 := [ __n20 ];
__n18["properties"] := __n19;
__n16 := [ __n17, __n18 ];
__n12["arguments"] := __n16;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "assert";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "throws";
__n50["raw"] := "\"throws\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "TypeError";
__n53 := {  };
__n53["type"] := "FunctionExpression";
__n53["id"] := null;
__n54 := [  ];
__n53["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "ArrayExpression";
__n61 := [  ];
__n60["elements"] := __n61;
__n59["object"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "concat";
__n62["raw"] := "\"concat\"";
__n59["property"] := __n62;
__n59["computed"] := true;
__n58["callee"] := __n59;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "handle";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "proxy";
__n66["raw"] := "\"proxy\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63 := [ __n64 ];
__n58["arguments"] := __n63;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n67 := [  ];
__n55["variableDeclarations"] := __n67;
__n68 := [  ];
__n55["functionDeclarations"] := __n68;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n53["body"] := __n55;
__n53["generator"] := false;
__n53["async"] := false;
__n53["expression"] := false;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "[].concat(handle.proxy) throws a TypeError exception";
__n69["raw"] := "'[].concat(handle.proxy) throws a TypeError exception'";
__n51 := [ __n52, __n53, __n69 ];
__n47["arguments"] := __n51;
__n46["expression"] := __n47;
__n1 := [ __n2, __n8, __n46 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n70 := [ "target", "handle" ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}