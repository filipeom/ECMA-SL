function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arg";
__n9["id"] := __n10;
__n9["init"] := null;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "callbackfn";
__n11["expression"] := __n12;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "fun";
__n15["id"] := __n16;
__n17 := [  ];
__n15["params"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "AssignmentExpression";
__n21["operator"] := "=";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arg";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "arguments";
__n21["right"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n24 := [  ];
__n18["variableDeclarations"] := __n24;
__n25 := [  ];
__n18["functionDeclarations"] := __n25;
__n18["codeType"] := "function";
__n18["strict"] := false;
__n15["body"] := __n18;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14["callee"] := __n15;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 2.;
__n28["raw"] := "2";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 3.;
__n29["raw"] := "3";
__n26 := [ __n27, __n28, __n29 ];
__n14["arguments"] := __n26;
__n13["expression"] := __n14;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "assert";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "ArrayExpression";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 11.;
__n38["raw"] := "11";
__n37 := [ __n38 ];
__n36["elements"] := __n37;
__n35["object"] := __n36;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "every";
__n39["raw"] := "\"every\"";
__n35["property"] := __n39;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "callbackfn";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arg";
__n40 := [ __n41, __n42 ];
__n34["arguments"] := __n40;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "[11].every(callbackfn, arg) !== true";
__n43["raw"] := "'[11].every(callbackfn, arg) !== true'";
__n33 := [ __n34, __n43 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "accessed";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "accessed !== true";
__n49["raw"] := "'accessed !== true'";
__n47 := [ __n48, __n49 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n1 := [ __n2, __n7, __n11, __n13, __n30, __n44 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n50 := [ "accessed", "arg" ];
__n0["variableDeclarations"] := __n50;
__n52 := {  };
__n52["type"] := "FunctionDeclaration";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "callbackfn";
__n52["id"] := __n53;
__n54 := [ "val", "idx", "obj" ];
__n52["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "AssignmentExpression";
__n58["operator"] := "=";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "accessed";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := true;
__n60["raw"] := "true";
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n61 := {  };
__n61["type"] := "ReturnStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "===";
__n63 := {  };
__n63["type"] := "ThisExpression";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "arg";
__n62["right"] := __n64;
__n61["argument"] := __n62;
__n56 := [ __n57, __n61 ];
__n55["body"] := __n56;
__n65 := [  ];
__n55["variableDeclarations"] := __n65;
__n66 := [  ];
__n55["functionDeclarations"] := __n66;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n52["body"] := __n55;
__n52["generator"] := false;
__n52["async"] := false;
__n52["expression"] := false;
__n51 := [ __n52 ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}