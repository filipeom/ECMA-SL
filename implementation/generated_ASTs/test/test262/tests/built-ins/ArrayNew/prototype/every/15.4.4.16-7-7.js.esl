function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "o";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "arr";
__n13["raw"] := "\"arr\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "ArrayExpression";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 2.;
__n17["raw"] := "2";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 3.;
__n18["raw"] := "3";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 4.;
__n19["raw"] := "4";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 5.;
__n20["raw"] := "5";
__n15 := [ __n16, __n17, __n18, __n19, __n20 ];
__n14["elements"] := __n15;
__n10["right"] := __n14;
__n9["expression"] := __n10;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "callbackfn";
__n21["expression"] := __n22;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "o";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "arr";
__n31["raw"] := "\"arr\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["object"] := __n29;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "every";
__n32["raw"] := "\"every\"";
__n28["property"] := __n32;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "callbackfn";
__n33 := [ __n34 ];
__n27["arguments"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "o.arr.every(callbackfn) !== true";
__n35["raw"] := "'o.arr.every(callbackfn) !== true'";
__n26 := [ __n27, __n35 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "o";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "hasOwnProperty";
__n45["raw"] := "\"hasOwnProperty\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "arr";
__n47["raw"] := "\"arr\"";
__n46 := [ __n47 ];
__n42["arguments"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := false;
__n48["raw"] := "false";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "o.hasOwnProperty(\"arr\")";
__n49["raw"] := "'o.hasOwnProperty(\"arr\")'";
__n41 := [ __n42, __n48, __n49 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n1 := [ __n2, __n9, __n21, __n23, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n50 := [ "o" ];
__n0["variableDeclarations"] := __n50;
__n52 := {  };
__n52["type"] := "FunctionDeclaration";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "callbackfn";
__n52["id"] := __n53;
__n54 := [ "val", "Idx", "obj" ];
__n52["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "delete";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "o";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "arr";
__n61["raw"] := "\"arr\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n57["expression"] := __n58;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "===";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "val";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "Idx";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n65["right"] := __n67;
__n63["right"] := __n65;
__n62["test"] := __n63;
__n68 := {  };
__n68["type"] := "ReturnStatement";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := true;
__n69["raw"] := "true";
__n68["argument"] := __n69;
__n62["consequent"] := __n68;
__n70 := {  };
__n70["type"] := "ReturnStatement";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := false;
__n71["raw"] := "false";
__n70["argument"] := __n71;
__n62["alternate"] := __n70;
__n56 := [ __n57, __n62 ];
__n55["body"] := __n56;
__n72 := [  ];
__n55["variableDeclarations"] := __n72;
__n73 := [  ];
__n55["functionDeclarations"] := __n73;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n52["body"] := __n55;
__n52["generator"] := false;
__n52["async"] := false;
__n52["expression"] := false;
__n51 := [ __n52 ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}