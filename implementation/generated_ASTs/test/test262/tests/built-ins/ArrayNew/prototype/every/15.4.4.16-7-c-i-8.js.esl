function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "AssignmentExpression";
__n5["operator"] := "=";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n6["computed"] := true;
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Array";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["object"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n6["property"] := __n10;
__n5["left"] := __n6;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 13.;
__n11["raw"] := "13";
__n5["right"] := __n11;
__n4["expression"] := __n5;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "assert";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "sameValue";
__n16["raw"] := "\"sameValue\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "ArrayExpression";
__n21 := [ null, null, null ];
__n20["elements"] := __n21;
__n19["object"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "every";
__n22["raw"] := "\"every\"";
__n19["property"] := __n22;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "callbackfn";
__n23 := [ __n24 ];
__n18["arguments"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := false;
__n25["raw"] := "false";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "[, , , ].every(callbackfn)";
__n26["raw"] := "'[, , , ].every(callbackfn)'";
__n17 := [ __n18, __n25, __n26 ];
__n13["arguments"] := __n17;
__n12["expression"] := __n13;
__n1 := [ __n2, __n4, __n12 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n27 := [  ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "callbackfn";
__n29["id"] := __n30;
__n31 := [ "val", "idx", "obj" ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "===";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "idx";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["test"] := __n35;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "val";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 13.;
__n43["raw"] := "13";
__n41["right"] := __n43;
__n40["argument"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n34["consequent"] := __n38;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := true;
__n47["raw"] := "true";
__n46["argument"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n34["alternate"] := __n44;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n48 := [  ];
__n32["variableDeclarations"] := __n48;
__n49 := [  ];
__n32["functionDeclarations"] := __n49;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28 := [ __n29 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}