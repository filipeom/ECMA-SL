function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arg";
__n9["id"] := __n10;
__n9["init"] := null;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "callbackfn";
__n11["expression"] := __n12;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "fun";
__n15["id"] := __n16;
__n17 := [  ];
__n15["params"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "AssignmentExpression";
__n21["operator"] := "=";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arg";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "arguments";
__n21["right"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n24 := [  ];
__n18["variableDeclarations"] := __n24;
__n25 := [  ];
__n18["functionDeclarations"] := __n25;
__n18["codeType"] := "function";
__n18["strict"] := false;
__n15["body"] := __n18;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14["callee"] := __n15;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 2.;
__n28["raw"] := "2";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 3.;
__n29["raw"] := "3";
__n26 := [ __n27, __n28, __n29 ];
__n14["arguments"] := __n26;
__n13["expression"] := __n14;
__n30 := {  };
__n30["type"] := "VariableDeclaration";
__n32 := {  };
__n32["type"] := "VariableDeclarator";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "newArr";
__n32["id"] := __n33;
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "ArrayExpression";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 11.;
__n38["raw"] := "11";
__n37 := [ __n38 ];
__n36["elements"] := __n37;
__n35["object"] := __n36;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "filter";
__n39["raw"] := "\"filter\"";
__n35["property"] := __n39;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "callbackfn";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arg";
__n40 := [ __n41, __n42 ];
__n34["arguments"] := __n40;
__n32["init"] := __n34;
__n31 := [ __n32 ];
__n30["declarations"] := __n31;
__n30["kind"] := "var";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "sameValue";
__n47["raw"] := "\"sameValue\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "MemberExpression";
__n49["computed"] := true;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "newArr";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 0.;
__n51["raw"] := "0";
__n49["property"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 11.;
__n52["raw"] := "11";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "newArr[0]";
__n53["raw"] := "'newArr[0]'";
__n48 := [ __n49, __n52, __n53 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "assert";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "accessed";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "accessed !== true";
__n59["raw"] := "'accessed !== true'";
__n57 := [ __n58, __n59 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n1 := [ __n2, __n7, __n11, __n13, __n30, __n43, __n54 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n60 := [ "accessed", "arg", "newArr" ];
__n0["variableDeclarations"] := __n60;
__n62 := {  };
__n62["type"] := "FunctionDeclaration";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "callbackfn";
__n62["id"] := __n63;
__n64 := [ "val", "idx", "obj" ];
__n62["params"] := __n64;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "AssignmentExpression";
__n68["operator"] := "=";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "accessed";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := true;
__n70["raw"] := "true";
__n68["right"] := __n70;
__n67["expression"] := __n68;
__n71 := {  };
__n71["type"] := "ReturnStatement";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "===";
__n73 := {  };
__n73["type"] := "ThisExpression";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "arg";
__n72["right"] := __n74;
__n71["argument"] := __n72;
__n66 := [ __n67, __n71 ];
__n65["body"] := __n66;
__n75 := [  ];
__n65["variableDeclarations"] := __n75;
__n76 := [  ];
__n65["functionDeclarations"] := __n76;
__n65["codeType"] := "function";
__n65["strict"] := false;
__n62["body"] := __n65;
__n62["generator"] := false;
__n62["async"] := false;
__n62["expression"] := false;
__n61 := [ __n62 ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}