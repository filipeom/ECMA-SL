function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "result";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "objNumber";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "callbackfn";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "ArrayExpression";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 11.;
__n21["raw"] := "11";
__n20 := [ __n21 ];
__n19["elements"] := __n20;
__n18["object"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "forEach";
__n22["raw"] := "\"forEach\"";
__n18["property"] := __n22;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "callbackfn";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "objNumber";
__n23 := [ __n24, __n25 ];
__n17["arguments"] := __n23;
__n16["expression"] := __n17;
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "assert";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "result";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "result !== true";
__n31["raw"] := "'result !== true'";
__n29 := [ __n30, __n31 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n1 := [ __n2, __n7, __n14, __n16, __n26 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [ "result", "objNumber" ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "callbackfn";
__n34["id"] := __n35;
__n36 := [ "val", "idx", "obj" ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "result";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "ThisExpression";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "objNumber";
__n42["right"] := __n44;
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n45 := [  ];
__n37["variableDeclarations"] := __n45;
__n46 := [  ];
__n37["functionDeclarations"] := __n46;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}