function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "called";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "testResult";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "func";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [ "a", "b" ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ReturnStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Array";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "prototype";
__n28["raw"] := "\"prototype\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["object"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "forEach";
__n29["raw"] := "\"forEach\"";
__n25["property"] := __n29;
__n25["computed"] := true;
__n24["object"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "call";
__n30["raw"] := "\"call\"";
__n24["property"] := __n30;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "arguments";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "callbackfn";
__n31 := [ __n32, __n33 ];
__n23["arguments"] := __n31;
__n22["argument"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n34 := [  ];
__n20["variableDeclarations"] := __n34;
__n35 := [  ];
__n20["functionDeclarations"] := __n35;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["async"] := false;
__n18["expression"] := false;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "func";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 11.;
__n40["raw"] := "11";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 12.;
__n41["raw"] := "12";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 9.;
__n42["raw"] := "9";
__n39 := [ __n40, __n41, __n42 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "testResult";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "testResult !== true";
__n48["raw"] := "'testResult !== true'";
__n46 := [ __n47, __n48 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n1 := [ __n2, __n7, __n12, __n14, __n36, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n49 := [ "called", "testResult", "func" ];
__n0["variableDeclarations"] := __n49;
__n51 := {  };
__n51["type"] := "FunctionDeclaration";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "callbackfn";
__n51["id"] := __n52;
__n53 := [ "val", "idx", "obj" ];
__n51["params"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "UpdateExpression";
__n57["operator"] := "++";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "called";
__n57["argument"] := __n58;
__n57["prefix"] := false;
__n56["expression"] := __n57;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "LogicalExpression";
__n60["operator"] := "&&";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "called";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1.;
__n63["raw"] := "1";
__n61["right"] := __n63;
__n60["left"] := __n61;
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "!";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "testResult";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n60["right"] := __n64;
__n59["test"] := __n60;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ReturnStatement";
__n68["argument"] := null;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n59["consequent"] := __n66;
__n59["alternate"] := null;
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "===";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "idx";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 0.;
__n72["raw"] := "0";
__n70["right"] := __n72;
__n69["test"] := __n70;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "AssignmentExpression";
__n76["operator"] := "=";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "testResult";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "===";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "val";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 11.;
__n80["raw"] := "11";
__n78["right"] := __n80;
__n76["right"] := __n78;
__n75["expression"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n69["consequent"] := __n73;
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "===";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "idx";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n82["right"] := __n84;
__n81["test"] := __n82;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "AssignmentExpression";
__n88["operator"] := "=";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "testResult";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "===";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "val";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := 12.;
__n92["raw"] := "12";
__n90["right"] := __n92;
__n88["right"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n81["consequent"] := __n85;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "===";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "idx";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 2.;
__n96["raw"] := "2";
__n94["right"] := __n96;
__n93["test"] := __n94;
__n97 := {  };
__n97["type"] := "BlockStatement";
__n99 := {  };
__n99["type"] := "ExpressionStatement";
__n100 := {  };
__n100["type"] := "AssignmentExpression";
__n100["operator"] := "=";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "testResult";
__n100["left"] := __n101;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "===";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "val";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 9.;
__n104["raw"] := "9";
__n102["right"] := __n104;
__n100["right"] := __n102;
__n99["expression"] := __n100;
__n98 := [ __n99 ];
__n97["body"] := __n98;
__n93["consequent"] := __n97;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "AssignmentExpression";
__n108["operator"] := "=";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "testResult";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := false;
__n110["raw"] := "false";
__n108["right"] := __n110;
__n107["expression"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n93["alternate"] := __n105;
__n81["alternate"] := __n93;
__n69["alternate"] := __n81;
__n55 := [ __n56, __n59, __n69 ];
__n54["body"] := __n55;
__n111 := [  ];
__n54["variableDeclarations"] := __n111;
__n112 := [  ];
__n54["functionDeclarations"] := __n112;
__n54["codeType"] := "function";
__n54["strict"] := false;
__n51["body"] := __n54;
__n51["generator"] := false;
__n51["async"] := false;
__n51["expression"] := false;
__n50 := [ __n51 ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}