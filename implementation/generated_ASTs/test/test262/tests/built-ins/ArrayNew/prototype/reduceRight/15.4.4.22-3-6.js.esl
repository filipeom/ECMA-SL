function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testResult1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "testResult2";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "callbackfn";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "obj";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "ObjectExpression";
__n20 := {  };
__n20["type"] := "Property";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["key"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 11.;
__n22["raw"] := "11";
__n20["value"] := __n22;
__n20["computed"] := false;
__n20["kind"] := "init";
__n20["shorthand"] := false;
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 2.;
__n24["raw"] := "2";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 9.;
__n25["raw"] := "9";
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n26 := {  };
__n26["type"] := "Property";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "length";
__n26["key"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 2.;
__n28["raw"] := "2";
__n26["value"] := __n28;
__n26["computed"] := false;
__n26["kind"] := "init";
__n26["shorthand"] := false;
__n19 := [ __n20, __n23, __n26 ];
__n18["properties"] := __n19;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Array";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "prototype";
__n35["raw"] := "\"prototype\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["object"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "reduceRight";
__n36["raw"] := "\"reduceRight\"";
__n32["property"] := __n36;
__n32["computed"] := true;
__n31["object"] := __n32;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "call";
__n37["raw"] := "\"call\"";
__n31["property"] := __n37;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "obj";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "callbackfn";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 1.;
__n41["raw"] := "1";
__n38 := [ __n39, __n40, __n41 ];
__n30["arguments"] := __n38;
__n29["expression"] := __n30;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "assert";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "testResult1";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "testResult1 !== true";
__n47["raw"] := "'testResult1 !== true'";
__n45 := [ __n46, __n47 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "testResult2";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "testResult2 !== true";
__n53["raw"] := "'testResult2 !== true'";
__n51 := [ __n52, __n53 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n1 := [ __n2, __n7, __n12, __n14, __n29, __n42, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n54 := [ "testResult1", "testResult2", "obj" ];
__n0["variableDeclarations"] := __n54;
__n56 := {  };
__n56["type"] := "FunctionDeclaration";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "callbackfn";
__n56["id"] := __n57;
__n58 := [ "prevVal", "curVal", "idx", "obj" ];
__n56["params"] := __n58;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := ">";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "idx";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n62["right"] := __n64;
__n61["test"] := __n62;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "AssignmentExpression";
__n68["operator"] := "=";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "testResult1";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := false;
__n70["raw"] := "false";
__n68["right"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n61["consequent"] := __n65;
__n61["alternate"] := null;
__n71 := {  };
__n71["type"] := "IfStatement";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "===";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "idx";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 1.;
__n74["raw"] := "1";
__n72["right"] := __n74;
__n71["test"] := __n72;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "AssignmentExpression";
__n78["operator"] := "=";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "testResult2";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := true;
__n80["raw"] := "true";
__n78["right"] := __n80;
__n77["expression"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n71["consequent"] := __n75;
__n71["alternate"] := null;
__n81 := {  };
__n81["type"] := "ReturnStatement";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := false;
__n82["raw"] := "false";
__n81["argument"] := __n82;
__n60 := [ __n61, __n71, __n81 ];
__n59["body"] := __n60;
__n83 := [  ];
__n59["variableDeclarations"] := __n83;
__n84 := [  ];
__n59["functionDeclarations"] := __n84;
__n59["codeType"] := "function";
__n59["strict"] := false;
__n56["body"] := __n59;
__n56["generator"] := false;
__n56["async"] := false;
__n56["expression"] := false;
__n55 := [ __n56 ];
__n0["functionDeclarations"] := __n55;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}