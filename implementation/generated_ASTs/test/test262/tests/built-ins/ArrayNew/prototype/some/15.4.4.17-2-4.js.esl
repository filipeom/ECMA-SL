function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arrProtoLen";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "callbackfn2";
__n9["expression"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "arrProtoLen";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Array";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "prototype";
__n17["raw"] := "\"prototype\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["object"] := __n15;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "length";
__n18["raw"] := "\"length\"";
__n14["property"] := __n18;
__n14["computed"] := true;
__n12["right"] := __n14;
__n11["expression"] := __n12;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Array";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "prototype";
__n24["raw"] := "\"prototype\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["object"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "length";
__n25["raw"] := "\"length\"";
__n21["property"] := __n25;
__n21["computed"] := true;
__n20["left"] := __n21;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n20["right"] := __n26;
__n19["expression"] := __n20;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n29["computed"] := true;
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Array";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "prototype";
__n32["raw"] := "\"prototype\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["object"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 2.;
__n33["raw"] := "2";
__n29["property"] := __n33;
__n28["left"] := __n29;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 12.;
__n34["raw"] := "12";
__n28["right"] := __n34;
__n27["expression"] := __n28;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "ArrayExpression";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 9.;
__n43["raw"] := "9";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 11.;
__n44["raw"] := "11";
__n42 := [ __n43, __n44 ];
__n41["elements"] := __n42;
__n40["object"] := __n41;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "some";
__n45["raw"] := "\"some\"";
__n40["property"] := __n45;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "callbackfn1";
__n46 := [ __n47 ];
__n39["arguments"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "[9, 11].some(callbackfn1) !== true";
__n48["raw"] := "'[9, 11].some(callbackfn1) !== true'";
__n38 := [ __n39, __n48 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "assert";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "sameValue";
__n53["raw"] := "\"sameValue\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "ArrayExpression";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 9.;
__n59["raw"] := "9";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 11.;
__n60["raw"] := "11";
__n58 := [ __n59, __n60 ];
__n57["elements"] := __n58;
__n56["object"] := __n57;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "some";
__n61["raw"] := "\"some\"";
__n56["property"] := __n61;
__n56["computed"] := true;
__n55["callee"] := __n56;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "callbackfn2";
__n62 := [ __n63 ];
__n55["arguments"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := false;
__n64["raw"] := "false";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "[9, 11].some(callbackfn2)";
__n65["raw"] := "'[9, 11].some(callbackfn2)'";
__n54 := [ __n55, __n64, __n65 ];
__n50["arguments"] := __n54;
__n49["expression"] := __n50;
__n1 := [ __n2, __n7, __n9, __n11, __n19, __n27, __n35, __n49 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n66 := [ "arrProtoLen" ];
__n0["variableDeclarations"] := __n66;
__n68 := {  };
__n68["type"] := "FunctionDeclaration";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "callbackfn1";
__n68["id"] := __n69;
__n70 := [ "val", "idx", "obj" ];
__n68["params"] := __n70;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ReturnStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := ">";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "val";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 10.;
__n76["raw"] := "10";
__n74["right"] := __n76;
__n73["argument"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n77 := [  ];
__n71["variableDeclarations"] := __n77;
__n78 := [  ];
__n71["functionDeclarations"] := __n78;
__n71["codeType"] := "function";
__n71["strict"] := false;
__n68["body"] := __n71;
__n68["generator"] := false;
__n68["async"] := false;
__n68["expression"] := false;
__n79 := {  };
__n79["type"] := "FunctionDeclaration";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "callbackfn2";
__n79["id"] := __n80;
__n81 := [ "val", "idx", "obj" ];
__n79["params"] := __n81;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ReturnStatement";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := ">";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "val";
__n85["left"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 11.;
__n87["raw"] := "11";
__n85["right"] := __n87;
__n84["argument"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n88 := [  ];
__n82["variableDeclarations"] := __n88;
__n89 := [  ];
__n82["functionDeclarations"] := __n89;
__n82["codeType"] := "function";
__n82["strict"] := false;
__n79["body"] := __n82;
__n79["generator"] := false;
__n79["async"] := false;
__n79["expression"] := false;
__n67 := [ __n68, __n79 ];
__n0["functionDeclarations"] := __n67;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}