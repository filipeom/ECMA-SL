function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Boolean";
__n5["callee"] := __n6;
__n7 := [  ];
__n5["arguments"] := __n7;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "boolean";
__n8["raw"] := "\"boolean\"";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: typeof Boolean() should be \"boolean\", actual is \"";
__n17["raw"] := "'#1: typeof Boolean() should be \"boolean\", actual is \"'";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "typeof";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Boolean";
__n19["callee"] := __n20;
__n21 := [  ];
__n19["arguments"] := __n21;
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["right"] := __n18;
__n15["left"] := __n16;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "\"";
__n22["raw"] := "'\"'";
__n15["right"] := __n22;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "typeof";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Boolean";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1.;
__n29["raw"] := "1";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["left"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "boolean";
__n30["raw"] := "\"boolean\"";
__n24["right"] := __n30;
__n23["test"] := __n24;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: typeof Boolean(1) should be \"boolean\", actual is \"";
__n39["raw"] := "'#2: typeof Boolean(1) should be \"boolean\", actual is \"'";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "typeof";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Boolean";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n38["right"] := __n40;
__n37["left"] := __n38;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "\"";
__n45["raw"] := "'\"'";
__n37["right"] := __n45;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n23["consequent"] := __n31;
__n23["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "typeof";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Boolean";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "NewExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "String";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "1";
__n55["raw"] := "\"1\"";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["left"] := __n48;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "boolean";
__n56["raw"] := "\"boolean\"";
__n47["right"] := __n56;
__n46["test"] := __n47;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "+";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: typeof Boolean(new String(\"1\")) should be \"boolean\", actual is \"";
__n65["raw"] := "'#3: typeof Boolean(new String(\"1\")) should be \"boolean\", actual is \"'";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "typeof";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "Boolean";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "NewExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "String";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "1";
__n73["raw"] := "\"1\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n64["right"] := __n66;
__n63["left"] := __n64;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "\"";
__n74["raw"] := "'\"'";
__n63["right"] := __n74;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n46["consequent"] := __n57;
__n46["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "typeof";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Boolean";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "NewExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "Object";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["left"] := __n77;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "boolean";
__n85["raw"] := "\"boolean\"";
__n76["right"] := __n85;
__n75["test"] := __n76;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#4: typeof Boolean(new Object(1)) should be \"boolean\", actual is \"";
__n94["raw"] := "'#4: typeof Boolean(new Object(1)) should be \"boolean\", actual is \"'";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "UnaryExpression";
__n95["operator"] := "typeof";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Boolean";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "NewExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "Object";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := 1.;
__n102["raw"] := "1";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["argument"] := __n96;
__n95["prefix"] := true;
__n93["right"] := __n95;
__n92["left"] := __n93;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "\"";
__n103["raw"] := "'\"'";
__n92["right"] := __n103;
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n75["consequent"] := __n86;
__n75["alternate"] := null;
__n1 := [ __n2, __n23, __n46, __n75 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n104 := [  ];
__n0["variableDeclarations"] := __n104;
__n105 := [  ];
__n0["functionDeclarations"] := __n105;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}