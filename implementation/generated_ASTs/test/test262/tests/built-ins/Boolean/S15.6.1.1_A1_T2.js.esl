function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Boolean";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "boolean";
__n9["raw"] := "\"boolean\"";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1.1: typeof Boolean(0) should be \"boolean\", actual is \"";
__n18["raw"] := "'#1.1: typeof Boolean(0) should be \"boolean\", actual is \"'";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "typeof";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Boolean";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n17["right"] := __n19;
__n16["left"] := __n17;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "\"";
__n24["raw"] := "'\"'";
__n16["right"] := __n24;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Boolean";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["left"] := __n27;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := false;
__n31["raw"] := "false";
__n26["right"] := __n31;
__n25["test"] := __n26;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1.2: Boolean(0) should be false, actual is ";
__n39["raw"] := "'#1.2: Boolean(0) should be false, actual is '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Boolean";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n25["consequent"] := __n32;
__n25["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "typeof";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "Boolean";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "-";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 1.;
__n51["raw"] := "1";
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n45["left"] := __n46;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "boolean";
__n52["raw"] := "\"boolean\"";
__n45["right"] := __n52;
__n44["test"] := __n45;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#2.1: typeof Boolean(-1) should be \"boolean\", actual is \"";
__n61["raw"] := "'#2.1: typeof Boolean(-1) should be \"boolean\", actual is \"'";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "UnaryExpression";
__n62["operator"] := "typeof";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "Boolean";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "-";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["argument"] := __n63;
__n62["prefix"] := true;
__n60["right"] := __n62;
__n59["left"] := __n60;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "\"";
__n68["raw"] := "'\"'";
__n59["right"] := __n68;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n44["consequent"] := __n53;
__n44["alternate"] := null;
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "Boolean";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "-";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 1.;
__n75["raw"] := "1";
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["left"] := __n71;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := true;
__n76["raw"] := "true";
__n70["right"] := __n76;
__n69["test"] := __n70;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "+";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#2.2: Boolean(-1) should be true, actual is ";
__n84["raw"] := "'#2.2: Boolean(-1) should be true, actual is '";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Boolean";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "-";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 1.;
__n89["raw"] := "1";
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n83["right"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n69["consequent"] := __n77;
__n69["alternate"] := null;
__n90 := {  };
__n90["type"] := "IfStatement";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "!==";
__n92 := {  };
__n92["type"] := "UnaryExpression";
__n92["operator"] := "typeof";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "Boolean";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "UnaryExpression";
__n96["operator"] := "-";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Infinity";
__n96["argument"] := __n97;
__n96["prefix"] := true;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["argument"] := __n93;
__n92["prefix"] := true;
__n91["left"] := __n92;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "boolean";
__n98["raw"] := "\"boolean\"";
__n91["right"] := __n98;
__n90["test"] := __n91;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "+";
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "#3.1: typeof Boolean(-Infinity) should be \"boolean\", actual is \"";
__n107["raw"] := "'#3.1: typeof Boolean(-Infinity) should be \"boolean\", actual is \"'";
__n106["left"] := __n107;
__n108 := {  };
__n108["type"] := "UnaryExpression";
__n108["operator"] := "typeof";
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "Boolean";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "UnaryExpression";
__n112["operator"] := "-";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "Infinity";
__n112["argument"] := __n113;
__n112["prefix"] := true;
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n108["argument"] := __n109;
__n108["prefix"] := true;
__n106["right"] := __n108;
__n105["left"] := __n106;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "\"";
__n114["raw"] := "'\"'";
__n105["right"] := __n114;
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n90["consequent"] := __n99;
__n90["alternate"] := null;
__n115 := {  };
__n115["type"] := "IfStatement";
__n116 := {  };
__n116["type"] := "BinaryExpression";
__n116["operator"] := "!==";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "Boolean";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "UnaryExpression";
__n120["operator"] := "-";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "Infinity";
__n120["argument"] := __n121;
__n120["prefix"] := true;
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["left"] := __n117;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := true;
__n122["raw"] := "true";
__n116["right"] := __n122;
__n115["test"] := __n116;
__n123 := {  };
__n123["type"] := "BlockStatement";
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "$ERROR";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "BinaryExpression";
__n129["operator"] := "+";
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "#3.2: Boolean(-Infinity) should be true, actual is ";
__n130["raw"] := "'#3.2: Boolean(-Infinity) should be true, actual is '";
__n129["left"] := __n130;
__n131 := {  };
__n131["type"] := "CallExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "Boolean";
__n131["callee"] := __n132;
__n134 := {  };
__n134["type"] := "UnaryExpression";
__n134["operator"] := "-";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "Infinity";
__n134["argument"] := __n135;
__n134["prefix"] := true;
__n133 := [ __n134 ];
__n131["arguments"] := __n133;
__n129["right"] := __n131;
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["expression"] := __n126;
__n124 := [ __n125 ];
__n123["body"] := __n124;
__n115["consequent"] := __n123;
__n115["alternate"] := null;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!==";
__n138 := {  };
__n138["type"] := "UnaryExpression";
__n138["operator"] := "typeof";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "Boolean";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "NaN";
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["argument"] := __n139;
__n138["prefix"] := true;
__n137["left"] := __n138;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "boolean";
__n143["raw"] := "\"boolean\"";
__n137["right"] := __n143;
__n136["test"] := __n137;
__n144 := {  };
__n144["type"] := "BlockStatement";
__n146 := {  };
__n146["type"] := "ExpressionStatement";
__n147 := {  };
__n147["type"] := "CallExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "$ERROR";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "BinaryExpression";
__n150["operator"] := "+";
__n151 := {  };
__n151["type"] := "BinaryExpression";
__n151["operator"] := "+";
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := "#4.1: typeof Boolean(NaN) should be \"boolean\", actual is \"";
__n152["raw"] := "'#4.1: typeof Boolean(NaN) should be \"boolean\", actual is \"'";
__n151["left"] := __n152;
__n153 := {  };
__n153["type"] := "UnaryExpression";
__n153["operator"] := "typeof";
__n154 := {  };
__n154["type"] := "CallExpression";
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "Boolean";
__n154["callee"] := __n155;
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "NaN";
__n156 := [ __n157 ];
__n154["arguments"] := __n156;
__n153["argument"] := __n154;
__n153["prefix"] := true;
__n151["right"] := __n153;
__n150["left"] := __n151;
__n158 := {  };
__n158["type"] := "Literal";
__n158["value"] := "\"";
__n158["raw"] := "'\"'";
__n150["right"] := __n158;
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["expression"] := __n147;
__n145 := [ __n146 ];
__n144["body"] := __n145;
__n136["consequent"] := __n144;
__n136["alternate"] := null;
__n159 := {  };
__n159["type"] := "IfStatement";
__n160 := {  };
__n160["type"] := "BinaryExpression";
__n160["operator"] := "!==";
__n161 := {  };
__n161["type"] := "CallExpression";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "Boolean";
__n161["callee"] := __n162;
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "NaN";
__n163 := [ __n164 ];
__n161["arguments"] := __n163;
__n160["left"] := __n161;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := false;
__n165["raw"] := "false";
__n160["right"] := __n165;
__n159["test"] := __n160;
__n166 := {  };
__n166["type"] := "BlockStatement";
__n168 := {  };
__n168["type"] := "ExpressionStatement";
__n169 := {  };
__n169["type"] := "CallExpression";
__n170 := {  };
__n170["type"] := "Identifier";
__n170["name"] := "$ERROR";
__n169["callee"] := __n170;
__n172 := {  };
__n172["type"] := "BinaryExpression";
__n172["operator"] := "+";
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "#4.2: Boolean(NaN) should be false, actual is ";
__n173["raw"] := "'#4.2: Boolean(NaN) should be false, actual is '";
__n172["left"] := __n173;
__n174 := {  };
__n174["type"] := "CallExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "Boolean";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "Identifier";
__n177["name"] := "NaN";
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n172["right"] := __n174;
__n171 := [ __n172 ];
__n169["arguments"] := __n171;
__n168["expression"] := __n169;
__n167 := [ __n168 ];
__n166["body"] := __n167;
__n159["consequent"] := __n166;
__n159["alternate"] := null;
__n1 := [ __n2, __n25, __n44, __n69, __n90, __n115, __n136, __n159 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n178 := [  ];
__n0["variableDeclarations"] := __n178;
__n179 := [  ];
__n0["functionDeclarations"] := __n179;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}