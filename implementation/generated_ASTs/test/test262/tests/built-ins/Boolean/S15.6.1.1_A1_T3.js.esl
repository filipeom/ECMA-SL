function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Boolean";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "0";
__n8["raw"] := "\"0\"";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "boolean";
__n9["raw"] := "\"boolean\"";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1.1: typeof Boolean(\"0\") should be \"boolean\", actual is \"";
__n18["raw"] := "'#1.1: typeof Boolean(\"0\") should be \"boolean\", actual is \"'";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "typeof";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Boolean";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "0";
__n23["raw"] := "\"0\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n17["right"] := __n19;
__n16["left"] := __n17;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "\"";
__n24["raw"] := "'\"'";
__n16["right"] := __n24;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Boolean";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "0";
__n30["raw"] := "\"0\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["left"] := __n27;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n26["right"] := __n31;
__n25["test"] := __n26;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1.2: Boolean(\"0\") should be true";
__n38["raw"] := "'#1.2: Boolean(\"0\") should be true'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n25["consequent"] := __n32;
__n25["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "typeof";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Boolean";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "-1";
__n45["raw"] := "\"-1\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["left"] := __n41;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "boolean";
__n46["raw"] := "\"boolean\"";
__n40["right"] := __n46;
__n39["test"] := __n40;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#2.1: typeof Boolean(\"-1\") should be \"boolean\", actual is \"";
__n55["raw"] := "'#2.1: typeof Boolean(\"-1\") should be \"boolean\", actual is \"'";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "typeof";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Boolean";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "-1";
__n60["raw"] := "\"-1\"";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n54["right"] := __n56;
__n53["left"] := __n54;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "\"";
__n61["raw"] := "'\"'";
__n53["right"] := __n61;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n39["consequent"] := __n47;
__n39["alternate"] := null;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "Boolean";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "-1";
__n67["raw"] := "\"-1\"";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["left"] := __n64;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := true;
__n68["raw"] := "true";
__n63["right"] := __n68;
__n62["test"] := __n63;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#2.2: Boolean(\"-1\") should be true";
__n75["raw"] := "'#2.2: Boolean(\"-1\") should be true'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n62["consequent"] := __n69;
__n62["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "UnaryExpression";
__n78["operator"] := "typeof";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "Boolean";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "1";
__n82["raw"] := "\"1\"";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["argument"] := __n79;
__n78["prefix"] := true;
__n77["left"] := __n78;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "boolean";
__n83["raw"] := "\"boolean\"";
__n77["right"] := __n83;
__n76["test"] := __n77;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "+";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#3.1: typeof Boolean(\"1\") should be \"boolean\", actual is \"";
__n92["raw"] := "'#3.1: typeof Boolean(\"1\") should be \"boolean\", actual is \"'";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "UnaryExpression";
__n93["operator"] := "typeof";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "Boolean";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "1";
__n97["raw"] := "\"1\"";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["argument"] := __n94;
__n93["prefix"] := true;
__n91["right"] := __n93;
__n90["left"] := __n91;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "\"";
__n98["raw"] := "'\"'";
__n90["right"] := __n98;
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n76["consequent"] := __n84;
__n76["alternate"] := null;
__n99 := {  };
__n99["type"] := "IfStatement";
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "!==";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Boolean";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "1";
__n104["raw"] := "\"1\"";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["left"] := __n101;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := true;
__n105["raw"] := "true";
__n100["right"] := __n105;
__n99["test"] := __n100;
__n106 := {  };
__n106["type"] := "BlockStatement";
__n108 := {  };
__n108["type"] := "ExpressionStatement";
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "$ERROR";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "#3.2: Boolean(\"1\") should be true";
__n112["raw"] := "'#3.2: Boolean(\"1\") should be true'";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n108["expression"] := __n109;
__n107 := [ __n108 ];
__n106["body"] := __n107;
__n99["consequent"] := __n106;
__n99["alternate"] := null;
__n113 := {  };
__n113["type"] := "IfStatement";
__n114 := {  };
__n114["type"] := "BinaryExpression";
__n114["operator"] := "!==";
__n115 := {  };
__n115["type"] := "UnaryExpression";
__n115["operator"] := "typeof";
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "Boolean";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "false";
__n119["raw"] := "\"false\"";
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n115["argument"] := __n116;
__n115["prefix"] := true;
__n114["left"] := __n115;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "boolean";
__n120["raw"] := "\"boolean\"";
__n114["right"] := __n120;
__n113["test"] := __n114;
__n121 := {  };
__n121["type"] := "BlockStatement";
__n123 := {  };
__n123["type"] := "ExpressionStatement";
__n124 := {  };
__n124["type"] := "CallExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "$ERROR";
__n124["callee"] := __n125;
__n127 := {  };
__n127["type"] := "BinaryExpression";
__n127["operator"] := "+";
__n128 := {  };
__n128["type"] := "BinaryExpression";
__n128["operator"] := "+";
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "#4.1: typeof Boolean(\"false\") should be \"boolean\", actual is \"";
__n129["raw"] := "'#4.1: typeof Boolean(\"false\") should be \"boolean\", actual is \"'";
__n128["left"] := __n129;
__n130 := {  };
__n130["type"] := "UnaryExpression";
__n130["operator"] := "typeof";
__n131 := {  };
__n131["type"] := "CallExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "Boolean";
__n131["callee"] := __n132;
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := "false";
__n134["raw"] := "\"false\"";
__n133 := [ __n134 ];
__n131["arguments"] := __n133;
__n130["argument"] := __n131;
__n130["prefix"] := true;
__n128["right"] := __n130;
__n127["left"] := __n128;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := "\"";
__n135["raw"] := "'\"'";
__n127["right"] := __n135;
__n126 := [ __n127 ];
__n124["arguments"] := __n126;
__n123["expression"] := __n124;
__n122 := [ __n123 ];
__n121["body"] := __n122;
__n113["consequent"] := __n121;
__n113["alternate"] := null;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!==";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Boolean";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "false";
__n141["raw"] := "\"false\"";
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["left"] := __n138;
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := true;
__n142["raw"] := "true";
__n137["right"] := __n142;
__n136["test"] := __n137;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "ExpressionStatement";
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "$ERROR";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "#4.2: Boolean(\"false\") should be true";
__n149["raw"] := "'#4.2: Boolean(\"false\") should be true'";
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n145["expression"] := __n146;
__n144 := [ __n145 ];
__n143["body"] := __n144;
__n136["consequent"] := __n143;
__n136["alternate"] := null;
__n150 := {  };
__n150["type"] := "IfStatement";
__n151 := {  };
__n151["type"] := "BinaryExpression";
__n151["operator"] := "!==";
__n152 := {  };
__n152["type"] := "UnaryExpression";
__n152["operator"] := "typeof";
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "Boolean";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := "true";
__n156["raw"] := "\"true\"";
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n152["argument"] := __n153;
__n152["prefix"] := true;
__n151["left"] := __n152;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "boolean";
__n157["raw"] := "\"boolean\"";
__n151["right"] := __n157;
__n150["test"] := __n151;
__n158 := {  };
__n158["type"] := "BlockStatement";
__n160 := {  };
__n160["type"] := "ExpressionStatement";
__n161 := {  };
__n161["type"] := "CallExpression";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "$ERROR";
__n161["callee"] := __n162;
__n164 := {  };
__n164["type"] := "BinaryExpression";
__n164["operator"] := "+";
__n165 := {  };
__n165["type"] := "BinaryExpression";
__n165["operator"] := "+";
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := "#5.1: typeof Boolean(\"true\") should be \"boolean\", actual is \"";
__n166["raw"] := "'#5.1: typeof Boolean(\"true\") should be \"boolean\", actual is \"'";
__n165["left"] := __n166;
__n167 := {  };
__n167["type"] := "UnaryExpression";
__n167["operator"] := "typeof";
__n168 := {  };
__n168["type"] := "CallExpression";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "Boolean";
__n168["callee"] := __n169;
__n171 := {  };
__n171["type"] := "Literal";
__n171["value"] := "true";
__n171["raw"] := "\"true\"";
__n170 := [ __n171 ];
__n168["arguments"] := __n170;
__n167["argument"] := __n168;
__n167["prefix"] := true;
__n165["right"] := __n167;
__n164["left"] := __n165;
__n172 := {  };
__n172["type"] := "Literal";
__n172["value"] := "\"";
__n172["raw"] := "'\"'";
__n164["right"] := __n172;
__n163 := [ __n164 ];
__n161["arguments"] := __n163;
__n160["expression"] := __n161;
__n159 := [ __n160 ];
__n158["body"] := __n159;
__n150["consequent"] := __n158;
__n150["alternate"] := null;
__n173 := {  };
__n173["type"] := "IfStatement";
__n174 := {  };
__n174["type"] := "BinaryExpression";
__n174["operator"] := "!==";
__n175 := {  };
__n175["type"] := "CallExpression";
__n176 := {  };
__n176["type"] := "Identifier";
__n176["name"] := "Boolean";
__n175["callee"] := __n176;
__n178 := {  };
__n178["type"] := "Literal";
__n178["value"] := "true";
__n178["raw"] := "\"true\"";
__n177 := [ __n178 ];
__n175["arguments"] := __n177;
__n174["left"] := __n175;
__n179 := {  };
__n179["type"] := "Literal";
__n179["value"] := true;
__n179["raw"] := "true";
__n174["right"] := __n179;
__n173["test"] := __n174;
__n180 := {  };
__n180["type"] := "BlockStatement";
__n182 := {  };
__n182["type"] := "ExpressionStatement";
__n183 := {  };
__n183["type"] := "CallExpression";
__n184 := {  };
__n184["type"] := "Identifier";
__n184["name"] := "$ERROR";
__n183["callee"] := __n184;
__n186 := {  };
__n186["type"] := "Literal";
__n186["value"] := "#5.2: Boolean(\"true\") should be true";
__n186["raw"] := "'#5.2: Boolean(\"true\") should be true'";
__n185 := [ __n186 ];
__n183["arguments"] := __n185;
__n182["expression"] := __n183;
__n181 := [ __n182 ];
__n180["body"] := __n181;
__n173["consequent"] := __n180;
__n173["alternate"] := null;
__n1 := [ __n2, __n25, __n39, __n62, __n76, __n99, __n113, __n136, __n150, __n173 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n187 := [  ];
__n0["variableDeclarations"] := __n187;
__n188 := [  ];
__n0["functionDeclarations"] := __n188;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}