function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ForInStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "x";
__n2["left"] := __n3;
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "Boolean";
__n2["right"] := __n4;
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "===";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "prototype";
__n10["raw"] := "\"prototype\"";
__n8["right"] := __n10;
__n7["test"] := __n8;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ThrowStatement";
__n14 := {  };
__n14["type"] := "NewExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Test262Error";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: Boolean.prototype has the attribute DontEnum";
__n17["raw"] := "'#1: Boolean.prototype has the attribute DontEnum'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["argument"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n7["consequent"] := __n11;
__n7["alternate"] := null;
__n6 := [ __n7 ];
__n5["body"] := __n6;
__n2["body"] := __n5;
__n2["each"] := false;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Boolean";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "propertyIsEnumerable";
__n22["raw"] := "\"propertyIsEnumerable\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "prototype";
__n24["raw"] := "'prototype'";
__n23 := [ __n24 ];
__n19["arguments"] := __n23;
__n18["test"] := __n19;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ThrowStatement";
__n28 := {  };
__n28["type"] := "NewExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Test262Error";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: Boolean.prototype has the attribute DontEnum";
__n31["raw"] := "'#2: Boolean.prototype has the attribute DontEnum'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["argument"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n18["consequent"] := __n25;
__n18["alternate"] := null;
__n1 := [ __n2, __n18 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [  ];
__n0["variableDeclarations"] := __n32;
__n33 := [  ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}