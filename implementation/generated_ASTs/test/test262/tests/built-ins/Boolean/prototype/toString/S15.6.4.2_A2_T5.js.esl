function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "s1";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "ObjectExpression";
__n11 := {  };
__n11["type"] := "Property";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["key"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n11["value"] := __n13;
__n11["computed"] := false;
__n11["kind"] := "init";
__n11["shorthand"] := false;
__n10 := [ __n11 ];
__n9["properties"] := __n10;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "AssignmentExpression";
__n15["operator"] := "=";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "s1";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "toString";
__n18["raw"] := "\"toString\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Boolean";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "prototype";
__n22["raw"] := "\"prototype\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "toString";
__n23["raw"] := "\"toString\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n15["right"] := __n19;
__n14["expression"] := __n15;
__n24 := {  };
__n24["type"] := "VariableDeclaration";
__n26 := {  };
__n26["type"] := "VariableDeclarator";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "v1";
__n26["id"] := __n27;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "s1";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "toString";
__n31["raw"] := "\"toString\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n32 := [  ];
__n28["arguments"] := __n32;
__n26["init"] := __n28;
__n25 := [ __n26 ];
__n24["declarations"] := __n25;
__n24["kind"] := "var";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1: Boolean.prototype.toString on not a Boolean object should throw TypeError";
__n37["raw"] := "'#1: Boolean.prototype.toString on not a Boolean object should throw TypeError'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n4 := [ __n5, __n14, __n24, __n33 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n38 := {  };
__n38["type"] := "CatchClause";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "e";
__n38["param"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "!";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "instanceof";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "e";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "TypeError";
__n44["right"] := __n46;
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42["test"] := __n43;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#1: Boolean.prototype.toString on not a Boolean object should throw TypeError, not ";
__n54["raw"] := "'#1: Boolean.prototype.toString on not a Boolean object should throw TypeError, not '";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n42["consequent"] := __n47;
__n42["alternate"] := null;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n38["body"] := __n40;
__n2["handler"] := __n38;
__n2["finalizer"] := null;
__n56 := {  };
__n56["type"] := "TryStatement";
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "VariableDeclaration";
__n61 := {  };
__n61["type"] := "VariableDeclarator";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "s2";
__n61["id"] := __n62;
__n63 := {  };
__n63["type"] := "ObjectExpression";
__n65 := {  };
__n65["type"] := "Property";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n65["key"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n65["value"] := __n67;
__n65["computed"] := false;
__n65["kind"] := "init";
__n65["shorthand"] := false;
__n64 := [ __n65 ];
__n63["properties"] := __n64;
__n61["init"] := __n63;
__n60 := [ __n61 ];
__n59["declarations"] := __n60;
__n59["kind"] := "var";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "AssignmentExpression";
__n69["operator"] := "=";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "s2";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "myToString";
__n72["raw"] := "\"myToString\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["left"] := __n70;
__n73 := {  };
__n73["type"] := "MemberExpression";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Boolean";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "prototype";
__n76["raw"] := "\"prototype\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n73["object"] := __n74;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "toString";
__n77["raw"] := "\"toString\"";
__n73["property"] := __n77;
__n73["computed"] := true;
__n69["right"] := __n73;
__n68["expression"] := __n69;
__n78 := {  };
__n78["type"] := "VariableDeclaration";
__n80 := {  };
__n80["type"] := "VariableDeclarator";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "v2";
__n80["id"] := __n81;
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "s2";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "myToString";
__n85["raw"] := "\"myToString\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82["callee"] := __n83;
__n86 := [  ];
__n82["arguments"] := __n86;
__n80["init"] := __n82;
__n79 := [ __n80 ];
__n78["declarations"] := __n79;
__n78["kind"] := "var";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#2: Boolean.prototype.toString on not a Boolean object should throw TypeError";
__n91["raw"] := "'#2: Boolean.prototype.toString on not a Boolean object should throw TypeError'";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n58 := [ __n59, __n68, __n78, __n87 ];
__n57["body"] := __n58;
__n56["block"] := __n57;
__n92 := {  };
__n92["type"] := "CatchClause";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "e";
__n92["param"] := __n93;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "UnaryExpression";
__n97["operator"] := "!";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "instanceof";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "e";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "TypeError";
__n98["right"] := __n100;
__n97["argument"] := __n98;
__n97["prefix"] := true;
__n96["test"] := __n97;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ExpressionStatement";
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "$ERROR";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "+";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "#2: Boolean.prototype.toString on not a Boolean object should throw TypeError, not ";
__n108["raw"] := "'#2: Boolean.prototype.toString on not a Boolean object should throw TypeError, not '";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "e";
__n107["right"] := __n109;
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["expression"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n96["consequent"] := __n101;
__n96["alternate"] := null;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n92["body"] := __n94;
__n56["handler"] := __n92;
__n56["finalizer"] := null;
__n1 := [ __n2, __n56 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n110 := [ "s1", "v1", "s2", "v2" ];
__n0["variableDeclarations"] := __n110;
__n111 := [  ];
__n0["functionDeclarations"] := __n111;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}