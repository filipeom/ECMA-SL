function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["object"] := __n6;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "valueOf";
__n9["raw"] := "\"valueOf\"";
__n5["property"] := __n9;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := true;
__n11["raw"] := "true";
__n10 := [ __n11 ];
__n4["arguments"] := __n10;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: Boolean.prototype.valueOf(true) === false";
__n19["raw"] := "'#1: Boolean.prototype.valueOf(true) === false'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "NewExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Boolean";
__n24["callee"] := __n25;
__n26 := [  ];
__n24["arguments"] := __n26;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "valueOf";
__n27["raw"] := "\"valueOf\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n28 := [ __n29 ];
__n22["arguments"] := __n28;
__n21["left"] := __n22;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := false;
__n30["raw"] := "false";
__n21["right"] := __n30;
__n20["test"] := __n21;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#2: (new Boolean()).valueOf(true) === false";
__n37["raw"] := "'#2: (new Boolean()).valueOf(true) === false'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n20["consequent"] := __n31;
__n20["alternate"] := null;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "NewExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Boolean";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 0.;
__n45["raw"] := "0";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["object"] := __n42;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "valueOf";
__n46["raw"] := "\"valueOf\"";
__n41["property"] := __n46;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n47 := [ __n48 ];
__n40["arguments"] := __n47;
__n39["left"] := __n40;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := false;
__n49["raw"] := "false";
__n39["right"] := __n49;
__n38["test"] := __n39;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: (new Boolean(0)).valueOf(true) === false";
__n56["raw"] := "'#3: (new Boolean(0)).valueOf(true) === false'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n38["consequent"] := __n50;
__n38["alternate"] := null;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Boolean";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "-";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["object"] := __n61;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "valueOf";
__n66["raw"] := "\"valueOf\"";
__n60["property"] := __n66;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := false;
__n68["raw"] := "false";
__n67 := [ __n68 ];
__n59["arguments"] := __n67;
__n58["left"] := __n59;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := true;
__n69["raw"] := "true";
__n58["right"] := __n69;
__n57["test"] := __n58;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#4: (new Boolean(-1)).valueOf(false) === true";
__n76["raw"] := "'#4: (new Boolean(-1)).valueOf(false) === true'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n57["consequent"] := __n70;
__n57["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "NewExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "Boolean";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["object"] := __n81;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "valueOf";
__n85["raw"] := "\"valueOf\"";
__n80["property"] := __n85;
__n80["computed"] := true;
__n79["callee"] := __n80;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := false;
__n87["raw"] := "false";
__n86 := [ __n87 ];
__n79["arguments"] := __n86;
__n78["left"] := __n79;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := true;
__n88["raw"] := "true";
__n78["right"] := __n88;
__n77["test"] := __n78;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#5: (new Boolean(1)).valueOf(false) === true";
__n95["raw"] := "'#5: (new Boolean(1)).valueOf(false) === true'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n77["consequent"] := __n89;
__n77["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "NewExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Boolean";
__n100["callee"] := __n101;
__n103 := {  };
__n103["type"] := "NewExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "Object";
__n103["callee"] := __n104;
__n105 := [  ];
__n103["arguments"] := __n105;
__n102 := [ __n103 ];
__n100["arguments"] := __n102;
__n99["object"] := __n100;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "valueOf";
__n106["raw"] := "\"valueOf\"";
__n99["property"] := __n106;
__n99["computed"] := true;
__n98["callee"] := __n99;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := false;
__n108["raw"] := "false";
__n107 := [ __n108 ];
__n98["arguments"] := __n107;
__n97["left"] := __n98;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := true;
__n109["raw"] := "true";
__n97["right"] := __n109;
__n96["test"] := __n97;
__n110 := {  };
__n110["type"] := "BlockStatement";
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "$ERROR";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "#6: (new Boolean(new Object())).valueOf(false) === true";
__n116["raw"] := "'#6: (new Boolean(new Object())).valueOf(false) === true'";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n112["expression"] := __n113;
__n111 := [ __n112 ];
__n110["body"] := __n111;
__n96["consequent"] := __n110;
__n96["alternate"] := null;
__n1 := [ __n2, __n20, __n38, __n57, __n77, __n96 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n117 := [  ];
__n0["variableDeclarations"] := __n117;
__n118 := [  ];
__n0["functionDeclarations"] := __n118;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}