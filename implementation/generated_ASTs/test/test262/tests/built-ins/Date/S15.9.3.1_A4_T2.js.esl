function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "myObj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [ "val" ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "ThisExpression";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "value";
__n14["raw"] := "\"value\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["left"] := __n12;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "val";
__n11["right"] := __n15;
__n10["expression"] := __n11;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "ThisExpression";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "valueOf";
__n20["raw"] := "\"valueOf\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n21["id"] := null;
__n22 := [  ];
__n21["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ThrowStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "valueOf-";
__n27["raw"] := "\"valueOf-\"";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "ThisExpression";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "value";
__n30["raw"] := "\"value\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n26["right"] := __n28;
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n31 := [  ];
__n23["variableDeclarations"] := __n31;
__n32 := [  ];
__n23["functionDeclarations"] := __n32;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n21["body"] := __n23;
__n21["generator"] := false;
__n21["async"] := false;
__n21["expression"] := false;
__n17["right"] := __n21;
__n16["expression"] := __n17;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "AssignmentExpression";
__n34["operator"] := "=";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "ThisExpression";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "toString";
__n37["raw"] := "\"toString\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["left"] := __n35;
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "toString-";
__n44["raw"] := "\"toString-\"";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "ThisExpression";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "value";
__n47["raw"] := "\"value\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n43["right"] := __n45;
__n42["argument"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n48 := [  ];
__n40["variableDeclarations"] := __n48;
__n49 := [  ];
__n40["functionDeclarations"] := __n49;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n34["right"] := __n38;
__n33["expression"] := __n34;
__n9 := [ __n10, __n16, __n33 ];
__n8["body"] := __n9;
__n50 := [  ];
__n8["variableDeclarations"] := __n50;
__n51 := [  ];
__n8["functionDeclarations"] := __n51;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["async"] := false;
__n6["expression"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n52 := {  };
__n52["type"] := "TryStatement";
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "VariableDeclaration";
__n57 := {  };
__n57["type"] := "VariableDeclarator";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "x1";
__n57["id"] := __n58;
__n59 := {  };
__n59["type"] := "NewExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Date";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "NewExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "myObj";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n66 := {  };
__n66["type"] := "NewExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "myObj";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 2.;
__n69["raw"] := "2";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n70 := {  };
__n70["type"] := "NewExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "myObj";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 3.;
__n73["raw"] := "3";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n61 := [ __n62, __n66, __n70 ];
__n59["arguments"] := __n61;
__n57["init"] := __n59;
__n56 := [ __n57 ];
__n55["declarations"] := __n56;
__n55["kind"] := "var";
__n74 := {  };
__n74["type"] := "ThrowStatement";
__n75 := {  };
__n75["type"] := "NewExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Test262Error";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#1: The 1st step is calling ToNumber(year)";
__n78["raw"] := "\"#1: The 1st step is calling ToNumber(year)\"";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["argument"] := __n75;
__n54 := [ __n55, __n74 ];
__n53["body"] := __n54;
__n52["block"] := __n53;
__n79 := {  };
__n79["type"] := "CatchClause";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "e";
__n79["param"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "e";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "valueOf-1";
__n86["raw"] := "\"valueOf-1\"";
__n84["right"] := __n86;
__n83["test"] := __n84;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ThrowStatement";
__n90 := {  };
__n90["type"] := "NewExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Test262Error";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#1: The 1st step is calling ToNumber(year)";
__n93["raw"] := "\"#1: The 1st step is calling ToNumber(year)\"";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["argument"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n83["consequent"] := __n87;
__n83["alternate"] := null;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n79["body"] := __n81;
__n52["handler"] := __n79;
__n52["finalizer"] := null;
__n94 := {  };
__n94["type"] := "TryStatement";
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "VariableDeclaration";
__n99 := {  };
__n99["type"] := "VariableDeclarator";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "x2";
__n99["id"] := __n100;
__n101 := {  };
__n101["type"] := "NewExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Date";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 1.;
__n104["raw"] := "1";
__n105 := {  };
__n105["type"] := "NewExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "myObj";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 2.;
__n108["raw"] := "2";
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n109 := {  };
__n109["type"] := "NewExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "myObj";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 3.;
__n112["raw"] := "3";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n103 := [ __n104, __n105, __n109 ];
__n101["arguments"] := __n103;
__n99["init"] := __n101;
__n98 := [ __n99 ];
__n97["declarations"] := __n98;
__n97["kind"] := "var";
__n113 := {  };
__n113["type"] := "ThrowStatement";
__n114 := {  };
__n114["type"] := "NewExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "Test262Error";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#2: The 2nd step is calling ToNumber(month)";
__n117["raw"] := "\"#2: The 2nd step is calling ToNumber(month)\"";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["argument"] := __n114;
__n96 := [ __n97, __n113 ];
__n95["body"] := __n96;
__n94["block"] := __n95;
__n118 := {  };
__n118["type"] := "CatchClause";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "e";
__n118["param"] := __n119;
__n120 := {  };
__n120["type"] := "BlockStatement";
__n122 := {  };
__n122["type"] := "IfStatement";
__n123 := {  };
__n123["type"] := "BinaryExpression";
__n123["operator"] := "!==";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "e";
__n123["left"] := __n124;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "valueOf-2";
__n125["raw"] := "\"valueOf-2\"";
__n123["right"] := __n125;
__n122["test"] := __n123;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ThrowStatement";
__n129 := {  };
__n129["type"] := "NewExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "Test262Error";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#2: The 2nd step is calling ToNumber(month)";
__n132["raw"] := "\"#2: The 2nd step is calling ToNumber(month)\"";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["argument"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n122["consequent"] := __n126;
__n122["alternate"] := null;
__n121 := [ __n122 ];
__n120["body"] := __n121;
__n118["body"] := __n120;
__n94["handler"] := __n118;
__n94["finalizer"] := null;
__n133 := {  };
__n133["type"] := "TryStatement";
__n134 := {  };
__n134["type"] := "BlockStatement";
__n136 := {  };
__n136["type"] := "VariableDeclaration";
__n138 := {  };
__n138["type"] := "VariableDeclarator";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "x3";
__n138["id"] := __n139;
__n140 := {  };
__n140["type"] := "NewExpression";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "Date";
__n140["callee"] := __n141;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := 1.;
__n143["raw"] := "1";
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := 2.;
__n144["raw"] := "2";
__n145 := {  };
__n145["type"] := "NewExpression";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "myObj";
__n145["callee"] := __n146;
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := 3.;
__n148["raw"] := "3";
__n147 := [ __n148 ];
__n145["arguments"] := __n147;
__n142 := [ __n143, __n144, __n145 ];
__n140["arguments"] := __n142;
__n138["init"] := __n140;
__n137 := [ __n138 ];
__n136["declarations"] := __n137;
__n136["kind"] := "var";
__n149 := {  };
__n149["type"] := "ThrowStatement";
__n150 := {  };
__n150["type"] := "NewExpression";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "Test262Error";
__n150["callee"] := __n151;
__n153 := {  };
__n153["type"] := "Literal";
__n153["value"] := "#3: The 3rd step is calling ToNumber(date)";
__n153["raw"] := "\"#3: The 3rd step is calling ToNumber(date)\"";
__n152 := [ __n153 ];
__n150["arguments"] := __n152;
__n149["argument"] := __n150;
__n135 := [ __n136, __n149 ];
__n134["body"] := __n135;
__n133["block"] := __n134;
__n154 := {  };
__n154["type"] := "CatchClause";
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "e";
__n154["param"] := __n155;
__n156 := {  };
__n156["type"] := "BlockStatement";
__n158 := {  };
__n158["type"] := "IfStatement";
__n159 := {  };
__n159["type"] := "BinaryExpression";
__n159["operator"] := "!==";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "e";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := "valueOf-3";
__n161["raw"] := "\"valueOf-3\"";
__n159["right"] := __n161;
__n158["test"] := __n159;
__n162 := {  };
__n162["type"] := "BlockStatement";
__n164 := {  };
__n164["type"] := "ThrowStatement";
__n165 := {  };
__n165["type"] := "NewExpression";
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "Test262Error";
__n165["callee"] := __n166;
__n168 := {  };
__n168["type"] := "Literal";
__n168["value"] := "#3: The 3rd step is calling ToNumber(date)";
__n168["raw"] := "\"#3: The 3rd step is calling ToNumber(date)\"";
__n167 := [ __n168 ];
__n165["arguments"] := __n167;
__n164["argument"] := __n165;
__n163 := [ __n164 ];
__n162["body"] := __n163;
__n158["consequent"] := __n162;
__n158["alternate"] := null;
__n157 := [ __n158 ];
__n156["body"] := __n157;
__n154["body"] := __n156;
__n133["handler"] := __n154;
__n133["finalizer"] := null;
__n1 := [ __n2, __n52, __n94, __n133 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n169 := [ "myObj", "x1", "x2", "x3" ];
__n0["variableDeclarations"] := __n169;
__n170 := [  ];
__n0["functionDeclarations"] := __n170;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}