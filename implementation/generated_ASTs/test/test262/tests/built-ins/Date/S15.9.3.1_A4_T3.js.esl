function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "myObj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [ "val" ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "ThisExpression";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "value";
__n14["raw"] := "\"value\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["left"] := __n12;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "val";
__n11["right"] := __n15;
__n10["expression"] := __n11;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "ThisExpression";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "valueOf";
__n20["raw"] := "\"valueOf\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n21["id"] := null;
__n22 := [  ];
__n21["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ThrowStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "valueOf-";
__n27["raw"] := "\"valueOf-\"";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "ThisExpression";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "value";
__n30["raw"] := "\"value\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n26["right"] := __n28;
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n31 := [  ];
__n23["variableDeclarations"] := __n31;
__n32 := [  ];
__n23["functionDeclarations"] := __n32;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n21["body"] := __n23;
__n21["generator"] := false;
__n21["expression"] := false;
__n21["async"] := false;
__n17["right"] := __n21;
__n16["expression"] := __n17;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "AssignmentExpression";
__n34["operator"] := "=";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "ThisExpression";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "toString";
__n37["raw"] := "\"toString\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["left"] := __n35;
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "toString-";
__n44["raw"] := "\"toString-\"";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "ThisExpression";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "value";
__n47["raw"] := "\"value\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n43["right"] := __n45;
__n42["argument"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n48 := [  ];
__n40["variableDeclarations"] := __n48;
__n49 := [  ];
__n40["functionDeclarations"] := __n49;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["expression"] := false;
__n38["async"] := false;
__n34["right"] := __n38;
__n33["expression"] := __n34;
__n9 := [ __n10, __n16, __n33 ];
__n8["body"] := __n9;
__n50 := [  ];
__n8["variableDeclarations"] := __n50;
__n51 := [  ];
__n8["functionDeclarations"] := __n51;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n52 := {  };
__n52["type"] := "TryStatement";
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "VariableDeclaration";
__n57 := {  };
__n57["type"] := "VariableDeclarator";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "x1";
__n57["id"] := __n58;
__n59 := {  };
__n59["type"] := "NewExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Date";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "NewExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "myObj";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n66 := {  };
__n66["type"] := "NewExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "myObj";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 2.;
__n69["raw"] := "2";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n70 := {  };
__n70["type"] := "NewExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "myObj";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 3.;
__n73["raw"] := "3";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n74 := {  };
__n74["type"] := "NewExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "myObj";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 4.;
__n77["raw"] := "4";
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n61 := [ __n62, __n66, __n70, __n74 ];
__n59["arguments"] := __n61;
__n57["init"] := __n59;
__n56 := [ __n57 ];
__n55["declarations"] := __n56;
__n55["kind"] := "var";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#1: The 1st step is calling ToNumber(year)";
__n82["raw"] := "\"#1: The 1st step is calling ToNumber(year)\"";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n54 := [ __n55, __n78 ];
__n53["body"] := __n54;
__n52["block"] := __n53;
__n83 := {  };
__n83["type"] := "CatchClause";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "e";
__n83["param"] := __n84;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "!==";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "e";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "valueOf-1";
__n90["raw"] := "\"valueOf-1\"";
__n88["right"] := __n90;
__n87["test"] := __n88;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ExpressionStatement";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "$ERROR";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#1: The 1st step is calling ToNumber(year)";
__n97["raw"] := "\"#1: The 1st step is calling ToNumber(year)\"";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["expression"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n87["consequent"] := __n91;
__n87["alternate"] := null;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n83["body"] := __n85;
__n52["handler"] := __n83;
__n52["finalizer"] := null;
__n98 := {  };
__n98["type"] := "TryStatement";
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "VariableDeclaration";
__n103 := {  };
__n103["type"] := "VariableDeclarator";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "x2";
__n103["id"] := __n104;
__n105 := {  };
__n105["type"] := "NewExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "Date";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 1.;
__n108["raw"] := "1";
__n109 := {  };
__n109["type"] := "NewExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "myObj";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 2.;
__n112["raw"] := "2";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n113 := {  };
__n113["type"] := "NewExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "myObj";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := 3.;
__n116["raw"] := "3";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n117 := {  };
__n117["type"] := "NewExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "myObj";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 4.;
__n120["raw"] := "4";
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n107 := [ __n108, __n109, __n113, __n117 ];
__n105["arguments"] := __n107;
__n103["init"] := __n105;
__n102 := [ __n103 ];
__n101["declarations"] := __n102;
__n101["kind"] := "var";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "$ERROR";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "#2: The 2nd step is calling ToNumber(month)";
__n125["raw"] := "\"#2: The 2nd step is calling ToNumber(month)\"";
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n100 := [ __n101, __n121 ];
__n99["body"] := __n100;
__n98["block"] := __n99;
__n126 := {  };
__n126["type"] := "CatchClause";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "e";
__n126["param"] := __n127;
__n128 := {  };
__n128["type"] := "BlockStatement";
__n130 := {  };
__n130["type"] := "IfStatement";
__n131 := {  };
__n131["type"] := "BinaryExpression";
__n131["operator"] := "!==";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "e";
__n131["left"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "valueOf-2";
__n133["raw"] := "\"valueOf-2\"";
__n131["right"] := __n133;
__n130["test"] := __n131;
__n134 := {  };
__n134["type"] := "BlockStatement";
__n136 := {  };
__n136["type"] := "ExpressionStatement";
__n137 := {  };
__n137["type"] := "CallExpression";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "$ERROR";
__n137["callee"] := __n138;
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "#2: The 2nd step is calling ToNumber(month)";
__n140["raw"] := "\"#2: The 2nd step is calling ToNumber(month)\"";
__n139 := [ __n140 ];
__n137["arguments"] := __n139;
__n136["expression"] := __n137;
__n135 := [ __n136 ];
__n134["body"] := __n135;
__n130["consequent"] := __n134;
__n130["alternate"] := null;
__n129 := [ __n130 ];
__n128["body"] := __n129;
__n126["body"] := __n128;
__n98["handler"] := __n126;
__n98["finalizer"] := null;
__n141 := {  };
__n141["type"] := "TryStatement";
__n142 := {  };
__n142["type"] := "BlockStatement";
__n144 := {  };
__n144["type"] := "VariableDeclaration";
__n146 := {  };
__n146["type"] := "VariableDeclarator";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "x3";
__n146["id"] := __n147;
__n148 := {  };
__n148["type"] := "NewExpression";
__n149 := {  };
__n149["type"] := "Identifier";
__n149["name"] := "Date";
__n148["callee"] := __n149;
__n151 := {  };
__n151["type"] := "Literal";
__n151["value"] := 1.;
__n151["raw"] := "1";
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := 2.;
__n152["raw"] := "2";
__n153 := {  };
__n153["type"] := "NewExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "myObj";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := 3.;
__n156["raw"] := "3";
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n157 := {  };
__n157["type"] := "NewExpression";
__n158 := {  };
__n158["type"] := "Identifier";
__n158["name"] := "myObj";
__n157["callee"] := __n158;
__n160 := {  };
__n160["type"] := "Literal";
__n160["value"] := 4.;
__n160["raw"] := "4";
__n159 := [ __n160 ];
__n157["arguments"] := __n159;
__n150 := [ __n151, __n152, __n153, __n157 ];
__n148["arguments"] := __n150;
__n146["init"] := __n148;
__n145 := [ __n146 ];
__n144["declarations"] := __n145;
__n144["kind"] := "var";
__n161 := {  };
__n161["type"] := "ExpressionStatement";
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "$ERROR";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "#3: The 3rd step is calling ToNumber(date)";
__n165["raw"] := "\"#3: The 3rd step is calling ToNumber(date)\"";
__n164 := [ __n165 ];
__n162["arguments"] := __n164;
__n161["expression"] := __n162;
__n143 := [ __n144, __n161 ];
__n142["body"] := __n143;
__n141["block"] := __n142;
__n166 := {  };
__n166["type"] := "CatchClause";
__n167 := {  };
__n167["type"] := "Identifier";
__n167["name"] := "e";
__n166["param"] := __n167;
__n168 := {  };
__n168["type"] := "BlockStatement";
__n170 := {  };
__n170["type"] := "IfStatement";
__n171 := {  };
__n171["type"] := "BinaryExpression";
__n171["operator"] := "!==";
__n172 := {  };
__n172["type"] := "Identifier";
__n172["name"] := "e";
__n171["left"] := __n172;
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "valueOf-3";
__n173["raw"] := "\"valueOf-3\"";
__n171["right"] := __n173;
__n170["test"] := __n171;
__n174 := {  };
__n174["type"] := "BlockStatement";
__n176 := {  };
__n176["type"] := "ExpressionStatement";
__n177 := {  };
__n177["type"] := "CallExpression";
__n178 := {  };
__n178["type"] := "Identifier";
__n178["name"] := "$ERROR";
__n177["callee"] := __n178;
__n180 := {  };
__n180["type"] := "Literal";
__n180["value"] := "#3: The 3rd step is calling ToNumber(date)";
__n180["raw"] := "\"#3: The 3rd step is calling ToNumber(date)\"";
__n179 := [ __n180 ];
__n177["arguments"] := __n179;
__n176["expression"] := __n177;
__n175 := [ __n176 ];
__n174["body"] := __n175;
__n170["consequent"] := __n174;
__n170["alternate"] := null;
__n169 := [ __n170 ];
__n168["body"] := __n169;
__n166["body"] := __n168;
__n141["handler"] := __n166;
__n141["finalizer"] := null;
__n181 := {  };
__n181["type"] := "TryStatement";
__n182 := {  };
__n182["type"] := "BlockStatement";
__n184 := {  };
__n184["type"] := "VariableDeclaration";
__n186 := {  };
__n186["type"] := "VariableDeclarator";
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "x4";
__n186["id"] := __n187;
__n188 := {  };
__n188["type"] := "NewExpression";
__n189 := {  };
__n189["type"] := "Identifier";
__n189["name"] := "Date";
__n188["callee"] := __n189;
__n191 := {  };
__n191["type"] := "Literal";
__n191["value"] := 1.;
__n191["raw"] := "1";
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := 2.;
__n192["raw"] := "2";
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := 3.;
__n193["raw"] := "3";
__n194 := {  };
__n194["type"] := "NewExpression";
__n195 := {  };
__n195["type"] := "Identifier";
__n195["name"] := "myObj";
__n194["callee"] := __n195;
__n197 := {  };
__n197["type"] := "Literal";
__n197["value"] := 4.;
__n197["raw"] := "4";
__n196 := [ __n197 ];
__n194["arguments"] := __n196;
__n190 := [ __n191, __n192, __n193, __n194 ];
__n188["arguments"] := __n190;
__n186["init"] := __n188;
__n185 := [ __n186 ];
__n184["declarations"] := __n185;
__n184["kind"] := "var";
__n198 := {  };
__n198["type"] := "ExpressionStatement";
__n199 := {  };
__n199["type"] := "CallExpression";
__n200 := {  };
__n200["type"] := "Identifier";
__n200["name"] := "$ERROR";
__n199["callee"] := __n200;
__n202 := {  };
__n202["type"] := "Literal";
__n202["value"] := "#4: The 4th step is calling ToNumber(hours)";
__n202["raw"] := "\"#4: The 4th step is calling ToNumber(hours)\"";
__n201 := [ __n202 ];
__n199["arguments"] := __n201;
__n198["expression"] := __n199;
__n183 := [ __n184, __n198 ];
__n182["body"] := __n183;
__n181["block"] := __n182;
__n203 := {  };
__n203["type"] := "CatchClause";
__n204 := {  };
__n204["type"] := "Identifier";
__n204["name"] := "e";
__n203["param"] := __n204;
__n205 := {  };
__n205["type"] := "BlockStatement";
__n207 := {  };
__n207["type"] := "IfStatement";
__n208 := {  };
__n208["type"] := "BinaryExpression";
__n208["operator"] := "!==";
__n209 := {  };
__n209["type"] := "Identifier";
__n209["name"] := "e";
__n208["left"] := __n209;
__n210 := {  };
__n210["type"] := "Literal";
__n210["value"] := "valueOf-4";
__n210["raw"] := "\"valueOf-4\"";
__n208["right"] := __n210;
__n207["test"] := __n208;
__n211 := {  };
__n211["type"] := "BlockStatement";
__n213 := {  };
__n213["type"] := "ExpressionStatement";
__n214 := {  };
__n214["type"] := "CallExpression";
__n215 := {  };
__n215["type"] := "Identifier";
__n215["name"] := "$ERROR";
__n214["callee"] := __n215;
__n217 := {  };
__n217["type"] := "Literal";
__n217["value"] := "#4: The 4th step is calling ToNumber(hours)";
__n217["raw"] := "\"#4: The 4th step is calling ToNumber(hours)\"";
__n216 := [ __n217 ];
__n214["arguments"] := __n216;
__n213["expression"] := __n214;
__n212 := [ __n213 ];
__n211["body"] := __n212;
__n207["consequent"] := __n211;
__n207["alternate"] := null;
__n206 := [ __n207 ];
__n205["body"] := __n206;
__n203["body"] := __n205;
__n181["handler"] := __n203;
__n181["finalizer"] := null;
__n1 := [ __n2, __n52, __n98, __n141, __n181 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n218 := [ "myObj", "x1", "x2", "x3", "x4" ];
__n0["variableDeclarations"] := __n218;
__n219 := [  ];
__n0["functionDeclarations"] := __n219;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}