function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "DateValue";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "DateValue";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1899.;
__n12["raw"] := "1899";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n11 := [ __n12, __n13 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: The value should be NaN";
__n20["raw"] := "\"#1: The value should be NaN\"";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n4["consequent"] := __n14;
__n4["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "!";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "isNaN";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "DateValue";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1899.;
__n29["raw"] := "1899";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 12.;
__n30["raw"] := "12";
__n28 := [ __n29, __n30 ];
__n26["arguments"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["test"] := __n22;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#2: The value should be NaN";
__n37["raw"] := "\"#2: The value should be NaN\"";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n21["consequent"] := __n31;
__n21["alternate"] := null;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "!";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "isNaN";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "DateValue";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1900.;
__n46["raw"] := "1900";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n45 := [ __n46, __n47 ];
__n43["arguments"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n38["test"] := __n39;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#3: The value should be NaN";
__n54["raw"] := "\"#3: The value should be NaN\"";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n38["consequent"] := __n48;
__n38["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "!";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "isNaN";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "DateValue";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1969.;
__n63["raw"] := "1969";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 11.;
__n64["raw"] := "11";
__n62 := [ __n63, __n64 ];
__n60["arguments"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n55["test"] := __n56;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#4: The value should be NaN";
__n71["raw"] := "\"#4: The value should be NaN\"";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n55["consequent"] := __n65;
__n55["alternate"] := null;
__n72 := {  };
__n72["type"] := "IfStatement";
__n73 := {  };
__n73["type"] := "UnaryExpression";
__n73["operator"] := "!";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "isNaN";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "DateValue";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 1969.;
__n80["raw"] := "1969";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 12.;
__n81["raw"] := "12";
__n79 := [ __n80, __n81 ];
__n77["arguments"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["argument"] := __n74;
__n73["prefix"] := true;
__n72["test"] := __n73;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#5: The value should be NaN";
__n88["raw"] := "\"#5: The value should be NaN\"";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n72["consequent"] := __n82;
__n72["alternate"] := null;
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "UnaryExpression";
__n90["operator"] := "!";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "isNaN";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "DateValue";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 1970.;
__n97["raw"] := "1970";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 0.;
__n98["raw"] := "0";
__n96 := [ __n97, __n98 ];
__n94["arguments"] := __n96;
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["argument"] := __n91;
__n90["prefix"] := true;
__n89["test"] := __n90;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "#6: The value should be NaN";
__n105["raw"] := "\"#6: The value should be NaN\"";
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n89["consequent"] := __n99;
__n89["alternate"] := null;
__n106 := {  };
__n106["type"] := "IfStatement";
__n107 := {  };
__n107["type"] := "UnaryExpression";
__n107["operator"] := "!";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "isNaN";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "DateValue";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 1999.;
__n114["raw"] := "1999";
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 11.;
__n115["raw"] := "11";
__n113 := [ __n114, __n115 ];
__n111["arguments"] := __n113;
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["argument"] := __n108;
__n107["prefix"] := true;
__n106["test"] := __n107;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "ExpressionStatement";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "$ERROR";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#7: The value should be NaN";
__n122["raw"] := "\"#7: The value should be NaN\"";
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["expression"] := __n119;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n106["consequent"] := __n116;
__n106["alternate"] := null;
__n123 := {  };
__n123["type"] := "IfStatement";
__n124 := {  };
__n124["type"] := "UnaryExpression";
__n124["operator"] := "!";
__n125 := {  };
__n125["type"] := "CallExpression";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "isNaN";
__n125["callee"] := __n126;
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "DateValue";
__n128["callee"] := __n129;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := 1999.;
__n131["raw"] := "1999";
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 12.;
__n132["raw"] := "12";
__n130 := [ __n131, __n132 ];
__n128["arguments"] := __n130;
__n127 := [ __n128 ];
__n125["arguments"] := __n127;
__n124["argument"] := __n125;
__n124["prefix"] := true;
__n123["test"] := __n124;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$ERROR";
__n136["callee"] := __n137;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "#8: The value should be NaN";
__n139["raw"] := "\"#8: The value should be NaN\"";
__n138 := [ __n139 ];
__n136["arguments"] := __n138;
__n135["expression"] := __n136;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n123["consequent"] := __n133;
__n123["alternate"] := null;
__n140 := {  };
__n140["type"] := "IfStatement";
__n141 := {  };
__n141["type"] := "UnaryExpression";
__n141["operator"] := "!";
__n142 := {  };
__n142["type"] := "CallExpression";
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "isNaN";
__n142["callee"] := __n143;
__n145 := {  };
__n145["type"] := "CallExpression";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "DateValue";
__n145["callee"] := __n146;
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := 2000.;
__n148["raw"] := "2000";
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := 0.;
__n149["raw"] := "0";
__n147 := [ __n148, __n149 ];
__n145["arguments"] := __n147;
__n144 := [ __n145 ];
__n142["arguments"] := __n144;
__n141["argument"] := __n142;
__n141["prefix"] := true;
__n140["test"] := __n141;
__n150 := {  };
__n150["type"] := "BlockStatement";
__n152 := {  };
__n152["type"] := "ExpressionStatement";
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "$ERROR";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := "#9: The value should be NaN";
__n156["raw"] := "\"#9: The value should be NaN\"";
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n152["expression"] := __n153;
__n151 := [ __n152 ];
__n150["body"] := __n151;
__n140["consequent"] := __n150;
__n140["alternate"] := null;
__n157 := {  };
__n157["type"] := "IfStatement";
__n158 := {  };
__n158["type"] := "UnaryExpression";
__n158["operator"] := "!";
__n159 := {  };
__n159["type"] := "CallExpression";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "isNaN";
__n159["callee"] := __n160;
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "DateValue";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := 2099.;
__n165["raw"] := "2099";
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := 11.;
__n166["raw"] := "11";
__n164 := [ __n165, __n166 ];
__n162["arguments"] := __n164;
__n161 := [ __n162 ];
__n159["arguments"] := __n161;
__n158["argument"] := __n159;
__n158["prefix"] := true;
__n157["test"] := __n158;
__n167 := {  };
__n167["type"] := "BlockStatement";
__n169 := {  };
__n169["type"] := "ExpressionStatement";
__n170 := {  };
__n170["type"] := "CallExpression";
__n171 := {  };
__n171["type"] := "Identifier";
__n171["name"] := "$ERROR";
__n170["callee"] := __n171;
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "#10: The value should be NaN";
__n173["raw"] := "\"#10: The value should be NaN\"";
__n172 := [ __n173 ];
__n170["arguments"] := __n172;
__n169["expression"] := __n170;
__n168 := [ __n169 ];
__n167["body"] := __n168;
__n157["consequent"] := __n167;
__n157["alternate"] := null;
__n174 := {  };
__n174["type"] := "IfStatement";
__n175 := {  };
__n175["type"] := "UnaryExpression";
__n175["operator"] := "!";
__n176 := {  };
__n176["type"] := "CallExpression";
__n177 := {  };
__n177["type"] := "Identifier";
__n177["name"] := "isNaN";
__n176["callee"] := __n177;
__n179 := {  };
__n179["type"] := "CallExpression";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "DateValue";
__n179["callee"] := __n180;
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := 2099.;
__n182["raw"] := "2099";
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := 12.;
__n183["raw"] := "12";
__n181 := [ __n182, __n183 ];
__n179["arguments"] := __n181;
__n178 := [ __n179 ];
__n176["arguments"] := __n178;
__n175["argument"] := __n176;
__n175["prefix"] := true;
__n174["test"] := __n175;
__n184 := {  };
__n184["type"] := "BlockStatement";
__n186 := {  };
__n186["type"] := "ExpressionStatement";
__n187 := {  };
__n187["type"] := "CallExpression";
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "$ERROR";
__n187["callee"] := __n188;
__n190 := {  };
__n190["type"] := "Literal";
__n190["value"] := "#11: The value should be NaN";
__n190["raw"] := "\"#11: The value should be NaN\"";
__n189 := [ __n190 ];
__n187["arguments"] := __n189;
__n186["expression"] := __n187;
__n185 := [ __n186 ];
__n184["body"] := __n185;
__n174["consequent"] := __n184;
__n174["alternate"] := null;
__n191 := {  };
__n191["type"] := "IfStatement";
__n192 := {  };
__n192["type"] := "UnaryExpression";
__n192["operator"] := "!";
__n193 := {  };
__n193["type"] := "CallExpression";
__n194 := {  };
__n194["type"] := "Identifier";
__n194["name"] := "isNaN";
__n193["callee"] := __n194;
__n196 := {  };
__n196["type"] := "CallExpression";
__n197 := {  };
__n197["type"] := "Identifier";
__n197["name"] := "DateValue";
__n196["callee"] := __n197;
__n199 := {  };
__n199["type"] := "Literal";
__n199["value"] := 2100.;
__n199["raw"] := "2100";
__n200 := {  };
__n200["type"] := "Literal";
__n200["value"] := 0.;
__n200["raw"] := "0";
__n198 := [ __n199, __n200 ];
__n196["arguments"] := __n198;
__n195 := [ __n196 ];
__n193["arguments"] := __n195;
__n192["argument"] := __n193;
__n192["prefix"] := true;
__n191["test"] := __n192;
__n201 := {  };
__n201["type"] := "BlockStatement";
__n203 := {  };
__n203["type"] := "ExpressionStatement";
__n204 := {  };
__n204["type"] := "CallExpression";
__n205 := {  };
__n205["type"] := "Identifier";
__n205["name"] := "$ERROR";
__n204["callee"] := __n205;
__n207 := {  };
__n207["type"] := "Literal";
__n207["value"] := "#12: The value should be NaN";
__n207["raw"] := "\"#12: The value should be NaN\"";
__n206 := [ __n207 ];
__n204["arguments"] := __n206;
__n203["expression"] := __n204;
__n202 := [ __n203 ];
__n201["body"] := __n202;
__n191["consequent"] := __n201;
__n191["alternate"] := null;
__n1 := [ __n2, __n4, __n21, __n38, __n55, __n72, __n89, __n106, __n123, __n140, __n157, __n174, __n191 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n208 := [  ];
__n0["variableDeclarations"] := __n208;
__n210 := {  };
__n210["type"] := "FunctionDeclaration";
__n211 := {  };
__n211["type"] := "Identifier";
__n211["name"] := "DateValue";
__n210["id"] := __n211;
__n212 := [ "year", "month", "date", "hours", "minutes", "seconds", "ms" ];
__n210["params"] := __n212;
__n213 := {  };
__n213["type"] := "BlockStatement";
__n215 := {  };
__n215["type"] := "ReturnStatement";
__n216 := {  };
__n216["type"] := "CallExpression";
__n217 := {  };
__n217["type"] := "MemberExpression";
__n218 := {  };
__n218["type"] := "NewExpression";
__n219 := {  };
__n219["type"] := "Identifier";
__n219["name"] := "Date";
__n218["callee"] := __n219;
__n221 := {  };
__n221["type"] := "Identifier";
__n221["name"] := "year";
__n222 := {  };
__n222["type"] := "Identifier";
__n222["name"] := "month";
__n223 := {  };
__n223["type"] := "Identifier";
__n223["name"] := "date";
__n224 := {  };
__n224["type"] := "Identifier";
__n224["name"] := "hours";
__n225 := {  };
__n225["type"] := "Identifier";
__n225["name"] := "minutes";
__n226 := {  };
__n226["type"] := "Identifier";
__n226["name"] := "seconds";
__n227 := {  };
__n227["type"] := "Identifier";
__n227["name"] := "ms";
__n220 := [ __n221, __n222, __n223, __n224, __n225, __n226, __n227 ];
__n218["arguments"] := __n220;
__n217["object"] := __n218;
__n228 := {  };
__n228["type"] := "Literal";
__n228["value"] := "valueOf";
__n228["raw"] := "\"valueOf\"";
__n217["property"] := __n228;
__n217["computed"] := true;
__n216["callee"] := __n217;
__n229 := [  ];
__n216["arguments"] := __n229;
__n215["argument"] := __n216;
__n214 := [ __n215 ];
__n213["body"] := __n214;
__n230 := [  ];
__n213["variableDeclarations"] := __n230;
__n231 := [  ];
__n213["functionDeclarations"] := __n231;
__n213["codeType"] := "function";
__n213["strict"] := false;
__n210["body"] := __n213;
__n210["generator"] := false;
__n210["expression"] := false;
__n210["async"] := false;
__n209 := [ __n210 ];
__n0["functionDeclarations"] := __n209;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}