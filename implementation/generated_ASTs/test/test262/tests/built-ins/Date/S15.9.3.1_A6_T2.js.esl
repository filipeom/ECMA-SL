function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "DateValue";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "DateValue";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1899.;
__n12["raw"] := "1899";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 31.;
__n14["raw"] := "31";
__n11 := [ __n12, __n13, __n14 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: The value should be NaN";
__n21["raw"] := "\"#1: The value should be NaN\"";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n4["consequent"] := __n15;
__n4["alternate"] := null;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "!";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "isNaN";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "DateValue";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1899.;
__n30["raw"] := "1899";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 12.;
__n31["raw"] := "12";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n29 := [ __n30, __n31, __n32 ];
__n27["arguments"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n22["test"] := __n23;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: The value should be NaN";
__n39["raw"] := "\"#2: The value should be NaN\"";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n22["consequent"] := __n33;
__n22["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "!";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "isNaN";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "DateValue";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1900.;
__n48["raw"] := "1900";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 0.;
__n49["raw"] := "0";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n47 := [ __n48, __n49, __n50 ];
__n45["arguments"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["test"] := __n41;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#3: The value should be NaN";
__n57["raw"] := "\"#3: The value should be NaN\"";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n40["consequent"] := __n51;
__n40["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "!";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "isNaN";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "DateValue";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1969.;
__n66["raw"] := "1969";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 11.;
__n67["raw"] := "11";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 31.;
__n68["raw"] := "31";
__n65 := [ __n66, __n67, __n68 ];
__n63["arguments"] := __n65;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n58["test"] := __n59;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: The value should be NaN";
__n75["raw"] := "\"#4: The value should be NaN\"";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n58["consequent"] := __n69;
__n58["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "!";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "isNaN";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "DateValue";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1969.;
__n84["raw"] := "1969";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 12.;
__n85["raw"] := "12";
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 1.;
__n86["raw"] := "1";
__n83 := [ __n84, __n85, __n86 ];
__n81["arguments"] := __n83;
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["test"] := __n77;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#5: The value should be NaN";
__n93["raw"] := "\"#5: The value should be NaN\"";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n76["consequent"] := __n87;
__n76["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "UnaryExpression";
__n95["operator"] := "!";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "isNaN";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "DateValue";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := 1970.;
__n102["raw"] := "1970";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := 0.;
__n103["raw"] := "0";
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 1.;
__n104["raw"] := "1";
__n101 := [ __n102, __n103, __n104 ];
__n99["arguments"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["argument"] := __n96;
__n95["prefix"] := true;
__n94["test"] := __n95;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "$ERROR";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "#6: The value should be NaN";
__n111["raw"] := "\"#6: The value should be NaN\"";
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["expression"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n94["consequent"] := __n105;
__n94["alternate"] := null;
__n112 := {  };
__n112["type"] := "IfStatement";
__n113 := {  };
__n113["type"] := "UnaryExpression";
__n113["operator"] := "!";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "isNaN";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "DateValue";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 1999.;
__n120["raw"] := "1999";
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := 11.;
__n121["raw"] := "11";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := 31.;
__n122["raw"] := "31";
__n119 := [ __n120, __n121, __n122 ];
__n117["arguments"] := __n119;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["argument"] := __n114;
__n113["prefix"] := true;
__n112["test"] := __n113;
__n123 := {  };
__n123["type"] := "BlockStatement";
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "$ERROR";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "#7: The value should be NaN";
__n129["raw"] := "\"#7: The value should be NaN\"";
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["expression"] := __n126;
__n124 := [ __n125 ];
__n123["body"] := __n124;
__n112["consequent"] := __n123;
__n112["alternate"] := null;
__n130 := {  };
__n130["type"] := "IfStatement";
__n131 := {  };
__n131["type"] := "UnaryExpression";
__n131["operator"] := "!";
__n132 := {  };
__n132["type"] := "CallExpression";
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "isNaN";
__n132["callee"] := __n133;
__n135 := {  };
__n135["type"] := "CallExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "DateValue";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := 1999.;
__n138["raw"] := "1999";
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := 12.;
__n139["raw"] := "12";
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := 1.;
__n140["raw"] := "1";
__n137 := [ __n138, __n139, __n140 ];
__n135["arguments"] := __n137;
__n134 := [ __n135 ];
__n132["arguments"] := __n134;
__n131["argument"] := __n132;
__n131["prefix"] := true;
__n130["test"] := __n131;
__n141 := {  };
__n141["type"] := "BlockStatement";
__n143 := {  };
__n143["type"] := "ExpressionStatement";
__n144 := {  };
__n144["type"] := "CallExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "$ERROR";
__n144["callee"] := __n145;
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := "#8: The value should be NaN";
__n147["raw"] := "\"#8: The value should be NaN\"";
__n146 := [ __n147 ];
__n144["arguments"] := __n146;
__n143["expression"] := __n144;
__n142 := [ __n143 ];
__n141["body"] := __n142;
__n130["consequent"] := __n141;
__n130["alternate"] := null;
__n148 := {  };
__n148["type"] := "IfStatement";
__n149 := {  };
__n149["type"] := "UnaryExpression";
__n149["operator"] := "!";
__n150 := {  };
__n150["type"] := "CallExpression";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "isNaN";
__n150["callee"] := __n151;
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "DateValue";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := 2000.;
__n156["raw"] := "2000";
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := 0.;
__n157["raw"] := "0";
__n158 := {  };
__n158["type"] := "Literal";
__n158["value"] := 1.;
__n158["raw"] := "1";
__n155 := [ __n156, __n157, __n158 ];
__n153["arguments"] := __n155;
__n152 := [ __n153 ];
__n150["arguments"] := __n152;
__n149["argument"] := __n150;
__n149["prefix"] := true;
__n148["test"] := __n149;
__n159 := {  };
__n159["type"] := "BlockStatement";
__n161 := {  };
__n161["type"] := "ExpressionStatement";
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "$ERROR";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "#9: The value should be NaN";
__n165["raw"] := "\"#9: The value should be NaN\"";
__n164 := [ __n165 ];
__n162["arguments"] := __n164;
__n161["expression"] := __n162;
__n160 := [ __n161 ];
__n159["body"] := __n160;
__n148["consequent"] := __n159;
__n148["alternate"] := null;
__n166 := {  };
__n166["type"] := "IfStatement";
__n167 := {  };
__n167["type"] := "UnaryExpression";
__n167["operator"] := "!";
__n168 := {  };
__n168["type"] := "CallExpression";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "isNaN";
__n168["callee"] := __n169;
__n171 := {  };
__n171["type"] := "CallExpression";
__n172 := {  };
__n172["type"] := "Identifier";
__n172["name"] := "DateValue";
__n171["callee"] := __n172;
__n174 := {  };
__n174["type"] := "Literal";
__n174["value"] := 2099.;
__n174["raw"] := "2099";
__n175 := {  };
__n175["type"] := "Literal";
__n175["value"] := 11.;
__n175["raw"] := "11";
__n176 := {  };
__n176["type"] := "Literal";
__n176["value"] := 31.;
__n176["raw"] := "31";
__n173 := [ __n174, __n175, __n176 ];
__n171["arguments"] := __n173;
__n170 := [ __n171 ];
__n168["arguments"] := __n170;
__n167["argument"] := __n168;
__n167["prefix"] := true;
__n166["test"] := __n167;
__n177 := {  };
__n177["type"] := "BlockStatement";
__n179 := {  };
__n179["type"] := "ExpressionStatement";
__n180 := {  };
__n180["type"] := "CallExpression";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "$ERROR";
__n180["callee"] := __n181;
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := "#10: The value should be NaN";
__n183["raw"] := "\"#10: The value should be NaN\"";
__n182 := [ __n183 ];
__n180["arguments"] := __n182;
__n179["expression"] := __n180;
__n178 := [ __n179 ];
__n177["body"] := __n178;
__n166["consequent"] := __n177;
__n166["alternate"] := null;
__n184 := {  };
__n184["type"] := "IfStatement";
__n185 := {  };
__n185["type"] := "UnaryExpression";
__n185["operator"] := "!";
__n186 := {  };
__n186["type"] := "CallExpression";
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "isNaN";
__n186["callee"] := __n187;
__n189 := {  };
__n189["type"] := "CallExpression";
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "DateValue";
__n189["callee"] := __n190;
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := 2099.;
__n192["raw"] := "2099";
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := 12.;
__n193["raw"] := "12";
__n194 := {  };
__n194["type"] := "Literal";
__n194["value"] := 1.;
__n194["raw"] := "1";
__n191 := [ __n192, __n193, __n194 ];
__n189["arguments"] := __n191;
__n188 := [ __n189 ];
__n186["arguments"] := __n188;
__n185["argument"] := __n186;
__n185["prefix"] := true;
__n184["test"] := __n185;
__n195 := {  };
__n195["type"] := "BlockStatement";
__n197 := {  };
__n197["type"] := "ExpressionStatement";
__n198 := {  };
__n198["type"] := "CallExpression";
__n199 := {  };
__n199["type"] := "Identifier";
__n199["name"] := "$ERROR";
__n198["callee"] := __n199;
__n201 := {  };
__n201["type"] := "Literal";
__n201["value"] := "#11: The value should be NaN";
__n201["raw"] := "\"#11: The value should be NaN\"";
__n200 := [ __n201 ];
__n198["arguments"] := __n200;
__n197["expression"] := __n198;
__n196 := [ __n197 ];
__n195["body"] := __n196;
__n184["consequent"] := __n195;
__n184["alternate"] := null;
__n202 := {  };
__n202["type"] := "IfStatement";
__n203 := {  };
__n203["type"] := "UnaryExpression";
__n203["operator"] := "!";
__n204 := {  };
__n204["type"] := "CallExpression";
__n205 := {  };
__n205["type"] := "Identifier";
__n205["name"] := "isNaN";
__n204["callee"] := __n205;
__n207 := {  };
__n207["type"] := "CallExpression";
__n208 := {  };
__n208["type"] := "Identifier";
__n208["name"] := "DateValue";
__n207["callee"] := __n208;
__n210 := {  };
__n210["type"] := "Literal";
__n210["value"] := 2100.;
__n210["raw"] := "2100";
__n211 := {  };
__n211["type"] := "Literal";
__n211["value"] := 0.;
__n211["raw"] := "0";
__n212 := {  };
__n212["type"] := "Literal";
__n212["value"] := 1.;
__n212["raw"] := "1";
__n209 := [ __n210, __n211, __n212 ];
__n207["arguments"] := __n209;
__n206 := [ __n207 ];
__n204["arguments"] := __n206;
__n203["argument"] := __n204;
__n203["prefix"] := true;
__n202["test"] := __n203;
__n213 := {  };
__n213["type"] := "BlockStatement";
__n215 := {  };
__n215["type"] := "ExpressionStatement";
__n216 := {  };
__n216["type"] := "CallExpression";
__n217 := {  };
__n217["type"] := "Identifier";
__n217["name"] := "$ERROR";
__n216["callee"] := __n217;
__n219 := {  };
__n219["type"] := "Literal";
__n219["value"] := "#12: The value should be NaN";
__n219["raw"] := "\"#12: The value should be NaN\"";
__n218 := [ __n219 ];
__n216["arguments"] := __n218;
__n215["expression"] := __n216;
__n214 := [ __n215 ];
__n213["body"] := __n214;
__n202["consequent"] := __n213;
__n202["alternate"] := null;
__n1 := [ __n2, __n4, __n22, __n40, __n58, __n76, __n94, __n112, __n130, __n148, __n166, __n184, __n202 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n220 := [  ];
__n0["variableDeclarations"] := __n220;
__n222 := {  };
__n222["type"] := "FunctionDeclaration";
__n223 := {  };
__n223["type"] := "Identifier";
__n223["name"] := "DateValue";
__n222["id"] := __n223;
__n224 := [ "year", "month", "date", "hours", "minutes", "seconds", "ms" ];
__n222["params"] := __n224;
__n225 := {  };
__n225["type"] := "BlockStatement";
__n227 := {  };
__n227["type"] := "ReturnStatement";
__n228 := {  };
__n228["type"] := "CallExpression";
__n229 := {  };
__n229["type"] := "MemberExpression";
__n230 := {  };
__n230["type"] := "NewExpression";
__n231 := {  };
__n231["type"] := "Identifier";
__n231["name"] := "Date";
__n230["callee"] := __n231;
__n233 := {  };
__n233["type"] := "Identifier";
__n233["name"] := "year";
__n234 := {  };
__n234["type"] := "Identifier";
__n234["name"] := "month";
__n235 := {  };
__n235["type"] := "Identifier";
__n235["name"] := "date";
__n236 := {  };
__n236["type"] := "Identifier";
__n236["name"] := "hours";
__n237 := {  };
__n237["type"] := "Identifier";
__n237["name"] := "minutes";
__n238 := {  };
__n238["type"] := "Identifier";
__n238["name"] := "seconds";
__n239 := {  };
__n239["type"] := "Identifier";
__n239["name"] := "ms";
__n232 := [ __n233, __n234, __n235, __n236, __n237, __n238, __n239 ];
__n230["arguments"] := __n232;
__n229["object"] := __n230;
__n240 := {  };
__n240["type"] := "Literal";
__n240["value"] := "valueOf";
__n240["raw"] := "\"valueOf\"";
__n229["property"] := __n240;
__n229["computed"] := true;
__n228["callee"] := __n229;
__n241 := [  ];
__n228["arguments"] := __n241;
__n227["argument"] := __n228;
__n226 := [ __n227 ];
__n225["body"] := __n226;
__n242 := [  ];
__n225["variableDeclarations"] := __n242;
__n243 := [  ];
__n225["functionDeclarations"] := __n243;
__n225["codeType"] := "function";
__n225["strict"] := false;
__n222["body"] := __n225;
__n222["generator"] := false;
__n222["expression"] := false;
__n222["async"] := false;
__n221 := [ __n222 ];
__n0["functionDeclarations"] := __n221;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}