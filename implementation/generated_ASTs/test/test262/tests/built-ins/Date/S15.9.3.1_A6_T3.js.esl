function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "DateValue";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "DateValue";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1899.;
__n12["raw"] := "1899";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 31.;
__n14["raw"] := "31";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 23.;
__n15["raw"] := "23";
__n11 := [ __n12, __n13, __n14, __n15 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: The value should be NaN";
__n22["raw"] := "\"#1: The value should be NaN\"";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n4["consequent"] := __n16;
__n4["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "!";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "isNaN";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "DateValue";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1899.;
__n31["raw"] := "1899";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 12.;
__n32["raw"] := "12";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 0.;
__n34["raw"] := "0";
__n30 := [ __n31, __n32, __n33, __n34 ];
__n28["arguments"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["test"] := __n24;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: The value should be NaN";
__n41["raw"] := "\"#2: The value should be NaN\"";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n23["consequent"] := __n35;
__n23["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "!";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "isNaN";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "DateValue";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1900.;
__n50["raw"] := "1900";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 0.;
__n51["raw"] := "0";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1.;
__n52["raw"] := "1";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 0.;
__n53["raw"] := "0";
__n49 := [ __n50, __n51, __n52, __n53 ];
__n47["arguments"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42["test"] := __n43;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#3: The value should be NaN";
__n60["raw"] := "\"#3: The value should be NaN\"";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n42["consequent"] := __n54;
__n42["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "UnaryExpression";
__n62["operator"] := "!";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "isNaN";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "DateValue";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 1969.;
__n69["raw"] := "1969";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 11.;
__n70["raw"] := "11";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 31.;
__n71["raw"] := "31";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 23.;
__n72["raw"] := "23";
__n68 := [ __n69, __n70, __n71, __n72 ];
__n66["arguments"] := __n68;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["argument"] := __n63;
__n62["prefix"] := true;
__n61["test"] := __n62;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "$ERROR";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#4: The value should be NaN";
__n79["raw"] := "\"#4: The value should be NaN\"";
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["expression"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n61["consequent"] := __n73;
__n61["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "UnaryExpression";
__n81["operator"] := "!";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "isNaN";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "DateValue";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1969.;
__n88["raw"] := "1969";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 12.;
__n89["raw"] := "12";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 1.;
__n90["raw"] := "1";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := 0.;
__n91["raw"] := "0";
__n87 := [ __n88, __n89, __n90, __n91 ];
__n85["arguments"] := __n87;
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["argument"] := __n82;
__n81["prefix"] := true;
__n80["test"] := __n81;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#5: The value should be NaN";
__n98["raw"] := "\"#5: The value should be NaN\"";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n80["consequent"] := __n92;
__n80["alternate"] := null;
__n99 := {  };
__n99["type"] := "IfStatement";
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "!";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "isNaN";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "DateValue";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := 1970.;
__n107["raw"] := "1970";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 0.;
__n108["raw"] := "0";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := 1.;
__n109["raw"] := "1";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 0.;
__n110["raw"] := "0";
__n106 := [ __n107, __n108, __n109, __n110 ];
__n104["arguments"] := __n106;
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n99["test"] := __n100;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#6: The value should be NaN";
__n117["raw"] := "\"#6: The value should be NaN\"";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n99["consequent"] := __n111;
__n99["alternate"] := null;
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "UnaryExpression";
__n119["operator"] := "!";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "isNaN";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "DateValue";
__n123["callee"] := __n124;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 1999.;
__n126["raw"] := "1999";
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := 11.;
__n127["raw"] := "11";
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := 31.;
__n128["raw"] := "31";
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := 23.;
__n129["raw"] := "23";
__n125 := [ __n126, __n127, __n128, __n129 ];
__n123["arguments"] := __n125;
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["argument"] := __n120;
__n119["prefix"] := true;
__n118["test"] := __n119;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ExpressionStatement";
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "$ERROR";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := "#7: The value should be NaN";
__n136["raw"] := "\"#7: The value should be NaN\"";
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n132["expression"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n118["consequent"] := __n130;
__n118["alternate"] := null;
__n137 := {  };
__n137["type"] := "IfStatement";
__n138 := {  };
__n138["type"] := "UnaryExpression";
__n138["operator"] := "!";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "isNaN";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "CallExpression";
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "DateValue";
__n142["callee"] := __n143;
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := 1999.;
__n145["raw"] := "1999";
__n146 := {  };
__n146["type"] := "Literal";
__n146["value"] := 12.;
__n146["raw"] := "12";
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := 1.;
__n147["raw"] := "1";
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := 0.;
__n148["raw"] := "0";
__n144 := [ __n145, __n146, __n147, __n148 ];
__n142["arguments"] := __n144;
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["argument"] := __n139;
__n138["prefix"] := true;
__n137["test"] := __n138;
__n149 := {  };
__n149["type"] := "BlockStatement";
__n151 := {  };
__n151["type"] := "ExpressionStatement";
__n152 := {  };
__n152["type"] := "CallExpression";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "$ERROR";
__n152["callee"] := __n153;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := "#8: The value should be NaN";
__n155["raw"] := "\"#8: The value should be NaN\"";
__n154 := [ __n155 ];
__n152["arguments"] := __n154;
__n151["expression"] := __n152;
__n150 := [ __n151 ];
__n149["body"] := __n150;
__n137["consequent"] := __n149;
__n137["alternate"] := null;
__n156 := {  };
__n156["type"] := "IfStatement";
__n157 := {  };
__n157["type"] := "UnaryExpression";
__n157["operator"] := "!";
__n158 := {  };
__n158["type"] := "CallExpression";
__n159 := {  };
__n159["type"] := "Identifier";
__n159["name"] := "isNaN";
__n158["callee"] := __n159;
__n161 := {  };
__n161["type"] := "CallExpression";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "DateValue";
__n161["callee"] := __n162;
__n164 := {  };
__n164["type"] := "Literal";
__n164["value"] := 2000.;
__n164["raw"] := "2000";
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := 0.;
__n165["raw"] := "0";
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := 1.;
__n166["raw"] := "1";
__n167 := {  };
__n167["type"] := "Literal";
__n167["value"] := 0.;
__n167["raw"] := "0";
__n163 := [ __n164, __n165, __n166, __n167 ];
__n161["arguments"] := __n163;
__n160 := [ __n161 ];
__n158["arguments"] := __n160;
__n157["argument"] := __n158;
__n157["prefix"] := true;
__n156["test"] := __n157;
__n168 := {  };
__n168["type"] := "BlockStatement";
__n170 := {  };
__n170["type"] := "ExpressionStatement";
__n171 := {  };
__n171["type"] := "CallExpression";
__n172 := {  };
__n172["type"] := "Identifier";
__n172["name"] := "$ERROR";
__n171["callee"] := __n172;
__n174 := {  };
__n174["type"] := "Literal";
__n174["value"] := "#9: The value should be NaN";
__n174["raw"] := "\"#9: The value should be NaN\"";
__n173 := [ __n174 ];
__n171["arguments"] := __n173;
__n170["expression"] := __n171;
__n169 := [ __n170 ];
__n168["body"] := __n169;
__n156["consequent"] := __n168;
__n156["alternate"] := null;
__n175 := {  };
__n175["type"] := "IfStatement";
__n176 := {  };
__n176["type"] := "UnaryExpression";
__n176["operator"] := "!";
__n177 := {  };
__n177["type"] := "CallExpression";
__n178 := {  };
__n178["type"] := "Identifier";
__n178["name"] := "isNaN";
__n177["callee"] := __n178;
__n180 := {  };
__n180["type"] := "CallExpression";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "DateValue";
__n180["callee"] := __n181;
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := 2099.;
__n183["raw"] := "2099";
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := 11.;
__n184["raw"] := "11";
__n185 := {  };
__n185["type"] := "Literal";
__n185["value"] := 31.;
__n185["raw"] := "31";
__n186 := {  };
__n186["type"] := "Literal";
__n186["value"] := 23.;
__n186["raw"] := "23";
__n182 := [ __n183, __n184, __n185, __n186 ];
__n180["arguments"] := __n182;
__n179 := [ __n180 ];
__n177["arguments"] := __n179;
__n176["argument"] := __n177;
__n176["prefix"] := true;
__n175["test"] := __n176;
__n187 := {  };
__n187["type"] := "BlockStatement";
__n189 := {  };
__n189["type"] := "ExpressionStatement";
__n190 := {  };
__n190["type"] := "CallExpression";
__n191 := {  };
__n191["type"] := "Identifier";
__n191["name"] := "$ERROR";
__n190["callee"] := __n191;
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := "#10: The value should be NaN";
__n193["raw"] := "\"#10: The value should be NaN\"";
__n192 := [ __n193 ];
__n190["arguments"] := __n192;
__n189["expression"] := __n190;
__n188 := [ __n189 ];
__n187["body"] := __n188;
__n175["consequent"] := __n187;
__n175["alternate"] := null;
__n194 := {  };
__n194["type"] := "IfStatement";
__n195 := {  };
__n195["type"] := "UnaryExpression";
__n195["operator"] := "!";
__n196 := {  };
__n196["type"] := "CallExpression";
__n197 := {  };
__n197["type"] := "Identifier";
__n197["name"] := "isNaN";
__n196["callee"] := __n197;
__n199 := {  };
__n199["type"] := "CallExpression";
__n200 := {  };
__n200["type"] := "Identifier";
__n200["name"] := "DateValue";
__n199["callee"] := __n200;
__n202 := {  };
__n202["type"] := "Literal";
__n202["value"] := 2099.;
__n202["raw"] := "2099";
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := 12.;
__n203["raw"] := "12";
__n204 := {  };
__n204["type"] := "Literal";
__n204["value"] := 1.;
__n204["raw"] := "1";
__n205 := {  };
__n205["type"] := "Literal";
__n205["value"] := 0.;
__n205["raw"] := "0";
__n201 := [ __n202, __n203, __n204, __n205 ];
__n199["arguments"] := __n201;
__n198 := [ __n199 ];
__n196["arguments"] := __n198;
__n195["argument"] := __n196;
__n195["prefix"] := true;
__n194["test"] := __n195;
__n206 := {  };
__n206["type"] := "BlockStatement";
__n208 := {  };
__n208["type"] := "ExpressionStatement";
__n209 := {  };
__n209["type"] := "CallExpression";
__n210 := {  };
__n210["type"] := "Identifier";
__n210["name"] := "$ERROR";
__n209["callee"] := __n210;
__n212 := {  };
__n212["type"] := "Literal";
__n212["value"] := "#11: The value should be NaN";
__n212["raw"] := "\"#11: The value should be NaN\"";
__n211 := [ __n212 ];
__n209["arguments"] := __n211;
__n208["expression"] := __n209;
__n207 := [ __n208 ];
__n206["body"] := __n207;
__n194["consequent"] := __n206;
__n194["alternate"] := null;
__n213 := {  };
__n213["type"] := "IfStatement";
__n214 := {  };
__n214["type"] := "UnaryExpression";
__n214["operator"] := "!";
__n215 := {  };
__n215["type"] := "CallExpression";
__n216 := {  };
__n216["type"] := "Identifier";
__n216["name"] := "isNaN";
__n215["callee"] := __n216;
__n218 := {  };
__n218["type"] := "CallExpression";
__n219 := {  };
__n219["type"] := "Identifier";
__n219["name"] := "DateValue";
__n218["callee"] := __n219;
__n221 := {  };
__n221["type"] := "Literal";
__n221["value"] := 2100.;
__n221["raw"] := "2100";
__n222 := {  };
__n222["type"] := "Literal";
__n222["value"] := 0.;
__n222["raw"] := "0";
__n223 := {  };
__n223["type"] := "Literal";
__n223["value"] := 1.;
__n223["raw"] := "1";
__n224 := {  };
__n224["type"] := "Literal";
__n224["value"] := 0.;
__n224["raw"] := "0";
__n220 := [ __n221, __n222, __n223, __n224 ];
__n218["arguments"] := __n220;
__n217 := [ __n218 ];
__n215["arguments"] := __n217;
__n214["argument"] := __n215;
__n214["prefix"] := true;
__n213["test"] := __n214;
__n225 := {  };
__n225["type"] := "BlockStatement";
__n227 := {  };
__n227["type"] := "ExpressionStatement";
__n228 := {  };
__n228["type"] := "CallExpression";
__n229 := {  };
__n229["type"] := "Identifier";
__n229["name"] := "$ERROR";
__n228["callee"] := __n229;
__n231 := {  };
__n231["type"] := "Literal";
__n231["value"] := "#12: The value should be NaN";
__n231["raw"] := "\"#12: The value should be NaN\"";
__n230 := [ __n231 ];
__n228["arguments"] := __n230;
__n227["expression"] := __n228;
__n226 := [ __n227 ];
__n225["body"] := __n226;
__n213["consequent"] := __n225;
__n213["alternate"] := null;
__n1 := [ __n2, __n4, __n23, __n42, __n61, __n80, __n99, __n118, __n137, __n156, __n175, __n194, __n213 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n232 := [  ];
__n0["variableDeclarations"] := __n232;
__n234 := {  };
__n234["type"] := "FunctionDeclaration";
__n235 := {  };
__n235["type"] := "Identifier";
__n235["name"] := "DateValue";
__n234["id"] := __n235;
__n236 := [ "year", "month", "date", "hours", "minutes", "seconds", "ms" ];
__n234["params"] := __n236;
__n237 := {  };
__n237["type"] := "BlockStatement";
__n239 := {  };
__n239["type"] := "ReturnStatement";
__n240 := {  };
__n240["type"] := "CallExpression";
__n241 := {  };
__n241["type"] := "MemberExpression";
__n242 := {  };
__n242["type"] := "NewExpression";
__n243 := {  };
__n243["type"] := "Identifier";
__n243["name"] := "Date";
__n242["callee"] := __n243;
__n245 := {  };
__n245["type"] := "Identifier";
__n245["name"] := "year";
__n246 := {  };
__n246["type"] := "Identifier";
__n246["name"] := "month";
__n247 := {  };
__n247["type"] := "Identifier";
__n247["name"] := "date";
__n248 := {  };
__n248["type"] := "Identifier";
__n248["name"] := "hours";
__n249 := {  };
__n249["type"] := "Identifier";
__n249["name"] := "minutes";
__n250 := {  };
__n250["type"] := "Identifier";
__n250["name"] := "seconds";
__n251 := {  };
__n251["type"] := "Identifier";
__n251["name"] := "ms";
__n244 := [ __n245, __n246, __n247, __n248, __n249, __n250, __n251 ];
__n242["arguments"] := __n244;
__n241["object"] := __n242;
__n252 := {  };
__n252["type"] := "Literal";
__n252["value"] := "valueOf";
__n252["raw"] := "\"valueOf\"";
__n241["property"] := __n252;
__n241["computed"] := true;
__n240["callee"] := __n241;
__n253 := [  ];
__n240["arguments"] := __n253;
__n239["argument"] := __n240;
__n238 := [ __n239 ];
__n237["body"] := __n238;
__n254 := [  ];
__n237["variableDeclarations"] := __n254;
__n255 := [  ];
__n237["functionDeclarations"] := __n255;
__n237["codeType"] := "function";
__n237["strict"] := false;
__n234["body"] := __n237;
__n234["generator"] := false;
__n234["expression"] := false;
__n234["async"] := false;
__n233 := [ __n234 ];
__n0["functionDeclarations"] := __n233;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}