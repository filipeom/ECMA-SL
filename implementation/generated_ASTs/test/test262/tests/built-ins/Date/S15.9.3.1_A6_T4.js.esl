function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "DateValue";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "DateValue";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1899.;
__n12["raw"] := "1899";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 31.;
__n14["raw"] := "31";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 23.;
__n15["raw"] := "23";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 59.;
__n16["raw"] := "59";
__n11 := [ __n12, __n13, __n14, __n15, __n16 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: The value should be NaN";
__n23["raw"] := "\"#1: The value should be NaN\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n4["consequent"] := __n17;
__n4["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "!";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "isNaN";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "DateValue";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1899.;
__n32["raw"] := "1899";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 12.;
__n33["raw"] := "12";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1.;
__n34["raw"] := "1";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n31 := [ __n32, __n33, __n34, __n35, __n36 ];
__n29["arguments"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["test"] := __n25;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: The value should be NaN";
__n43["raw"] := "\"#2: The value should be NaN\"";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n24["consequent"] := __n37;
__n24["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "!";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "isNaN";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "DateValue";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1900.;
__n52["raw"] := "1900";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 0.;
__n53["raw"] := "0";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1.;
__n54["raw"] := "1";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 0.;
__n56["raw"] := "0";
__n51 := [ __n52, __n53, __n54, __n55, __n56 ];
__n49["arguments"] := __n51;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44["test"] := __n45;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#3: The value should be NaN";
__n63["raw"] := "\"#3: The value should be NaN\"";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n44["consequent"] := __n57;
__n44["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "UnaryExpression";
__n65["operator"] := "!";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "isNaN";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "DateValue";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1969.;
__n72["raw"] := "1969";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 11.;
__n73["raw"] := "11";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 31.;
__n74["raw"] := "31";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 23.;
__n75["raw"] := "23";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 59.;
__n76["raw"] := "59";
__n71 := [ __n72, __n73, __n74, __n75, __n76 ];
__n69["arguments"] := __n71;
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["argument"] := __n66;
__n65["prefix"] := true;
__n64["test"] := __n65;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "#4: The value should be NaN";
__n83["raw"] := "\"#4: The value should be NaN\"";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n64["consequent"] := __n77;
__n64["alternate"] := null;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "UnaryExpression";
__n85["operator"] := "!";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "isNaN";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "DateValue";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := 1969.;
__n92["raw"] := "1969";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 12.;
__n93["raw"] := "12";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 1.;
__n94["raw"] := "1";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 0.;
__n95["raw"] := "0";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 0.;
__n96["raw"] := "0";
__n91 := [ __n92, __n93, __n94, __n95, __n96 ];
__n89["arguments"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["argument"] := __n86;
__n85["prefix"] := true;
__n84["test"] := __n85;
__n97 := {  };
__n97["type"] := "BlockStatement";
__n99 := {  };
__n99["type"] := "ExpressionStatement";
__n100 := {  };
__n100["type"] := "CallExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "$ERROR";
__n100["callee"] := __n101;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#5: The value should be NaN";
__n103["raw"] := "\"#5: The value should be NaN\"";
__n102 := [ __n103 ];
__n100["arguments"] := __n102;
__n99["expression"] := __n100;
__n98 := [ __n99 ];
__n97["body"] := __n98;
__n84["consequent"] := __n97;
__n84["alternate"] := null;
__n104 := {  };
__n104["type"] := "IfStatement";
__n105 := {  };
__n105["type"] := "UnaryExpression";
__n105["operator"] := "!";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "isNaN";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "DateValue";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 1970.;
__n112["raw"] := "1970";
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 0.;
__n113["raw"] := "0";
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 1.;
__n114["raw"] := "1";
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 0.;
__n115["raw"] := "0";
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := 0.;
__n116["raw"] := "0";
__n111 := [ __n112, __n113, __n114, __n115, __n116 ];
__n109["arguments"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["argument"] := __n106;
__n105["prefix"] := true;
__n104["test"] := __n105;
__n117 := {  };
__n117["type"] := "BlockStatement";
__n119 := {  };
__n119["type"] := "ExpressionStatement";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "$ERROR";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "#6: The value should be NaN";
__n123["raw"] := "\"#6: The value should be NaN\"";
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["expression"] := __n120;
__n118 := [ __n119 ];
__n117["body"] := __n118;
__n104["consequent"] := __n117;
__n104["alternate"] := null;
__n124 := {  };
__n124["type"] := "IfStatement";
__n125 := {  };
__n125["type"] := "UnaryExpression";
__n125["operator"] := "!";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "isNaN";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "DateValue";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 1999.;
__n132["raw"] := "1999";
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := 11.;
__n133["raw"] := "11";
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 31.;
__n134["raw"] := "31";
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 23.;
__n135["raw"] := "23";
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := 59.;
__n136["raw"] := "59";
__n131 := [ __n132, __n133, __n134, __n135, __n136 ];
__n129["arguments"] := __n131;
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["argument"] := __n126;
__n125["prefix"] := true;
__n124["test"] := __n125;
__n137 := {  };
__n137["type"] := "BlockStatement";
__n139 := {  };
__n139["type"] := "ExpressionStatement";
__n140 := {  };
__n140["type"] := "CallExpression";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "$ERROR";
__n140["callee"] := __n141;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "#7: The value should be NaN";
__n143["raw"] := "\"#7: The value should be NaN\"";
__n142 := [ __n143 ];
__n140["arguments"] := __n142;
__n139["expression"] := __n140;
__n138 := [ __n139 ];
__n137["body"] := __n138;
__n124["consequent"] := __n137;
__n124["alternate"] := null;
__n144 := {  };
__n144["type"] := "IfStatement";
__n145 := {  };
__n145["type"] := "UnaryExpression";
__n145["operator"] := "!";
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "isNaN";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "CallExpression";
__n150 := {  };
__n150["type"] := "Identifier";
__n150["name"] := "DateValue";
__n149["callee"] := __n150;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := 1999.;
__n152["raw"] := "1999";
__n153 := {  };
__n153["type"] := "Literal";
__n153["value"] := 12.;
__n153["raw"] := "12";
__n154 := {  };
__n154["type"] := "Literal";
__n154["value"] := 1.;
__n154["raw"] := "1";
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := 0.;
__n155["raw"] := "0";
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := 0.;
__n156["raw"] := "0";
__n151 := [ __n152, __n153, __n154, __n155, __n156 ];
__n149["arguments"] := __n151;
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n145["argument"] := __n146;
__n145["prefix"] := true;
__n144["test"] := __n145;
__n157 := {  };
__n157["type"] := "BlockStatement";
__n159 := {  };
__n159["type"] := "ExpressionStatement";
__n160 := {  };
__n160["type"] := "CallExpression";
__n161 := {  };
__n161["type"] := "Identifier";
__n161["name"] := "$ERROR";
__n160["callee"] := __n161;
__n163 := {  };
__n163["type"] := "Literal";
__n163["value"] := "#8: The value should be NaN";
__n163["raw"] := "\"#8: The value should be NaN\"";
__n162 := [ __n163 ];
__n160["arguments"] := __n162;
__n159["expression"] := __n160;
__n158 := [ __n159 ];
__n157["body"] := __n158;
__n144["consequent"] := __n157;
__n144["alternate"] := null;
__n164 := {  };
__n164["type"] := "IfStatement";
__n165 := {  };
__n165["type"] := "UnaryExpression";
__n165["operator"] := "!";
__n166 := {  };
__n166["type"] := "CallExpression";
__n167 := {  };
__n167["type"] := "Identifier";
__n167["name"] := "isNaN";
__n166["callee"] := __n167;
__n169 := {  };
__n169["type"] := "CallExpression";
__n170 := {  };
__n170["type"] := "Identifier";
__n170["name"] := "DateValue";
__n169["callee"] := __n170;
__n172 := {  };
__n172["type"] := "Literal";
__n172["value"] := 2000.;
__n172["raw"] := "2000";
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := 0.;
__n173["raw"] := "0";
__n174 := {  };
__n174["type"] := "Literal";
__n174["value"] := 1.;
__n174["raw"] := "1";
__n175 := {  };
__n175["type"] := "Literal";
__n175["value"] := 0.;
__n175["raw"] := "0";
__n176 := {  };
__n176["type"] := "Literal";
__n176["value"] := 0.;
__n176["raw"] := "0";
__n171 := [ __n172, __n173, __n174, __n175, __n176 ];
__n169["arguments"] := __n171;
__n168 := [ __n169 ];
__n166["arguments"] := __n168;
__n165["argument"] := __n166;
__n165["prefix"] := true;
__n164["test"] := __n165;
__n177 := {  };
__n177["type"] := "BlockStatement";
__n179 := {  };
__n179["type"] := "ExpressionStatement";
__n180 := {  };
__n180["type"] := "CallExpression";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "$ERROR";
__n180["callee"] := __n181;
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := "#9: The value should be NaN";
__n183["raw"] := "\"#9: The value should be NaN\"";
__n182 := [ __n183 ];
__n180["arguments"] := __n182;
__n179["expression"] := __n180;
__n178 := [ __n179 ];
__n177["body"] := __n178;
__n164["consequent"] := __n177;
__n164["alternate"] := null;
__n184 := {  };
__n184["type"] := "IfStatement";
__n185 := {  };
__n185["type"] := "UnaryExpression";
__n185["operator"] := "!";
__n186 := {  };
__n186["type"] := "CallExpression";
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "isNaN";
__n186["callee"] := __n187;
__n189 := {  };
__n189["type"] := "CallExpression";
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "DateValue";
__n189["callee"] := __n190;
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := 2099.;
__n192["raw"] := "2099";
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := 11.;
__n193["raw"] := "11";
__n194 := {  };
__n194["type"] := "Literal";
__n194["value"] := 31.;
__n194["raw"] := "31";
__n195 := {  };
__n195["type"] := "Literal";
__n195["value"] := 23.;
__n195["raw"] := "23";
__n196 := {  };
__n196["type"] := "Literal";
__n196["value"] := 59.;
__n196["raw"] := "59";
__n191 := [ __n192, __n193, __n194, __n195, __n196 ];
__n189["arguments"] := __n191;
__n188 := [ __n189 ];
__n186["arguments"] := __n188;
__n185["argument"] := __n186;
__n185["prefix"] := true;
__n184["test"] := __n185;
__n197 := {  };
__n197["type"] := "BlockStatement";
__n199 := {  };
__n199["type"] := "ExpressionStatement";
__n200 := {  };
__n200["type"] := "CallExpression";
__n201 := {  };
__n201["type"] := "Identifier";
__n201["name"] := "$ERROR";
__n200["callee"] := __n201;
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := "#10: The value should be NaN";
__n203["raw"] := "\"#10: The value should be NaN\"";
__n202 := [ __n203 ];
__n200["arguments"] := __n202;
__n199["expression"] := __n200;
__n198 := [ __n199 ];
__n197["body"] := __n198;
__n184["consequent"] := __n197;
__n184["alternate"] := null;
__n204 := {  };
__n204["type"] := "IfStatement";
__n205 := {  };
__n205["type"] := "UnaryExpression";
__n205["operator"] := "!";
__n206 := {  };
__n206["type"] := "CallExpression";
__n207 := {  };
__n207["type"] := "Identifier";
__n207["name"] := "isNaN";
__n206["callee"] := __n207;
__n209 := {  };
__n209["type"] := "CallExpression";
__n210 := {  };
__n210["type"] := "Identifier";
__n210["name"] := "DateValue";
__n209["callee"] := __n210;
__n212 := {  };
__n212["type"] := "Literal";
__n212["value"] := 2099.;
__n212["raw"] := "2099";
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := 12.;
__n213["raw"] := "12";
__n214 := {  };
__n214["type"] := "Literal";
__n214["value"] := 1.;
__n214["raw"] := "1";
__n215 := {  };
__n215["type"] := "Literal";
__n215["value"] := 0.;
__n215["raw"] := "0";
__n216 := {  };
__n216["type"] := "Literal";
__n216["value"] := 0.;
__n216["raw"] := "0";
__n211 := [ __n212, __n213, __n214, __n215, __n216 ];
__n209["arguments"] := __n211;
__n208 := [ __n209 ];
__n206["arguments"] := __n208;
__n205["argument"] := __n206;
__n205["prefix"] := true;
__n204["test"] := __n205;
__n217 := {  };
__n217["type"] := "BlockStatement";
__n219 := {  };
__n219["type"] := "ExpressionStatement";
__n220 := {  };
__n220["type"] := "CallExpression";
__n221 := {  };
__n221["type"] := "Identifier";
__n221["name"] := "$ERROR";
__n220["callee"] := __n221;
__n223 := {  };
__n223["type"] := "Literal";
__n223["value"] := "#11: The value should be NaN";
__n223["raw"] := "\"#11: The value should be NaN\"";
__n222 := [ __n223 ];
__n220["arguments"] := __n222;
__n219["expression"] := __n220;
__n218 := [ __n219 ];
__n217["body"] := __n218;
__n204["consequent"] := __n217;
__n204["alternate"] := null;
__n224 := {  };
__n224["type"] := "IfStatement";
__n225 := {  };
__n225["type"] := "UnaryExpression";
__n225["operator"] := "!";
__n226 := {  };
__n226["type"] := "CallExpression";
__n227 := {  };
__n227["type"] := "Identifier";
__n227["name"] := "isNaN";
__n226["callee"] := __n227;
__n229 := {  };
__n229["type"] := "CallExpression";
__n230 := {  };
__n230["type"] := "Identifier";
__n230["name"] := "DateValue";
__n229["callee"] := __n230;
__n232 := {  };
__n232["type"] := "Literal";
__n232["value"] := 2100.;
__n232["raw"] := "2100";
__n233 := {  };
__n233["type"] := "Literal";
__n233["value"] := 0.;
__n233["raw"] := "0";
__n234 := {  };
__n234["type"] := "Literal";
__n234["value"] := 1.;
__n234["raw"] := "1";
__n235 := {  };
__n235["type"] := "Literal";
__n235["value"] := 0.;
__n235["raw"] := "0";
__n236 := {  };
__n236["type"] := "Literal";
__n236["value"] := 0.;
__n236["raw"] := "0";
__n231 := [ __n232, __n233, __n234, __n235, __n236 ];
__n229["arguments"] := __n231;
__n228 := [ __n229 ];
__n226["arguments"] := __n228;
__n225["argument"] := __n226;
__n225["prefix"] := true;
__n224["test"] := __n225;
__n237 := {  };
__n237["type"] := "BlockStatement";
__n239 := {  };
__n239["type"] := "ExpressionStatement";
__n240 := {  };
__n240["type"] := "CallExpression";
__n241 := {  };
__n241["type"] := "Identifier";
__n241["name"] := "$ERROR";
__n240["callee"] := __n241;
__n243 := {  };
__n243["type"] := "Literal";
__n243["value"] := "#12: The value should be NaN";
__n243["raw"] := "\"#12: The value should be NaN\"";
__n242 := [ __n243 ];
__n240["arguments"] := __n242;
__n239["expression"] := __n240;
__n238 := [ __n239 ];
__n237["body"] := __n238;
__n224["consequent"] := __n237;
__n224["alternate"] := null;
__n1 := [ __n2, __n4, __n24, __n44, __n64, __n84, __n104, __n124, __n144, __n164, __n184, __n204, __n224 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n244 := [  ];
__n0["variableDeclarations"] := __n244;
__n246 := {  };
__n246["type"] := "FunctionDeclaration";
__n247 := {  };
__n247["type"] := "Identifier";
__n247["name"] := "DateValue";
__n246["id"] := __n247;
__n248 := [ "year", "month", "date", "hours", "minutes", "seconds", "ms" ];
__n246["params"] := __n248;
__n249 := {  };
__n249["type"] := "BlockStatement";
__n251 := {  };
__n251["type"] := "ReturnStatement";
__n252 := {  };
__n252["type"] := "CallExpression";
__n253 := {  };
__n253["type"] := "MemberExpression";
__n254 := {  };
__n254["type"] := "NewExpression";
__n255 := {  };
__n255["type"] := "Identifier";
__n255["name"] := "Date";
__n254["callee"] := __n255;
__n257 := {  };
__n257["type"] := "Identifier";
__n257["name"] := "year";
__n258 := {  };
__n258["type"] := "Identifier";
__n258["name"] := "month";
__n259 := {  };
__n259["type"] := "Identifier";
__n259["name"] := "date";
__n260 := {  };
__n260["type"] := "Identifier";
__n260["name"] := "hours";
__n261 := {  };
__n261["type"] := "Identifier";
__n261["name"] := "minutes";
__n262 := {  };
__n262["type"] := "Identifier";
__n262["name"] := "seconds";
__n263 := {  };
__n263["type"] := "Identifier";
__n263["name"] := "ms";
__n256 := [ __n257, __n258, __n259, __n260, __n261, __n262, __n263 ];
__n254["arguments"] := __n256;
__n253["object"] := __n254;
__n264 := {  };
__n264["type"] := "Literal";
__n264["value"] := "valueOf";
__n264["raw"] := "\"valueOf\"";
__n253["property"] := __n264;
__n253["computed"] := true;
__n252["callee"] := __n253;
__n265 := [  ];
__n252["arguments"] := __n265;
__n251["argument"] := __n252;
__n250 := [ __n251 ];
__n249["body"] := __n250;
__n266 := [  ];
__n249["variableDeclarations"] := __n266;
__n267 := [  ];
__n249["functionDeclarations"] := __n267;
__n249["codeType"] := "function";
__n249["strict"] := false;
__n246["body"] := __n249;
__n246["generator"] := false;
__n246["expression"] := false;
__n246["async"] := false;
__n245 := [ __n246 ];
__n0["functionDeclarations"] := __n245;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}