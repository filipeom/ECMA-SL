function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "DateValue";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "DateValue";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1899.;
__n12["raw"] := "1899";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 11.;
__n13["raw"] := "11";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 31.;
__n14["raw"] := "31";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 23.;
__n15["raw"] := "23";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 59.;
__n16["raw"] := "59";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 59.;
__n17["raw"] := "59";
__n11 := [ __n12, __n13, __n14, __n15, __n16, __n17 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: The value should be NaN";
__n24["raw"] := "\"#1: The value should be NaN\"";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n4["consequent"] := __n18;
__n4["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "!";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "isNaN";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "DateValue";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1899.;
__n33["raw"] := "1899";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 12.;
__n34["raw"] := "12";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 1.;
__n35["raw"] := "1";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 0.;
__n37["raw"] := "0";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n32 := [ __n33, __n34, __n35, __n36, __n37, __n38 ];
__n30["arguments"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["test"] := __n26;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: The value should be NaN";
__n45["raw"] := "\"#2: The value should be NaN\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n25["consequent"] := __n39;
__n25["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "isNaN";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "DateValue";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1900.;
__n54["raw"] := "1900";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.;
__n56["raw"] := "1";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 0.;
__n57["raw"] := "0";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n53 := [ __n54, __n55, __n56, __n57, __n58, __n59 ];
__n51["arguments"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#3: The value should be NaN";
__n66["raw"] := "\"#3: The value should be NaN\"";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n46["consequent"] := __n60;
__n46["alternate"] := null;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "UnaryExpression";
__n68["operator"] := "!";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "isNaN";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "DateValue";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 1969.;
__n75["raw"] := "1969";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 11.;
__n76["raw"] := "11";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 31.;
__n77["raw"] := "31";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 23.;
__n78["raw"] := "23";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 59.;
__n79["raw"] := "59";
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 59.;
__n80["raw"] := "59";
__n74 := [ __n75, __n76, __n77, __n78, __n79, __n80 ];
__n72["arguments"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["argument"] := __n69;
__n68["prefix"] := true;
__n67["test"] := __n68;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$ERROR";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#4: The value should be NaN";
__n87["raw"] := "\"#4: The value should be NaN\"";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n67["consequent"] := __n81;
__n67["alternate"] := null;
__n88 := {  };
__n88["type"] := "IfStatement";
__n89 := {  };
__n89["type"] := "UnaryExpression";
__n89["operator"] := "!";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "isNaN";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "DateValue";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 1969.;
__n96["raw"] := "1969";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 12.;
__n97["raw"] := "12";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 1.;
__n98["raw"] := "1";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 0.;
__n99["raw"] := "0";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := 0.;
__n100["raw"] := "0";
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 0.;
__n101["raw"] := "0";
__n95 := [ __n96, __n97, __n98, __n99, __n100, __n101 ];
__n93["arguments"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["argument"] := __n90;
__n89["prefix"] := true;
__n88["test"] := __n89;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$ERROR";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "#5: The value should be NaN";
__n108["raw"] := "\"#5: The value should be NaN\"";
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n103 := [ __n104 ];
__n102["body"] := __n103;
__n88["consequent"] := __n102;
__n88["alternate"] := null;
__n109 := {  };
__n109["type"] := "IfStatement";
__n110 := {  };
__n110["type"] := "UnaryExpression";
__n110["operator"] := "!";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "isNaN";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "DateValue";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 1970.;
__n117["raw"] := "1970";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 0.;
__n118["raw"] := "0";
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := 1.;
__n119["raw"] := "1";
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 0.;
__n120["raw"] := "0";
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := 0.;
__n121["raw"] := "0";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := 0.;
__n122["raw"] := "0";
__n116 := [ __n117, __n118, __n119, __n120, __n121, __n122 ];
__n114["arguments"] := __n116;
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["argument"] := __n111;
__n110["prefix"] := true;
__n109["test"] := __n110;
__n123 := {  };
__n123["type"] := "BlockStatement";
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "$ERROR";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "#6: The value should be NaN";
__n129["raw"] := "\"#6: The value should be NaN\"";
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["expression"] := __n126;
__n124 := [ __n125 ];
__n123["body"] := __n124;
__n109["consequent"] := __n123;
__n109["alternate"] := null;
__n130 := {  };
__n130["type"] := "IfStatement";
__n131 := {  };
__n131["type"] := "UnaryExpression";
__n131["operator"] := "!";
__n132 := {  };
__n132["type"] := "CallExpression";
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "isNaN";
__n132["callee"] := __n133;
__n135 := {  };
__n135["type"] := "CallExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "DateValue";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := 1999.;
__n138["raw"] := "1999";
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := 11.;
__n139["raw"] := "11";
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := 31.;
__n140["raw"] := "31";
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := 23.;
__n141["raw"] := "23";
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := 59.;
__n142["raw"] := "59";
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := 59.;
__n143["raw"] := "59";
__n137 := [ __n138, __n139, __n140, __n141, __n142, __n143 ];
__n135["arguments"] := __n137;
__n134 := [ __n135 ];
__n132["arguments"] := __n134;
__n131["argument"] := __n132;
__n131["prefix"] := true;
__n130["test"] := __n131;
__n144 := {  };
__n144["type"] := "BlockStatement";
__n146 := {  };
__n146["type"] := "ExpressionStatement";
__n147 := {  };
__n147["type"] := "CallExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "$ERROR";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := "#7: The value should be NaN";
__n150["raw"] := "\"#7: The value should be NaN\"";
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["expression"] := __n147;
__n145 := [ __n146 ];
__n144["body"] := __n145;
__n130["consequent"] := __n144;
__n130["alternate"] := null;
__n151 := {  };
__n151["type"] := "IfStatement";
__n152 := {  };
__n152["type"] := "UnaryExpression";
__n152["operator"] := "!";
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "isNaN";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "CallExpression";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "DateValue";
__n156["callee"] := __n157;
__n159 := {  };
__n159["type"] := "Literal";
__n159["value"] := 1999.;
__n159["raw"] := "1999";
__n160 := {  };
__n160["type"] := "Literal";
__n160["value"] := 12.;
__n160["raw"] := "12";
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := 1.;
__n161["raw"] := "1";
__n162 := {  };
__n162["type"] := "Literal";
__n162["value"] := 0.;
__n162["raw"] := "0";
__n163 := {  };
__n163["type"] := "Literal";
__n163["value"] := 0.;
__n163["raw"] := "0";
__n164 := {  };
__n164["type"] := "Literal";
__n164["value"] := 0.;
__n164["raw"] := "0";
__n158 := [ __n159, __n160, __n161, __n162, __n163, __n164 ];
__n156["arguments"] := __n158;
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n152["argument"] := __n153;
__n152["prefix"] := true;
__n151["test"] := __n152;
__n165 := {  };
__n165["type"] := "BlockStatement";
__n167 := {  };
__n167["type"] := "ExpressionStatement";
__n168 := {  };
__n168["type"] := "CallExpression";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "$ERROR";
__n168["callee"] := __n169;
__n171 := {  };
__n171["type"] := "Literal";
__n171["value"] := "#8: The value should be NaN";
__n171["raw"] := "\"#8: The value should be NaN\"";
__n170 := [ __n171 ];
__n168["arguments"] := __n170;
__n167["expression"] := __n168;
__n166 := [ __n167 ];
__n165["body"] := __n166;
__n151["consequent"] := __n165;
__n151["alternate"] := null;
__n172 := {  };
__n172["type"] := "IfStatement";
__n173 := {  };
__n173["type"] := "UnaryExpression";
__n173["operator"] := "!";
__n174 := {  };
__n174["type"] := "CallExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "isNaN";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "CallExpression";
__n178 := {  };
__n178["type"] := "Identifier";
__n178["name"] := "DateValue";
__n177["callee"] := __n178;
__n180 := {  };
__n180["type"] := "Literal";
__n180["value"] := 2000.;
__n180["raw"] := "2000";
__n181 := {  };
__n181["type"] := "Literal";
__n181["value"] := 0.;
__n181["raw"] := "0";
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := 1.;
__n182["raw"] := "1";
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := 0.;
__n183["raw"] := "0";
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := 0.;
__n184["raw"] := "0";
__n185 := {  };
__n185["type"] := "Literal";
__n185["value"] := 0.;
__n185["raw"] := "0";
__n179 := [ __n180, __n181, __n182, __n183, __n184, __n185 ];
__n177["arguments"] := __n179;
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n173["argument"] := __n174;
__n173["prefix"] := true;
__n172["test"] := __n173;
__n186 := {  };
__n186["type"] := "BlockStatement";
__n188 := {  };
__n188["type"] := "ExpressionStatement";
__n189 := {  };
__n189["type"] := "CallExpression";
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "$ERROR";
__n189["callee"] := __n190;
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := "#9: The value should be NaN";
__n192["raw"] := "\"#9: The value should be NaN\"";
__n191 := [ __n192 ];
__n189["arguments"] := __n191;
__n188["expression"] := __n189;
__n187 := [ __n188 ];
__n186["body"] := __n187;
__n172["consequent"] := __n186;
__n172["alternate"] := null;
__n193 := {  };
__n193["type"] := "IfStatement";
__n194 := {  };
__n194["type"] := "UnaryExpression";
__n194["operator"] := "!";
__n195 := {  };
__n195["type"] := "CallExpression";
__n196 := {  };
__n196["type"] := "Identifier";
__n196["name"] := "isNaN";
__n195["callee"] := __n196;
__n198 := {  };
__n198["type"] := "CallExpression";
__n199 := {  };
__n199["type"] := "Identifier";
__n199["name"] := "DateValue";
__n198["callee"] := __n199;
__n201 := {  };
__n201["type"] := "Literal";
__n201["value"] := 2099.;
__n201["raw"] := "2099";
__n202 := {  };
__n202["type"] := "Literal";
__n202["value"] := 11.;
__n202["raw"] := "11";
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := 31.;
__n203["raw"] := "31";
__n204 := {  };
__n204["type"] := "Literal";
__n204["value"] := 23.;
__n204["raw"] := "23";
__n205 := {  };
__n205["type"] := "Literal";
__n205["value"] := 59.;
__n205["raw"] := "59";
__n206 := {  };
__n206["type"] := "Literal";
__n206["value"] := 59.;
__n206["raw"] := "59";
__n200 := [ __n201, __n202, __n203, __n204, __n205, __n206 ];
__n198["arguments"] := __n200;
__n197 := [ __n198 ];
__n195["arguments"] := __n197;
__n194["argument"] := __n195;
__n194["prefix"] := true;
__n193["test"] := __n194;
__n207 := {  };
__n207["type"] := "BlockStatement";
__n209 := {  };
__n209["type"] := "ExpressionStatement";
__n210 := {  };
__n210["type"] := "CallExpression";
__n211 := {  };
__n211["type"] := "Identifier";
__n211["name"] := "$ERROR";
__n210["callee"] := __n211;
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := "#10: The value should be NaN";
__n213["raw"] := "\"#10: The value should be NaN\"";
__n212 := [ __n213 ];
__n210["arguments"] := __n212;
__n209["expression"] := __n210;
__n208 := [ __n209 ];
__n207["body"] := __n208;
__n193["consequent"] := __n207;
__n193["alternate"] := null;
__n214 := {  };
__n214["type"] := "IfStatement";
__n215 := {  };
__n215["type"] := "UnaryExpression";
__n215["operator"] := "!";
__n216 := {  };
__n216["type"] := "CallExpression";
__n217 := {  };
__n217["type"] := "Identifier";
__n217["name"] := "isNaN";
__n216["callee"] := __n217;
__n219 := {  };
__n219["type"] := "CallExpression";
__n220 := {  };
__n220["type"] := "Identifier";
__n220["name"] := "DateValue";
__n219["callee"] := __n220;
__n222 := {  };
__n222["type"] := "Literal";
__n222["value"] := 2099.;
__n222["raw"] := "2099";
__n223 := {  };
__n223["type"] := "Literal";
__n223["value"] := 12.;
__n223["raw"] := "12";
__n224 := {  };
__n224["type"] := "Literal";
__n224["value"] := 1.;
__n224["raw"] := "1";
__n225 := {  };
__n225["type"] := "Literal";
__n225["value"] := 0.;
__n225["raw"] := "0";
__n226 := {  };
__n226["type"] := "Literal";
__n226["value"] := 0.;
__n226["raw"] := "0";
__n227 := {  };
__n227["type"] := "Literal";
__n227["value"] := 0.;
__n227["raw"] := "0";
__n221 := [ __n222, __n223, __n224, __n225, __n226, __n227 ];
__n219["arguments"] := __n221;
__n218 := [ __n219 ];
__n216["arguments"] := __n218;
__n215["argument"] := __n216;
__n215["prefix"] := true;
__n214["test"] := __n215;
__n228 := {  };
__n228["type"] := "BlockStatement";
__n230 := {  };
__n230["type"] := "ExpressionStatement";
__n231 := {  };
__n231["type"] := "CallExpression";
__n232 := {  };
__n232["type"] := "Identifier";
__n232["name"] := "$ERROR";
__n231["callee"] := __n232;
__n234 := {  };
__n234["type"] := "Literal";
__n234["value"] := "#11: The value should be NaN";
__n234["raw"] := "\"#11: The value should be NaN\"";
__n233 := [ __n234 ];
__n231["arguments"] := __n233;
__n230["expression"] := __n231;
__n229 := [ __n230 ];
__n228["body"] := __n229;
__n214["consequent"] := __n228;
__n214["alternate"] := null;
__n235 := {  };
__n235["type"] := "IfStatement";
__n236 := {  };
__n236["type"] := "UnaryExpression";
__n236["operator"] := "!";
__n237 := {  };
__n237["type"] := "CallExpression";
__n238 := {  };
__n238["type"] := "Identifier";
__n238["name"] := "isNaN";
__n237["callee"] := __n238;
__n240 := {  };
__n240["type"] := "CallExpression";
__n241 := {  };
__n241["type"] := "Identifier";
__n241["name"] := "DateValue";
__n240["callee"] := __n241;
__n243 := {  };
__n243["type"] := "Literal";
__n243["value"] := 2100.;
__n243["raw"] := "2100";
__n244 := {  };
__n244["type"] := "Literal";
__n244["value"] := 0.;
__n244["raw"] := "0";
__n245 := {  };
__n245["type"] := "Literal";
__n245["value"] := 1.;
__n245["raw"] := "1";
__n246 := {  };
__n246["type"] := "Literal";
__n246["value"] := 0.;
__n246["raw"] := "0";
__n247 := {  };
__n247["type"] := "Literal";
__n247["value"] := 0.;
__n247["raw"] := "0";
__n248 := {  };
__n248["type"] := "Literal";
__n248["value"] := 0.;
__n248["raw"] := "0";
__n242 := [ __n243, __n244, __n245, __n246, __n247, __n248 ];
__n240["arguments"] := __n242;
__n239 := [ __n240 ];
__n237["arguments"] := __n239;
__n236["argument"] := __n237;
__n236["prefix"] := true;
__n235["test"] := __n236;
__n249 := {  };
__n249["type"] := "BlockStatement";
__n251 := {  };
__n251["type"] := "ExpressionStatement";
__n252 := {  };
__n252["type"] := "CallExpression";
__n253 := {  };
__n253["type"] := "Identifier";
__n253["name"] := "$ERROR";
__n252["callee"] := __n253;
__n255 := {  };
__n255["type"] := "Literal";
__n255["value"] := "#12: The value should be NaN";
__n255["raw"] := "\"#12: The value should be NaN\"";
__n254 := [ __n255 ];
__n252["arguments"] := __n254;
__n251["expression"] := __n252;
__n250 := [ __n251 ];
__n249["body"] := __n250;
__n235["consequent"] := __n249;
__n235["alternate"] := null;
__n1 := [ __n2, __n4, __n25, __n46, __n67, __n88, __n109, __n130, __n151, __n172, __n193, __n214, __n235 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n256 := [  ];
__n0["variableDeclarations"] := __n256;
__n258 := {  };
__n258["type"] := "FunctionDeclaration";
__n259 := {  };
__n259["type"] := "Identifier";
__n259["name"] := "DateValue";
__n258["id"] := __n259;
__n260 := [ "year", "month", "date", "hours", "minutes", "seconds", "ms" ];
__n258["params"] := __n260;
__n261 := {  };
__n261["type"] := "BlockStatement";
__n263 := {  };
__n263["type"] := "ReturnStatement";
__n264 := {  };
__n264["type"] := "CallExpression";
__n265 := {  };
__n265["type"] := "MemberExpression";
__n266 := {  };
__n266["type"] := "NewExpression";
__n267 := {  };
__n267["type"] := "Identifier";
__n267["name"] := "Date";
__n266["callee"] := __n267;
__n269 := {  };
__n269["type"] := "Identifier";
__n269["name"] := "year";
__n270 := {  };
__n270["type"] := "Identifier";
__n270["name"] := "month";
__n271 := {  };
__n271["type"] := "Identifier";
__n271["name"] := "date";
__n272 := {  };
__n272["type"] := "Identifier";
__n272["name"] := "hours";
__n273 := {  };
__n273["type"] := "Identifier";
__n273["name"] := "minutes";
__n274 := {  };
__n274["type"] := "Identifier";
__n274["name"] := "seconds";
__n275 := {  };
__n275["type"] := "Identifier";
__n275["name"] := "ms";
__n268 := [ __n269, __n270, __n271, __n272, __n273, __n274, __n275 ];
__n266["arguments"] := __n268;
__n265["object"] := __n266;
__n276 := {  };
__n276["type"] := "Literal";
__n276["value"] := "valueOf";
__n276["raw"] := "\"valueOf\"";
__n265["property"] := __n276;
__n265["computed"] := true;
__n264["callee"] := __n265;
__n277 := [  ];
__n264["arguments"] := __n277;
__n263["argument"] := __n264;
__n262 := [ __n263 ];
__n261["body"] := __n262;
__n278 := [  ];
__n261["variableDeclarations"] := __n278;
__n279 := [  ];
__n261["functionDeclarations"] := __n279;
__n261["codeType"] := "function";
__n261["strict"] := false;
__n258["body"] := __n261;
__n258["generator"] := false;
__n258["expression"] := false;
__n258["async"] := false;
__n257 := [ __n258 ];
__n0["functionDeclarations"] := __n257;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}