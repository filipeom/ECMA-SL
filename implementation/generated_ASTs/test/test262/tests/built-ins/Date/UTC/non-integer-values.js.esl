function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Date";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "UTC";
__n11["raw"] := "\"UTC\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1970.9;
__n13["raw"] := "1970.9";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.9;
__n14["raw"] := "0.9";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.9;
__n15["raw"] := "1.9";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.9;
__n16["raw"] := "0.9";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.9;
__n17["raw"] := "0.9";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.9;
__n18["raw"] := "0.9";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.9;
__n19["raw"] := "0.9";
__n12 := [ __n13, __n14, __n15, __n16, __n17, __n18, __n19 ];
__n8["arguments"] := __n12;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "positive non-integer values";
__n21["raw"] := "'positive non-integer values'";
__n7 := [ __n8, __n20, __n21 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "sameValue";
__n26["raw"] := "\"sameValue\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Date";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "UTC";
__n31["raw"] := "\"UTC\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "-";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1970.9;
__n34["raw"] := "1970.9";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "-";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.9;
__n36["raw"] := "0.9";
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "-";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.9;
__n38["raw"] := "0.9";
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.9;
__n40["raw"] := "0.9";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "-";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.9;
__n42["raw"] := "0.9";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "-";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 0.9;
__n44["raw"] := "0.9";
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "-";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 0.9;
__n46["raw"] := "0.9";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n32 := [ __n33, __n35, __n37, __n39, __n41, __n43, __n45 ];
__n28["arguments"] := __n32;
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 124334438400000.;
__n48["raw"] := "124334438400000";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "negative non-integer values";
__n49["raw"] := "'negative non-integer values'";
__n27 := [ __n28, __n47, __n49 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n1 := [ __n2, __n22 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n50 := [  ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}