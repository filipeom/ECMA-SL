function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "timeRegExp";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/^[0-9]{2}:[0-9]{2}:[0-9]{2} GMT[+-][0-9]{4}( \\(.+\\))?$/";
__n6["raw"] := "/^[0-9]{2}:[0-9]{2}:[0-9]{2} GMT[+-][0-9]{4}( \\(.+\\))?$/";
__n6["source"] := "^[0-9]{2}:[0-9]{2}:[0-9]{2} GMT[+-][0-9]{4}( \\(.+\\))?$";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Alternative";
__n10 := {  };
__n10["type"] := "Assertion";
__n10["kind"] := "^";
__n11 := {  };
__n11["type"] := "Repetition";
__n12 := {  };
__n12["type"] := "CharacterClass";
__n14 := {  };
__n14["type"] := "ClassRange";
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "0";
__n15["kind"] := "simple";
__n15["symbol"] := "0";
__n15["codePoint"] := 48.;
__n14["from"] := __n15;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "9";
__n16["kind"] := "simple";
__n16["symbol"] := "9";
__n16["codePoint"] := 57.;
__n14["to"] := __n16;
__n13 := [ __n14 ];
__n12["expressions"] := __n13;
__n11["expression"] := __n12;
__n17 := {  };
__n17["type"] := "Quantifier";
__n17["kind"] := "Range";
__n17["from"] := 2.;
__n17["to"] := 2.;
__n17["greedy"] := true;
__n11["quantifier"] := __n17;
__n11["parenIndex"] := 0.;
__n11["parenCount"] := 0.;
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := ":";
__n18["kind"] := "simple";
__n18["symbol"] := ":";
__n18["codePoint"] := 58.;
__n19 := {  };
__n19["type"] := "Repetition";
__n20 := {  };
__n20["type"] := "CharacterClass";
__n22 := {  };
__n22["type"] := "ClassRange";
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "0";
__n23["kind"] := "simple";
__n23["symbol"] := "0";
__n23["codePoint"] := 48.;
__n22["from"] := __n23;
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "9";
__n24["kind"] := "simple";
__n24["symbol"] := "9";
__n24["codePoint"] := 57.;
__n22["to"] := __n24;
__n21 := [ __n22 ];
__n20["expressions"] := __n21;
__n19["expression"] := __n20;
__n25 := {  };
__n25["type"] := "Quantifier";
__n25["kind"] := "Range";
__n25["from"] := 2.;
__n25["to"] := 2.;
__n25["greedy"] := true;
__n19["quantifier"] := __n25;
__n19["parenIndex"] := 0.;
__n19["parenCount"] := 0.;
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := ":";
__n26["kind"] := "simple";
__n26["symbol"] := ":";
__n26["codePoint"] := 58.;
__n27 := {  };
__n27["type"] := "Repetition";
__n28 := {  };
__n28["type"] := "CharacterClass";
__n30 := {  };
__n30["type"] := "ClassRange";
__n31 := {  };
__n31["type"] := "Char";
__n31["value"] := "0";
__n31["kind"] := "simple";
__n31["symbol"] := "0";
__n31["codePoint"] := 48.;
__n30["from"] := __n31;
__n32 := {  };
__n32["type"] := "Char";
__n32["value"] := "9";
__n32["kind"] := "simple";
__n32["symbol"] := "9";
__n32["codePoint"] := 57.;
__n30["to"] := __n32;
__n29 := [ __n30 ];
__n28["expressions"] := __n29;
__n27["expression"] := __n28;
__n33 := {  };
__n33["type"] := "Quantifier";
__n33["kind"] := "Range";
__n33["from"] := 2.;
__n33["to"] := 2.;
__n33["greedy"] := true;
__n27["quantifier"] := __n33;
__n27["parenIndex"] := 0.;
__n27["parenCount"] := 0.;
__n34 := {  };
__n34["type"] := "Char";
__n34["value"] := " ";
__n34["kind"] := "simple";
__n34["symbol"] := " ";
__n34["codePoint"] := 32.;
__n35 := {  };
__n35["type"] := "Char";
__n35["value"] := "G";
__n35["kind"] := "simple";
__n35["symbol"] := "G";
__n35["codePoint"] := 71.;
__n36 := {  };
__n36["type"] := "Char";
__n36["value"] := "M";
__n36["kind"] := "simple";
__n36["symbol"] := "M";
__n36["codePoint"] := 77.;
__n37 := {  };
__n37["type"] := "Char";
__n37["value"] := "T";
__n37["kind"] := "simple";
__n37["symbol"] := "T";
__n37["codePoint"] := 84.;
__n38 := {  };
__n38["type"] := "CharacterClass";
__n40 := {  };
__n40["type"] := "Char";
__n40["value"] := "+";
__n40["kind"] := "simple";
__n40["symbol"] := "+";
__n40["codePoint"] := 43.;
__n41 := {  };
__n41["type"] := "Char";
__n41["value"] := "-";
__n41["kind"] := "simple";
__n41["symbol"] := "-";
__n41["codePoint"] := 45.;
__n39 := [ __n40, __n41 ];
__n38["expressions"] := __n39;
__n42 := {  };
__n42["type"] := "Repetition";
__n43 := {  };
__n43["type"] := "CharacterClass";
__n45 := {  };
__n45["type"] := "ClassRange";
__n46 := {  };
__n46["type"] := "Char";
__n46["value"] := "0";
__n46["kind"] := "simple";
__n46["symbol"] := "0";
__n46["codePoint"] := 48.;
__n45["from"] := __n46;
__n47 := {  };
__n47["type"] := "Char";
__n47["value"] := "9";
__n47["kind"] := "simple";
__n47["symbol"] := "9";
__n47["codePoint"] := 57.;
__n45["to"] := __n47;
__n44 := [ __n45 ];
__n43["expressions"] := __n44;
__n42["expression"] := __n43;
__n48 := {  };
__n48["type"] := "Quantifier";
__n48["kind"] := "Range";
__n48["from"] := 4.;
__n48["to"] := 4.;
__n48["greedy"] := true;
__n42["quantifier"] := __n48;
__n42["parenIndex"] := 0.;
__n42["parenCount"] := 0.;
__n49 := {  };
__n49["type"] := "Repetition";
__n50 := {  };
__n50["type"] := "Group";
__n50["capturing"] := true;
__n50["number"] := 1.;
__n51 := {  };
__n51["type"] := "Alternative";
__n53 := {  };
__n53["type"] := "Char";
__n53["value"] := " ";
__n53["kind"] := "simple";
__n53["symbol"] := " ";
__n53["codePoint"] := 32.;
__n54 := {  };
__n54["type"] := "Char";
__n54["value"] := "(";
__n54["kind"] := "simple";
__n54["symbol"] := "(";
__n54["codePoint"] := 40.;
__n54["escaped"] := true;
__n55 := {  };
__n55["type"] := "Repetition";
__n56 := {  };
__n56["type"] := "Char";
__n56["value"] := ".";
__n56["kind"] := "meta";
__n56["symbol"] := ".";
__n56["codePoint"] := nan;
__n55["expression"] := __n56;
__n57 := {  };
__n57["type"] := "Quantifier";
__n57["kind"] := "+";
__n57["greedy"] := true;
__n55["quantifier"] := __n57;
__n55["parenIndex"] := 1.;
__n55["parenCount"] := 1.;
__n58 := {  };
__n58["type"] := "Char";
__n58["value"] := ")";
__n58["kind"] := "simple";
__n58["symbol"] := ")";
__n58["codePoint"] := 41.;
__n58["escaped"] := true;
__n52 := [ __n53, __n54, __n55, __n58 ];
__n51["expressions"] := __n52;
__n50["expression"] := __n51;
__n49["expression"] := __n50;
__n59 := {  };
__n59["type"] := "Quantifier";
__n59["kind"] := "?";
__n59["greedy"] := true;
__n49["quantifier"] := __n59;
__n49["parenIndex"] := 1.;
__n49["parenCount"] := 0.;
__n60 := {  };
__n60["type"] := "Assertion";
__n60["kind"] := "$";
__n9 := [ __n10, __n11, __n18, __n19, __n26, __n27, __n34, __n35, __n36, __n37, __n38, __n42, __n49, __n60 ];
__n8["expressions"] := __n9;
__n7["body"] := __n8;
__n7["flags"] := "";
__n7["nCaps"] := 1.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n61 := {  };
__n61["type"] := "VariableDeclaration";
__n63 := {  };
__n63["type"] := "VariableDeclarator";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "match";
__n63["id"] := __n64;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "timeRegExp";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "exec";
__n68["raw"] := "\"exec\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["callee"] := __n66;
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "NewExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "Date";
__n72["callee"] := __n73;
__n74 := [  ];
__n72["arguments"] := __n74;
__n71["object"] := __n72;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "toTimeString";
__n75["raw"] := "\"toTimeString\"";
__n71["property"] := __n75;
__n71["computed"] := true;
__n70["callee"] := __n71;
__n76 := [  ];
__n70["arguments"] := __n76;
__n69 := [ __n70 ];
__n65["arguments"] := __n69;
__n63["init"] := __n65;
__n62 := [ __n63 ];
__n61["declarations"] := __n62;
__n61["kind"] := "let";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "assert";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "notSameValue";
__n81["raw"] := "\"notSameValue\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n78["callee"] := __n79;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 'null;
__n83["raw"] := "\"'null\"";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "match";
__n82 := [ __n83, __n84 ];
__n78["arguments"] := __n82;
__n77["expression"] := __n78;
__n1 := [ __n2, __n61, __n77 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n85 := [ "timeRegExp", "match" ];
__n0["variableDeclarations"] := __n85;
__n86 := [  ];
__n0["functionDeclarations"] := __n86;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}