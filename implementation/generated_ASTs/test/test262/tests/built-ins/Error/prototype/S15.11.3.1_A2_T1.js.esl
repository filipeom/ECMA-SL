function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Error";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "hasOwnProperty";
__n7["raw"] := "\"hasOwnProperty\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "'prototype'";
__n8 := [ __n9 ];
__n4["arguments"] := __n8;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#0: Error.hasOwnProperty('prototype') return true. Actual: ";
__n17["raw"] := "'#0: Error.hasOwnProperty(\\'prototype\\') return true. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Error";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "hasOwnProperty";
__n21["raw"] := "\"hasOwnProperty\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "prototype";
__n23["raw"] := "'prototype'";
__n22 := [ __n23 ];
__n18["arguments"] := __n22;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Error";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "propertyIsEnumerable";
__n28["raw"] := "\"propertyIsEnumerable\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "prototype";
__n30["raw"] := "'prototype'";
__n29 := [ __n30 ];
__n25["arguments"] := __n29;
__n24["test"] := __n25;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: Error.propertyIsEnumerable('prototype') return false. Actual: ";
__n38["raw"] := "'#1: Error.propertyIsEnumerable(\\'prototype\\') return false. Actual: '";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Error";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "propertyIsEnumerable";
__n42["raw"] := "\"propertyIsEnumerable\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "prototype";
__n44["raw"] := "'prototype'";
__n43 := [ __n44 ];
__n39["arguments"] := __n43;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n24["consequent"] := __n31;
__n24["alternate"] := null;
__n45 := {  };
__n45["type"] := "VariableDeclaration";
__n47 := {  };
__n47["type"] := "VariableDeclarator";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "cout";
__n47["id"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 0.;
__n49["raw"] := "0";
__n47["init"] := __n49;
__n46 := [ __n47 ];
__n45["declarations"] := __n46;
__n45["kind"] := "var";
__n50 := {  };
__n50["type"] := "ForInStatement";
__n51 := {  };
__n51["type"] := "VariableDeclarator";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "p";
__n51["id"] := __n52;
__n51["init"] := null;
__n50["left"] := __n51;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Error";
__n50["right"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "===";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "p";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "prototype";
__n59["raw"] := "\"prototype\"";
__n57["right"] := __n59;
__n56["test"] := __n57;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "UpdateExpression";
__n61["operator"] := "++";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "cout";
__n61["argument"] := __n62;
__n61["prefix"] := false;
__n60["expression"] := __n61;
__n56["consequent"] := __n60;
__n56["alternate"] := null;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n50["body"] := __n54;
__n50["each"] := false;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "cout";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 0.;
__n66["raw"] := "0";
__n64["right"] := __n66;
__n63["test"] := __n64;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#2: cout === 0. Actual: ";
__n74["raw"] := "'#2: cout === 0. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "cout";
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n63["consequent"] := __n67;
__n63["alternate"] := null;
__n1 := [ __n2, __n24, __n45, __n50, __n63 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n76 := [ "cout", "p" ];
__n0["variableDeclarations"] := __n76;
__n77 := [  ];
__n0["functionDeclarations"] := __n77;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}