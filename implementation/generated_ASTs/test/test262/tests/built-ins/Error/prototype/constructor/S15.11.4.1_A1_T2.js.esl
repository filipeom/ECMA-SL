function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "constr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Error";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["object"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "constructor";
__n10["raw"] := "\"constructor\"";
__n6["property"] := __n10;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "err";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "constr";
__n15["callee"] := __n16;
__n17 := [  ];
__n15["arguments"] := __n17;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "===";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "err";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "undefined";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#0: constr = Error.prototype.constructor; err = new constr; err === undefined";
__n28["raw"] := "'#0: constr = Error.prototype.constructor; err = new constr; err === undefined'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "err";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "constructor";
__n33["raw"] := "\"constructor\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["left"] := __n31;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Error";
__n30["right"] := __n34;
__n29["test"] := __n30;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#1: constr = Error.prototype.constructor; err = new constr; err.constructor === Error. Actual: ";
__n42["raw"] := "'#1: constr = Error.prototype.constructor; err = new constr; err.constructor === Error. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "err";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "constructor";
__n45["raw"] := "\"constructor\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n29["consequent"] := __n35;
__n29["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Error";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "prototype";
__n52["raw"] := "\"prototype\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["object"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "isPrototypeOf";
__n53["raw"] := "\"isPrototypeOf\"";
__n49["property"] := __n53;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "err";
__n54 := [ __n55 ];
__n48["arguments"] := __n54;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2: constr = Error.prototype.constructor; err = new constr; Error.prototype.isPrototypeOf(err) return true. Actual: ";
__n63["raw"] := "'#2: constr = Error.prototype.constructor; err = new constr; Error.prototype.isPrototypeOf(err) return true. Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "Error";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "prototype";
__n68["raw"] := "\"prototype\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["object"] := __n66;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "isPrototypeOf";
__n69["raw"] := "\"isPrototypeOf\"";
__n65["property"] := __n69;
__n65["computed"] := true;
__n64["callee"] := __n65;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "err";
__n70 := [ __n71 ];
__n64["arguments"] := __n70;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n46["consequent"] := __n56;
__n46["alternate"] := null;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "AssignmentExpression";
__n73["operator"] := "=";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Error";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "prototype";
__n77["raw"] := "\"prototype\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n74["object"] := __n75;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "toString";
__n78["raw"] := "\"toString\"";
__n74["property"] := __n78;
__n74["computed"] := true;
__n73["left"] := __n74;
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Object";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "prototype";
__n82["raw"] := "\"prototype\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n79["object"] := __n80;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "toString";
__n83["raw"] := "\"toString\"";
__n79["property"] := __n83;
__n79["computed"] := true;
__n73["right"] := __n79;
__n72["expression"] := __n73;
__n84 := {  };
__n84["type"] := "VariableDeclaration";
__n86 := {  };
__n86["type"] := "VariableDeclarator";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "to_string_result";
__n86["id"] := __n87;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "+";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "[object ";
__n90["raw"] := "'[object '";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "Error";
__n91["raw"] := "'Error'";
__n89["right"] := __n91;
__n88["left"] := __n89;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "]";
__n92["raw"] := "']'";
__n88["right"] := __n92;
__n86["init"] := __n88;
__n85 := [ __n86 ];
__n84["declarations"] := __n85;
__n84["kind"] := "var";
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "MemberExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "err";
__n96["object"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "toString";
__n98["raw"] := "\"toString\"";
__n96["property"] := __n98;
__n96["computed"] := true;
__n95["callee"] := __n96;
__n99 := [  ];
__n95["arguments"] := __n99;
__n94["left"] := __n95;
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "to_string_result";
__n94["right"] := __n100;
__n93["test"] := __n94;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ExpressionStatement";
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "$ERROR";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "+";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "#3: constr = Error.prototype.constructor; err = new constr; Error.prototype.toString=Object.prototype.toString; err.toString() === '[object Error]'. Actual: ";
__n108["raw"] := "'#3: constr = Error.prototype.constructor; err = new constr; Error.prototype.toString=Object.prototype.toString; err.toString() === \\'[object Error]\\'. Actual: '";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "MemberExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "err";
__n110["object"] := __n111;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "toString";
__n112["raw"] := "\"toString\"";
__n110["property"] := __n112;
__n110["computed"] := true;
__n109["callee"] := __n110;
__n113 := [  ];
__n109["arguments"] := __n113;
__n107["right"] := __n109;
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["expression"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n93["consequent"] := __n101;
__n93["alternate"] := null;
__n114 := {  };
__n114["type"] := "IfStatement";
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "!==";
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "MemberExpression";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "MemberExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "err";
__n119["object"] := __n120;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "valueOf";
__n121["raw"] := "\"valueOf\"";
__n119["property"] := __n121;
__n119["computed"] := true;
__n118["callee"] := __n119;
__n122 := [  ];
__n118["arguments"] := __n122;
__n117["object"] := __n118;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "toString";
__n123["raw"] := "\"toString\"";
__n117["property"] := __n123;
__n117["computed"] := true;
__n116["callee"] := __n117;
__n124 := [  ];
__n116["arguments"] := __n124;
__n115["left"] := __n116;
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "to_string_result";
__n115["right"] := __n125;
__n114["test"] := __n115;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "+";
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#4: constr = Error.prototype.constructor; err = new constr; Error.prototype.toString=Object.prototype.toString; err.valueOf().toString() === '[object Error]'. Actual: ";
__n133["raw"] := "'#4: constr = Error.prototype.constructor; err = new constr; Error.prototype.toString=Object.prototype.toString; err.valueOf().toString() === \\'[object Error]\\'. Actual: '";
__n132["left"] := __n133;
__n134 := {  };
__n134["type"] := "CallExpression";
__n135 := {  };
__n135["type"] := "MemberExpression";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "MemberExpression";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "err";
__n137["object"] := __n138;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "valueOf";
__n139["raw"] := "\"valueOf\"";
__n137["property"] := __n139;
__n137["computed"] := true;
__n136["callee"] := __n137;
__n140 := [  ];
__n136["arguments"] := __n140;
__n135["object"] := __n136;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "toString";
__n141["raw"] := "\"toString\"";
__n135["property"] := __n141;
__n135["computed"] := true;
__n134["callee"] := __n135;
__n142 := [  ];
__n134["arguments"] := __n142;
__n132["right"] := __n134;
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n114["consequent"] := __n126;
__n114["alternate"] := null;
__n1 := [ __n2, __n11, __n18, __n29, __n46, __n72, __n84, __n93, __n114 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n143 := [ "constr", "err", "to_string_result" ];
__n0["variableDeclarations"] := __n143;
__n144 := [  ];
__n0["functionDeclarations"] := __n144;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}