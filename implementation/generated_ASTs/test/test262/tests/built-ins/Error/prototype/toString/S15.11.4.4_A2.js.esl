function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "err1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Error";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "Error";
__n9["raw"] := "\"Error\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "TryStatement";
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "toStr";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "err1";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "toString";
__n20["raw"] := "\"toString\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n21 := [  ];
__n17["arguments"] := __n21;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n10["block"] := __n11;
__n22 := {  };
__n22["type"] := "CatchClause";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "e";
__n22["param"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: var err1=new Error(\"Error\"); var toStr=err1.toString(); lead to throwing exception. Exception is ";
__n31["raw"] := "'#1: var err1=new Error(\"Error\"); var toStr=err1.toString(); lead to throwing exception. Exception is '";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "e";
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n22["body"] := __n24;
__n10["handler"] := __n22;
__n10["finalizer"] := null;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "===";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "toStr";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "undefined";
__n34["right"] := __n36;
__n33["test"] := __n34;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: var err1=new Error(\"Error\"); var toStr=err1.toString(); toStr!==undefined. Actual: ";
__n44["raw"] := "'#2: var err1=new Error(\"Error\"); var toStr=err1.toString(); toStr!==undefined. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "toStr";
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n33["consequent"] := __n37;
__n33["alternate"] := null;
__n1 := [ __n2, __n10, __n33 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "err1", "toStr" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}