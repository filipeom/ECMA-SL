function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "throws";
__n6["raw"] := "\"throws\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "TypeError";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "use strict";
__n20["raw"] := "\"use strict\"";
__n19["expression"] := __n20;
__n19["directive"] := "use strict";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "gNonStrict";
__n22["callee"] := __n23;
__n24 := [  ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n18 := [ __n19, __n21 ];
__n17["body"] := __n18;
__n25 := [  ];
__n17["variableDeclarations"] := __n25;
__n26 := [  ];
__n17["functionDeclarations"] := __n26;
__n17["codeType"] := "function";
__n17["strict"] := true;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14["callee"] := __n15;
__n27 := [  ];
__n14["arguments"] := __n27;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n28 := [  ];
__n11["variableDeclarations"] := __n28;
__n29 := [  ];
__n11["functionDeclarations"] := __n29;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n7 := [ __n8, __n9 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "gNonStrict";
__n30["expression"] := __n31;
__n1 := [ __n2, __n30 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [  ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "gNonStrict";
__n34["id"] := __n35;
__n36 := [  ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "LogicalExpression";
__n40["operator"] := "||";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "gNonStrict";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "caller";
__n43["raw"] := "\"caller\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["left"] := __n41;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "gNonStrict";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "caller";
__n47["raw"] := "\"caller\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["object"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "throwTypeError";
__n48["raw"] := "\"throwTypeError\"";
__n44["property"] := __n48;
__n44["computed"] := true;
__n40["right"] := __n44;
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n49 := [  ];
__n37["variableDeclarations"] := __n49;
__n50 := [  ];
__n37["functionDeclarations"] := __n50;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}