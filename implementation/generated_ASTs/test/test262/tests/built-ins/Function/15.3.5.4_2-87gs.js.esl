function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "o";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "ObjectExpression";
__n10 := [  ];
__n9["properties"] := __n10;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [  ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "use strict";
__n18["raw"] := "\"use strict\"";
__n17["expression"] := __n18;
__n17["directive"] := "use strict";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "f";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "call";
__n23["raw"] := "\"call\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "o";
__n24 := [ __n25 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n16 := [ __n17, __n19 ];
__n15["body"] := __n16;
__n26 := [  ];
__n15["variableDeclarations"] := __n26;
__n27 := [  ];
__n15["functionDeclarations"] := __n27;
__n15["codeType"] := "function";
__n15["strict"] := true;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12["callee"] := __n13;
__n28 := [  ];
__n12["arguments"] := __n28;
__n11["expression"] := __n12;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "gNonStrict";
__n29["expression"] := __n30;
__n1 := [ __n2, __n4, __n5, __n11, __n29 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n31 := [ "o" ];
__n0["variableDeclarations"] := __n31;
__n33 := {  };
__n33["type"] := "FunctionDeclaration";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "f";
__n33["id"] := __n34;
__n35 := [  ];
__n33["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ReturnStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "gNonStrict";
__n39["callee"] := __n40;
__n41 := [  ];
__n39["arguments"] := __n41;
__n38["argument"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n42 := [  ];
__n36["variableDeclarations"] := __n42;
__n43 := [  ];
__n36["functionDeclarations"] := __n43;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n33["body"] := __n36;
__n33["generator"] := false;
__n33["async"] := false;
__n33["expression"] := false;
__n44 := {  };
__n44["type"] := "FunctionDeclaration";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "gNonStrict";
__n44["id"] := __n45;
__n46 := [  ];
__n44["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ReturnStatement";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "gNonStrict";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "caller";
__n52["raw"] := "\"caller\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["argument"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n53 := [  ];
__n47["variableDeclarations"] := __n53;
__n54 := [  ];
__n47["functionDeclarations"] := __n54;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n44["body"] := __n47;
__n44["generator"] := false;
__n44["async"] := false;
__n44["expression"] := false;
__n32 := [ __n33, __n44 ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}