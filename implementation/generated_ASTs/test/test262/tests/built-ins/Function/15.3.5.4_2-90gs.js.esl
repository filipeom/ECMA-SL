function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "use strict";
__n12["raw"] := "\"use strict\"";
__n11["expression"] := __n12;
__n11["directive"] := "use strict";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "f";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "bind";
__n18["raw"] := "\"bind\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 'null;
__n20["raw"] := "\"'null\"";
__n19 := [ __n20 ];
__n15["arguments"] := __n19;
__n14["callee"] := __n15;
__n21 := [  ];
__n14["arguments"] := __n21;
__n13["expression"] := __n14;
__n10 := [ __n11, __n13 ];
__n9["body"] := __n10;
__n22 := [  ];
__n9["variableDeclarations"] := __n22;
__n23 := [  ];
__n9["functionDeclarations"] := __n23;
__n9["codeType"] := "function";
__n9["strict"] := true;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n6["callee"] := __n7;
__n24 := [  ];
__n6["arguments"] := __n24;
__n5["expression"] := __n6;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "gNonStrict";
__n25["expression"] := __n26;
__n1 := [ __n2, __n4, __n5, __n25 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n27 := [  ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [  ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "gNonStrict";
__n35["callee"] := __n36;
__n37 := [  ];
__n35["arguments"] := __n37;
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n38 := [  ];
__n32["variableDeclarations"] := __n38;
__n39 := [  ];
__n32["functionDeclarations"] := __n39;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n40 := {  };
__n40["type"] := "FunctionDeclaration";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "gNonStrict";
__n40["id"] := __n41;
__n42 := [  ];
__n40["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ReturnStatement";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "gNonStrict";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "caller";
__n48["raw"] := "\"caller\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n49 := [  ];
__n43["variableDeclarations"] := __n49;
__n50 := [  ];
__n43["functionDeclarations"] := __n50;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n40["body"] := __n43;
__n40["generator"] := false;
__n40["async"] := false;
__n40["expression"] := false;
__n28 := [ __n29, __n40 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}