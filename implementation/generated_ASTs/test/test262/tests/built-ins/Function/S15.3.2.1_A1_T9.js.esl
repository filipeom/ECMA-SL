function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "return arguments[0];";
__n9["raw"] := "\"return arguments[0];\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "!";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "instanceof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Function";
__n12["right"] := __n14;
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#3: When the Function constructor is called with one argument then body be that argument and the following steps are taken...";
__n21["raw"] := "'#3: When the Function constructor is called with one argument then body be that argument and the following steps are taken...'";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n10["alternate"] := null;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "f";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "A";
__n27["raw"] := "\"A\"";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["left"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "A";
__n28["raw"] := "\"A\"";
__n23["right"] := __n28;
__n22["test"] := __n23;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: When the Function constructor is called with one argument then body be that argument and the following steps are taken...";
__n35["raw"] := "'#2: When the Function constructor is called with one argument then body be that argument and the following steps are taken...'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n22["consequent"] := __n29;
__n22["alternate"] := null;
__n1 := [ __n2, __n10, __n22 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [ "f" ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}