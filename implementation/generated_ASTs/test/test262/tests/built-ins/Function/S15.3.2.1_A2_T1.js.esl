function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Function";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "arg1";
__n12["raw"] := "\"arg1\"";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "arg2";
__n13["raw"] := "\"arg2\"";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "arg3";
__n14["raw"] := "\"arg3\"";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "return arg1+arg2+arg3;";
__n15["raw"] := "\"return arg1+arg2+arg3;\"";
__n11 := [ __n12, __n13, __n14, __n15 ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: test failed";
__n24["raw"] := "'#1: test failed'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n2["handler"] := __n16;
__n2["finalizer"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "!";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "instanceof";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "f";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Function";
__n27["right"] := __n29;
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["test"] := __n26;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n36["raw"] := "'#2: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n25["consequent"] := __n30;
__n25["alternate"] := null;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "f";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.;
__n42["raw"] := "1";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 2.;
__n43["raw"] := "2";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 3.;
__n44["raw"] := "3";
__n41 := [ __n42, __n43, __n44 ];
__n39["arguments"] := __n41;
__n38["left"] := __n39;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 6.;
__n45["raw"] := "6";
__n38["right"] := __n45;
__n37["test"] := __n38;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n52["raw"] := "'#3: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n37["consequent"] := __n46;
__n37["alternate"] := null;
__n1 := [ __n2, __n25, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n53 := [ "f" ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}