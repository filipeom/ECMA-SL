function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "p";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "toString";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ReturnStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "arg";
__n21["raw"] := "\"arg\"";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "UpdateExpression";
__n22["operator"] := "++";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n20["right"] := __n22;
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n24 := [  ];
__n17["variableDeclarations"] := __n24;
__n25 := [  ];
__n17["functionDeclarations"] := __n25;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n12 := [ __n13 ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n26 := {  };
__n26["type"] := "TryStatement";
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "f";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Function";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "p";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "p";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "p";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "return arg1+arg2+arg3;";
__n39["raw"] := "\"return arg1+arg2+arg3;\"";
__n35 := [ __n36, __n37, __n38, __n39 ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n26["block"] := __n27;
__n40 := {  };
__n40["type"] := "CatchClause";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "e";
__n40["param"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#1: test failed";
__n48["raw"] := "'#1: test failed'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n40["body"] := __n42;
__n26["handler"] := __n40;
__n26["finalizer"] := null;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "!";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "instanceof";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "f";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Function";
__n51["right"] := __n53;
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n49["test"] := __n50;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#2: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n60["raw"] := "'#2: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n49["consequent"] := __n54;
__n49["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "f";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 4.;
__n66["raw"] := "4";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "2";
__n67["raw"] := "\"2\"";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "QUESTION";
__n68["raw"] := "\"QUESTION\"";
__n65 := [ __n66, __n67, __n68 ];
__n63["arguments"] := __n65;
__n62["left"] := __n63;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "42QUESTION";
__n69["raw"] := "\"42QUESTION\"";
__n62["right"] := __n69;
__n61["test"] := __n62;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#3: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n76["raw"] := "'#3: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n61["consequent"] := __n70;
__n61["alternate"] := null;
__n1 := [ __n2, __n7, __n26, __n49, __n61 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n77 := [ "i", "p", "f" ];
__n0["variableDeclarations"] := __n77;
__n78 := [  ];
__n0["functionDeclarations"] := __n78;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}