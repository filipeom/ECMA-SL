function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "p";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "toString";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ReturnStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "arg";
__n21["raw"] := "\"arg\"";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "UpdateExpression";
__n22["operator"] := "++";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n20["right"] := __n22;
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n24 := [  ];
__n17["variableDeclarations"] := __n24;
__n25 := [  ];
__n17["functionDeclarations"] := __n25;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["expression"] := false;
__n15["async"] := false;
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n12 := [ __n13 ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n26 := {  };
__n26["type"] := "TryStatement";
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "f";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Function";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "p";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := ",";
__n39["raw"] := "\",\"";
__n37["right"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "p";
__n36["right"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "p";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "return arg1+arg2+arg3;";
__n42["raw"] := "\"return arg1+arg2+arg3;\"";
__n35 := [ __n36, __n41, __n42 ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n26["block"] := __n27;
__n43 := {  };
__n43["type"] := "CatchClause";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "e";
__n43["param"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: test failed";
__n51["raw"] := "'#1: test failed'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n43["body"] := __n45;
__n26["handler"] := __n43;
__n26["finalizer"] := null;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "UnaryExpression";
__n53["operator"] := "!";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "instanceof";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "f";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "Function";
__n54["right"] := __n56;
__n53["argument"] := __n54;
__n53["prefix"] := true;
__n52["test"] := __n53;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n63["raw"] := "'#2: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n52["consequent"] := __n57;
__n52["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "f";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "";
__n69["raw"] := "\"\"";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 2.;
__n71["raw"] := "2";
__n68 := [ __n69, __n70, __n71 ];
__n66["arguments"] := __n68;
__n65["left"] := __n66;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "12";
__n72["raw"] := "\"12\"";
__n65["right"] := __n72;
__n64["test"] := __n65;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "$ERROR";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#3: It is permissible but not necessary to have one argument for each formal parameter to be specified";
__n79["raw"] := "'#3: It is permissible but not necessary to have one argument for each formal parameter to be specified'";
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["expression"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n64["consequent"] := __n73;
__n64["alternate"] := null;
__n1 := [ __n2, __n7, __n26, __n52, __n64 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n80 := [ "i", "p", "f" ];
__n0["variableDeclarations"] := __n80;
__n81 := [  ];
__n0["functionDeclarations"] := __n81;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}