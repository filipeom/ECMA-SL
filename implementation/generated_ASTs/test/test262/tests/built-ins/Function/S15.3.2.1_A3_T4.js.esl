function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "body";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "return 1.1;";
__n6["raw"] := "\"return 1.1;\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "NewExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Function";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "p";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "body";
__n16 := [ __n17, __n18 ];
__n14["arguments"] := __n16;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n19 := {  };
__n19["type"] := "CatchClause";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["param"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: test failed with error ";
__n28["raw"] := "'#1: test failed with error '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "e";
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n19["body"] := __n21;
__n7["handler"] := __n19;
__n7["finalizer"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "f";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "constructor";
__n34["raw"] := "\"constructor\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Function";
__n31["right"] := __n35;
__n30["test"] := __n31;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: When the Function constructor is called with one argument then body be that argument and creates a new Function object as specified in 13.2";
__n42["raw"] := "'#2: When the Function constructor is called with one argument then body be that argument and creates a new Function object as specified in 13.2'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n30["consequent"] := __n36;
__n30["alternate"] := null;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "f";
__n45["callee"] := __n46;
__n47 := [  ];
__n45["arguments"] := __n47;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.1;
__n48["raw"] := "1.1";
__n44["right"] := __n48;
__n43["test"] := __n44;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#3: When the Function constructor is called with one argument then body be that argument the following steps are taken...";
__n55["raw"] := "'#3: When the Function constructor is called with one argument then body be that argument the following steps are taken...'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n43["consequent"] := __n49;
__n43["alternate"] := null;
__n56 := {  };
__n56["type"] := "VariableDeclaration";
__n58 := {  };
__n58["type"] := "VariableDeclarator";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "p";
__n58["id"] := __n59;
__n58["init"] := null;
__n57 := [ __n58 ];
__n56["declarations"] := __n57;
__n56["kind"] := "var";
__n1 := [ __n2, __n7, __n30, __n43, __n56 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n60 := [ "body", "f", "p" ];
__n0["variableDeclarations"] := __n60;
__n61 := [  ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}