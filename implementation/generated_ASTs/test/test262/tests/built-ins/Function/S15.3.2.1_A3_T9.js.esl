function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "body";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "return this;";
__n6["raw"] := "\"return this;\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "p";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "1,1";
__n11["raw"] := "\"1,1\"";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "TryStatement";
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "f";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Function";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "p";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "body";
__n21 := [ __n22, __n23 ];
__n19["arguments"] := __n21;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: If P is not parsable as a FormalParameterList_opt then throw a SyntaxError exception";
__n28["raw"] := "'#1: If P is not parsable as a FormalParameterList_opt then throw a SyntaxError exception'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n14 := [ __n15, __n24 ];
__n13["body"] := __n14;
__n12["block"] := __n13;
__n29 := {  };
__n29["type"] := "CatchClause";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["param"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "!";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "instanceof";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "SyntaxError";
__n35["right"] := __n37;
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n33["test"] := __n34;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#1.1: If P is not parsable as a FormalParameterList_opt then throw a SyntaxError exception";
__n44["raw"] := "'#1.1: If P is not parsable as a FormalParameterList_opt then throw a SyntaxError exception'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n33["consequent"] := __n38;
__n33["alternate"] := null;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n29["body"] := __n31;
__n12["handler"] := __n29;
__n12["finalizer"] := null;
__n1 := [ __n2, __n7, __n12 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n45 := [ "body", "p", "f" ];
__n0["variableDeclarations"] := __n45;
__n46 := [  ];
__n0["functionDeclarations"] := __n46;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}