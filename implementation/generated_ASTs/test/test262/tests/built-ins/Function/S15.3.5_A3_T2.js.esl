function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "FACTORY";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "arg1,arg2";
__n9["raw"] := "\"arg1,arg2\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "var x =1; this.y=arg1+arg2;return \"OK\";";
__n10["raw"] := "\"var x =1; this.y=arg1+arg2;return \\\"OK\\\";\"";
__n8 := [ __n9, __n10 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "obj";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "FACTORY";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "1";
__n18["raw"] := "\"1\"";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 2.;
__n19["raw"] := "2";
__n17 := [ __n18, __n19 ];
__n15["arguments"] := __n17;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "typeof";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "obj";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "object";
__n24["raw"] := "\"object\"";
__n21["right"] := __n24;
__n20["test"] := __n21;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: every function instance has a [[Construct]] property";
__n31["raw"] := "'#1: every function instance has a [[Construct]] property'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n20["consequent"] := __n25;
__n20["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "obj";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "constructor";
__n36["raw"] := "\"constructor\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["left"] := __n34;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "FACTORY";
__n33["right"] := __n37;
__n32["test"] := __n33;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: every function instance has a [[Construct]] property";
__n44["raw"] := "'#2: every function instance has a [[Construct]] property'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n32["consequent"] := __n38;
__n32["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "obj";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "y";
__n49["raw"] := "\"y\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "12";
__n50["raw"] := "\"12\"";
__n46["right"] := __n50;
__n45["test"] := __n46;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#3: every function instance has a [[Construct]] property";
__n57["raw"] := "'#3: every function instance has a [[Construct]] property'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n45["consequent"] := __n51;
__n45["alternate"] := null;
__n1 := [ __n2, __n11, __n20, __n32, __n45 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n58 := [ "FACTORY", "obj" ];
__n0["variableDeclarations"] := __n58;
__n59 := [  ];
__n0["functionDeclarations"] := __n59;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}