function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "arg1,arg2,arg3";
__n9["raw"] := "\"arg1,arg2,arg3\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 'null;
__n10["raw"] := "\"'null\"";
__n8 := [ __n9, __n10 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "f";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "hasOwnProperty";
__n16["raw"] := "\"hasOwnProperty\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "length";
__n18["raw"] := "'length'";
__n17 := [ __n18 ];
__n13["arguments"] := __n17;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: the function has length property.";
__n25["raw"] := "'#1: the function has length property.'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n11["consequent"] := __n19;
__n11["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "!";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "delete";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "length";
__n31["raw"] := "\"length\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: the function.length property does not have the attributes DontDelete.";
__n38["raw"] := "'#2: the function.length property does not have the attributes DontDelete.'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "f";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "hasOwnProperty";
__n43["raw"] := "\"hasOwnProperty\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "length";
__n45["raw"] := "'length'";
__n44 := [ __n45 ];
__n40["arguments"] := __n44;
__n39["test"] := __n40;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: the function.length property does not have the attributes DontDelete.";
__n52["raw"] := "'#3: the function.length property does not have the attributes DontDelete.'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n39["consequent"] := __n46;
__n39["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "===";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "f";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "length";
__n57["raw"] := "\"length\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 3.;
__n58["raw"] := "3";
__n54["right"] := __n58;
__n53["test"] := __n54;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#4: the length property does not have the attributes { DontDelete }";
__n65["raw"] := "'#4: the length property does not have the attributes { DontDelete }'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n53["consequent"] := __n59;
__n53["alternate"] := null;
__n1 := [ __n2, __n11, __n26, __n39, __n53 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n66 := [ "f" ];
__n0["variableDeclarations"] := __n66;
__n67 := [  ];
__n0["functionDeclarations"] := __n67;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}