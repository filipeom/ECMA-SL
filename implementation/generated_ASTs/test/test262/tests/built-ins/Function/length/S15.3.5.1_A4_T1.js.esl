function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "arg1,arg2,arg3";
__n9["raw"] := "\"arg1,arg2,arg3\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 'null;
__n10["raw"] := "\"'null\"";
__n8 := [ __n9, __n10 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "f";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "hasOwnProperty";
__n16["raw"] := "\"hasOwnProperty\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "length";
__n18["raw"] := "'length'";
__n17 := [ __n18 ];
__n13["arguments"] := __n17;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: the function has length property.";
__n25["raw"] := "'#1: the function has length property.'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n11["consequent"] := __n19;
__n11["alternate"] := null;
__n26 := {  };
__n26["type"] := "ForInStatement";
__n27 := {  };
__n27["type"] := "VariableDeclaration";
__n29 := {  };
__n29["type"] := "VariableDeclarator";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "key";
__n29["id"] := __n30;
__n29["init"] := null;
__n28 := [ __n29 ];
__n27["declarations"] := __n28;
__n27["kind"] := "var";
__n26["left"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "f";
__n26["right"] := __n31;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "==";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "key";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "length";
__n35["raw"] := "\"length\"";
__n33["right"] := __n35;
__n32["test"] := __n33;
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "lengthenumed";
__n38["id"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n38["init"] := __n40;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n32["consequent"] := __n36;
__n32["alternate"] := null;
__n26["body"] := __n32;
__n26["each"] := false;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "lengthenumed";
__n41["test"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: the length property has the attributes { DontEnum }";
__n49["raw"] := "'#2: the length property has the attributes { DontEnum }'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n41["consequent"] := __n43;
__n41["alternate"] := null;
__n1 := [ __n2, __n11, __n26, __n41 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "f", "key", "lengthenumed" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}