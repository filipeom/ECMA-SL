function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FACTORY";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "FACTORY";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Function";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "prototype";
__n12["raw"] := "\"prototype\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n6["right"] := __n10;
__n5["expression"] := __n6;
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "obj";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "FACTORY";
__n17["callee"] := __n18;
__n19 := [  ];
__n17["arguments"] := __n19;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "typeof";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "obj";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "apply";
__n25["raw"] := "\"apply\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "function";
__n26["raw"] := "\"function\"";
__n21["right"] := __n26;
__n20["test"] := __n21;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: apply method accessed";
__n33["raw"] := "'#1: apply method accessed'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n20["consequent"] := __n27;
__n20["alternate"] := null;
__n34 := {  };
__n34["type"] := "TryStatement";
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "obj";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "apply";
__n41["raw"] := "\"apply\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n42 := [  ];
__n38["arguments"] := __n42;
__n37["expression"] := __n38;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: If the object does not have a [[Call]] property, a TypeError exception is thrown";
__n47["raw"] := "'#2: If the object does not have a [[Call]] property, a TypeError exception is thrown'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n36 := [ __n37, __n43 ];
__n35["body"] := __n36;
__n34["block"] := __n35;
__n48 := {  };
__n48["type"] := "CatchClause";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "e";
__n48["param"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "UnaryExpression";
__n53["operator"] := "!";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "instanceof";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "TypeError";
__n54["right"] := __n56;
__n53["argument"] := __n54;
__n53["prefix"] := true;
__n52["test"] := __n53;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2.1: If the object does not have a [[Call]] property, a TypeError exception is thrown";
__n63["raw"] := "'#2.1: If the object does not have a [[Call]] property, a TypeError exception is thrown'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n52["consequent"] := __n57;
__n52["alternate"] := null;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n48["body"] := __n50;
__n34["handler"] := __n48;
__n34["finalizer"] := null;
__n1 := [ __n2, __n4, __n5, __n13, __n20, __n34 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n64 := [ "obj" ];
__n0["variableDeclarations"] := __n64;
__n66 := {  };
__n66["type"] := "FunctionDeclaration";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "FACTORY";
__n66["id"] := __n67;
__n68 := [  ];
__n66["params"] := __n68;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n70 := [  ];
__n69["body"] := __n70;
__n71 := [  ];
__n69["variableDeclarations"] := __n71;
__n72 := [  ];
__n69["functionDeclarations"] := __n72;
__n69["codeType"] := "function";
__n69["strict"] := false;
__n66["body"] := __n69;
__n66["generator"] := false;
__n66["expression"] := false;
__n66["async"] := false;
__n65 := [ __n66 ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}