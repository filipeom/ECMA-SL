function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "f";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "FunctionExpression";
__n5["id"] := null;
__n6 := [  ];
__n5["params"] := __n6;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "ThisExpression";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "touched";
__n13["raw"] := "\"touched\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n10["right"] := __n14;
__n9["expression"] := __n10;
__n15 := {  };
__n15["type"] := "ReturnStatement";
__n16 := {  };
__n16["type"] := "ThisExpression";
__n15["argument"] := __n16;
__n8 := [ __n9, __n15 ];
__n7["body"] := __n8;
__n17 := [  ];
__n7["variableDeclarations"] := __n17;
__n18 := [  ];
__n7["functionDeclarations"] := __n18;
__n7["codeType"] := "function";
__n7["strict"] := false;
__n5["body"] := __n7;
__n5["generator"] := false;
__n5["async"] := false;
__n5["expression"] := false;
__n3["right"] := __n5;
__n2["expression"] := __n3;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "retobj";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "f";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "apply";
__n25["raw"] := "\"apply\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "obj";
__n26 := [ __n27 ];
__n22["arguments"] := __n26;
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "typeof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "obj";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29["left"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "undefined";
__n32["raw"] := "\"undefined\"";
__n29["right"] := __n32;
__n28["test"] := __n29;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n39["raw"] := "'#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n28["consequent"] := __n33;
__n28["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "!";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "retobj";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "touched";
__n44["raw"] := "\"touched\"";
__n42["property"] := __n44;
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["test"] := __n41;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n51["raw"] := "'#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n40["consequent"] := __n45;
__n40["alternate"] := null;
__n52 := {  };
__n52["type"] := "VariableDeclaration";
__n54 := {  };
__n54["type"] := "VariableDeclarator";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "obj";
__n54["id"] := __n55;
__n54["init"] := null;
__n53 := [ __n54 ];
__n52["declarations"] := __n53;
__n52["kind"] := "var";
__n1 := [ __n2, __n19, __n28, __n40, __n52 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n56 := [ "obj" ];
__n0["variableDeclarations"] := __n56;
__n57 := [  ];
__n0["functionDeclarations"] := __n57;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}