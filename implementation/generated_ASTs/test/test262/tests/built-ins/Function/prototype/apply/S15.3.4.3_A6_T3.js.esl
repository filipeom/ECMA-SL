function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "TryStatement";
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Function";
__n14["callee"] := __n15;
__n16 := [  ];
__n14["arguments"] := __n16;
__n13["object"] := __n14;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "apply";
__n17["raw"] := "\"apply\"";
__n13["property"] := __n17;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "obj";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "1,3,4";
__n20["raw"] := "\"1,3,4\"";
__n18 := [ __n19, __n20 ];
__n12["arguments"] := __n18;
__n11["expression"] := __n12;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown";
__n25["raw"] := "'#1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n10 := [ __n11, __n21 ];
__n9["body"] := __n10;
__n8["block"] := __n9;
__n26 := {  };
__n26["type"] := "CatchClause";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["param"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "!";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "instanceof";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "TypeError";
__n32["right"] := __n34;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["test"] := __n31;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown";
__n41["raw"] := "'#1.1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n30["consequent"] := __n35;
__n30["alternate"] := null;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n26["body"] := __n28;
__n8["handler"] := __n26;
__n8["finalizer"] := null;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n42 := [ "obj" ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}