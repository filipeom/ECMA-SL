function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FACTORY";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "NewExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "FACTORY";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "";
__n11["raw"] := "\"\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 4.;
__n12["raw"] := "4";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n10 := [ __n11, __n12, __n13 ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n16["computed"] := true;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "obj";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "shifted";
__n18["raw"] := "\"shifted\"";
__n16["property"] := __n18;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "42";
__n19["raw"] := "\"42\"";
__n15["right"] := __n19;
__n14["test"] := __n15;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: If argArray is either an array or an arguments object, the function is passed the...";
__n26["raw"] := "'#1: If argArray is either an array or an arguments object, the function is passed the...'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n14["consequent"] := __n20;
__n14["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "typeof";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n30["computed"] := true;
__n31 := {  };
__n31["type"] := "ThisExpression";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "shifted";
__n32["raw"] := "\"shifted\"";
__n30["property"] := __n32;
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n28["left"] := __n29;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "undefined";
__n33["raw"] := "\"undefined\"";
__n28["right"] := __n33;
__n27["test"] := __n28;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: If argArray is either an array or an arguments object, the function is passed the...";
__n40["raw"] := "'#2: If argArray is either an array or an arguments object, the function is passed the...'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n27["consequent"] := __n34;
__n27["alternate"] := null;
__n1 := [ __n2, __n4, __n14, __n27 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n41 := [ "obj" ];
__n0["variableDeclarations"] := __n41;
__n43 := {  };
__n43["type"] := "FunctionDeclaration";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "FACTORY";
__n43["id"] := __n44;
__n45 := [  ];
__n43["params"] := __n45;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Function";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "a1,a2,a3";
__n54["raw"] := "\"a1,a2,a3\"";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "this.shifted=a1+a2+a3;";
__n55["raw"] := "\"this.shifted=a1+a2+a3;\"";
__n53 := [ __n54, __n55 ];
__n51["arguments"] := __n53;
__n50["object"] := __n51;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "apply";
__n56["raw"] := "\"apply\"";
__n50["property"] := __n56;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n58 := {  };
__n58["type"] := "ThisExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arguments";
__n57 := [ __n58, __n59 ];
__n49["arguments"] := __n57;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n60 := [  ];
__n46["variableDeclarations"] := __n60;
__n61 := [  ];
__n46["functionDeclarations"] := __n61;
__n46["codeType"] := "function";
__n46["strict"] := false;
__n43["body"] := __n46;
__n43["generator"] := false;
__n43["expression"] := false;
__n43["async"] := false;
__n42 := [ __n43 ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}