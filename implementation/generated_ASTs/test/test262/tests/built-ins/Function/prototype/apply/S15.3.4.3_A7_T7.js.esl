function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "FunctionExpression";
__n4["id"] := null;
__n5 := [  ];
__n4["params"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Function";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "a1,a2,a3";
__n14["raw"] := "\"a1,a2,a3\"";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "this.shifted=a1+a2+a3;";
__n15["raw"] := "\"this.shifted=a1+a2+a3;\"";
__n13 := [ __n14, __n15 ];
__n11["arguments"] := __n13;
__n10["object"] := __n11;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "apply";
__n16["raw"] := "\"apply\"";
__n10["property"] := __n16;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 'null;
__n18["raw"] := "\"'null\"";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "arguments";
__n17 := [ __n18, __n19 ];
__n9["arguments"] := __n17;
__n8["expression"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n20 := [  ];
__n6["variableDeclarations"] := __n20;
__n21 := [  ];
__n6["functionDeclarations"] := __n21;
__n6["codeType"] := "function";
__n6["strict"] := false;
__n4["body"] := __n6;
__n4["generator"] := false;
__n4["async"] := false;
__n4["expression"] := false;
__n3["callee"] := __n4;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "";
__n23["raw"] := "\"\"";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 2.;
__n25["raw"] := "2";
__n22 := [ __n23, __n24, __n25 ];
__n3["arguments"] := __n22;
__n2["expression"] := __n3;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n28["computed"] := true;
__n29 := {  };
__n29["type"] := "ThisExpression";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "shifted";
__n30["raw"] := "\"shifted\"";
__n28["property"] := __n30;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "12";
__n31["raw"] := "\"12\"";
__n27["right"] := __n31;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: If argArray is either an array or an arguments object, the function is passed the...";
__n38["raw"] := "'#1: If argArray is either an array or an arguments object, the function is passed the...'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n1 := [ __n2, __n26 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [  ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}