function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FACTORY";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "NewExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "FACTORY";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "";
__n11["raw"] := "\"\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n10 := [ __n11, __n12, __n13 ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "typeof";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n17["computed"] := true;
__n18 := {  };
__n18["type"] := "ThisExpression";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "shifted";
__n19["raw"] := "\"shifted\"";
__n17["property"] := __n19;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["left"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "undefined";
__n20["raw"] := "\"undefined\"";
__n15["right"] := __n20;
__n14["test"] := __n15;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: If argArray is either an array or an arguments object, the function is passed the...";
__n27["raw"] := "'#1: If argArray is either an array or an arguments object, the function is passed the...'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n14["consequent"] := __n21;
__n14["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "obj";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "shifted";
__n32["raw"] := "\"shifted\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "12";
__n33["raw"] := "\"12\"";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: If argArray is either an array or an arguments object, the function is passed the...";
__n40["raw"] := "'#2: If argArray is either an array or an arguments object, the function is passed the...'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n1 := [ __n2, __n4, __n14, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n41 := [ "obj" ];
__n0["variableDeclarations"] := __n41;
__n43 := {  };
__n43["type"] := "FunctionDeclaration";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "FACTORY";
__n43["id"] := __n44;
__n45 := [  ];
__n43["params"] := __n45;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "obj";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "ObjectExpression";
__n53 := [  ];
__n52["properties"] := __n53;
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Function";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "a1,a2,a3";
__n60["raw"] := "\"a1,a2,a3\"";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "this.shifted=a1+a2+a3;";
__n61["raw"] := "\"this.shifted=a1+a2+a3;\"";
__n59 := [ __n60, __n61 ];
__n57["arguments"] := __n59;
__n56["object"] := __n57;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "apply";
__n62["raw"] := "\"apply\"";
__n56["property"] := __n62;
__n56["computed"] := true;
__n55["callee"] := __n56;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "obj";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "arguments";
__n63 := [ __n64, __n65 ];
__n55["arguments"] := __n63;
__n54["expression"] := __n55;
__n66 := {  };
__n66["type"] := "ReturnStatement";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "obj";
__n66["argument"] := __n67;
__n47 := [ __n48, __n54, __n66 ];
__n46["body"] := __n47;
__n68 := [ "obj" ];
__n46["variableDeclarations"] := __n68;
__n69 := [  ];
__n46["functionDeclarations"] := __n69;
__n46["codeType"] := "function";
__n46["strict"] := false;
__n43["body"] := __n46;
__n43["generator"] := false;
__n43["expression"] := false;
__n43["async"] := false;
__n42 := [ __n43 ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}