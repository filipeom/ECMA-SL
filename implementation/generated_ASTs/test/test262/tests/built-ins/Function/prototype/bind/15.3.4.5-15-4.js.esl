function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "canEnumerable";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "hasProperty";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "foo";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "obj";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "foo";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "bind";
__n21["raw"] := "\"bind\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "ObjectExpression";
__n24 := [  ];
__n23["properties"] := __n24;
__n22 := [ __n23 ];
__n18["arguments"] := __n22;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "hasProperty";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "obj";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "hasOwnProperty";
__n31["raw"] := "\"hasOwnProperty\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "length";
__n33["raw"] := "\"length\"";
__n32 := [ __n33 ];
__n28["arguments"] := __n32;
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n34 := {  };
__n34["type"] := "ForInStatement";
__n35 := {  };
__n35["type"] := "VariableDeclaration";
__n37 := {  };
__n37["type"] := "VariableDeclarator";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "prop";
__n37["id"] := __n38;
__n37["init"] := null;
__n36 := [ __n37 ];
__n35["declarations"] := __n36;
__n35["kind"] := "var";
__n34["left"] := __n35;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "obj";
__n34["right"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "===";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "prop";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "length";
__n45["raw"] := "\"length\"";
__n43["right"] := __n45;
__n42["test"] := __n43;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "AssignmentExpression";
__n49["operator"] := "=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "canEnumerable";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := true;
__n51["raw"] := "true";
__n49["right"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n42["consequent"] := __n46;
__n42["alternate"] := null;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n34["body"] := __n40;
__n34["each"] := false;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "hasProperty";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "hasProperty !== true";
__n57["raw"] := "'hasProperty !== true'";
__n55 := [ __n56, __n57 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "assert";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "sameValue";
__n62["raw"] := "\"sameValue\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "canEnumerable";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := false;
__n65["raw"] := "false";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "canEnumerable";
__n66["raw"] := "'canEnumerable'";
__n63 := [ __n64, __n65, __n66 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n1 := [ __n2, __n7, __n12, __n14, __n25, __n34, __n52, __n58 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n67 := [ "canEnumerable", "hasProperty", "obj", "prop" ];
__n0["variableDeclarations"] := __n67;
__n69 := {  };
__n69["type"] := "FunctionDeclaration";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "foo";
__n69["id"] := __n70;
__n71 := [  ];
__n69["params"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n73 := [  ];
__n72["body"] := __n73;
__n74 := [  ];
__n72["variableDeclarations"] := __n74;
__n75 := [  ];
__n72["functionDeclarations"] := __n75;
__n72["codeType"] := "function";
__n72["strict"] := false;
__n69["body"] := __n72;
__n69["generator"] := false;
__n69["expression"] := false;
__n69["async"] := false;
__n68 := [ __n69 ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}