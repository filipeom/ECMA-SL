function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/x/";
__n6["raw"] := "/x/";
__n6["source"] := "x";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Char";
__n8["value"] := "x";
__n8["kind"] := "simple";
__n8["symbol"] := "x";
__n8["codePoint"] := 120.;
__n7["body"] := __n8;
__n7["flags"] := "";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "===";
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "typeof";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "re";
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10["left"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "function";
__n13["raw"] := "'function'";
__n10["right"] := __n13;
__n9["test"] := __n10;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Function";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "prototype";
__n22["raw"] := "\"prototype\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "call";
__n23["raw"] := "\"call\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n18["object"] := __n19;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "call";
__n24["raw"] := "\"call\"";
__n18["property"] := __n24;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "re";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "undefined";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "x";
__n28["raw"] := "'x'";
__n25 := [ __n26, __n27, __n28 ];
__n17["arguments"] := __n25;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n9["consequent"] := __n14;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "Function";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "prototype";
__n40["raw"] := "\"prototype\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["object"] := __n38;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "bind";
__n41["raw"] := "\"bind\"";
__n37["property"] := __n41;
__n37["computed"] := true;
__n36["object"] := __n37;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "call";
__n42["raw"] := "\"call\"";
__n36["property"] := __n42;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "re";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "undefined";
__n43 := [ __n44, __n45 ];
__n35["arguments"] := __n43;
__n34["expression"] := __n35;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: If IsCallable(func) is false, ";
__n51["raw"] := "'#1: If IsCallable(func) is false, '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "then (bind should) throw a TypeError exception";
__n52["raw"] := "'then (bind should) throw a TypeError exception'";
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n33 := [ __n34, __n46 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n53 := {  };
__n53["type"] := "CatchClause";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "e";
__n53["param"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "!";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "instanceof";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "e";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "TypeError";
__n59["right"] := __n61;
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n57["test"] := __n58;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "+";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#1: TypeError expected. Actual: ";
__n69["raw"] := "'#1: TypeError expected. Actual: '";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "e";
__n68["right"] := __n70;
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n57["consequent"] := __n62;
__n57["alternate"] := null;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n53["body"] := __n55;
__n31["handler"] := __n53;
__n31["finalizer"] := null;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n9["alternate"] := __n29;
__n1 := [ __n2, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n71 := [ "re" ];
__n0["variableDeclarations"] := __n71;
__n72 := [  ];
__n0["functionDeclarations"] := __n72;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}