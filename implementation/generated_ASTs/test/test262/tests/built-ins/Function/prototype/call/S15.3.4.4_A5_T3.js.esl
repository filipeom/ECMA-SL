function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "soap";
__n6["raw"] := "\"soap\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "retobj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [  ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "ThisExpression";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "touched";
__n21["raw"] := "\"touched\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := true;
__n22["raw"] := "true";
__n18["right"] := __n22;
__n17["expression"] := __n18;
__n23 := {  };
__n23["type"] := "ReturnStatement";
__n24 := {  };
__n24["type"] := "ThisExpression";
__n23["argument"] := __n24;
__n16 := [ __n17, __n23 ];
__n15["body"] := __n16;
__n25 := [  ];
__n15["variableDeclarations"] := __n25;
__n26 := [  ];
__n15["functionDeclarations"] := __n26;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12["object"] := __n13;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "call";
__n27["raw"] := "\"call\"";
__n12["property"] := __n27;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "obj";
__n28 := [ __n29 ];
__n11["arguments"] := __n28;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "typeof";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "obj";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "touched";
__n35["raw"] := "\"touched\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["left"] := __n32;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "undefined";
__n36["raw"] := "\"undefined\"";
__n31["right"] := __n36;
__n30["test"] := __n31;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n43["raw"] := "'#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n30["consequent"] := __n37;
__n30["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "!";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n46["computed"] := true;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "retobj";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "touched";
__n48["raw"] := "\"touched\"";
__n46["property"] := __n48;
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44["test"] := __n45;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n55["raw"] := "'#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n44["consequent"] := __n49;
__n44["alternate"] := null;
__n1 := [ __n2, __n7, __n30, __n44 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n56 := [ "obj", "retobj" ];
__n0["variableDeclarations"] := __n56;
__n57 := [  ];
__n0["functionDeclarations"] := __n57;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}