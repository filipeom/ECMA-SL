function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Function";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "a1,a2,a3";
__n8["raw"] := "\"a1,a2,a3\"";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "this.shifted=a1;";
__n9["raw"] := "\"this.shifted=a1;\"";
__n7 := [ __n8, __n9 ];
__n5["arguments"] := __n7;
__n4["object"] := __n5;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "call";
__n10["raw"] := "\"call\"";
__n4["property"] := __n10;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 'null;
__n12["raw"] := "\"'null\"";
__n13 := {  };
__n13["type"] := "ArrayExpression";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n14 := [ __n15 ];
__n13["elements"] := __n14;
__n11 := [ __n12, __n13 ];
__n3["arguments"] := __n11;
__n2["expression"] := __n3;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n19["computed"] := true;
__n20 := {  };
__n20["type"] := "ThisExpression";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "shifted";
__n21["raw"] := "\"shifted\"";
__n19["property"] := __n21;
__n18["object"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "constructor";
__n22["raw"] := "\"constructor\"";
__n18["property"] := __n22;
__n18["computed"] := true;
__n17["left"] := __n18;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Array";
__n17["right"] := __n23;
__n16["test"] := __n17;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n30["raw"] := "'#1: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n16["consequent"] := __n24;
__n16["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n34["computed"] := true;
__n35 := {  };
__n35["type"] := "ThisExpression";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "shifted";
__n36["raw"] := "\"shifted\"";
__n34["property"] := __n36;
__n33["object"] := __n34;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "length";
__n37["raw"] := "\"length\"";
__n33["property"] := __n37;
__n33["computed"] := true;
__n32["left"] := __n33;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n32["right"] := __n38;
__n31["test"] := __n32;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n45["raw"] := "'#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n31["consequent"] := __n39;
__n31["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n48["computed"] := true;
__n49 := {  };
__n49["type"] := "MemberExpression";
__n49["computed"] := true;
__n50 := {  };
__n50["type"] := "ThisExpression";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "shifted";
__n51["raw"] := "\"shifted\"";
__n49["property"] := __n51;
__n48["object"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 0.;
__n52["raw"] := "0";
__n48["property"] := __n52;
__n47["left"] := __n48;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 1.;
__n53["raw"] := "1";
__n47["right"] := __n53;
__n46["test"] := __n47;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#3: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n60["raw"] := "'#3: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n46["consequent"] := __n54;
__n46["alternate"] := null;
__n1 := [ __n2, __n16, __n31, __n46 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n61 := [  ];
__n0["variableDeclarations"] := __n61;
__n62 := [  ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}