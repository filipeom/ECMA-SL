function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "p";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "toString";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ReturnStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "a";
__n21["raw"] := "\"a\"";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "UpdateExpression";
__n22["operator"] := "++";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n20["right"] := __n22;
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n24 := [  ];
__n17["variableDeclarations"] := __n24;
__n25 := [  ];
__n17["functionDeclarations"] := __n25;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["expression"] := false;
__n15["async"] := false;
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n12 := [ __n13 ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n26 := {  };
__n26["type"] := "VariableDeclaration";
__n28 := {  };
__n28["type"] := "VariableDeclarator";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "obj";
__n28["id"] := __n29;
__n30 := {  };
__n30["type"] := "ObjectExpression";
__n31 := [  ];
__n30["properties"] := __n31;
__n28["init"] := __n30;
__n27 := [ __n28 ];
__n26["declarations"] := __n27;
__n26["kind"] := "var";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Function";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "p";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "a2,a3";
__n39["raw"] := "\"a2,a3\"";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "this.shifted=a1;";
__n40["raw"] := "\"this.shifted=a1;\"";
__n37 := [ __n38, __n39, __n40 ];
__n35["arguments"] := __n37;
__n34["object"] := __n35;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "call";
__n41["raw"] := "\"call\"";
__n34["property"] := __n41;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "obj";
__n44 := {  };
__n44["type"] := "NewExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Array";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "nine";
__n47["raw"] := "\"nine\"";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "inch";
__n48["raw"] := "\"inch\"";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "nails";
__n49["raw"] := "\"nails\"";
__n46 := [ __n47, __n48, __n49 ];
__n44["arguments"] := __n46;
__n42 := [ __n43, __n44 ];
__n33["arguments"] := __n42;
__n32["expression"] := __n33;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n53["computed"] := true;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "obj";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "shifted";
__n55["raw"] := "\"shifted\"";
__n53["property"] := __n55;
__n52["object"] := __n53;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "length";
__n56["raw"] := "\"length\"";
__n52["property"] := __n56;
__n52["computed"] := true;
__n51["left"] := __n52;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 3.;
__n57["raw"] := "3";
__n51["right"] := __n57;
__n50["test"] := __n51;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#1: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n64["raw"] := "'#1: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n50["consequent"] := __n58;
__n50["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "LogicalExpression";
__n66["operator"] := "||";
__n67 := {  };
__n67["type"] := "LogicalExpression";
__n67["operator"] := "||";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n69["computed"] := true;
__n70 := {  };
__n70["type"] := "MemberExpression";
__n70["computed"] := true;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "obj";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "shifted";
__n72["raw"] := "\"shifted\"";
__n70["property"] := __n72;
__n69["object"] := __n70;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n69["property"] := __n73;
__n68["left"] := __n69;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "nine";
__n74["raw"] := "\"nine\"";
__n68["right"] := __n74;
__n67["left"] := __n68;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n76["computed"] := true;
__n77 := {  };
__n77["type"] := "MemberExpression";
__n77["computed"] := true;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "obj";
__n77["object"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "shifted";
__n79["raw"] := "\"shifted\"";
__n77["property"] := __n79;
__n76["object"] := __n77;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 1.;
__n80["raw"] := "1";
__n76["property"] := __n80;
__n75["left"] := __n76;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "inch";
__n81["raw"] := "\"inch\"";
__n75["right"] := __n81;
__n67["right"] := __n75;
__n66["left"] := __n67;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "!==";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n83["computed"] := true;
__n84 := {  };
__n84["type"] := "MemberExpression";
__n84["computed"] := true;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "obj";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "shifted";
__n86["raw"] := "\"shifted\"";
__n84["property"] := __n86;
__n83["object"] := __n84;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 2.;
__n87["raw"] := "2";
__n83["property"] := __n87;
__n82["left"] := __n83;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "nails";
__n88["raw"] := "\"nails\"";
__n82["right"] := __n88;
__n66["right"] := __n82;
__n65["test"] := __n66;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n95["raw"] := "'#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n65["consequent"] := __n89;
__n65["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "UnaryExpression";
__n98["operator"] := "typeof";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n99["computed"] := true;
__n100 := {  };
__n100["type"] := "ThisExpression";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "shifted";
__n101["raw"] := "\"shifted\"";
__n99["property"] := __n101;
__n98["argument"] := __n99;
__n98["prefix"] := true;
__n97["left"] := __n98;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "undefined";
__n102["raw"] := "\"undefined\"";
__n97["right"] := __n102;
__n96["test"] := __n97;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#3: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n109["raw"] := "'#3: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n96["consequent"] := __n103;
__n96["alternate"] := null;
__n1 := [ __n2, __n7, __n26, __n32, __n50, __n65, __n96 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n110 := [ "i", "p", "obj" ];
__n0["variableDeclarations"] := __n110;
__n111 := [  ];
__n0["functionDeclarations"] := __n111;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}