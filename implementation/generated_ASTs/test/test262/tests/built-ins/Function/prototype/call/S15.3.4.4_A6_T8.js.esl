function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "FunctionExpression";
__n4["id"] := null;
__n5 := [  ];
__n4["params"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Function";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "a1,a2,a3";
__n14["raw"] := "\"a1,a2,a3\"";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "this.shifted=a1.length+a2+a3;";
__n15["raw"] := "\"this.shifted=a1.length+a2+a3;\"";
__n13 := [ __n14, __n15 ];
__n11["arguments"] := __n13;
__n10["object"] := __n11;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "call";
__n16["raw"] := "\"call\"";
__n10["property"] := __n16;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n18 := {  };
__n18["type"] := "ThisExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "arguments";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "";
__n20["raw"] := "\"\"";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 2.;
__n21["raw"] := "2";
__n17 := [ __n18, __n19, __n20, __n21 ];
__n9["arguments"] := __n17;
__n8["expression"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n22 := [  ];
__n6["variableDeclarations"] := __n22;
__n23 := [  ];
__n6["functionDeclarations"] := __n23;
__n6["codeType"] := "function";
__n6["strict"] := false;
__n4["body"] := __n6;
__n4["generator"] := false;
__n4["async"] := false;
__n4["expression"] := false;
__n3["callee"] := __n4;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "";
__n25["raw"] := "\"\"";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 4.;
__n26["raw"] := "4";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 2.;
__n27["raw"] := "2";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 'null;
__n28["raw"] := "\"'null\"";
__n24 := [ __n25, __n26, __n27, __n28 ];
__n3["arguments"] := __n24;
__n2["expression"] := __n3;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n31["computed"] := true;
__n32 := {  };
__n32["type"] := "ThisExpression";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "shifted";
__n33["raw"] := "\"shifted\"";
__n31["property"] := __n33;
__n30["left"] := __n31;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "42";
__n34["raw"] := "\"42\"";
__n30["right"] := __n34;
__n29["test"] := __n30;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object";
__n41["raw"] := "'#2: The call method takes one or more arguments, thisArg and (optionally) arg1, arg2 etc, and performs a function call using the [[Call]] property of the object'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n29["consequent"] := __n35;
__n29["alternate"] := null;
__n1 := [ __n2, __n29 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}