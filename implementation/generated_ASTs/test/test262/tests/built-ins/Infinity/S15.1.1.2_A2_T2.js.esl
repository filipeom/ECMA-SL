function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "Infinity";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := true;
__n5["raw"] := "true";
__n3["right"] := __n5;
__n2["expression"] := __n3;
__n6 := {  };
__n6["type"] := "IfStatement";
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "===";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "typeof";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Infinity";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["left"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "boolean";
__n10["raw"] := "\"boolean\"";
__n7["right"] := __n10;
__n6["test"] := __n7;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: Infinity = true; typeof(Infinity) !== \"boolean\". Actual: ";
__n18["raw"] := "'#1: Infinity = true; typeof(Infinity) !== \"boolean\". Actual: '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "typeof";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Infinity";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n6["consequent"] := __n11;
__n6["alternate"] := null;
__n1 := [ __n2, __n6 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n21 := [  ];
__n0["variableDeclarations"] := __n21;
__n22 := [  ];
__n0["functionDeclarations"] := __n22;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}