function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "JSON";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "parse";
__n6["raw"] := "\"parse\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "+";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "+";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "+";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "	 
{	 
";
__n12["raw"] := "'\\t\\r \\n{\\t\\r \\n'";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "\"property\"	 
:	 
{	 
}	 
,	 
";
__n13["raw"] := "'\"property\"\\t\\r \\n:\\t\\r \\n{\\t\\r \\n}\\t\\r \\n,\\t\\r \\n'";
__n11["right"] := __n13;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "\"prop2\"	 
:	 
";
__n14["raw"] := "'\"prop2\"\\t\\r \\n:\\t\\r \\n'";
__n10["right"] := __n14;
__n9["left"] := __n10;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "[	 
true	 
,	 
null	 
,123.456	 
]";
__n15["raw"] := "'[\\t\\r \\ntrue\\t\\r \\n,\\t\\r \\nnull\\t\\r \\n,123.456\\t\\r \\n]'";
__n9["right"] := __n15;
__n8["left"] := __n9;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "	 
}	 
";
__n16["raw"] := "'\\t\\r \\n}\\t\\r \\n'";
__n8["right"] := __n16;
__n7 := [ __n8 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n17 := [  ];
__n0["variableDeclarations"] := __n17;
__n18 := [  ];
__n0["functionDeclarations"] := __n18;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}