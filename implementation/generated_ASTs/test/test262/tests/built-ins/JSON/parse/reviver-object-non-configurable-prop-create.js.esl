function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "json";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "{\"a\": 1, \"b\": 2}";
__n6["raw"] := "'{\"a\": 1, \"b\": 2}'";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "obj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "JSON";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "parse";
__n14["raw"] := "\"parse\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "json";
__n17 := {  };
__n17["type"] := "FunctionExpression";
__n17["id"] := null;
__n18 := [ "key", "value" ];
__n17["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "===";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "key";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "a";
__n24["raw"] := "'a'";
__n22["right"] := __n24;
__n21["test"] := __n22;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Object";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "defineProperty";
__n31["raw"] := "\"defineProperty\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "ThisExpression";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "b";
__n34["raw"] := "'b'";
__n35 := {  };
__n35["type"] := "ObjectExpression";
__n37 := {  };
__n37["type"] := "Property";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "configurable";
__n37["key"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := false;
__n39["raw"] := "false";
__n37["value"] := __n39;
__n37["computed"] := false;
__n37["kind"] := "init";
__n37["shorthand"] := false;
__n36 := [ __n37 ];
__n35["properties"] := __n36;
__n32 := [ __n33, __n34, __n35 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n21["consequent"] := __n25;
__n21["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "===";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "key";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "b";
__n43["raw"] := "'b'";
__n41["right"] := __n43;
__n40["test"] := __n41;
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 22.;
__n45["raw"] := "22";
__n44["argument"] := __n45;
__n40["consequent"] := __n44;
__n40["alternate"] := null;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "value";
__n46["argument"] := __n47;
__n20 := [ __n21, __n40, __n46 ];
__n19["body"] := __n20;
__n48 := [  ];
__n19["variableDeclarations"] := __n48;
__n49 := [  ];
__n19["functionDeclarations"] := __n49;
__n19["codeType"] := "function";
__n19["strict"] := false;
__n17["body"] := __n19;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n15 := [ __n16, __n17 ];
__n11["arguments"] := __n15;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "assert";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "sameValue";
__n54["raw"] := "\"sameValue\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "obj";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "a";
__n58["raw"] := "\"a\"";
__n56["property"] := __n58;
__n56["computed"] := true;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.;
__n59["raw"] := "1";
__n55 := [ __n56, __n59 ];
__n51["arguments"] := __n55;
__n50["expression"] := __n51;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "assert";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "sameValue";
__n64["raw"] := "\"sameValue\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "obj";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "b";
__n68["raw"] := "\"b\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 2.;
__n69["raw"] := "2";
__n65 := [ __n66, __n69 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n1 := [ __n2, __n7, __n50, __n60 ];
__n0["body"] := __n1;
__n70 := [ "json", "obj" ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}