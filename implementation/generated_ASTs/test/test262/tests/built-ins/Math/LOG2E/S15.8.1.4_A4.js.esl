function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Math";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "LOG2E";
__n8["raw"] := "\"LOG2E\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "verifyNotWritable";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Math";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "LOG2E";
__n14["raw"] := "\"LOG2E\"";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 'null;
__n15["raw"] := "\"'null\"";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n12 := [ __n13, __n14, __n15, __n16 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Math";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "LOG2E";
__n21["raw"] := "\"LOG2E\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "x";
__n18["right"] := __n22;
__n17["test"] := __n18;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: Math.LOG2E hasn't ReadOnly: 'x = Math.LOG2E;Math.LOG2E = 1;Math.LOG2E === x'";
__n29["raw"] := "'#1: Math.LOG2E hasn\\'t ReadOnly: \\'x = Math.LOG2E;Math.LOG2E = 1;Math.LOG2E === x\\''";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n17["consequent"] := __n23;
__n17["alternate"] := null;
__n1 := [ __n2, __n9, __n17 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n30 := [ "x" ];
__n0["variableDeclarations"] := __n30;
__n31 := [  ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}