function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "y";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "+";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Math";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "atan2";
__n19["raw"] := "\"atan2\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "y";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "x";
__n20 := [ __n21, __n22 ];
__n16["arguments"] := __n20;
__n15["left"] := __n16;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n15["right"] := __n23;
__n14["test"] := __n15;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: Math.atan2(";
__n33["raw"] := "\"#1: Math.atan2(\"";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "y";
__n32["right"] := __n34;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := ", ";
__n35["raw"] := "\", \"";
__n31["right"] := __n35;
__n30["left"] := __n31;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n30["right"] := __n36;
__n29["left"] := __n30;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := ") !== +0";
__n37["raw"] := "\") !== +0\"";
__n29["right"] := __n37;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n14["consequent"] := __n25;
__n14["alternate"] := null;
__n1 := [ __n2, __n8, __n14 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [ "y", "x" ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}