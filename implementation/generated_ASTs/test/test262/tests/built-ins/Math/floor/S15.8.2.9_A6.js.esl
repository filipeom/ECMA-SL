function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1e-15;
__n6["raw"] := "0.000000000000001";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Math";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "floor";
__n12["raw"] := "\"floor\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13 := [ __n14 ];
__n9["arguments"] := __n13;
__n8["left"] := __n9;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.;
__n16["raw"] := "0";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n8["right"] := __n15;
__n7["test"] := __n8;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: 'var x = 0.000000000000001; Math.floor(x) !==  +0'";
__n23["raw"] := "\"#1: 'var x = 0.000000000000001; Math.floor(x) !==  +0'\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n7["consequent"] := __n17;
__n7["alternate"] := null;
__n24 := {  };
__n24["type"] := "VariableDeclaration";
__n26 := {  };
__n26["type"] := "VariableDeclarator";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "x";
__n26["id"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.999999999999999;
__n28["raw"] := "0.999999999999999";
__n26["init"] := __n28;
__n25 := [ __n26 ];
__n24["declarations"] := __n25;
__n24["kind"] := "var";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Math";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "floor";
__n34["raw"] := "\"floor\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35 := [ __n36 ];
__n31["arguments"] := __n35;
__n30["left"] := __n31;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n30["right"] := __n37;
__n29["test"] := __n30;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: 'var x = 0.999999999999999; Math.ceil(x) !== +0'";
__n45["raw"] := "\"#2: 'var x = 0.999999999999999; Math.ceil(x) !== +0'\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n29["consequent"] := __n39;
__n29["alternate"] := null;
__n46 := {  };
__n46["type"] := "VariableDeclaration";
__n48 := {  };
__n48["type"] := "VariableDeclarator";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x";
__n48["id"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 0.5;
__n50["raw"] := "0.5";
__n48["init"] := __n50;
__n47 := [ __n48 ];
__n46["declarations"] := __n47;
__n46["kind"] := "var";
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "!==";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Math";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "floor";
__n56["raw"] := "\"floor\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "x";
__n57 := [ __n58 ];
__n53["arguments"] := __n57;
__n52["left"] := __n53;
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n52["right"] := __n59;
__n51["test"] := __n52;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#3: 'var x = 0.5; Math.ceil(x) !== +0'";
__n67["raw"] := "\"#3: 'var x = 0.5; Math.ceil(x) !== +0'\"";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n51["consequent"] := __n61;
__n51["alternate"] := null;
__n1 := [ __n2, __n7, __n24, __n29, __n46, __n51 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n68 := [ "x" ];
__n0["variableDeclarations"] := __n68;
__n69 := [  ];
__n0["functionDeclarations"] := __n69;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}