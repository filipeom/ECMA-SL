function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ForStatement";
__n3 := {  };
__n3["type"] := "VariableDeclaration";
__n5 := {  };
__n5["type"] := "VariableDeclarator";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "i";
__n5["id"] := __n6;
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1000.;
__n8["raw"] := "1000";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n5["init"] := __n7;
__n4 := [ __n5 ];
__n3["declarations"] := __n4;
__n3["kind"] := "var";
__n2["init"] := __n3;
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "<";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "i";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1000.;
__n11["raw"] := "1000";
__n9["right"] := __n11;
__n2["test"] := __n9;
__n12 := {  };
__n12["type"] := "UpdateExpression";
__n12["operator"] := "++";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "i";
__n12["argument"] := __n13;
__n12["prefix"] := false;
__n2["update"] := __n12;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "x";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "/";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "i";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 10.;
__n22["raw"] := "10.0";
__n20["right"] := __n22;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "-";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Math";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "ceil";
__n29["raw"] := "\"ceil\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "-";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30 := [ __n31 ];
__n26["arguments"] := __n30;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["left"] := __n25;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Math";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "floor";
__n36["raw"] := "\"floor\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37 := [ __n38 ];
__n33["arguments"] := __n37;
__n24["right"] := __n33;
__n23["test"] := __n24;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#1: 'x = ";
__n47["raw"] := "\"#1: 'x = \"";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "x";
__n46["right"] := __n48;
__n45["left"] := __n46;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "; Math.floor(x) !== -Math.ceil(-x)'";
__n49["raw"] := "\"; Math.floor(x) !== -Math.ceil(-x)'\"";
__n45["right"] := __n49;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n23["consequent"] := __n39;
__n23["alternate"] := null;
__n15 := [ __n16, __n23 ];
__n14["body"] := __n15;
__n2["body"] := __n14;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "i", "x" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}