function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "assert";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "isNaN";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Math";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "max";
__n12["raw"] := "\"max\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n14 := {  };
__n14["type"] := "ObjectExpression";
__n15 := [  ];
__n14["properties"] := __n15;
__n13 := [ __n14 ];
__n9["arguments"] := __n13;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "isNaN(Math.max({})) !== true";
__n16["raw"] := "'isNaN(Math.max({})) !== true'";
__n5 := [ __n6, __n16 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n17 := [  ];
__n0["variableDeclarations"] := __n17;
__n18 := [  ];
__n0["functionDeclarations"] := __n18;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}