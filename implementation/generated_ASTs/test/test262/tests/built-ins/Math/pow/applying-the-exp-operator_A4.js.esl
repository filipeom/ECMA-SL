function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "base";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "NaN";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "exponent";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Array";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "AssignmentExpression";
__n15["operator"] := "=";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n16["computed"] := true;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "exponent";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.;
__n18["raw"] := "0";
__n16["property"] := __n18;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "-";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Infinity";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n15["right"] := __n19;
__n14["expression"] := __n15;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "AssignmentExpression";
__n22["operator"] := "=";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n23["computed"] := true;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "exponent";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n23["property"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.7976931348623157e+308;
__n27["raw"] := "1.7976931348623157E308";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n22["right"] := __n26;
__n21["expression"] := __n22;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n30["computed"] := true;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "exponent";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 2.;
__n32["raw"] := "2";
__n30["property"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "-";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1e-15;
__n34["raw"] := "0.000000000000001";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n29["right"] := __n33;
__n28["expression"] := __n29;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "AssignmentExpression";
__n36["operator"] := "=";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n37["computed"] := true;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "exponent";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 3.;
__n39["raw"] := "3";
__n37["property"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1e-15;
__n40["raw"] := "0.000000000000001";
__n36["right"] := __n40;
__n35["expression"] := __n36;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n43["computed"] := true;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "exponent";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 4.;
__n45["raw"] := "4";
__n43["property"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.7976931348623157e+308;
__n46["raw"] := "1.7976931348623157E308";
__n42["right"] := __n46;
__n41["expression"] := __n42;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "AssignmentExpression";
__n48["operator"] := "=";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n49["computed"] := true;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "exponent";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 5.;
__n51["raw"] := "5";
__n49["property"] := __n51;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "UnaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Infinity";
__n52["argument"] := __n53;
__n52["prefix"] := true;
__n48["right"] := __n52;
__n47["expression"] := __n48;
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "=";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n56["computed"] := true;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "exponent";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 6.;
__n58["raw"] := "6";
__n56["property"] := __n58;
__n55["left"] := __n56;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "NaN";
__n55["right"] := __n59;
__n54["expression"] := __n55;
__n60 := {  };
__n60["type"] := "VariableDeclaration";
__n62 := {  };
__n62["type"] := "VariableDeclarator";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "exponentnum";
__n62["id"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 7.;
__n64["raw"] := "7";
__n62["init"] := __n64;
__n61 := [ __n62 ];
__n60["declarations"] := __n61;
__n60["kind"] := "var";
__n65 := {  };
__n65["type"] := "ForStatement";
__n66 := {  };
__n66["type"] := "VariableDeclaration";
__n68 := {  };
__n68["type"] := "VariableDeclarator";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "i";
__n68["id"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 0.;
__n70["raw"] := "0";
__n68["init"] := __n70;
__n67 := [ __n68 ];
__n66["declarations"] := __n67;
__n66["kind"] := "var";
__n65["init"] := __n66;
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "<";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "i";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "exponentnum";
__n71["right"] := __n73;
__n65["test"] := __n71;
__n74 := {  };
__n74["type"] := "UpdateExpression";
__n74["operator"] := "++";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "i";
__n74["argument"] := __n75;
__n74["prefix"] := false;
__n65["update"] := __n74;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "UnaryExpression";
__n79["operator"] := "!";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "isNaN";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "Math";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "pow";
__n86["raw"] := "\"pow\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n83["callee"] := __n84;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "base";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n89["computed"] := true;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "exponent";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "i";
__n89["property"] := __n91;
__n87 := [ __n88, __n89 ];
__n83["arguments"] := __n87;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["argument"] := __n80;
__n79["prefix"] := true;
__n78["test"] := __n79;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "+";
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "+";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "+";
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "#1: isNaN(Math.pow(";
__n102["raw"] := "\"#1: isNaN(Math.pow(\"";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "base";
__n101["right"] := __n103;
__n100["left"] := __n101;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := ", ";
__n104["raw"] := "\", \"";
__n100["right"] := __n104;
__n99["left"] := __n100;
__n105 := {  };
__n105["type"] := "MemberExpression";
__n105["computed"] := true;
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "exponent";
__n105["object"] := __n106;
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "i";
__n105["property"] := __n107;
__n99["right"] := __n105;
__n98["left"] := __n99;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := ")) === false";
__n108["raw"] := "\")) === false\"";
__n98["right"] := __n108;
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n78["consequent"] := __n92;
__n78["alternate"] := null;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n65["body"] := __n76;
__n1 := [ __n2, __n7, __n14, __n21, __n28, __n35, __n41, __n47, __n54, __n60, __n65 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n109 := [ "base", "exponent", "exponentnum", "i" ];
__n0["variableDeclarations"] := __n109;
__n110 := [  ];
__n0["functionDeclarations"] := __n110;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}