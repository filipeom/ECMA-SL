function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ForStatement";
__n3 := {  };
__n3["type"] := "VariableDeclaration";
__n5 := {  };
__n5["type"] := "VariableDeclarator";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "i";
__n5["id"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n5["init"] := __n7;
__n4 := [ __n5 ];
__n3["declarations"] := __n4;
__n3["kind"] := "var";
__n2["init"] := __n3;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "<";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "i";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 100.;
__n10["raw"] := "100";
__n8["right"] := __n10;
__n2["test"] := __n8;
__n11 := {  };
__n11["type"] := "UpdateExpression";
__n11["operator"] := "++";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "i";
__n11["argument"] := __n12;
__n11["prefix"] := false;
__n2["update"] := __n11;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "val";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Math";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "random";
__n22["raw"] := "\"random\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n23 := [  ];
__n19["arguments"] := __n23;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "assert";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "sameValue";
__n28["raw"] := "\"sameValue\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "typeof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "val";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "number";
__n32["raw"] := "'number'";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "should not produce a non-numeric value: ";
__n34["raw"] := "'should not produce a non-numeric value: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "val";
__n33["right"] := __n35;
__n29 := [ __n30, __n32, __n33 ];
__n25["arguments"] := __n29;
__n24["expression"] := __n25;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "notSameValue";
__n40["raw"] := "\"notSameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "val";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "NaN";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "should not produce NaN";
__n44["raw"] := "'should not produce NaN'";
__n41 := [ __n42, __n43, __n44 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "LogicalExpression";
__n46["operator"] := "||";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "<";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "val";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 0.;
__n49["raw"] := "0";
__n47["right"] := __n49;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := ">=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "val";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1.;
__n52["raw"] := "1";
__n50["right"] := __n52;
__n46["right"] := __n50;
__n45["test"] := __n46;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#1: Math.random() = ";
__n60["raw"] := "\"#1: Math.random() = \"";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "val";
__n59["right"] := __n61;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n45["consequent"] := __n53;
__n45["alternate"] := null;
__n14 := [ __n15, __n24, __n36, __n45 ];
__n13["body"] := __n14;
__n2["body"] := __n13;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n62 := [ "i", "val" ];
__n0["variableDeclarations"] := __n62;
__n63 := [  ];
__n0["functionDeclarations"] := __n63;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}