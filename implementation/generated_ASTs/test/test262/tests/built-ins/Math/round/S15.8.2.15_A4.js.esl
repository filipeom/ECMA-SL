function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Infinity";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Math";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "round";
__n13["raw"] := "\"round\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "x";
__n14 := [ __n15 ];
__n10["arguments"] := __n14;
__n9["left"] := __n10;
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Infinity";
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n9["right"] := __n16;
__n8["test"] := __n9;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: 'var x=+Infinity; Math.round(x) !== +Infinity'";
__n24["raw"] := "\"#1: 'var x=+Infinity; Math.round(x) !== +Infinity'\"";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n8["consequent"] := __n18;
__n8["alternate"] := null;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n25 := [ "x" ];
__n0["variableDeclarations"] := __n25;
__n26 := [  ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}