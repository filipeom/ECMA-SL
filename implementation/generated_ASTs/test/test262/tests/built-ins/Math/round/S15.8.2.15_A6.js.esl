function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ForStatement";
__n3 := {  };
__n3["type"] := "VariableDeclaration";
__n5 := {  };
__n5["type"] := "VariableDeclarator";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "i";
__n5["id"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n5["init"] := __n7;
__n4 := [ __n5 ];
__n3["declarations"] := __n4;
__n3["kind"] := "var";
__n2["init"] := __n3;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "<=";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "i";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1000.;
__n10["raw"] := "1000";
__n8["right"] := __n10;
__n2["test"] := __n8;
__n11 := {  };
__n11["type"] := "UpdateExpression";
__n11["operator"] := "++";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "i";
__n11["argument"] := __n12;
__n11["prefix"] := false;
__n2["update"] := __n11;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "/";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "i";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 10.;
__n21["raw"] := "10.0";
__n19["right"] := __n21;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Math";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "round";
__n27["raw"] := "\"round\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n23["left"] := __n24;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Math";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "floor";
__n33["raw"] := "\"floor\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 0.5;
__n37["raw"] := "0.5";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n30["arguments"] := __n34;
__n23["right"] := __n30;
__n22["test"] := __n23;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#1: 'x = ";
__n46["raw"] := "\"#1: 'x = \"";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n45["right"] := __n47;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "; Math.round(x) !== Math.floor(x + 0.5)'";
__n48["raw"] := "\"; Math.round(x) !== Math.floor(x + 0.5)'\"";
__n44["right"] := __n48;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n22["consequent"] := __n38;
__n22["alternate"] := null;
__n14 := [ __n15, __n22 ];
__n13["body"] := __n14;
__n2["body"] := __n13;
__n49 := {  };
__n49["type"] := "ForStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "i";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "UnaryExpression";
__n52["operator"] := "-";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 5.;
__n53["raw"] := "5";
__n52["argument"] := __n53;
__n52["prefix"] := true;
__n50["right"] := __n52;
__n49["init"] := __n50;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := ">=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "i";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "-";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1000.;
__n57["raw"] := "1000";
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n54["right"] := __n56;
__n49["test"] := __n54;
__n58 := {  };
__n58["type"] := "UpdateExpression";
__n58["operator"] := "--";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "i";
__n58["argument"] := __n59;
__n58["prefix"] := false;
__n49["update"] := __n58;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "===";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "i";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "UnaryExpression";
__n65["operator"] := "-";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 5.;
__n66["raw"] := "5";
__n65["argument"] := __n66;
__n65["prefix"] := true;
__n63["right"] := __n65;
__n62["test"] := __n63;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "AssignmentExpression";
__n70["operator"] := "=";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "x";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "UnaryExpression";
__n72["operator"] := "-";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.500000000000001;
__n73["raw"] := "0.500000000000001";
__n72["argument"] := __n73;
__n72["prefix"] := true;
__n70["right"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n62["consequent"] := __n67;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := "=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "/";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "i";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 10.;
__n81["raw"] := "10.0";
__n79["right"] := __n81;
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n62["alternate"] := __n74;
__n82 := {  };
__n82["type"] := "IfStatement";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "!==";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Math";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "round";
__n87["raw"] := "\"round\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["callee"] := __n85;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "x";
__n88 := [ __n89 ];
__n84["arguments"] := __n88;
__n83["left"] := __n84;
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "MemberExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "Math";
__n91["object"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "floor";
__n93["raw"] := "\"floor\"";
__n91["property"] := __n93;
__n91["computed"] := true;
__n90["callee"] := __n91;
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "x";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 0.5;
__n97["raw"] := "0.5";
__n95["right"] := __n97;
__n94 := [ __n95 ];
__n90["arguments"] := __n94;
__n83["right"] := __n90;
__n82["test"] := __n83;
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "$ERROR";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "+";
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#2: 'x = ";
__n106["raw"] := "\"#2: 'x = \"";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "x";
__n105["right"] := __n107;
__n104["left"] := __n105;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "; Math.round(x) !== Math.floor(x + 0.5)'";
__n108["raw"] := "\"; Math.round(x) !== Math.floor(x + 0.5)'\"";
__n104["right"] := __n108;
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["expression"] := __n101;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n82["consequent"] := __n98;
__n82["alternate"] := null;
__n61 := [ __n62, __n82 ];
__n60["body"] := __n61;
__n49["body"] := __n60;
__n1 := [ __n2, __n49 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n109 := [ "i", "x" ];
__n0["variableDeclarations"] := __n109;
__n110 := [  ];
__n0["functionDeclarations"] := __n110;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}