function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "verifyNotWritable";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "NaN";
__n7["raw"] := "\"NaN\"";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 'null;
__n8["raw"] := "\"'null\"";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n5 := [ __n6, __n7, __n8, __n9 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "isNaN";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Number";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "NaN";
__n17["raw"] := "\"NaN\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["left"] := __n12;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := true;
__n18["raw"] := "true";
__n11["right"] := __n18;
__n10["test"] := __n11;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: Number.NaN = 1; Number.NaN === Not-a-Number";
__n25["raw"] := "'#1: Number.NaN = 1; Number.NaN === Not-a-Number'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n10["consequent"] := __n19;
__n10["alternate"] := null;
__n1 := [ __n2, __n10 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n26 := [  ];
__n0["variableDeclarations"] := __n26;
__n27 := [  ];
__n0["functionDeclarations"] := __n27;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}