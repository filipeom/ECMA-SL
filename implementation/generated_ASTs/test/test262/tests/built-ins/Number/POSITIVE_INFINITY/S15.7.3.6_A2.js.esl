function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "verifyNotWritable";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "POSITIVE_INFINITY";
__n7["raw"] := "\"POSITIVE_INFINITY\"";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 'null;
__n8["raw"] := "\"'null\"";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n5 := [ __n6, __n7, __n8, __n9 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "isFinite";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Number";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "POSITIVE_INFINITY";
__n16["raw"] := "\"POSITIVE_INFINITY\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["test"] := __n11;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: Number.POSITIVE_INFINITY = 1; Number.POSITIVE_INFINITY === +Infinity";
__n23["raw"] := "'#1: Number.POSITIVE_INFINITY = 1; Number.POSITIVE_INFINITY === +Infinity'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n10["consequent"] := __n17;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "<=";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Number";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "POSITIVE_INFINITY";
__n30["raw"] := "\"POSITIVE_INFINITY\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 0.;
__n31["raw"] := "0";
__n27["right"] := __n31;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: Number.POSITIVE_INFINITY = 1; Number.POSITIVE_INFINITY === +Infinity";
__n38["raw"] := "'#1: Number.POSITIVE_INFINITY = 1; Number.POSITIVE_INFINITY === +Infinity'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n10["alternate"] := __n24;
__n1 := [ __n2, __n10 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [  ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}