function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "10";
__n8["raw"] := "\"10\"";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "number";
__n9["raw"] := "\"number\"";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: typeof Number(\"10\") should be \"number\", actual is \"";
__n18["raw"] := "'#1: typeof Number(\"10\") should be \"number\", actual is \"'";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "typeof";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "10";
__n23["raw"] := "\"10\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n17["right"] := __n19;
__n16["left"] := __n17;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "\"";
__n24["raw"] := "'\"'";
__n16["right"] := __n24;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "typeof";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Number";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 10.;
__n31["raw"] := "10";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["left"] := __n27;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "number";
__n32["raw"] := "\"number\"";
__n26["right"] := __n32;
__n25["test"] := __n26;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: typeof Number(10) should be \"number\", actual is \"";
__n41["raw"] := "'#2: typeof Number(10) should be \"number\", actual is \"'";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "typeof";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Number";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 10.;
__n46["raw"] := "10";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n40["right"] := __n42;
__n39["left"] := __n40;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "\"";
__n47["raw"] := "'\"'";
__n39["right"] := __n47;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n25["consequent"] := __n33;
__n25["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "typeof";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Number";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "String";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "10";
__n57["raw"] := "\"10\"";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n49["left"] := __n50;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "number";
__n58["raw"] := "\"number\"";
__n49["right"] := __n58;
__n48["test"] := __n49;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#3: typeof Number(new String(\"10\")) should be \"number\", actual is \"";
__n67["raw"] := "'#3: typeof Number(new String(\"10\")) should be \"number\", actual is \"'";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "UnaryExpression";
__n68["operator"] := "typeof";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "NewExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "String";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "10";
__n75["raw"] := "\"10\"";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["argument"] := __n69;
__n68["prefix"] := true;
__n66["right"] := __n68;
__n65["left"] := __n66;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "\"";
__n76["raw"] := "'\"'";
__n65["right"] := __n76;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n48["consequent"] := __n59;
__n48["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "UnaryExpression";
__n79["operator"] := "typeof";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Number";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "NewExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Object";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 10.;
__n86["raw"] := "10";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["argument"] := __n80;
__n79["prefix"] := true;
__n78["left"] := __n79;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "number";
__n87["raw"] := "\"number\"";
__n78["right"] := __n87;
__n77["test"] := __n78;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "$ERROR";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "+";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "#4: typeof Number(new Object(10)) should be \"number\", actual is \"";
__n96["raw"] := "'#4: typeof Number(new Object(10)) should be \"number\", actual is \"'";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "UnaryExpression";
__n97["operator"] := "typeof";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "Number";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "NewExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Object";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 10.;
__n104["raw"] := "10";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["argument"] := __n98;
__n97["prefix"] := true;
__n95["right"] := __n97;
__n94["left"] := __n95;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "\"";
__n105["raw"] := "'\"'";
__n94["right"] := __n105;
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n77["consequent"] := __n88;
__n77["alternate"] := null;
__n106 := {  };
__n106["type"] := "IfStatement";
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "!==";
__n108 := {  };
__n108["type"] := "UnaryExpression";
__n108["operator"] := "typeof";
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "Number";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "abc";
__n112["raw"] := "\"abc\"";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n108["argument"] := __n109;
__n108["prefix"] := true;
__n107["left"] := __n108;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "number";
__n113["raw"] := "\"number\"";
__n107["right"] := __n113;
__n106["test"] := __n107;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "$ERROR";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "+";
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "+";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#5: typeof Number(\"abc\") should be \"number\", actual is \"";
__n122["raw"] := "'#5: typeof Number(\"abc\") should be \"number\", actual is \"'";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "UnaryExpression";
__n123["operator"] := "typeof";
__n124 := {  };
__n124["type"] := "CallExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "Number";
__n124["callee"] := __n125;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := "abc";
__n127["raw"] := "\"abc\"";
__n126 := [ __n127 ];
__n124["arguments"] := __n126;
__n123["argument"] := __n124;
__n123["prefix"] := true;
__n121["right"] := __n123;
__n120["left"] := __n121;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := "\"";
__n128["raw"] := "'\"'";
__n120["right"] := __n128;
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["expression"] := __n117;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n106["consequent"] := __n114;
__n106["alternate"] := null;
__n129 := {  };
__n129["type"] := "IfStatement";
__n130 := {  };
__n130["type"] := "UnaryExpression";
__n130["operator"] := "!";
__n131 := {  };
__n131["type"] := "CallExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "isNaN";
__n131["callee"] := __n132;
__n134 := {  };
__n134["type"] := "CallExpression";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "Number";
__n134["callee"] := __n135;
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := "abc";
__n137["raw"] := "\"abc\"";
__n136 := [ __n137 ];
__n134["arguments"] := __n136;
__n133 := [ __n134 ];
__n131["arguments"] := __n133;
__n130["argument"] := __n131;
__n130["prefix"] := true;
__n129["test"] := __n130;
__n138 := {  };
__n138["type"] := "BlockStatement";
__n140 := {  };
__n140["type"] := "ExpressionStatement";
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "$ERROR";
__n141["callee"] := __n142;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "#6: Number(\"abc\")) should be NaN";
__n144["raw"] := "'#6: Number(\"abc\")) should be NaN'";
__n143 := [ __n144 ];
__n141["arguments"] := __n143;
__n140["expression"] := __n141;
__n139 := [ __n140 ];
__n138["body"] := __n139;
__n129["consequent"] := __n138;
__n129["alternate"] := null;
__n1 := [ __n2, __n25, __n48, __n77, __n106, __n129 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n145 := [  ];
__n0["variableDeclarations"] := __n145;
__n146 := [  ];
__n0["functionDeclarations"] := __n146;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}