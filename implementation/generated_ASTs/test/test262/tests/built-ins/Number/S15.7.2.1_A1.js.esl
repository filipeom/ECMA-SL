function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "NewExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["callee"] := __n6;
__n7 := [  ];
__n5["arguments"] := __n7;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "object";
__n8["raw"] := "\"object\"";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: typeof new Number() === 'object'";
__n15["raw"] := "\"#1: typeof new Number() === 'object'\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "===";
__n18 := {  };
__n18["type"] := "NewExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Number";
__n18["callee"] := __n19;
__n20 := [  ];
__n18["arguments"] := __n20;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "undefined";
__n17["right"] := __n21;
__n16["test"] := __n17;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2: new Number() should not be undefined";
__n28["raw"] := "\"#2: new Number() should not be undefined\"";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n16["consequent"] := __n22;
__n16["alternate"] := null;
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x3";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "NewExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["callee"] := __n34;
__n35 := [  ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "typeof";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "x3";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["left"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "object";
__n40["raw"] := "\"object\"";
__n37["right"] := __n40;
__n36["test"] := __n37;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#3: typeof new Number() === 'object'";
__n47["raw"] := "\"#3: typeof new Number() === 'object'\"";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n36["consequent"] := __n41;
__n36["alternate"] := null;
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "x4";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "NewExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["callee"] := __n53;
__n54 := [  ];
__n52["arguments"] := __n54;
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "===";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "x4";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#4: new Number() should not be undefined";
__n65["raw"] := "\"#4: new Number() should not be undefined\"";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "!==";
__n68 := {  };
__n68["type"] := "UnaryExpression";
__n68["operator"] := "typeof";
__n69 := {  };
__n69["type"] := "NewExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 10.;
__n72["raw"] := "10";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["argument"] := __n69;
__n68["prefix"] := true;
__n67["left"] := __n68;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "object";
__n73["raw"] := "\"object\"";
__n67["right"] := __n73;
__n66["test"] := __n67;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#5: typeof new Number(10) === 'object'";
__n80["raw"] := "\"#5: typeof new Number(10) === 'object'\"";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n66["consequent"] := __n74;
__n66["alternate"] := null;
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "===";
__n83 := {  };
__n83["type"] := "NewExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Number";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 10.;
__n86["raw"] := "10";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["left"] := __n83;
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "undefined";
__n82["right"] := __n87;
__n81["test"] := __n82;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "$ERROR";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#6: new Number(10) should not be undefined";
__n94["raw"] := "\"#6: new Number(10) should not be undefined\"";
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n81["consequent"] := __n88;
__n81["alternate"] := null;
__n95 := {  };
__n95["type"] := "VariableDeclaration";
__n97 := {  };
__n97["type"] := "VariableDeclarator";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "x7";
__n97["id"] := __n98;
__n99 := {  };
__n99["type"] := "NewExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "Number";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := 10.;
__n102["raw"] := "10";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n97["init"] := __n99;
__n96 := [ __n97 ];
__n95["declarations"] := __n96;
__n95["kind"] := "var";
__n103 := {  };
__n103["type"] := "IfStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "!==";
__n105 := {  };
__n105["type"] := "UnaryExpression";
__n105["operator"] := "typeof";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "x7";
__n105["argument"] := __n106;
__n105["prefix"] := true;
__n104["left"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "object";
__n107["raw"] := "\"object\"";
__n104["right"] := __n107;
__n103["test"] := __n104;
__n108 := {  };
__n108["type"] := "BlockStatement";
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "$ERROR";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#7: typeof new Number(10) === 'object'";
__n114["raw"] := "\"#7: typeof new Number(10) === 'object'\"";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["expression"] := __n111;
__n109 := [ __n110 ];
__n108["body"] := __n109;
__n103["consequent"] := __n108;
__n103["alternate"] := null;
__n115 := {  };
__n115["type"] := "VariableDeclaration";
__n117 := {  };
__n117["type"] := "VariableDeclarator";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "x8";
__n117["id"] := __n118;
__n119 := {  };
__n119["type"] := "NewExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "Number";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := 10.;
__n122["raw"] := "10";
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n117["init"] := __n119;
__n116 := [ __n117 ];
__n115["declarations"] := __n116;
__n115["kind"] := "var";
__n123 := {  };
__n123["type"] := "IfStatement";
__n124 := {  };
__n124["type"] := "BinaryExpression";
__n124["operator"] := "===";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "x8";
__n124["left"] := __n125;
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "undefined";
__n124["right"] := __n126;
__n123["test"] := __n124;
__n127 := {  };
__n127["type"] := "BlockStatement";
__n129 := {  };
__n129["type"] := "ExpressionStatement";
__n130 := {  };
__n130["type"] := "CallExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "$ERROR";
__n130["callee"] := __n131;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#8: new Number(10) should not be undefined";
__n133["raw"] := "\"#8: new Number(10) should not be undefined\"";
__n132 := [ __n133 ];
__n130["arguments"] := __n132;
__n129["expression"] := __n130;
__n128 := [ __n129 ];
__n127["body"] := __n128;
__n123["consequent"] := __n127;
__n123["alternate"] := null;
__n1 := [ __n2, __n16, __n29, __n36, __n48, __n55, __n66, __n81, __n95, __n103, __n115, __n123 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n134 := [ "x3", "x4", "x7", "x8" ];
__n0["variableDeclarations"] := __n134;
__n135 := [  ];
__n0["functionDeclarations"] := __n135;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}