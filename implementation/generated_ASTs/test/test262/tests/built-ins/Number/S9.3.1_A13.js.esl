function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "+";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "12";
__n5["raw"] := "\"12\"";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "*";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "1";
__n11["raw"] := "\"1\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n7["left"] := __n8;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 10.;
__n12["raw"] := "10";
__n7["right"] := __n12;
__n6["left"] := __n7;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Number";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "2";
__n16["raw"] := "\"2\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n6["right"] := __n13;
__n3["right"] := __n6;
__n2["test"] := __n3;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: +(\"12\") === Number(\"1\")*10+Number(\"2\")";
__n23["raw"] := "'#1: +(\"12\") === Number(\"1\")*10+Number(\"2\")'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n2["consequent"] := __n17;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Number";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "123";
__n29["raw"] := "\"123\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "*";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Number";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "12";
__n35["raw"] := "\"12\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["left"] := __n32;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 10.;
__n36["raw"] := "10";
__n31["right"] := __n36;
__n30["left"] := __n31;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "3";
__n40["raw"] := "\"3\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n30["right"] := __n37;
__n25["right"] := __n30;
__n24["test"] := __n25;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: Number(\"123\") === Number(\"12\")*10+Number(\"3\")";
__n47["raw"] := "'#2: Number(\"123\") === Number(\"12\")*10+Number(\"3\")'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n24["consequent"] := __n41;
__n24["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Number";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "1234";
__n53["raw"] := "\"1234\"";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["left"] := __n50;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "*";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "Number";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "123";
__n59["raw"] := "\"123\"";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["left"] := __n56;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 10.;
__n60["raw"] := "10";
__n55["right"] := __n60;
__n54["left"] := __n55;
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "4";
__n64["raw"] := "\"4\"";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n54["right"] := __n61;
__n49["right"] := __n54;
__n48["test"] := __n49;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#2: Number(\"1234\") === Number(\"123\")*10+Number(\"4\")";
__n71["raw"] := "'#2: Number(\"1234\") === Number(\"123\")*10+Number(\"4\")'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n48["consequent"] := __n65;
__n48["alternate"] := null;
__n1 := [ __n2, __n24, __n48 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n72 := [  ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}