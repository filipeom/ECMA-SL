function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "0xa";
__n7["raw"] := "\"0xa\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 10.;
__n8["raw"] := "10";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: Number(\"0xa\") === 10. Actual: ";
__n16["raw"] := "'#1: Number(\"0xa\") === 10. Actual: '";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Number";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "0xa";
__n20["raw"] := "\"0xa\"";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n15["right"] := __n17;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Number";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "0xA";
__n26["raw"] := "\"0xA\"";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["left"] := __n23;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 10.;
__n27["raw"] := "10";
__n22["right"] := __n27;
__n21["test"] := __n22;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: Number(\"0xA\") === 10. Actual: ";
__n35["raw"] := "'#2: Number(\"0xA\") === 10. Actual: '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "0xA";
__n39["raw"] := "\"0xA\"";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n21["consequent"] := __n28;
__n21["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Number";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "0Xa";
__n45["raw"] := "\"0Xa\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["left"] := __n42;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 10.;
__n46["raw"] := "10";
__n41["right"] := __n46;
__n40["test"] := __n41;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#3: Number(\"0Xa\") === 10. Actual: ";
__n54["raw"] := "'#3: Number(\"0Xa\") === 10. Actual: '";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "Number";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "0Xa";
__n58["raw"] := "\"0Xa\"";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n40["consequent"] := __n47;
__n40["alternate"] := null;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "0XA";
__n62["raw"] := "\"0XA\"";
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60["left"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 10.;
__n63["raw"] := "10";
__n60["right"] := __n63;
__n59["test"] := __n60;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#4: +(\"0XA\") === 10. Actual: ";
__n71["raw"] := "'#4: +(\"0XA\") === 10. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "UnaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "0XA";
__n73["raw"] := "\"0XA\"";
__n72["argument"] := __n73;
__n72["prefix"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n59["consequent"] := __n64;
__n59["alternate"] := null;
__n1 := [ __n2, __n21, __n40, __n59 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n74 := [  ];
__n0["variableDeclarations"] := __n74;
__n75 := [  ];
__n0["functionDeclarations"] := __n75;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}