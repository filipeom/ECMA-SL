function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "+0";
__n7["raw"] := "\"+0\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "0";
__n11["raw"] := "\"0\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1.1: Number(\"+0\") === Number(\"0\")";
__n18["raw"] := "'#1.1: Number(\"+0\") === Number(\"0\")'";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "/";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Number";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "+0";
__n28["raw"] := "\"+0\"";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n23["right"] := __n25;
__n22["left"] := __n23;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "/";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Number";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "0";
__n34["raw"] := "\"0\"";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n29["right"] := __n31;
__n22["right"] := __n29;
__n21["test"] := __n22;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2.2: 1/Number(\"+0\") === 1/Number(\"0\")";
__n41["raw"] := "'#2.2: 1/Number(\"+0\") === 1/Number(\"0\")'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n21["consequent"] := __n35;
__n21["alternate"] := null;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n2["alternate"] := __n19;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Number";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "+Infinity";
__n47["raw"] := "\"+Infinity\"";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Number";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "Infinity";
__n51["raw"] := "\"Infinity\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n43["right"] := __n48;
__n42["test"] := __n43;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: Number(\"+Infinity\") === Number(\"Infinity\")";
__n58["raw"] := "'#3: Number(\"+Infinity\") === Number(\"Infinity\")'";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n42["consequent"] := __n52;
__n42["alternate"] := null;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "+1234.5678";
__n64["raw"] := "\"+1234.5678\"";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["left"] := __n61;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "Number";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "1234.5678";
__n68["raw"] := "\"1234.5678\"";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n60["right"] := __n65;
__n59["test"] := __n60;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: Number(\"+1234.5678\") === Number(\"1234.5678\")";
__n75["raw"] := "'#4: Number(\"+1234.5678\") === Number(\"1234.5678\")'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n59["consequent"] := __n69;
__n59["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Number";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "+1234.5678e90";
__n81["raw"] := "\"+1234.5678e90\"";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["left"] := __n78;
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Number";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "1234.5678e90";
__n85["raw"] := "\"1234.5678e90\"";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n77["right"] := __n82;
__n76["test"] := __n77;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#5: Number(\"+1234.5678e90\") === Number(\"1234.5678e90\")";
__n92["raw"] := "'#5: Number(\"+1234.5678e90\") === Number(\"1234.5678e90\")'";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n76["consequent"] := __n86;
__n76["alternate"] := null;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "Number";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "+1234.5678E90";
__n98["raw"] := "\"+1234.5678E90\"";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["left"] := __n95;
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "Number";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "1234.5678E90";
__n102["raw"] := "\"1234.5678E90\"";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n94["right"] := __n99;
__n93["test"] := __n94;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#6: Number(\"+1234.5678E90\") === Number(\"1234.5678E90\")";
__n109["raw"] := "'#6: Number(\"+1234.5678E90\") === Number(\"1234.5678E90\")'";
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n93["consequent"] := __n103;
__n93["alternate"] := null;
__n110 := {  };
__n110["type"] := "IfStatement";
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "!==";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "Number";
__n112["callee"] := __n113;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "+1234.5678e-90";
__n115["raw"] := "\"+1234.5678e-90\"";
__n114 := [ __n115 ];
__n112["arguments"] := __n114;
__n111["left"] := __n112;
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "Number";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "1234.5678e-90";
__n119["raw"] := "\"1234.5678e-90\"";
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n111["right"] := __n116;
__n110["test"] := __n111;
__n120 := {  };
__n120["type"] := "BlockStatement";
__n122 := {  };
__n122["type"] := "ExpressionStatement";
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "$ERROR";
__n123["callee"] := __n124;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "#7: Number(\"+1234.5678e-90\") === Number(\"1234.5678e-90\")";
__n126["raw"] := "'#7: Number(\"+1234.5678e-90\") === Number(\"1234.5678e-90\")'";
__n125 := [ __n126 ];
__n123["arguments"] := __n125;
__n122["expression"] := __n123;
__n121 := [ __n122 ];
__n120["body"] := __n121;
__n110["consequent"] := __n120;
__n110["alternate"] := null;
__n127 := {  };
__n127["type"] := "IfStatement";
__n128 := {  };
__n128["type"] := "BinaryExpression";
__n128["operator"] := "!==";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "Number";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "+1234.5678E-90";
__n132["raw"] := "\"+1234.5678E-90\"";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["left"] := __n129;
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "Number";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := "1234.5678E-90";
__n136["raw"] := "\"1234.5678E-90\"";
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n128["right"] := __n133;
__n127["test"] := __n128;
__n137 := {  };
__n137["type"] := "BlockStatement";
__n139 := {  };
__n139["type"] := "ExpressionStatement";
__n140 := {  };
__n140["type"] := "CallExpression";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "$ERROR";
__n140["callee"] := __n141;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "#8: Number(\"+1234.5678E-90\") === Number(\"1234.5678E-90\")";
__n143["raw"] := "'#8: Number(\"+1234.5678E-90\") === Number(\"1234.5678E-90\")'";
__n142 := [ __n143 ];
__n140["arguments"] := __n142;
__n139["expression"] := __n140;
__n138 := [ __n139 ];
__n137["body"] := __n138;
__n127["consequent"] := __n137;
__n127["alternate"] := null;
__n1 := [ __n2, __n42, __n59, __n76, __n93, __n110, __n127 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n144 := [  ];
__n0["variableDeclarations"] := __n144;
__n145 := [  ];
__n0["functionDeclarations"] := __n145;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}