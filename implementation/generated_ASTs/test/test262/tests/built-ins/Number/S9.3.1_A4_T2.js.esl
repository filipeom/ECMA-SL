function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "dynaString";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "!==";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "dynaString";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "+";
__n12["raw"] := "\"+\"";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "0";
__n13["raw"] := "\"0\"";
__n11 := [ __n12, __n13 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["left"] := __n6;
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Number";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "0";
__n17["raw"] := "\"0\"";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n5["right"] := __n14;
__n4["test"] := __n5;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: Number(\"+\"+\"0\") === Number(\"0\")";
__n24["raw"] := "'#1: Number(\"+\"+\"0\") === Number(\"0\")'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n4["consequent"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "/";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Number";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "dynaString";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "+";
__n37["raw"] := "\"+\"";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "0";
__n38["raw"] := "\"0\"";
__n36 := [ __n37, __n38 ];
__n34["arguments"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n29["right"] := __n31;
__n28["left"] := __n29;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "/";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Number";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "0";
__n44["raw"] := "\"0\"";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n39["right"] := __n41;
__n28["right"] := __n39;
__n27["test"] := __n28;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: 1/Number(\"+\"+\"0\") === 1/Number(\"0\")";
__n51["raw"] := "'#2: 1/Number(\"+\"+\"0\") === 1/Number(\"0\")'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n27["consequent"] := __n45;
__n27["alternate"] := null;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n4["alternate"] := __n25;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "!==";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Number";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "dynaString";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "+Infi";
__n60["raw"] := "\"+Infi\"";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "nity";
__n61["raw"] := "\"nity\"";
__n59 := [ __n60, __n61 ];
__n57["arguments"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["left"] := __n54;
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Number";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "Infinity";
__n65["raw"] := "\"Infinity\"";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n53["right"] := __n62;
__n52["test"] := __n53;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#3: Number(\"+Infin\"+\"ity\") === Number(\"Infinity\")";
__n72["raw"] := "'#3: Number(\"+Infin\"+\"ity\") === Number(\"Infinity\")'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n52["consequent"] := __n66;
__n52["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!==";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Number";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "dynaString";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "+1234.";
__n81["raw"] := "\"+1234.\"";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "5678";
__n82["raw"] := "\"5678\"";
__n80 := [ __n81, __n82 ];
__n78["arguments"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["left"] := __n75;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Number";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "1234.5678";
__n86["raw"] := "\"1234.5678\"";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n74["right"] := __n83;
__n73["test"] := __n74;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#4: Number(\"+1234.\"+\"5678\") === Number(\"1234.5678\")";
__n93["raw"] := "'#4: Number(\"+1234.\"+\"5678\") === Number(\"1234.5678\")'";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n73["consequent"] := __n87;
__n73["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "!==";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Number";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "dynaString";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "+1234.";
__n102["raw"] := "\"+1234.\"";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "5678e90";
__n103["raw"] := "\"5678e90\"";
__n101 := [ __n102, __n103 ];
__n99["arguments"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["left"] := __n96;
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "Number";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "1234.5678e90";
__n107["raw"] := "\"1234.5678e90\"";
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n95["right"] := __n104;
__n94["test"] := __n95;
__n108 := {  };
__n108["type"] := "BlockStatement";
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "$ERROR";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#5: Number(\"+1234.\"+\"5678e90\") === Number(\"1234.5678e90\")";
__n114["raw"] := "'#5: Number(\"+1234.\"+\"5678e90\") === Number(\"1234.5678e90\")'";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["expression"] := __n111;
__n109 := [ __n110 ];
__n108["body"] := __n109;
__n94["consequent"] := __n108;
__n94["alternate"] := null;
__n115 := {  };
__n115["type"] := "IfStatement";
__n116 := {  };
__n116["type"] := "BinaryExpression";
__n116["operator"] := "!==";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "Number";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "dynaString";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "+1234.";
__n123["raw"] := "\"+1234.\"";
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := "5678E90";
__n124["raw"] := "\"5678E90\"";
__n122 := [ __n123, __n124 ];
__n120["arguments"] := __n122;
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["left"] := __n117;
__n125 := {  };
__n125["type"] := "CallExpression";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "Number";
__n125["callee"] := __n126;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := "1234.5678E90";
__n128["raw"] := "\"1234.5678E90\"";
__n127 := [ __n128 ];
__n125["arguments"] := __n127;
__n116["right"] := __n125;
__n115["test"] := __n116;
__n129 := {  };
__n129["type"] := "BlockStatement";
__n131 := {  };
__n131["type"] := "ExpressionStatement";
__n132 := {  };
__n132["type"] := "CallExpression";
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "$ERROR";
__n132["callee"] := __n133;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := "#6: Number(\"+1234.\"+\"5678E90\") === Number(\"1234.5678E90\")";
__n135["raw"] := "'#6: Number(\"+1234.\"+\"5678E90\") === Number(\"1234.5678E90\")'";
__n134 := [ __n135 ];
__n132["arguments"] := __n134;
__n131["expression"] := __n132;
__n130 := [ __n131 ];
__n129["body"] := __n130;
__n115["consequent"] := __n129;
__n115["alternate"] := null;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!==";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Number";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "dynaString";
__n141["callee"] := __n142;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "+1234.";
__n144["raw"] := "\"+1234.\"";
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "5678e-90";
__n145["raw"] := "\"5678e-90\"";
__n143 := [ __n144, __n145 ];
__n141["arguments"] := __n143;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["left"] := __n138;
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "Number";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "1234.5678e-90";
__n149["raw"] := "\"1234.5678e-90\"";
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n137["right"] := __n146;
__n136["test"] := __n137;
__n150 := {  };
__n150["type"] := "BlockStatement";
__n152 := {  };
__n152["type"] := "ExpressionStatement";
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "$ERROR";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := "#7: Number(\"+1234.\"+\"5678e-90\") === Number(\"1234.5678e-90\")";
__n156["raw"] := "'#7: Number(\"+1234.\"+\"5678e-90\") === Number(\"1234.5678e-90\")'";
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n152["expression"] := __n153;
__n151 := [ __n152 ];
__n150["body"] := __n151;
__n136["consequent"] := __n150;
__n136["alternate"] := null;
__n157 := {  };
__n157["type"] := "IfStatement";
__n158 := {  };
__n158["type"] := "BinaryExpression";
__n158["operator"] := "!==";
__n159 := {  };
__n159["type"] := "CallExpression";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "Number";
__n159["callee"] := __n160;
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "dynaString";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "+1234.";
__n165["raw"] := "\"+1234.\"";
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := "5678E-90";
__n166["raw"] := "\"5678E-90\"";
__n164 := [ __n165, __n166 ];
__n162["arguments"] := __n164;
__n161 := [ __n162 ];
__n159["arguments"] := __n161;
__n158["left"] := __n159;
__n167 := {  };
__n167["type"] := "CallExpression";
__n168 := {  };
__n168["type"] := "Identifier";
__n168["name"] := "Number";
__n167["callee"] := __n168;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := "1234.5678E-90";
__n170["raw"] := "\"1234.5678E-90\"";
__n169 := [ __n170 ];
__n167["arguments"] := __n169;
__n158["right"] := __n167;
__n157["test"] := __n158;
__n171 := {  };
__n171["type"] := "BlockStatement";
__n173 := {  };
__n173["type"] := "ExpressionStatement";
__n174 := {  };
__n174["type"] := "CallExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "$ERROR";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := "#8: Number(\"+1234.\"+\"5678E-90\") === Number(\"1234.5678E-90\")";
__n177["raw"] := "'#8: Number(\"+1234.\"+\"5678E-90\") === Number(\"1234.5678E-90\")'";
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n173["expression"] := __n174;
__n172 := [ __n173 ];
__n171["body"] := __n172;
__n157["consequent"] := __n171;
__n157["alternate"] := null;
__n1 := [ __n2, __n4, __n52, __n73, __n94, __n115, __n136, __n157 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n178 := [  ];
__n0["variableDeclarations"] := __n178;
__n180 := {  };
__n180["type"] := "FunctionDeclaration";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "dynaString";
__n180["id"] := __n181;
__n182 := [ "s1", "s2" ];
__n180["params"] := __n182;
__n183 := {  };
__n183["type"] := "BlockStatement";
__n185 := {  };
__n185["type"] := "ReturnStatement";
__n186 := {  };
__n186["type"] := "BinaryExpression";
__n186["operator"] := "+";
__n187 := {  };
__n187["type"] := "CallExpression";
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "String";
__n187["callee"] := __n188;
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "s1";
__n189 := [ __n190 ];
__n187["arguments"] := __n189;
__n186["left"] := __n187;
__n191 := {  };
__n191["type"] := "CallExpression";
__n192 := {  };
__n192["type"] := "Identifier";
__n192["name"] := "String";
__n191["callee"] := __n192;
__n194 := {  };
__n194["type"] := "Identifier";
__n194["name"] := "s2";
__n193 := [ __n194 ];
__n191["arguments"] := __n193;
__n186["right"] := __n191;
__n185["argument"] := __n186;
__n184 := [ __n185 ];
__n183["body"] := __n184;
__n195 := [  ];
__n183["variableDeclarations"] := __n195;
__n196 := [  ];
__n183["functionDeclarations"] := __n196;
__n183["codeType"] := "function";
__n183["strict"] := false;
__n180["body"] := __n183;
__n180["generator"] := false;
__n180["expression"] := false;
__n180["async"] := false;
__n179 := [ __n180 ];
__n0["functionDeclarations"] := __n179;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}