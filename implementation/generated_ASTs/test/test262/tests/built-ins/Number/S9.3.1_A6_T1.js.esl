function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "Infinity";
__n7["raw"] := "\"Infinity\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "POSITIVE_INFINITY";
__n10["raw"] := "\"POSITIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: Number(\"Infinity\") === Number.POSITIVE_INFINITY";
__n17["raw"] := "'#1: Number(\"Infinity\") === Number.POSITIVE_INFINITY'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "Infinity";
__n23["raw"] := "\"Infinity\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["left"] := __n20;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := Infinity;
__n24["raw"] := "10e10000";
__n19["right"] := __n24;
__n18["test"] := __n19;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: Number(\"Infinity\") === 10e10000";
__n31["raw"] := "'#2: Number(\"Infinity\") === 10e10000'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n18["consequent"] := __n25;
__n18["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Number";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "Infinity";
__n37["raw"] := "\"Infinity\"";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["left"] := __n34;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := Infinity;
__n38["raw"] := "10E10000";
__n33["right"] := __n38;
__n32["test"] := __n33;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#3: Number(\"Infinity\") === 10E10000";
__n45["raw"] := "'#3: Number(\"Infinity\") === 10E10000'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n32["consequent"] := __n39;
__n32["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Number";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "Infinity";
__n51["raw"] := "\"Infinity\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["left"] := __n48;
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "10e10000";
__n55["raw"] := "\"10e10000\"";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n47["right"] := __n52;
__n46["test"] := __n47;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#4: Number(\"Infinity\") === Number(\"10e10000\")";
__n62["raw"] := "'#4: Number(\"Infinity\") === Number(\"10e10000\")'";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n46["consequent"] := __n56;
__n46["alternate"] := null;
__n1 := [ __n2, __n18, __n32, __n46 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n63 := [  ];
__n0["variableDeclarations"] := __n63;
__n64 := [  ];
__n0["functionDeclarations"] := __n64;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}