function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "dynaString";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "!==";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "dynaString";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "Infi";
__n12["raw"] := "\"Infi\"";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "nity";
__n13["raw"] := "\"nity\"";
__n11 := [ __n12, __n13 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["left"] := __n6;
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Number";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "POSITIVE_INFINITY";
__n16["raw"] := "\"POSITIVE_INFINITY\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n5["right"] := __n14;
__n4["test"] := __n5;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: Number(\"Infi\"+\"nity\") === Number.POSITIVE_INFINITY";
__n23["raw"] := "'#1: Number(\"Infi\"+\"nity\") === Number.POSITIVE_INFINITY'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n4["consequent"] := __n17;
__n4["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Number";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "dynaString";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "Infi";
__n32["raw"] := "\"Infi\"";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "nity";
__n33["raw"] := "\"nity\"";
__n31 := [ __n32, __n33 ];
__n29["arguments"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Infinity";
__n25["right"] := __n34;
__n24["test"] := __n25;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: Number(\"Infi\"+\"nity\") === 10e10000";
__n41["raw"] := "'#2: Number(\"Infi\"+\"nity\") === 10e10000'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n24["consequent"] := __n35;
__n24["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Number";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "dynaString";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Infi";
__n50["raw"] := "\"Infi\"";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "nity";
__n51["raw"] := "\"nity\"";
__n49 := [ __n50, __n51 ];
__n47["arguments"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Infinity";
__n43["right"] := __n52;
__n42["test"] := __n43;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#3: Number(\"Infi\"+\"nity\") === 10E10000";
__n59["raw"] := "'#3: Number(\"Infi\"+\"nity\") === 10E10000'";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n42["consequent"] := __n53;
__n42["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Number";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "dynaString";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "Infi";
__n68["raw"] := "\"Infi\"";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "nity";
__n69["raw"] := "\"nity\"";
__n67 := [ __n68, __n69 ];
__n65["arguments"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["left"] := __n62;
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "Number";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "10e10000";
__n73["raw"] := "\"10e10000\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n61["right"] := __n70;
__n60["test"] := __n61;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#4: Number(\"Infi\"+\"nity\") === Number(\"10e10000\")";
__n80["raw"] := "'#4: Number(\"Infi\"+\"nity\") === Number(\"10e10000\")'";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n60["consequent"] := __n74;
__n60["alternate"] := null;
__n1 := [ __n2, __n4, __n24, __n42, __n60 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n81 := [  ];
__n0["variableDeclarations"] := __n81;
__n83 := {  };
__n83["type"] := "FunctionDeclaration";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "dynaString";
__n83["id"] := __n84;
__n85 := [ "s1", "s2" ];
__n83["params"] := __n85;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ReturnStatement";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "String";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "s1";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["left"] := __n90;
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "String";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "s2";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n89["right"] := __n94;
__n88["argument"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n98 := [  ];
__n86["variableDeclarations"] := __n98;
__n99 := [  ];
__n86["functionDeclarations"] := __n99;
__n86["codeType"] := "function";
__n86["strict"] := false;
__n83["body"] := __n86;
__n83["generator"] := false;
__n83["async"] := false;
__n83["expression"] := false;
__n82 := [ __n83 ];
__n0["functionDeclarations"] := __n82;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}