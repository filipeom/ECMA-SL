function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "1234e5";
__n7["raw"] := "\"1234e5\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "*";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Number";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "1234";
__n12["raw"] := "\"1234\"";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["left"] := __n9;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 100000.;
__n13["raw"] := "1e5";
__n8["right"] := __n13;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Number(\"1234e5\") === Number(\"1234\")*1e5";
__n20["raw"] := "'#1: Number(\"1234e5\") === Number(\"1234\")*1e5'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n2["consequent"] := __n14;
__n2["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Number";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "1234.e5";
__n26["raw"] := "\"1234.e5\"";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["left"] := __n23;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "*";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "1234";
__n29["raw"] := "\"1234\"";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["left"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 100000.;
__n30["raw"] := "1e5";
__n27["right"] := __n30;
__n22["right"] := __n27;
__n21["test"] := __n22;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#2: Number(\"1234.e5\") === +(\"1234\")*1e5";
__n37["raw"] := "'#2: Number(\"1234.e5\") === +(\"1234\")*1e5'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n21["consequent"] := __n31;
__n21["alternate"] := null;
__n1 := [ __n2, __n21 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [  ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}