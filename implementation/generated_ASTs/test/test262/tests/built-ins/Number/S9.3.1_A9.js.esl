function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "1234.5678e9";
__n7["raw"] := "\"1234.5678e9\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "*";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Number";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "1234";
__n13["raw"] := "\"1234\"";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["left"] := __n10;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "*";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Number";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "5678";
__n18["raw"] := "\"5678\"";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["left"] := __n15;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.0001;
__n19["raw"] := "1e-4";
__n14["right"] := __n19;
__n9["right"] := __n14;
__n8["left"] := __n9;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1000000000.;
__n20["raw"] := "1e9";
__n8["right"] := __n20;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: Number(\"1234.5678e9\") === (Number(\"1234\")+(Number(\"5678\")*1e-4))*1e9";
__n27["raw"] := "'#1: Number(\"1234.5678e9\") === (Number(\"1234\")+(Number(\"5678\")*1e-4))*1e9'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n2["consequent"] := __n21;
__n2["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "1234.5678e-9";
__n31["raw"] := "\"1234.5678e-9\"";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29["left"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "*";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Number";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "1234";
__n37["raw"] := "\"1234\"";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["left"] := __n34;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "*";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Number";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "5678";
__n42["raw"] := "\"5678\"";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["left"] := __n39;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.0001;
__n43["raw"] := "1e-4";
__n38["right"] := __n43;
__n33["right"] := __n38;
__n32["left"] := __n33;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1e-9;
__n44["raw"] := "1e-9";
__n32["right"] := __n44;
__n29["right"] := __n32;
__n28["test"] := __n29;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: +(\"1234.5678e-9\") === (Number(\"1234\")+(Number(\"5678\")*1e-4))*1e-9";
__n51["raw"] := "'#2: +(\"1234.5678e-9\") === (Number(\"1234\")+(Number(\"5678\")*1e-4))*1e-9'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n28["consequent"] := __n45;
__n28["alternate"] := null;
__n1 := [ __n2, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n52 := [  ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}