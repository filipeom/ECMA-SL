function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Number";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "undefined";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := true;
__n11["raw"] := "true";
__n3["right"] := __n11;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: Number(undefined) === Not-a-Number. Actual: ";
__n19["raw"] := "'#1: Number(undefined) === Not-a-Number. Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "undefined";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "isNaN";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Number";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "void";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 0.;
__n33["raw"] := "0";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n25["right"] := __n34;
__n24["test"] := __n25;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: Number(void 0) === Not-a-Number. Actual: ";
__n42["raw"] := "'#2: Number(void 0) === Not-a-Number. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Number";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "void";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n24["consequent"] := __n35;
__n24["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "isNaN";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Number";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "eval";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "var x";
__n59["raw"] := "\"var x\"";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["left"] := __n50;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := true;
__n60["raw"] := "true";
__n49["right"] := __n60;
__n48["test"] := __n49;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#3: Number(eval(\"var x\")) === Not-a-Number. Actual: ";
__n68["raw"] := "'#3: Number(eval(\"var x\")) === Not-a-Number. Actual: '";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "eval";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "var x";
__n75["raw"] := "\"var x\"";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n67["right"] := __n69;
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n48["consequent"] := __n61;
__n48["alternate"] := null;
__n1 := [ __n2, __n24, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n76 := [  ];
__n0["variableDeclarations"] := __n76;
__n77 := [  ];
__n0["functionDeclarations"] := __n77;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}