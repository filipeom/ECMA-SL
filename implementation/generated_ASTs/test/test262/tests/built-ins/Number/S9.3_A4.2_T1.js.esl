function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Number";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Number";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "NaN";
__n12["raw"] := "\"NaN\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := true;
__n13["raw"] := "true";
__n3["right"] := __n13;
__n2["test"] := __n3;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: Number(NaN) === Not-a-Number. Actual: ";
__n21["raw"] := "'#1: Number(NaN) === Not-a-Number. Actual: '";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Number";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "NaN";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n2["consequent"] := __n14;
__n2["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Number";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 0.;
__n32["raw"] := "0";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 0.;
__n34["raw"] := "0";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n27["right"] := __n33;
__n26["test"] := __n27;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2.1: Number(+0) === 0. Actual: ";
__n42["raw"] := "'#2.1: Number(+0) === 0. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Number";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n26["consequent"] := __n35;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "/";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 1.;
__n53["raw"] := "1";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Number";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "UnaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n52["right"] := __n54;
__n51["left"] := __n52;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Number";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "POSITIVE_INFINITY";
__n61["raw"] := "\"POSITIVE_INFINITY\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n51["right"] := __n59;
__n50["test"] := __n51;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#2.2: Number(+0) === +0. Actual: -0";
__n68["raw"] := "'#2.2: Number(+0) === +0. Actual: -0'";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n50["consequent"] := __n62;
__n50["alternate"] := null;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n26["alternate"] := __n48;
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "Number";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "-";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 0.;
__n75["raw"] := "0";
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["left"] := __n71;
__n76 := {  };
__n76["type"] := "UnaryExpression";
__n76["operator"] := "-";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 0.;
__n77["raw"] := "0";
__n76["argument"] := __n77;
__n76["prefix"] := true;
__n70["right"] := __n76;
__n69["test"] := __n70;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "+";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "#3.1: Number(-0) === 0. Actual: ";
__n85["raw"] := "'#3.1: Number(-0) === 0. Actual: '";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Number";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "UnaryExpression";
__n89["operator"] := "-";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 0.;
__n90["raw"] := "0";
__n89["argument"] := __n90;
__n89["prefix"] := true;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n84["right"] := __n86;
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n69["consequent"] := __n78;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "/";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 1.;
__n96["raw"] := "1";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "Number";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "-";
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 0.;
__n101["raw"] := "0";
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n95["right"] := __n97;
__n94["left"] := __n95;
__n102 := {  };
__n102["type"] := "MemberExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "Number";
__n102["object"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "NEGATIVE_INFINITY";
__n104["raw"] := "\"NEGATIVE_INFINITY\"";
__n102["property"] := __n104;
__n102["computed"] := true;
__n94["right"] := __n102;
__n93["test"] := __n94;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "$ERROR";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "#3.2: Number(-0) === -0. Actual: +0";
__n111["raw"] := "'#3.2: Number(-0) === -0. Actual: +0'";
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["expression"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n93["consequent"] := __n105;
__n93["alternate"] := null;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n69["alternate"] := __n91;
__n112 := {  };
__n112["type"] := "IfStatement";
__n113 := {  };
__n113["type"] := "BinaryExpression";
__n113["operator"] := "!==";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "Number";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "MemberExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "Number";
__n117["object"] := __n118;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "POSITIVE_INFINITY";
__n119["raw"] := "\"POSITIVE_INFINITY\"";
__n117["property"] := __n119;
__n117["computed"] := true;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["left"] := __n114;
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "Number";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "POSITIVE_INFINITY";
__n122["raw"] := "\"POSITIVE_INFINITY\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n113["right"] := __n120;
__n112["test"] := __n113;
__n123 := {  };
__n123["type"] := "BlockStatement";
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "$ERROR";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "BinaryExpression";
__n129["operator"] := "+";
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "#4: Number(+Infinity) === +Infinity. Actual: ";
__n130["raw"] := "'#4: Number(+Infinity) === +Infinity. Actual: '";
__n129["left"] := __n130;
__n131 := {  };
__n131["type"] := "CallExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "Number";
__n131["callee"] := __n132;
__n134 := {  };
__n134["type"] := "UnaryExpression";
__n134["operator"] := "+";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "Infinity";
__n134["argument"] := __n135;
__n134["prefix"] := true;
__n133 := [ __n134 ];
__n131["arguments"] := __n133;
__n129["right"] := __n131;
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["expression"] := __n126;
__n124 := [ __n125 ];
__n123["body"] := __n124;
__n112["consequent"] := __n123;
__n112["alternate"] := null;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!==";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Number";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "MemberExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "Number";
__n141["object"] := __n142;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "NEGATIVE_INFINITY";
__n143["raw"] := "\"NEGATIVE_INFINITY\"";
__n141["property"] := __n143;
__n141["computed"] := true;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["left"] := __n138;
__n144 := {  };
__n144["type"] := "MemberExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "Number";
__n144["object"] := __n145;
__n146 := {  };
__n146["type"] := "Literal";
__n146["value"] := "NEGATIVE_INFINITY";
__n146["raw"] := "\"NEGATIVE_INFINITY\"";
__n144["property"] := __n146;
__n144["computed"] := true;
__n137["right"] := __n144;
__n136["test"] := __n137;
__n147 := {  };
__n147["type"] := "BlockStatement";
__n149 := {  };
__n149["type"] := "ExpressionStatement";
__n150 := {  };
__n150["type"] := "CallExpression";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "$ERROR";
__n150["callee"] := __n151;
__n153 := {  };
__n153["type"] := "BinaryExpression";
__n153["operator"] := "+";
__n154 := {  };
__n154["type"] := "Literal";
__n154["value"] := "#5: Number(-Infinity) === -Infinity. Actual: ";
__n154["raw"] := "'#5: Number(-Infinity) === -Infinity. Actual: '";
__n153["left"] := __n154;
__n155 := {  };
__n155["type"] := "CallExpression";
__n156 := {  };
__n156["type"] := "Identifier";
__n156["name"] := "Number";
__n155["callee"] := __n156;
__n158 := {  };
__n158["type"] := "UnaryExpression";
__n158["operator"] := "-";
__n159 := {  };
__n159["type"] := "Identifier";
__n159["name"] := "Infinity";
__n158["argument"] := __n159;
__n158["prefix"] := true;
__n157 := [ __n158 ];
__n155["arguments"] := __n157;
__n153["right"] := __n155;
__n152 := [ __n153 ];
__n150["arguments"] := __n152;
__n149["expression"] := __n150;
__n148 := [ __n149 ];
__n147["body"] := __n148;
__n136["consequent"] := __n147;
__n136["alternate"] := null;
__n160 := {  };
__n160["type"] := "IfStatement";
__n161 := {  };
__n161["type"] := "BinaryExpression";
__n161["operator"] := "!==";
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "Number";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "MemberExpression";
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "Number";
__n165["object"] := __n166;
__n167 := {  };
__n167["type"] := "Literal";
__n167["value"] := "MAX_VALUE";
__n167["raw"] := "\"MAX_VALUE\"";
__n165["property"] := __n167;
__n165["computed"] := true;
__n164 := [ __n165 ];
__n162["arguments"] := __n164;
__n161["left"] := __n162;
__n168 := {  };
__n168["type"] := "MemberExpression";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "Number";
__n168["object"] := __n169;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := "MAX_VALUE";
__n170["raw"] := "\"MAX_VALUE\"";
__n168["property"] := __n170;
__n168["computed"] := true;
__n161["right"] := __n168;
__n160["test"] := __n161;
__n171 := {  };
__n171["type"] := "BlockStatement";
__n173 := {  };
__n173["type"] := "ExpressionStatement";
__n174 := {  };
__n174["type"] := "CallExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "$ERROR";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "BinaryExpression";
__n177["operator"] := "+";
__n178 := {  };
__n178["type"] := "Literal";
__n178["value"] := "#6: Number(Number.MAX_VALUE) === Number.MAX_VALUE. Actual: ";
__n178["raw"] := "'#6: Number(Number.MAX_VALUE) === Number.MAX_VALUE. Actual: '";
__n177["left"] := __n178;
__n179 := {  };
__n179["type"] := "CallExpression";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "Number";
__n179["callee"] := __n180;
__n182 := {  };
__n182["type"] := "MemberExpression";
__n183 := {  };
__n183["type"] := "Identifier";
__n183["name"] := "Number";
__n182["object"] := __n183;
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := "MAX_VALUE";
__n184["raw"] := "\"MAX_VALUE\"";
__n182["property"] := __n184;
__n182["computed"] := true;
__n181 := [ __n182 ];
__n179["arguments"] := __n181;
__n177["right"] := __n179;
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n173["expression"] := __n174;
__n172 := [ __n173 ];
__n171["body"] := __n172;
__n160["consequent"] := __n171;
__n160["alternate"] := null;
__n185 := {  };
__n185["type"] := "IfStatement";
__n186 := {  };
__n186["type"] := "BinaryExpression";
__n186["operator"] := "!==";
__n187 := {  };
__n187["type"] := "CallExpression";
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "Number";
__n187["callee"] := __n188;
__n190 := {  };
__n190["type"] := "MemberExpression";
__n191 := {  };
__n191["type"] := "Identifier";
__n191["name"] := "Number";
__n190["object"] := __n191;
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := "MIN_VALUE";
__n192["raw"] := "\"MIN_VALUE\"";
__n190["property"] := __n192;
__n190["computed"] := true;
__n189 := [ __n190 ];
__n187["arguments"] := __n189;
__n186["left"] := __n187;
__n193 := {  };
__n193["type"] := "MemberExpression";
__n194 := {  };
__n194["type"] := "Identifier";
__n194["name"] := "Number";
__n193["object"] := __n194;
__n195 := {  };
__n195["type"] := "Literal";
__n195["value"] := "MIN_VALUE";
__n195["raw"] := "\"MIN_VALUE\"";
__n193["property"] := __n195;
__n193["computed"] := true;
__n186["right"] := __n193;
__n185["test"] := __n186;
__n196 := {  };
__n196["type"] := "BlockStatement";
__n198 := {  };
__n198["type"] := "ExpressionStatement";
__n199 := {  };
__n199["type"] := "CallExpression";
__n200 := {  };
__n200["type"] := "Identifier";
__n200["name"] := "$ERROR";
__n199["callee"] := __n200;
__n202 := {  };
__n202["type"] := "BinaryExpression";
__n202["operator"] := "+";
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := "#7: Number(Number.MIN_VALUE) === Number.MIN_VALUE. Actual: ";
__n203["raw"] := "'#7: Number(Number.MIN_VALUE) === Number.MIN_VALUE. Actual: '";
__n202["left"] := __n203;
__n204 := {  };
__n204["type"] := "CallExpression";
__n205 := {  };
__n205["type"] := "Identifier";
__n205["name"] := "Number";
__n204["callee"] := __n205;
__n207 := {  };
__n207["type"] := "MemberExpression";
__n208 := {  };
__n208["type"] := "Identifier";
__n208["name"] := "Number";
__n207["object"] := __n208;
__n209 := {  };
__n209["type"] := "Literal";
__n209["value"] := "MIN_VALUE";
__n209["raw"] := "\"MIN_VALUE\"";
__n207["property"] := __n209;
__n207["computed"] := true;
__n206 := [ __n207 ];
__n204["arguments"] := __n206;
__n202["right"] := __n204;
__n201 := [ __n202 ];
__n199["arguments"] := __n201;
__n198["expression"] := __n199;
__n197 := [ __n198 ];
__n196["body"] := __n197;
__n185["consequent"] := __n196;
__n185["alternate"] := null;
__n1 := [ __n2, __n26, __n69, __n112, __n136, __n160, __n185 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n210 := [  ];
__n0["variableDeclarations"] := __n210;
__n211 := [  ];
__n0["functionDeclarations"] := __n211;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}