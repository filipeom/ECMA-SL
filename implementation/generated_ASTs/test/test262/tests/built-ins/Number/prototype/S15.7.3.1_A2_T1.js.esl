function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "prototype";
__n7["raw"] := "\"prototype\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "object";
__n8["raw"] := "\"object\"";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: typeof Number.prototype === \"object\"";
__n15["raw"] := "'#1: typeof Number.prototype === \"object\"'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "delete";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Number";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "prototype";
__n21["raw"] := "\"prototype\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["object"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "toString";
__n22["raw"] := "\"toString\"";
__n18["property"] := __n22;
__n18["computed"] := true;
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["expression"] := __n17;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Number";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "prototype";
__n29["raw"] := "\"prototype\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["object"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "toString";
__n30["raw"] := "\"toString\"";
__n26["property"] := __n30;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n31 := [  ];
__n25["arguments"] := __n31;
__n24["left"] := __n25;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "[object Number]";
__n32["raw"] := "\"[object Number]\"";
__n24["right"] := __n32;
__n23["test"] := __n24;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#3: The [[Class]] property of the Number prototype object is set to \"Number\"";
__n39["raw"] := "'#3: The [[Class]] property of the Number prototype object is set to \"Number\"'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n23["consequent"] := __n33;
__n23["alternate"] := null;
__n1 := [ __n2, __n16, __n23 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [  ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}