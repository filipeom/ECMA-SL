function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "prototype";
__n7["raw"] := "\"prototype\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "object";
__n8["raw"] := "\"object\"";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: typeof Number.prototype === \"object\"";
__n15["raw"] := "'#1: typeof Number.prototype === \"object\"'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!=";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Number";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "prototype";
__n20["raw"] := "\"prototype\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 0.;
__n21["raw"] := "0";
__n17["right"] := __n21;
__n16["test"] := __n17;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2: Number.prototype == +0";
__n28["raw"] := "'#2: Number.prototype == +0'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n16["consequent"] := __n22;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!=";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "/";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "prototype";
__n35["raw"] := "\"prototype\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n31["right"] := __n33;
__n30["left"] := __n31;
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "POSITIVE_INFINITY";
__n38["raw"] := "\"POSITIVE_INFINITY\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n30["right"] := __n36;
__n29["test"] := __n30;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: Number.prototype == +0";
__n45["raw"] := "'#2: Number.prototype == +0'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n29["consequent"] := __n39;
__n29["alternate"] := null;
__n16["alternate"] := __n29;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "delete";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Number";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "prototype";
__n51["raw"] := "\"prototype\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["object"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "toString";
__n52["raw"] := "\"toString\"";
__n48["property"] := __n52;
__n48["computed"] := true;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["expression"] := __n47;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Number";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "prototype";
__n59["raw"] := "\"prototype\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["object"] := __n57;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "toString";
__n60["raw"] := "\"toString\"";
__n56["property"] := __n60;
__n56["computed"] := true;
__n55["callee"] := __n56;
__n61 := [  ];
__n55["arguments"] := __n61;
__n54["left"] := __n55;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "[object Number]";
__n62["raw"] := "\"[object Number]\"";
__n54["right"] := __n62;
__n53["test"] := __n54;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#3: The [[Class]] property of the Number prototype object is set to \"Number\"";
__n69["raw"] := "'#3: The [[Class]] property of the Number prototype object is set to \"Number\"'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n53["consequent"] := __n63;
__n53["alternate"] := null;
__n1 := [ __n2, __n16, __n46, __n53 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n70 := [  ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}