function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Number";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "prototype";
__n12["raw"] := "\"prototype\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["object"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "toExponential";
__n13["raw"] := "\"toExponential\"";
__n9["property"] := __n13;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n14 := [ __n15 ];
__n8["arguments"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "0e+0";
__n16["raw"] := "\"0e+0\"";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "Number.prototype";
__n17["raw"] := "\"Number.prototype\"";
__n7 := [ __n8, __n16, __n17 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "sameValue";
__n22["raw"] := "\"sameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "toExponential";
__n27["raw"] := "\"toExponential\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "0e+0";
__n30["raw"] := "\"0e+0\"";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "(0).toExponential(0)";
__n31["raw"] := "\"(0).toExponential(0)\"";
__n23 := [ __n24, __n30, __n31 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "sameValue";
__n36["raw"] := "\"sameValue\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "-";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n39["object"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "toExponential";
__n42["raw"] := "\"toExponential\"";
__n39["property"] := __n42;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 0.;
__n44["raw"] := "0";
__n43 := [ __n44 ];
__n38["arguments"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "0e+0";
__n45["raw"] := "\"0e+0\"";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "(-0).toExponential(0)";
__n46["raw"] := "\"(-0).toExponential(0)\"";
__n37 := [ __n38, __n45, __n46 ];
__n33["arguments"] := __n37;
__n32["expression"] := __n33;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "sameValue";
__n51["raw"] := "\"sameValue\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "toExponential";
__n56["raw"] := "\"toExponential\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "-";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n57 := [ __n58 ];
__n53["arguments"] := __n57;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "0e+0";
__n60["raw"] := "\"0e+0\"";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "(0).toExponential(-0)";
__n61["raw"] := "\"(0).toExponential(-0)\"";
__n52 := [ __n53, __n60, __n61 ];
__n48["arguments"] := __n52;
__n47["expression"] := __n48;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "sameValue";
__n66["raw"] := "\"sameValue\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "UnaryExpression";
__n70["operator"] := "-";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 0.;
__n71["raw"] := "0";
__n70["argument"] := __n71;
__n70["prefix"] := true;
__n69["object"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "toExponential";
__n72["raw"] := "\"toExponential\"";
__n69["property"] := __n72;
__n69["computed"] := true;
__n68["callee"] := __n69;
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "-";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 0.;
__n75["raw"] := "0";
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n73 := [ __n74 ];
__n68["arguments"] := __n73;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "0e+0";
__n76["raw"] := "\"0e+0\"";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "(-0).toExponential(-0)";
__n77["raw"] := "\"(-0).toExponential(-0)\"";
__n67 := [ __n68, __n76, __n77 ];
__n63["arguments"] := __n67;
__n62["expression"] := __n63;
__n1 := [ __n2, __n18, __n32, __n47, __n62 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n78 := [  ];
__n0["variableDeclarations"] := __n78;
__n79 := [  ];
__n0["functionDeclarations"] := __n79;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}