function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "toPrecision";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Number";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["object"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "toPrecision";
__n10["raw"] := "\"toPrecision\"";
__n6["property"] := __n10;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "assert";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "throws";
__n15["raw"] := "\"throws\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "RangeError";
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [  ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "toPrecision";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "call";
__n26["raw"] := "\"call\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n32 := [  ];
__n31["body"] := __n32;
__n33 := [  ];
__n31["variableDeclarations"] := __n33;
__n34 := [  ];
__n31["functionDeclarations"] := __n34;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n27 := [ __n28, __n29 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n35 := [  ];
__n20["variableDeclarations"] := __n35;
__n36 := [  ];
__n20["functionDeclarations"] := __n36;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["async"] := false;
__n18["expression"] := false;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "`function() {}` doesn't coerce into a number in range (1-100)";
__n37["raw"] := "\"`function() {}` doesn't coerce into a number in range (1-100)\"";
__n16 := [ __n17, __n18, __n37 ];
__n12["arguments"] := __n16;
__n11["expression"] := __n12;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "assert";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "throws";
__n42["raw"] := "\"throws\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "RangeError";
__n45 := {  };
__n45["type"] := "FunctionExpression";
__n45["id"] := null;
__n46 := [  ];
__n45["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "toPrecision";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "call";
__n53["raw"] := "\"call\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 1.;
__n55["raw"] := "1";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "NaN";
__n54 := [ __n55, __n56 ];
__n50["arguments"] := __n54;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n57 := [  ];
__n47["variableDeclarations"] := __n57;
__n58 := [  ];
__n47["functionDeclarations"] := __n58;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n45["body"] := __n47;
__n45["generator"] := false;
__n45["async"] := false;
__n45["expression"] := false;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "NaN doesn't coerce into a number in range (1-100)";
__n59["raw"] := "\"NaN doesn't coerce into a number in range (1-100)\"";
__n43 := [ __n44, __n45, __n59 ];
__n39["arguments"] := __n43;
__n38["expression"] := __n39;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "assert";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "throws";
__n64["raw"] := "\"throws\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "RangeError";
__n67 := {  };
__n67["type"] := "FunctionExpression";
__n67["id"] := null;
__n68 := [  ];
__n67["params"] := __n68;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "MemberExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "toPrecision";
__n73["object"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "call";
__n75["raw"] := "\"call\"";
__n73["property"] := __n75;
__n73["computed"] := true;
__n72["callee"] := __n73;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n78 := {  };
__n78["type"] := "ObjectExpression";
__n79 := [  ];
__n78["properties"] := __n79;
__n76 := [ __n77, __n78 ];
__n72["arguments"] := __n76;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n80 := [  ];
__n69["variableDeclarations"] := __n80;
__n81 := [  ];
__n69["functionDeclarations"] := __n81;
__n69["codeType"] := "function";
__n69["strict"] := false;
__n67["body"] := __n69;
__n67["generator"] := false;
__n67["async"] := false;
__n67["expression"] := false;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "{} doesn't coerce into a number in range (1-100)";
__n82["raw"] := "\"{} doesn't coerce into a number in range (1-100)\"";
__n65 := [ __n66, __n67, __n82 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n1 := [ __n2, __n11, __n38, __n60 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n83 := [ "toPrecision" ];
__n0["variableDeclarations"] := __n83;
__n84 := [  ];
__n0["functionDeclarations"] := __n84;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}