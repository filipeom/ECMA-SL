function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Number";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "prototype";
__n12["raw"] := "\"prototype\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["object"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "toPrecision";
__n13["raw"] := "\"toPrecision\"";
__n9["property"] := __n13;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n14 := [ __n15 ];
__n8["arguments"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "0";
__n16["raw"] := "\"0\"";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "Number.prototype is 0";
__n17["raw"] := "\"Number.prototype is 0\"";
__n7 := [ __n8, __n16, __n17 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "sameValue";
__n22["raw"] := "\"sameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["object"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "toPrecision";
__n28["raw"] := "\"toPrecision\"";
__n25["property"] := __n28;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29 := [ __n30 ];
__n24["arguments"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "0";
__n31["raw"] := "\"0\"";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "-0";
__n32["raw"] := "\"-0\"";
__n23 := [ __n24, __n31, __n32 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n1 := [ __n2, __n18 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [  ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}