function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["object"] := __n6;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "toString";
__n9["raw"] := "\"toString\"";
__n5["property"] := __n9;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n10 := [  ];
__n4["arguments"] := __n10;
__n3["left"] := __n4;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "0";
__n11["raw"] := "\"0\"";
__n3["right"] := __n11;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: Number.prototype.toString() === \"0\"";
__n18["raw"] := "'#1: Number.prototype.toString() === \"0\"'";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "NewExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Number";
__n23["callee"] := __n24;
__n25 := [  ];
__n23["arguments"] := __n25;
__n22["object"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "toString";
__n26["raw"] := "\"toString\"";
__n22["property"] := __n26;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n27 := [  ];
__n21["arguments"] := __n27;
__n20["left"] := __n21;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "0";
__n28["raw"] := "\"0\"";
__n20["right"] := __n28;
__n19["test"] := __n20;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: (new Number()).toString() === \"0\"";
__n35["raw"] := "'#2: (new Number()).toString() === \"0\"'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n19["consequent"] := __n29;
__n19["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Number";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["object"] := __n40;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "toString";
__n44["raw"] := "\"toString\"";
__n39["property"] := __n44;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n45 := [  ];
__n38["arguments"] := __n45;
__n37["left"] := __n38;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "0";
__n46["raw"] := "\"0\"";
__n37["right"] := __n46;
__n36["test"] := __n37;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#3: (new Number(0)).toString() === \"0\"";
__n53["raw"] := "'#3: (new Number(0)).toString() === \"0\"'";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n36["consequent"] := __n47;
__n36["alternate"] := null;
__n54 := {  };
__n54["type"] := "IfStatement";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "!==";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Number";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "-";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 1.;
__n62["raw"] := "1";
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["object"] := __n58;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "toString";
__n63["raw"] := "\"toString\"";
__n57["property"] := __n63;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n64 := [  ];
__n56["arguments"] := __n64;
__n55["left"] := __n56;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "-1";
__n65["raw"] := "\"-1\"";
__n55["right"] := __n65;
__n54["test"] := __n55;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#4: (new Number(-1)).toString() === \"-1\"";
__n72["raw"] := "'#4: (new Number(-1)).toString() === \"-1\"'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n54["consequent"] := __n66;
__n54["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!==";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "NewExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "Number";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 1.;
__n80["raw"] := "1";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["object"] := __n77;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "toString";
__n81["raw"] := "\"toString\"";
__n76["property"] := __n81;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n82 := [  ];
__n75["arguments"] := __n82;
__n74["left"] := __n75;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "1";
__n83["raw"] := "\"1\"";
__n74["right"] := __n83;
__n73["test"] := __n74;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#5: (new Number(1)).toString() === \"1\"";
__n90["raw"] := "'#5: (new Number(1)).toString() === \"1\"'";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n73["consequent"] := __n84;
__n73["alternate"] := null;
__n91 := {  };
__n91["type"] := "IfStatement";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "!==";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "MemberExpression";
__n95 := {  };
__n95["type"] := "NewExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "Number";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "MemberExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "Number";
__n98["object"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "NaN";
__n100["raw"] := "\"NaN\"";
__n98["property"] := __n100;
__n98["computed"] := true;
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["object"] := __n95;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "toString";
__n101["raw"] := "\"toString\"";
__n94["property"] := __n101;
__n94["computed"] := true;
__n93["callee"] := __n94;
__n102 := [  ];
__n93["arguments"] := __n102;
__n92["left"] := __n93;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "NaN";
__n103["raw"] := "\"NaN\"";
__n92["right"] := __n103;
__n91["test"] := __n92;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "$ERROR";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#6: (new Number(Number.NaN)).toString() === \"NaN\"";
__n110["raw"] := "'#6: (new Number(Number.NaN)).toString() === \"NaN\"'";
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n91["consequent"] := __n104;
__n91["alternate"] := null;
__n111 := {  };
__n111["type"] := "IfStatement";
__n112 := {  };
__n112["type"] := "BinaryExpression";
__n112["operator"] := "!==";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "MemberExpression";
__n115 := {  };
__n115["type"] := "NewExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "Number";
__n115["callee"] := __n116;
__n118 := {  };
__n118["type"] := "MemberExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "Number";
__n118["object"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "POSITIVE_INFINITY";
__n120["raw"] := "\"POSITIVE_INFINITY\"";
__n118["property"] := __n120;
__n118["computed"] := true;
__n117 := [ __n118 ];
__n115["arguments"] := __n117;
__n114["object"] := __n115;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "toString";
__n121["raw"] := "\"toString\"";
__n114["property"] := __n121;
__n114["computed"] := true;
__n113["callee"] := __n114;
__n122 := [  ];
__n113["arguments"] := __n122;
__n112["left"] := __n113;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "Infinity";
__n123["raw"] := "\"Infinity\"";
__n112["right"] := __n123;
__n111["test"] := __n112;
__n124 := {  };
__n124["type"] := "BlockStatement";
__n126 := {  };
__n126["type"] := "ExpressionStatement";
__n127 := {  };
__n127["type"] := "CallExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "$ERROR";
__n127["callee"] := __n128;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "#7: (new Number(Number.POSITIVE_INFINITY)).toString() === \"Infinity\"";
__n130["raw"] := "'#7: (new Number(Number.POSITIVE_INFINITY)).toString() === \"Infinity\"'";
__n129 := [ __n130 ];
__n127["arguments"] := __n129;
__n126["expression"] := __n127;
__n125 := [ __n126 ];
__n124["body"] := __n125;
__n111["consequent"] := __n124;
__n111["alternate"] := null;
__n131 := {  };
__n131["type"] := "IfStatement";
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "!==";
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "MemberExpression";
__n135 := {  };
__n135["type"] := "NewExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "Number";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "MemberExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Number";
__n138["object"] := __n139;
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "NEGATIVE_INFINITY";
__n140["raw"] := "\"NEGATIVE_INFINITY\"";
__n138["property"] := __n140;
__n138["computed"] := true;
__n137 := [ __n138 ];
__n135["arguments"] := __n137;
__n134["object"] := __n135;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "toString";
__n141["raw"] := "\"toString\"";
__n134["property"] := __n141;
__n134["computed"] := true;
__n133["callee"] := __n134;
__n142 := [  ];
__n133["arguments"] := __n142;
__n132["left"] := __n133;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "-Infinity";
__n143["raw"] := "\"-Infinity\"";
__n132["right"] := __n143;
__n131["test"] := __n132;
__n144 := {  };
__n144["type"] := "BlockStatement";
__n146 := {  };
__n146["type"] := "ExpressionStatement";
__n147 := {  };
__n147["type"] := "CallExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "$ERROR";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := "#8: (new Number(Number.NEGATIVE_INFINITY)).toString() === \"-Infinity\"";
__n150["raw"] := "'#8: (new Number(Number.NEGATIVE_INFINITY)).toString() === \"-Infinity\"'";
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["expression"] := __n147;
__n145 := [ __n146 ];
__n144["body"] := __n145;
__n131["consequent"] := __n144;
__n131["alternate"] := null;
__n1 := [ __n2, __n19, __n36, __n54, __n73, __n91, __n111, __n131 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n151 := [  ];
__n0["variableDeclarations"] := __n151;
__n152 := [  ];
__n0["functionDeclarations"] := __n152;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}