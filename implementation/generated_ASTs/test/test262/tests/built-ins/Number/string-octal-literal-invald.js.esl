function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "0o8";
__n11["raw"] := "'0o8'";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "NaN";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "invalid digit";
__n13["raw"] := "'invalid digit'";
__n7 := [ __n8, __n12, __n13 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "assert";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "sameValue";
__n18["raw"] := "\"sameValue\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "00o0";
__n23["raw"] := "'00o0'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "NaN";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "leading zero";
__n25["raw"] := "'leading zero'";
__n19 := [ __n20, __n24, __n25 ];
__n15["arguments"] := __n19;
__n14["expression"] := __n15;
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "assert";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "sameValue";
__n30["raw"] := "\"sameValue\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Number";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "0o";
__n35["raw"] := "'0o'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "NaN";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "omitted digits";
__n37["raw"] := "'omitted digits'";
__n31 := [ __n32, __n36, __n37 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n1 := [ __n2, __n14, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [  ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}