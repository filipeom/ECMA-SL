function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "func";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "undefined";
__n6["raw"] := "'undefined'";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1:  function expression can't be declarated";
__n13["raw"] := "'#1:  function expression can\\'t be declarated'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "n_obj";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Object";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "func";
__n21["id"] := __n22;
__n23 := [  ];
__n21["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ReturnStatement";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n26["argument"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n28 := [  ];
__n24["variableDeclarations"] := __n28;
__n29 := [  ];
__n24["functionDeclarations"] := __n29;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n21["body"] := __n24;
__n21["generator"] := false;
__n21["expression"] := false;
__n21["async"] := false;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "LogicalExpression";
__n31["operator"] := "||";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "n_obj";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "constructor";
__n35["raw"] := "\"constructor\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Function";
__n32["right"] := __n36;
__n31["left"] := __n32;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "n_obj";
__n38["callee"] := __n39;
__n40 := [  ];
__n38["arguments"] := __n40;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 1.;
__n41["raw"] := "1";
__n37["right"] := __n41;
__n31["right"] := __n37;
__n30["test"] := __n31;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2: Object(function func(){return 1;}) returns function";
__n48["raw"] := "'#2: Object(function func(){return 1;}) returns function'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n30["consequent"] := __n42;
__n30["alternate"] := null;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "typeof";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "func";
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n50["left"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "undefined";
__n53["raw"] := "'undefined'";
__n50["right"] := __n53;
__n49["test"] := __n50;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#3:  function expression can't be declarated";
__n60["raw"] := "'#3:  function expression can\\'t be declarated'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n49["consequent"] := __n54;
__n49["alternate"] := null;
__n1 := [ __n2, __n14, __n30, __n49 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n61 := [ "n_obj" ];
__n0["variableDeclarations"] := __n61;
__n62 := [  ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}