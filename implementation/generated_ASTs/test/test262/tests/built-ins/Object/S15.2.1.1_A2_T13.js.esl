function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "LogicalExpression";
__n9["operator"] := "&&";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "===";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n10["right"] := __n12;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "!";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := false;
__n14["raw"] := "false";
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n9["right"] := __n13;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "obj";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "constructor";
__n19["raw"] := "\"constructor\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Boolean";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: Object(expression) returns ToObject(expression)";
__n27["raw"] := "'#1: Object(expression) returns ToObject(expression)'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "typeof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "obj";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29["left"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "object";
__n32["raw"] := "\"object\"";
__n29["right"] := __n32;
__n28["test"] := __n29;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1.1: Object(expression) returns ToObject(expression)";
__n39["raw"] := "'#1.1: Object(expression) returns ToObject(expression)'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n28["consequent"] := __n33;
__n28["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "!";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "obj";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["test"] := __n41;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: Object(expression) returns ToObject(expression)";
__n49["raw"] := "'#2: Object(expression) returns ToObject(expression)'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n40["consequent"] := __n43;
__n40["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "===";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "obj";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n51["right"] := __n53;
__n50["test"] := __n51;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#3: Object(expression) returns ToObject(expression)";
__n60["raw"] := "'#3: Object(expression) returns ToObject(expression)'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n50["consequent"] := __n54;
__n50["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n40, __n50 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n61 := [ "obj" ];
__n0["variableDeclarations"] := __n61;
__n62 := [  ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}