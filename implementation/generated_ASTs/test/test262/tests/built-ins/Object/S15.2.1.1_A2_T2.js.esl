function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "num";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.1;
__n6["raw"] := "1.1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "typeof";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "num";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n8["left"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "number";
__n11["raw"] := "'number'";
__n8["right"] := __n11;
__n7["test"] := __n8;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: num = 1.1 should be Number primitive";
__n18["raw"] := "'#1: num = 1.1 should be Number primitive'";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n7["consequent"] := __n12;
__n7["alternate"] := null;
__n19 := {  };
__n19["type"] := "VariableDeclaration";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "obj";
__n21["id"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Object";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "num";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n21["init"] := __n23;
__n20 := [ __n21 ];
__n19["declarations"] := __n20;
__n19["kind"] := "var";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "typeof";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "obj";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n28["left"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "object";
__n31["raw"] := "\"object\"";
__n28["right"] := __n31;
__n27["test"] := __n28;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: Object(1.1) returns ToObject(1.1)";
__n38["raw"] := "'#2: Object(1.1) returns ToObject(1.1)'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n27["consequent"] := __n32;
__n27["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "obj";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "constructor";
__n43["raw"] := "\"constructor\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["left"] := __n41;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Number";
__n40["right"] := __n44;
__n39["test"] := __n40;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#3: Object(1.1) returns ToObject(1.1)";
__n51["raw"] := "'#3: Object(1.1) returns ToObject(1.1)'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n39["consequent"] := __n45;
__n39["alternate"] := null;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "LogicalExpression";
__n53["operator"] := "||";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "obj";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.1;
__n56["raw"] := "1.1";
__n54["right"] := __n56;
__n53["left"] := __n54;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "===";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "obj";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.1;
__n59["raw"] := "1.1";
__n57["right"] := __n59;
__n53["right"] := __n57;
__n52["test"] := __n53;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#4: Object(1.1) returns ToObject(1.1)";
__n66["raw"] := "'#4: Object(1.1) returns ToObject(1.1)'";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n52["consequent"] := __n60;
__n52["alternate"] := null;
__n1 := [ __n2, __n7, __n19, __n27, __n39, __n52 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n67 := [ "num", "obj" ];
__n0["variableDeclarations"] := __n67;
__n68 := [  ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}