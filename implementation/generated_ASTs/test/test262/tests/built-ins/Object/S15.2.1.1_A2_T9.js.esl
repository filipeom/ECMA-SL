function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "func";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "function";
__n6["raw"] := "'function'";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: func = function(){return 1;} is NOT an function";
__n13["raw"] := "'#1: func = function(){return 1;} is NOT an function'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "n_obj";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Object";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "func";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "LogicalExpression";
__n23["operator"] := "||";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "n_obj";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "func";
__n24["right"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "n_obj";
__n28["callee"] := __n29;
__n30 := [  ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n27["right"] := __n31;
__n23["right"] := __n27;
__n22["test"] := __n23;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: Object(function) returns function";
__n38["raw"] := "'#2: Object(function) returns function'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n22["consequent"] := __n32;
__n22["alternate"] := null;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "func";
__n39["expression"] := __n40;
__n41 := {  };
__n41["type"] := "EmptyStatement";
__n1 := [ __n2, __n14, __n22, __n39, __n41 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n42 := [ "n_obj" ];
__n0["variableDeclarations"] := __n42;
__n44 := {  };
__n44["type"] := "FunctionDeclaration";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "func";
__n44["id"] := __n45;
__n46 := [  ];
__n44["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ReturnStatement";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n49["argument"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n51 := [  ];
__n47["variableDeclarations"] := __n51;
__n52 := [  ];
__n47["functionDeclarations"] := __n52;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n44["body"] := __n47;
__n44["generator"] := false;
__n44["expression"] := false;
__n44["async"] := false;
__n43 := [ __n44 ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}