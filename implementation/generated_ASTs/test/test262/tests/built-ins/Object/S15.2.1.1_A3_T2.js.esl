function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 'null;
__n9["raw"] := "\"'null\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 2.;
__n10["raw"] := "2";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 3.;
__n11["raw"] := "3";
__n8 := [ __n9, __n10, __n11 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "obj";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "constructor";
__n16["raw"] := "\"constructor\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["left"] := __n14;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Object";
__n13["right"] := __n17;
__n12["test"] := __n13;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: Since Object as a function calling is the same as function calling list of arguments can appears in braces;";
__n24["raw"] := "'#1: Since Object as a function calling is the same as function calling list of arguments can appears in braces;'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n12["consequent"] := __n18;
__n12["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "typeof";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "obj";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["left"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "object";
__n29["raw"] := "\"object\"";
__n26["right"] := __n29;
__n25["test"] := __n26;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: Since Object as a function calling is the same as function calling list of arguments can appears in braces;";
__n36["raw"] := "'#2: Since Object as a function calling is the same as function calling list of arguments can appears in braces;'";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n25["consequent"] := __n30;
__n25["alternate"] := null;
__n1 := [ __n2, __n12, __n25 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n37 := [ "obj" ];
__n0["variableDeclarations"] := __n37;
__n38 := [  ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}