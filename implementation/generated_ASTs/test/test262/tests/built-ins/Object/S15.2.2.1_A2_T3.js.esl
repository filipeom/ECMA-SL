function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.;
__n8["raw"] := "1";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 2.;
__n9["raw"] := "2";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 3.;
__n10["raw"] := "3";
__n7 := [ __n8, __n9, __n10 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "n_obj";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "arr";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arr";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "push";
__n23["raw"] := "\"push\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 4.;
__n25["raw"] := "4";
__n24 := [ __n25 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "n_obj";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "arr";
__n27["right"] := __n29;
__n26["test"] := __n27;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: When the Object constructor is called and if the value is an Object simply value returns.";
__n36["raw"] := "'#1: When the Object constructor is called and if the value is an Object simply value returns.'";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n26["consequent"] := __n30;
__n26["alternate"] := null;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n39["computed"] := true;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "n_obj";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 3.;
__n41["raw"] := "3";
__n39["property"] := __n41;
__n38["left"] := __n39;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 4.;
__n42["raw"] := "4";
__n38["right"] := __n42;
__n37["test"] := __n38;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: When the Object constructor is called and if the value is an Object simply value returns.";
__n49["raw"] := "'#2: When the Object constructor is called and if the value is an Object simply value returns.'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n37["consequent"] := __n43;
__n37["alternate"] := null;
__n1 := [ __n2, __n11, __n19, __n26, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "arr", "n_obj" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}