function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "n_obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "func";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "n_obj";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "func";
__n11["right"] := __n13;
__n10["test"] := __n11;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: When the Object constructor is called and if the value is an Object simply value returns";
__n20["raw"] := "'#1: When the Object constructor is called and if the value is an Object simply value returns'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n10["consequent"] := __n14;
__n10["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "n_obj";
__n23["callee"] := __n24;
__n25 := [  ];
__n23["arguments"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n22["right"] := __n26;
__n21["test"] := __n22;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "When the Object constructor is called and if the value is an Object simply value returns";
__n33["raw"] := "'When the Object constructor is called and if the value is an Object simply value returns'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n21["consequent"] := __n27;
__n21["alternate"] := null;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "func";
__n34["expression"] := __n35;
__n36 := {  };
__n36["type"] := "EmptyStatement";
__n1 := [ __n2, __n10, __n21, __n34, __n36 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n37 := [ "n_obj" ];
__n0["variableDeclarations"] := __n37;
__n39 := {  };
__n39["type"] := "FunctionDeclaration";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "func";
__n39["id"] := __n40;
__n41 := [  ];
__n39["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 1.;
__n45["raw"] := "1";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n46 := [  ];
__n42["variableDeclarations"] := __n46;
__n47 := [  ];
__n42["functionDeclarations"] := __n47;
__n42["codeType"] := "function";
__n42["strict"] := false;
__n39["body"] := __n42;
__n39["generator"] := false;
__n39["expression"] := false;
__n39["async"] := false;
__n38 := [ __n39 ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}