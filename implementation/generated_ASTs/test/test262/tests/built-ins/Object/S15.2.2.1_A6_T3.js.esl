function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "SequenceExpression";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 'null;
__n11["raw"] := "\"'null\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 3.;
__n13["raw"] := "3";
__n10 := [ __n11, __n12, __n13 ];
__n9["expressions"] := __n10;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 2.;
__n15["raw"] := "2";
__n8 := [ __n9, __n14, __n15 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "obj";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "constructor";
__n20["raw"] := "\"constructor\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n17["right"] := __n21;
__n16["test"] := __n17;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: Since Object as a function calling is the same as function calling list of arguments can appears in braces;";
__n28["raw"] := "'#1: Since Object as a function calling is the same as function calling list of arguments can appears in braces;'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n16["consequent"] := __n22;
__n16["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "typeof";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "obj";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["left"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "object";
__n33["raw"] := "\"object\"";
__n30["right"] := __n33;
__n29["test"] := __n30;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: Since Object as a function calling is the same as function calling list of arguments can appears in braces;";
__n40["raw"] := "'#2: Since Object as a function calling is the same as function calling list of arguments can appears in braces;'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n29["consequent"] := __n34;
__n29["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "LogicalExpression";
__n42["operator"] := "||";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "obj";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 3.;
__n45["raw"] := "3";
__n43["right"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "===";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "obj";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 3.;
__n48["raw"] := "3";
__n46["right"] := __n48;
__n42["right"] := __n46;
__n41["test"] := __n42;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "3#: Since Object as a function calling is the same as function calling list of arguments can appears in braces;";
__n55["raw"] := "'3#: Since Object as a function calling is the same as function calling list of arguments can appears in braces;'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n41["consequent"] := __n49;
__n41["alternate"] := null;
__n1 := [ __n2, __n16, __n29, __n41 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n56 := [ "obj" ];
__n0["variableDeclarations"] := __n56;
__n57 := [  ];
__n0["functionDeclarations"] := __n57;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}