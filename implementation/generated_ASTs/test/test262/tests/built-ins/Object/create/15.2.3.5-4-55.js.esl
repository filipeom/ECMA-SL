function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "proto";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "accessed";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "defineProperty";
__n17["raw"] := "\"defineProperty\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "proto";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "enumerable";
__n20["raw"] := "\"enumerable\"";
__n21 := {  };
__n21["type"] := "ObjectExpression";
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "get";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := true;
__n30["raw"] := "true";
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n31 := [  ];
__n27["variableDeclarations"] := __n31;
__n32 := [  ];
__n27["functionDeclarations"] := __n32;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n22 := [ __n23 ];
__n21["properties"] := __n22;
__n18 := [ __n19, __n20, __n21 ];
__n14["arguments"] := __n18;
__n13["expression"] := __n14;
__n33 := {  };
__n33["type"] := "VariableDeclaration";
__n35 := {  };
__n35["type"] := "VariableDeclarator";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "ConstructFun";
__n35["id"] := __n36;
__n37 := {  };
__n37["type"] := "FunctionExpression";
__n37["id"] := null;
__n38 := [  ];
__n37["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n40 := [  ];
__n39["body"] := __n40;
__n41 := [  ];
__n39["variableDeclarations"] := __n41;
__n42 := [  ];
__n39["functionDeclarations"] := __n42;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n37["body"] := __n39;
__n37["generator"] := false;
__n37["expression"] := false;
__n37["async"] := false;
__n35["init"] := __n37;
__n34 := [ __n35 ];
__n33["declarations"] := __n34;
__n33["kind"] := "var";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "AssignmentExpression";
__n44["operator"] := "=";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "ConstructFun";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "prototype";
__n47["raw"] := "\"prototype\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "proto";
__n44["right"] := __n48;
__n43["expression"] := __n44;
__n49 := {  };
__n49["type"] := "VariableDeclaration";
__n51 := {  };
__n51["type"] := "VariableDeclarator";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "descObj";
__n51["id"] := __n52;
__n53 := {  };
__n53["type"] := "NewExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "ConstructFun";
__n53["callee"] := __n54;
__n55 := [  ];
__n53["arguments"] := __n55;
__n51["init"] := __n53;
__n50 := [ __n51 ];
__n49["declarations"] := __n50;
__n49["kind"] := "var";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Object";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "defineProperty";
__n60["raw"] := "\"defineProperty\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["callee"] := __n58;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "descObj";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "enumerable";
__n63["raw"] := "\"enumerable\"";
__n64 := {  };
__n64["type"] := "ObjectExpression";
__n66 := {  };
__n66["type"] := "Property";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "get";
__n66["key"] := __n67;
__n68 := {  };
__n68["type"] := "FunctionExpression";
__n68["id"] := null;
__n69 := [  ];
__n68["params"] := __n69;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ReturnStatement";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := false;
__n73["raw"] := "false";
__n72["argument"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n74 := [  ];
__n70["variableDeclarations"] := __n74;
__n75 := [  ];
__n70["functionDeclarations"] := __n75;
__n70["codeType"] := "function";
__n70["strict"] := false;
__n68["body"] := __n70;
__n68["generator"] := false;
__n68["expression"] := false;
__n68["async"] := false;
__n66["value"] := __n68;
__n66["computed"] := false;
__n66["kind"] := "init";
__n66["shorthand"] := false;
__n65 := [ __n66 ];
__n64["properties"] := __n65;
__n61 := [ __n62, __n63, __n64 ];
__n57["arguments"] := __n61;
__n56["expression"] := __n57;
__n76 := {  };
__n76["type"] := "VariableDeclaration";
__n78 := {  };
__n78["type"] := "VariableDeclarator";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "newObj";
__n78["id"] := __n79;
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "Object";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "create";
__n83["raw"] := "\"create\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["callee"] := __n81;
__n85 := {  };
__n85["type"] := "ObjectExpression";
__n86 := [  ];
__n85["properties"] := __n86;
__n87 := {  };
__n87["type"] := "ObjectExpression";
__n89 := {  };
__n89["type"] := "Property";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "prop";
__n89["key"] := __n90;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "descObj";
__n89["value"] := __n91;
__n89["computed"] := false;
__n89["kind"] := "init";
__n89["shorthand"] := false;
__n88 := [ __n89 ];
__n87["properties"] := __n88;
__n84 := [ __n85, __n87 ];
__n80["arguments"] := __n84;
__n78["init"] := __n80;
__n77 := [ __n78 ];
__n76["declarations"] := __n77;
__n76["kind"] := "var";
__n92 := {  };
__n92["type"] := "ForInStatement";
__n93 := {  };
__n93["type"] := "VariableDeclaration";
__n95 := {  };
__n95["type"] := "VariableDeclarator";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "property";
__n95["id"] := __n96;
__n95["init"] := null;
__n94 := [ __n95 ];
__n93["declarations"] := __n94;
__n93["kind"] := "var";
__n92["left"] := __n93;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "newObj";
__n92["right"] := __n97;
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "===";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "property";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "prop";
__n103["raw"] := "\"prop\"";
__n101["right"] := __n103;
__n100["test"] := __n101;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "AssignmentExpression";
__n107["operator"] := "=";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "accessed";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := true;
__n109["raw"] := "true";
__n107["right"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n100["consequent"] := __n104;
__n100["alternate"] := null;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n92["body"] := __n98;
__n92["each"] := false;
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "MemberExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "assert";
__n112["object"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "sameValue";
__n114["raw"] := "\"sameValue\"";
__n112["property"] := __n114;
__n112["computed"] := true;
__n111["callee"] := __n112;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "accessed";
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := false;
__n117["raw"] := "false";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "accessed";
__n118["raw"] := "'accessed'";
__n115 := [ __n116, __n117, __n118 ];
__n111["arguments"] := __n115;
__n110["expression"] := __n111;
__n1 := [ __n2, __n8, __n13, __n33, __n43, __n49, __n56, __n76, __n92, __n110 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n119 := [ "proto", "accessed", "ConstructFun", "descObj", "newObj", "property" ];
__n0["variableDeclarations"] := __n119;
__n120 := [  ];
__n0["functionDeclarations"] := __n120;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}