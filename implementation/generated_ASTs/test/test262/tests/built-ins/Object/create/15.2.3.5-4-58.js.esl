function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "proto";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "accessed";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "defineProperty";
__n17["raw"] := "\"defineProperty\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "proto";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "enumerable";
__n20["raw"] := "\"enumerable\"";
__n21 := {  };
__n21["type"] := "ObjectExpression";
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "set";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n28 := [  ];
__n27["body"] := __n28;
__n29 := [  ];
__n27["variableDeclarations"] := __n29;
__n30 := [  ];
__n27["functionDeclarations"] := __n30;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n22 := [ __n23 ];
__n21["properties"] := __n22;
__n18 := [ __n19, __n20, __n21 ];
__n14["arguments"] := __n18;
__n13["expression"] := __n14;
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "ConstructFun";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n38 := [  ];
__n37["body"] := __n38;
__n39 := [  ];
__n37["variableDeclarations"] := __n39;
__n40 := [  ];
__n37["functionDeclarations"] := __n40;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["expression"] := false;
__n35["async"] := false;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "ConstructFun";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "prototype";
__n45["raw"] := "\"prototype\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "proto";
__n42["right"] := __n46;
__n41["expression"] := __n42;
__n47 := {  };
__n47["type"] := "VariableDeclaration";
__n49 := {  };
__n49["type"] := "VariableDeclarator";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "descObj";
__n49["id"] := __n50;
__n51 := {  };
__n51["type"] := "NewExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "ConstructFun";
__n51["callee"] := __n52;
__n53 := [  ];
__n51["arguments"] := __n53;
__n49["init"] := __n51;
__n48 := [ __n49 ];
__n47["declarations"] := __n48;
__n47["kind"] := "var";
__n54 := {  };
__n54["type"] := "VariableDeclaration";
__n56 := {  };
__n56["type"] := "VariableDeclarator";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "newObj";
__n56["id"] := __n57;
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Object";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "create";
__n61["raw"] := "\"create\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n58["callee"] := __n59;
__n63 := {  };
__n63["type"] := "ObjectExpression";
__n64 := [  ];
__n63["properties"] := __n64;
__n65 := {  };
__n65["type"] := "ObjectExpression";
__n67 := {  };
__n67["type"] := "Property";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "prop";
__n67["key"] := __n68;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "descObj";
__n67["value"] := __n69;
__n67["computed"] := false;
__n67["kind"] := "init";
__n67["shorthand"] := false;
__n66 := [ __n67 ];
__n65["properties"] := __n66;
__n62 := [ __n63, __n65 ];
__n58["arguments"] := __n62;
__n56["init"] := __n58;
__n55 := [ __n56 ];
__n54["declarations"] := __n55;
__n54["kind"] := "var";
__n70 := {  };
__n70["type"] := "ForInStatement";
__n71 := {  };
__n71["type"] := "VariableDeclaration";
__n73 := {  };
__n73["type"] := "VariableDeclarator";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "property";
__n73["id"] := __n74;
__n73["init"] := null;
__n72 := [ __n73 ];
__n71["declarations"] := __n72;
__n71["kind"] := "var";
__n70["left"] := __n71;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "newObj";
__n70["right"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "===";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "property";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "prop";
__n81["raw"] := "\"prop\"";
__n79["right"] := __n81;
__n78["test"] := __n79;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "AssignmentExpression";
__n85["operator"] := "=";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "accessed";
__n85["left"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := true;
__n87["raw"] := "true";
__n85["right"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n78["consequent"] := __n82;
__n78["alternate"] := null;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n70["body"] := __n76;
__n70["each"] := false;
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "assert";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "sameValue";
__n92["raw"] := "\"sameValue\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n89["callee"] := __n90;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "accessed";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := false;
__n95["raw"] := "false";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "accessed";
__n96["raw"] := "'accessed'";
__n93 := [ __n94, __n95, __n96 ];
__n89["arguments"] := __n93;
__n88["expression"] := __n89;
__n1 := [ __n2, __n8, __n13, __n31, __n41, __n47, __n54, __n70, __n88 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n97 := [ "proto", "accessed", "ConstructFun", "descObj", "newObj", "property" ];
__n0["variableDeclarations"] := __n97;
__n98 := [  ];
__n0["functionDeclarations"] := __n98;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}