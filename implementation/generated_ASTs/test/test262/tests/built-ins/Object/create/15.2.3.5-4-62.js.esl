function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "descObj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Boolean";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := false;
__n14["raw"] := "false";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "=";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "descObj";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "enumerable";
__n19["raw"] := "\"enumerable\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n16["right"] := __n20;
__n15["expression"] := __n16;
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "newObj";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Object";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "create";
__n28["raw"] := "\"create\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "ObjectExpression";
__n31 := [  ];
__n30["properties"] := __n31;
__n32 := {  };
__n32["type"] := "ObjectExpression";
__n34 := {  };
__n34["type"] := "Property";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "prop";
__n34["key"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "descObj";
__n34["value"] := __n36;
__n34["computed"] := false;
__n34["kind"] := "init";
__n34["shorthand"] := false;
__n33 := [ __n34 ];
__n32["properties"] := __n33;
__n29 := [ __n30, __n32 ];
__n25["arguments"] := __n29;
__n23["init"] := __n25;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n37 := {  };
__n37["type"] := "ForInStatement";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "property";
__n38["id"] := __n39;
__n38["init"] := null;
__n37["left"] := __n38;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "newObj";
__n37["right"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "property";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "prop";
__n46["raw"] := "\"prop\"";
__n44["right"] := __n46;
__n43["test"] := __n44;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "accessed";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := true;
__n52["raw"] := "true";
__n50["right"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n43["consequent"] := __n47;
__n43["alternate"] := null;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n37["body"] := __n41;
__n37["each"] := false;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "assert";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "accessed";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "accessed !== true";
__n58["raw"] := "'accessed !== true'";
__n56 := [ __n57, __n58 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n1 := [ __n2, __n7, __n15, __n21, __n37, __n53 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n59 := [ "accessed", "descObj", "newObj", "property" ];
__n0["variableDeclarations"] := __n59;
__n60 := [  ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}