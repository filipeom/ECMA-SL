function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "descObj";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Boolean";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := false;
__n15["raw"] := "false";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "accessed";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := false;
__n20["raw"] := "false";
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "AssignmentExpression";
__n22["operator"] := "=";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "descObj";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "enumerable";
__n25["raw"] := "\"enumerable\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n22["right"] := __n26;
__n21["expression"] := __n22;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Object";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "defineProperties";
__n31["raw"] := "\"defineProperties\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "obj";
__n34 := {  };
__n34["type"] := "ObjectExpression";
__n36 := {  };
__n36["type"] := "Property";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "prop";
__n36["key"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "descObj";
__n36["value"] := __n38;
__n36["computed"] := false;
__n36["kind"] := "init";
__n36["shorthand"] := false;
__n35 := [ __n36 ];
__n34["properties"] := __n35;
__n32 := [ __n33, __n34 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n39 := {  };
__n39["type"] := "ForInStatement";
__n40 := {  };
__n40["type"] := "VariableDeclaration";
__n42 := {  };
__n42["type"] := "VariableDeclarator";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "property";
__n42["id"] := __n43;
__n42["init"] := null;
__n41 := [ __n42 ];
__n40["declarations"] := __n41;
__n40["kind"] := "var";
__n39["left"] := __n40;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "obj";
__n39["right"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "===";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "property";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "prop";
__n50["raw"] := "\"prop\"";
__n48["right"] := __n50;
__n47["test"] := __n48;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "accessed";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := true;
__n56["raw"] := "true";
__n54["right"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n47["consequent"] := __n51;
__n47["alternate"] := null;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n39["body"] := __n45;
__n39["each"] := false;
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "assert";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "accessed";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "accessed !== true";
__n62["raw"] := "'accessed !== true'";
__n60 := [ __n61, __n62 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n1 := [ __n2, __n8, __n16, __n21, __n27, __n39, __n57 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n63 := [ "obj", "descObj", "accessed", "property" ];
__n0["variableDeclarations"] := __n63;
__n64 := [  ];
__n0["functionDeclarations"] := __n64;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}