function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "fun";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n9 := [  ];
__n8["body"] := __n9;
__n10 := [  ];
__n8["variableDeclarations"] := __n10;
__n11 := [  ];
__n8["functionDeclarations"] := __n11;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Object";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "defineProperty";
__n16["raw"] := "\"defineProperty\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "fun";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "prop";
__n19["raw"] := "\"prop\"";
__n20 := {  };
__n20["type"] := "ObjectExpression";
__n22 := {  };
__n22["type"] := "Property";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "value";
__n22["key"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 11.;
__n24["raw"] := "11";
__n22["value"] := __n24;
__n22["computed"] := false;
__n22["kind"] := "init";
__n22["shorthand"] := false;
__n25 := {  };
__n25["type"] := "Property";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "configurable";
__n25["key"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := false;
__n27["raw"] := "false";
__n25["value"] := __n27;
__n25["computed"] := false;
__n25["kind"] := "init";
__n25["shorthand"] := false;
__n21 := [ __n22, __n25 ];
__n20["properties"] := __n21;
__n17 := [ __n18, __n19, __n20 ];
__n13["arguments"] := __n17;
__n12["expression"] := __n13;
__n28 := {  };
__n28["type"] := "TryStatement";
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Object";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "defineProperties";
__n35["raw"] := "\"defineProperties\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "fun";
__n38 := {  };
__n38["type"] := "ObjectExpression";
__n40 := {  };
__n40["type"] := "Property";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "prop";
__n40["key"] := __n41;
__n42 := {  };
__n42["type"] := "ObjectExpression";
__n44 := {  };
__n44["type"] := "Property";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "value";
__n44["key"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 12.;
__n46["raw"] := "12";
__n44["value"] := __n46;
__n44["computed"] := false;
__n44["kind"] := "init";
__n44["shorthand"] := false;
__n47 := {  };
__n47["type"] := "Property";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "configurable";
__n47["key"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := true;
__n49["raw"] := "true";
__n47["value"] := __n49;
__n47["computed"] := false;
__n47["kind"] := "init";
__n47["shorthand"] := false;
__n43 := [ __n44, __n47 ];
__n42["properties"] := __n43;
__n40["value"] := __n42;
__n40["computed"] := false;
__n40["kind"] := "init";
__n40["shorthand"] := false;
__n39 := [ __n40 ];
__n38["properties"] := __n39;
__n36 := [ __n37, __n38 ];
__n32["arguments"] := __n36;
__n31["expression"] := __n32;
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "Expected an exception.";
__n54["raw"] := "\"Expected an exception.\"";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n30 := [ __n31, __n50 ];
__n29["body"] := __n30;
__n28["block"] := __n29;
__n55 := {  };
__n55["type"] := "CatchClause";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "e";
__n55["param"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "verifyEqualTo";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "fun";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "prop";
__n64["raw"] := "\"prop\"";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 11.;
__n65["raw"] := "11";
__n62 := [ __n63, __n64, __n65 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "verifyNotWritable";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "fun";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "prop";
__n71["raw"] := "\"prop\"";
__n69 := [ __n70, __n71 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "verifyNotEnumerable";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "fun";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "prop";
__n77["raw"] := "\"prop\"";
__n75 := [ __n76, __n77 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "verifyNotConfigurable";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "fun";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "prop";
__n83["raw"] := "\"prop\"";
__n81 := [ __n82, __n83 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "UnaryExpression";
__n85["operator"] := "!";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "instanceof";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "e";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "TypeError";
__n86["right"] := __n88;
__n85["argument"] := __n86;
__n85["prefix"] := true;
__n84["test"] := __n85;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "Expected TypeError, got ";
__n96["raw"] := "\"Expected TypeError, got \"";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "e";
__n95["right"] := __n97;
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n84["consequent"] := __n89;
__n84["alternate"] := null;
__n58 := [ __n59, __n66, __n72, __n78, __n84 ];
__n57["body"] := __n58;
__n55["body"] := __n57;
__n28["handler"] := __n55;
__n28["finalizer"] := null;
__n1 := [ __n2, __n12, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n98 := [ "fun" ];
__n0["variableDeclarations"] := __n98;
__n99 := [  ];
__n0["functionDeclarations"] := __n99;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}