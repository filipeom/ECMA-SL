function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Object";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "defineProperty";
__n12["raw"] := "\"defineProperty\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "arr";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "1";
__n15["raw"] := "\"1\"";
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "value";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 3.;
__n20["raw"] := "3";
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "configurable";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := false;
__n23["raw"] := "false";
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n17 := [ __n18, __n21 ];
__n16["properties"] := __n17;
__n13 := [ __n14, __n15, __n16 ];
__n9["arguments"] := __n13;
__n8["expression"] := __n9;
__n24 := {  };
__n24["type"] := "TryStatement";
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Object";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "defineProperties";
__n31["raw"] := "\"defineProperties\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "arr";
__n34 := {  };
__n34["type"] := "ObjectExpression";
__n36 := {  };
__n36["type"] := "Property";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "1";
__n37["raw"] := "\"1\"";
__n36["key"] := __n37;
__n38 := {  };
__n38["type"] := "ObjectExpression";
__n40 := {  };
__n40["type"] := "Property";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "set";
__n40["key"] := __n41;
__n42 := {  };
__n42["type"] := "FunctionExpression";
__n42["id"] := null;
__n43 := [  ];
__n42["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n45 := [  ];
__n44["body"] := __n45;
__n46 := [  ];
__n44["variableDeclarations"] := __n46;
__n47 := [  ];
__n44["functionDeclarations"] := __n47;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n42["body"] := __n44;
__n42["generator"] := false;
__n42["expression"] := false;
__n42["async"] := false;
__n40["value"] := __n42;
__n40["computed"] := false;
__n40["kind"] := "init";
__n40["shorthand"] := false;
__n39 := [ __n40 ];
__n38["properties"] := __n39;
__n36["value"] := __n38;
__n36["computed"] := false;
__n36["kind"] := "init";
__n36["shorthand"] := false;
__n35 := [ __n36 ];
__n34["properties"] := __n35;
__n32 := [ __n33, __n34 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "Expected an exception.";
__n52["raw"] := "\"Expected an exception.\"";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n26 := [ __n27, __n48 ];
__n25["body"] := __n26;
__n24["block"] := __n25;
__n53 := {  };
__n53["type"] := "CatchClause";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "e";
__n53["param"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "verifyEqualTo";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "arr";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "1";
__n62["raw"] := "\"1\"";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 3.;
__n63["raw"] := "3";
__n60 := [ __n61, __n62, __n63 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "verifyNotWritable";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "arr";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "1";
__n69["raw"] := "\"1\"";
__n67 := [ __n68, __n69 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "verifyNotEnumerable";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "arr";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "1";
__n75["raw"] := "\"1\"";
__n73 := [ __n74, __n75 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "verifyNotConfigurable";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "arr";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "1";
__n81["raw"] := "\"1\"";
__n79 := [ __n80, __n81 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n82 := {  };
__n82["type"] := "IfStatement";
__n83 := {  };
__n83["type"] := "UnaryExpression";
__n83["operator"] := "!";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "instanceof";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "e";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "TypeError";
__n84["right"] := __n86;
__n83["argument"] := __n84;
__n83["prefix"] := true;
__n82["test"] := __n83;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "Expected TypeError, got ";
__n94["raw"] := "\"Expected TypeError, got \"";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "e";
__n93["right"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n82["consequent"] := __n87;
__n82["alternate"] := null;
__n56 := [ __n57, __n64, __n70, __n76, __n82 ];
__n55["body"] := __n56;
__n53["body"] := __n55;
__n24["handler"] := __n53;
__n24["finalizer"] := null;
__n1 := [ __n2, __n8, __n24 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n96 := [ "arr" ];
__n0["variableDeclarations"] := __n96;
__n97 := [  ];
__n0["functionDeclarations"] := __n97;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}