function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 12.;
__n8["raw"] := "12";
__n7 := [ __n8 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Object";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "defineProperties";
__n13["raw"] := "\"defineProperties\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "arr";
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "0";
__n19["raw"] := "\"0\"";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "ObjectExpression";
__n22 := {  };
__n22["type"] := "Property";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "configurable";
__n22["key"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := false;
__n24["raw"] := "false";
__n22["value"] := __n24;
__n22["computed"] := false;
__n22["kind"] := "init";
__n22["shorthand"] := false;
__n21 := [ __n22 ];
__n20["properties"] := __n21;
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n17 := [ __n18 ];
__n16["properties"] := __n17;
__n14 := [ __n15, __n16 ];
__n10["arguments"] := __n14;
__n9["expression"] := __n10;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "verifyEqualTo";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "arr";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "0";
__n30["raw"] := "\"0\"";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 12.;
__n31["raw"] := "12";
__n28 := [ __n29, __n30, __n31 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "verifyWritable";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "arr";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "0";
__n37["raw"] := "\"0\"";
__n35 := [ __n36, __n37 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "verifyEnumerable";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arr";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "0";
__n43["raw"] := "\"0\"";
__n41 := [ __n42, __n43 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "verifyNotConfigurable";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "arr";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "0";
__n49["raw"] := "\"0\"";
__n47 := [ __n48, __n49 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n1 := [ __n2, __n9, __n25, __n32, __n38, __n44 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "arr" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}