function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arg";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "fun";
__n8["id"] := __n9;
__n10 := [  ];
__n8["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "AssignmentExpression";
__n14["operator"] := "=";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "arg";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "arguments";
__n14["right"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n17 := [  ];
__n11["variableDeclarations"] := __n17;
__n18 := [  ];
__n11["functionDeclarations"] := __n18;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n8["body"] := __n11;
__n8["generator"] := false;
__n8["expression"] := false;
__n8["async"] := false;
__n7["callee"] := __n8;
__n19 := [  ];
__n7["arguments"] := __n19;
__n6["expression"] := __n7;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Object";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "defineProperty";
__n24["raw"] := "\"defineProperty\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "arg";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "0";
__n27["raw"] := "\"0\"";
__n28 := {  };
__n28["type"] := "ObjectExpression";
__n30 := {  };
__n30["type"] := "Property";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "value";
__n30["key"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 0.;
__n32["raw"] := "0";
__n30["value"] := __n32;
__n30["computed"] := false;
__n30["kind"] := "init";
__n30["shorthand"] := false;
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "writable";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := false;
__n35["raw"] := "false";
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n36 := {  };
__n36["type"] := "Property";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "configurable";
__n36["key"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := false;
__n38["raw"] := "false";
__n36["value"] := __n38;
__n36["computed"] := false;
__n36["kind"] := "init";
__n36["shorthand"] := false;
__n29 := [ __n30, __n33, __n36 ];
__n28["properties"] := __n29;
__n25 := [ __n26, __n27, __n28 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n39 := {  };
__n39["type"] := "TryStatement";
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Object";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "defineProperties";
__n46["raw"] := "\"defineProperties\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "arg";
__n49 := {  };
__n49["type"] := "ObjectExpression";
__n51 := {  };
__n51["type"] := "Property";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "0";
__n52["raw"] := "\"0\"";
__n51["key"] := __n52;
__n53 := {  };
__n53["type"] := "ObjectExpression";
__n55 := {  };
__n55["type"] := "Property";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "value";
__n55["key"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 10.;
__n57["raw"] := "10";
__n55["value"] := __n57;
__n55["computed"] := false;
__n55["kind"] := "init";
__n55["shorthand"] := false;
__n54 := [ __n55 ];
__n53["properties"] := __n54;
__n51["value"] := __n53;
__n51["computed"] := false;
__n51["kind"] := "init";
__n51["shorthand"] := false;
__n50 := [ __n51 ];
__n49["properties"] := __n50;
__n47 := [ __n48, __n49 ];
__n43["arguments"] := __n47;
__n42["expression"] := __n43;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "Expected an exception.";
__n62["raw"] := "\"Expected an exception.\"";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n41 := [ __n42, __n58 ];
__n40["body"] := __n41;
__n39["block"] := __n40;
__n63 := {  };
__n63["type"] := "CatchClause";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "e";
__n63["param"] := __n64;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "verifyEqualTo";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arg";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "0";
__n72["raw"] := "\"0\"";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n70 := [ __n71, __n72, __n73 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "verifyNotWritable";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "arg";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "0";
__n79["raw"] := "\"0\"";
__n77 := [ __n78, __n79 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "verifyNotEnumerable";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "arg";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "0";
__n85["raw"] := "\"0\"";
__n83 := [ __n84, __n85 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "verifyNotConfigurable";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "arg";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "0";
__n91["raw"] := "\"0\"";
__n89 := [ __n90, __n91 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n92 := {  };
__n92["type"] := "IfStatement";
__n93 := {  };
__n93["type"] := "UnaryExpression";
__n93["operator"] := "!";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "instanceof";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "e";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "TypeError";
__n94["right"] := __n96;
__n93["argument"] := __n94;
__n93["prefix"] := true;
__n92["test"] := __n93;
__n97 := {  };
__n97["type"] := "BlockStatement";
__n99 := {  };
__n99["type"] := "ExpressionStatement";
__n100 := {  };
__n100["type"] := "CallExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "$ERROR";
__n100["callee"] := __n101;
__n103 := {  };
__n103["type"] := "BinaryExpression";
__n103["operator"] := "+";
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "Expected TypeError, got ";
__n104["raw"] := "\"Expected TypeError, got \"";
__n103["left"] := __n104;
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "e";
__n103["right"] := __n105;
__n102 := [ __n103 ];
__n100["arguments"] := __n102;
__n99["expression"] := __n100;
__n98 := [ __n99 ];
__n97["body"] := __n98;
__n92["consequent"] := __n97;
__n92["alternate"] := null;
__n66 := [ __n67, __n74, __n80, __n86, __n92 ];
__n65["body"] := __n66;
__n63["body"] := __n65;
__n39["handler"] := __n63;
__n39["finalizer"] := null;
__n1 := [ __n2, __n6, __n20, __n39 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n106 := [ "arg" ];
__n0["variableDeclarations"] := __n106;
__n107 := [  ];
__n0["functionDeclarations"] := __n107;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}