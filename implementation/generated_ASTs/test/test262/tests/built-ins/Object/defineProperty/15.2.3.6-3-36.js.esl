function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "accessed";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "boolObj";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Boolean";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "AssignmentExpression";
__n22["operator"] := "=";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "boolObj";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "enumerable";
__n25["raw"] := "\"enumerable\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n22["right"] := __n26;
__n21["expression"] := __n22;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Object";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "defineProperty";
__n31["raw"] := "\"defineProperty\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "obj";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "property";
__n34["raw"] := "\"property\"";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "boolObj";
__n32 := [ __n33, __n34, __n35 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n36 := {  };
__n36["type"] := "ForInStatement";
__n37 := {  };
__n37["type"] := "VariableDeclaration";
__n39 := {  };
__n39["type"] := "VariableDeclarator";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "prop";
__n39["id"] := __n40;
__n39["init"] := null;
__n38 := [ __n39 ];
__n37["declarations"] := __n38;
__n37["kind"] := "var";
__n36["left"] := __n37;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "obj";
__n36["right"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "===";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "prop";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "property";
__n47["raw"] := "\"property\"";
__n45["right"] := __n47;
__n44["test"] := __n45;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "AssignmentExpression";
__n51["operator"] := "=";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "accessed";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n51["right"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n44["consequent"] := __n48;
__n44["alternate"] := null;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n36["body"] := __n42;
__n36["each"] := false;
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "assert";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "accessed";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "accessed !== true";
__n59["raw"] := "'accessed !== true'";
__n57 := [ __n58, __n59 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n1 := [ __n2, __n8, __n13, __n21, __n27, __n36, __n54 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n60 := [ "obj", "accessed", "boolObj", "prop" ];
__n0["variableDeclarations"] := __n60;
__n61 := [  ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}