function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "accessed";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "AssignmentExpression";
__n14["operator"] := "=";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Number";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "prototype";
__n18["raw"] := "\"prototype\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "enumerable";
__n19["raw"] := "\"enumerable\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["left"] := __n15;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n14["right"] := __n20;
__n13["expression"] := __n14;
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "numObj";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "NewExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Number";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "-";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 2.;
__n29["raw"] := "2";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n23["init"] := __n25;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Object";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "defineProperty";
__n34["raw"] := "\"defineProperty\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "obj";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "property";
__n37["raw"] := "\"property\"";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "numObj";
__n35 := [ __n36, __n37, __n38 ];
__n31["arguments"] := __n35;
__n30["expression"] := __n31;
__n39 := {  };
__n39["type"] := "ForInStatement";
__n40 := {  };
__n40["type"] := "VariableDeclarator";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "prop";
__n40["id"] := __n41;
__n40["init"] := null;
__n39["left"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "obj";
__n39["right"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "===";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "prop";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "property";
__n48["raw"] := "\"property\"";
__n46["right"] := __n48;
__n45["test"] := __n46;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "AssignmentExpression";
__n52["operator"] := "=";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "accessed";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := true;
__n54["raw"] := "true";
__n52["right"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n45["consequent"] := __n49;
__n45["alternate"] := null;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n39["body"] := __n43;
__n39["each"] := false;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "assert";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "accessed";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "accessed !== true";
__n60["raw"] := "'accessed !== true'";
__n58 := [ __n59, __n60 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n1 := [ __n2, __n8, __n13, __n21, __n30, __n39, __n55 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n61 := [ "obj", "accessed", "numObj", "prop" ];
__n0["variableDeclarations"] := __n61;
__n62 := [  ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}