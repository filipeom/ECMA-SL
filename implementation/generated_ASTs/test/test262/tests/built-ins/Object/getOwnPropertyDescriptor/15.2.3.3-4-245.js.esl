function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "fun";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "FunctionExpression";
__n12["id"] := null;
__n13 := [  ];
__n12["params"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ReturnStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "ownSetProperty";
__n17["raw"] := "\"ownSetProperty\"";
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n18 := [  ];
__n14["variableDeclarations"] := __n18;
__n19 := [  ];
__n14["functionDeclarations"] := __n19;
__n14["codeType"] := "function";
__n14["strict"] := false;
__n12["body"] := __n14;
__n12["generator"] := false;
__n12["async"] := false;
__n12["expression"] := false;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Object";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "defineProperty";
__n24["raw"] := "\"defineProperty\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "obj";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "property";
__n27["raw"] := "\"property\"";
__n28 := {  };
__n28["type"] := "ObjectExpression";
__n30 := {  };
__n30["type"] := "Property";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "set";
__n30["key"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "fun";
__n30["value"] := __n32;
__n30["computed"] := false;
__n30["kind"] := "init";
__n30["shorthand"] := false;
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "configurable";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n29 := [ __n30, __n33 ];
__n28["properties"] := __n29;
__n25 := [ __n26, __n27, __n28 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "desc";
__n38["id"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Object";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "getOwnPropertyDescriptor";
__n43["raw"] := "\"getOwnPropertyDescriptor\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "obj";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "property";
__n46["raw"] := "\"property\"";
__n44 := [ __n45, __n46 ];
__n40["arguments"] := __n44;
__n38["init"] := __n40;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n47 := {  };
__n47["type"] := "VariableDeclaration";
__n49 := {  };
__n49["type"] := "VariableDeclarator";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "accessed";
__n49["id"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := false;
__n51["raw"] := "false";
__n49["init"] := __n51;
__n48 := [ __n49 ];
__n47["declarations"] := __n48;
__n47["kind"] := "var";
__n52 := {  };
__n52["type"] := "ForInStatement";
__n53 := {  };
__n53["type"] := "VariableDeclarator";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "prop";
__n53["id"] := __n54;
__n53["init"] := null;
__n52["left"] := __n53;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "desc";
__n52["right"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "===";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "prop";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "set";
__n61["raw"] := "\"set\"";
__n59["right"] := __n61;
__n58["test"] := __n59;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "AssignmentExpression";
__n65["operator"] := "=";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "accessed";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := true;
__n67["raw"] := "true";
__n65["right"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n58["consequent"] := __n62;
__n58["alternate"] := null;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n52["body"] := __n56;
__n52["each"] := false;
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "assert";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "accessed";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "accessed !== true";
__n73["raw"] := "'accessed !== true'";
__n71 := [ __n72, __n73 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n1 := [ __n2, __n8, __n20, __n36, __n47, __n52, __n68 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n74 := [ "obj", "fun", "desc", "accessed", "prop" ];
__n0["variableDeclarations"] := __n74;
__n75 := [  ];
__n0["functionDeclarations"] := __n75;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}