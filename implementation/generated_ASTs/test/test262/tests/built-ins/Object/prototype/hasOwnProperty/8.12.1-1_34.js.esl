function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Object";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "defineProperty";
__n12["raw"] := "\"defineProperty\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "o";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "foo";
__n15["raw"] := "\"foo\"";
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "get";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ReturnStatement";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 42.;
__n25["raw"] := "42";
__n24["argument"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n26 := [  ];
__n22["variableDeclarations"] := __n26;
__n27 := [  ];
__n22["functionDeclarations"] := __n27;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "set";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n30["id"] := null;
__n31 := [  ];
__n30["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "EmptyStatement";
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n35 := [  ];
__n32["variableDeclarations"] := __n35;
__n36 := [  ];
__n32["functionDeclarations"] := __n36;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n30["body"] := __n32;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n17 := [ __n18, __n28 ];
__n16["properties"] := __n17;
__n13 := [ __n14, __n15, __n16 ];
__n9["arguments"] := __n13;
__n8["expression"] := __n9;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "o";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "hasOwnProperty";
__n44["raw"] := "\"hasOwnProperty\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "foo";
__n46["raw"] := "\"foo\"";
__n45 := [ __n46 ];
__n41["arguments"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "o.hasOwnProperty(\"foo\") !== true";
__n47["raw"] := "'o.hasOwnProperty(\"foo\") !== true'";
__n40 := [ __n41, __n47 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n1 := [ __n2, __n8, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n48 := [ "o" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}