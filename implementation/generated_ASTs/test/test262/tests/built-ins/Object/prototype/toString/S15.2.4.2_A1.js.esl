function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Object";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["object"] := __n6;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "toString";
__n9["raw"] := "\"toString\"";
__n5["property"] := __n9;
__n5["computed"] := true;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "function";
__n10["raw"] := "\"function\"";
__n3["right"] := __n10;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: toString method defined";
__n17["raw"] := "'#1: toString method defined'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Object";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "prototype";
__n24["raw"] := "\"prototype\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["object"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "toString";
__n25["raw"] := "\"toString\"";
__n21["property"] := __n25;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n26 := [  ];
__n20["arguments"] := __n26;
__n19["left"] := __n20;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "[object ";
__n29["raw"] := "\"[object \"";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "Object";
__n30["raw"] := "\"Object\"";
__n28["right"] := __n30;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "]";
__n31["raw"] := "\"]\"";
__n27["right"] := __n31;
__n19["right"] := __n27;
__n18["test"] := __n19;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: return a string value by concatenating the three strings \"[object \", the [[Class]] property of this object, and \"]\"";
__n38["raw"] := "'#2: return a string value by concatenating the three strings \"[object \", the [[Class]] property of this object, and \"]\"'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n18["consequent"] := __n32;
__n18["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "ObjectExpression";
__n44 := [  ];
__n43["properties"] := __n44;
__n42["object"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "toString";
__n45["raw"] := "\"toString\"";
__n42["property"] := __n45;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := [  ];
__n41["arguments"] := __n46;
__n40["left"] := __n41;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "[object ";
__n49["raw"] := "\"[object \"";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Object";
__n50["raw"] := "\"Object\"";
__n48["right"] := __n50;
__n47["left"] := __n48;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "]";
__n51["raw"] := "\"]\"";
__n47["right"] := __n51;
__n40["right"] := __n47;
__n39["test"] := __n40;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: return a string value by concatenating the three strings \"[object \", the [[Class]] property of this object, and \"]\"";
__n58["raw"] := "'#3: return a string value by concatenating the three strings \"[object \", the [[Class]] property of this object, and \"]\"'";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n39["consequent"] := __n52;
__n39["alternate"] := null;
__n1 := [ __n2, __n18, __n39 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n59 := [  ];
__n0["variableDeclarations"] := __n59;
__n60 := [  ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}