function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "obj";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "variableForHelpVerify";
__n12["raw"] := "\"variableForHelpVerify\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "data";
__n13["raw"] := "\"data\"";
__n9["right"] := __n13;
__n8["expression"] := __n9;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "setFunc";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "getFunc";
__n16["expression"] := __n17;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Object";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "defineProperty";
__n22["raw"] := "\"defineProperty\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "obj";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "foo";
__n25["raw"] := "\"foo\"";
__n26 := {  };
__n26["type"] := "ObjectExpression";
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "get";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "getFunc";
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n31 := {  };
__n31["type"] := "Property";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "set";
__n31["key"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "setFunc";
__n31["value"] := __n33;
__n31["computed"] := false;
__n31["kind"] := "init";
__n31["shorthand"] := false;
__n34 := {  };
__n34["type"] := "Property";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "enumerable";
__n34["key"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n34["value"] := __n36;
__n34["computed"] := false;
__n34["kind"] := "init";
__n34["shorthand"] := false;
__n37 := {  };
__n37["type"] := "Property";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "configurable";
__n37["key"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n37["value"] := __n39;
__n37["computed"] := false;
__n37["kind"] := "init";
__n37["shorthand"] := false;
__n27 := [ __n28, __n31, __n34, __n37 ];
__n26["properties"] := __n27;
__n23 := [ __n24, __n25, __n26 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n40 := {  };
__n40["type"] := "VariableDeclaration";
__n42 := {  };
__n42["type"] := "VariableDeclarator";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "preCheck";
__n42["id"] := __n43;
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Object";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "isExtensible";
__n47["raw"] := "\"isExtensible\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "obj";
__n48 := [ __n49 ];
__n44["arguments"] := __n48;
__n42["init"] := __n44;
__n41 := [ __n42 ];
__n40["declarations"] := __n41;
__n40["kind"] := "var";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Object";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "seal";
__n54["raw"] := "\"seal\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "obj";
__n55 := [ __n56 ];
__n51["arguments"] := __n55;
__n50["expression"] := __n51;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "!";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "preCheck";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n57["test"] := __n58;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "Expected preCheck to be true, actually ";
__n67["raw"] := "'Expected preCheck to be true, actually '";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "preCheck";
__n66["right"] := __n68;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n57["consequent"] := __n60;
__n57["alternate"] := null;
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "verifyEqualTo";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "obj";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "foo";
__n74["raw"] := "\"foo\"";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "getFunc";
__n75["callee"] := __n76;
__n77 := [  ];
__n75["arguments"] := __n77;
__n72 := [ __n73, __n74, __n75 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "verifyWritable";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "obj";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "foo";
__n83["raw"] := "\"foo\"";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "variableForHelpVerify";
__n84["raw"] := "\"variableForHelpVerify\"";
__n81 := [ __n82, __n83, __n84 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "verifyEnumerable";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "obj";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "foo";
__n90["raw"] := "\"foo\"";
__n88 := [ __n89, __n90 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "verifyNotConfigurable";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "obj";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "foo";
__n96["raw"] := "\"foo\"";
__n94 := [ __n95, __n96 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n1 := [ __n2, __n8, __n14, __n16, __n18, __n40, __n50, __n57, __n69, __n78, __n85, __n91 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n97 := [ "obj", "preCheck" ];
__n0["variableDeclarations"] := __n97;
__n99 := {  };
__n99["type"] := "FunctionDeclaration";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "setFunc";
__n99["id"] := __n100;
__n101 := [ "value" ];
__n99["params"] := __n101;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "AssignmentExpression";
__n105["operator"] := "=";
__n106 := {  };
__n106["type"] := "MemberExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "obj";
__n106["object"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "variableForHelpVerify";
__n108["raw"] := "\"variableForHelpVerify\"";
__n106["property"] := __n108;
__n106["computed"] := true;
__n105["left"] := __n106;
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "value";
__n105["right"] := __n109;
__n104["expression"] := __n105;
__n103 := [ __n104 ];
__n102["body"] := __n103;
__n110 := [  ];
__n102["variableDeclarations"] := __n110;
__n111 := [  ];
__n102["functionDeclarations"] := __n111;
__n102["codeType"] := "function";
__n102["strict"] := false;
__n99["body"] := __n102;
__n99["generator"] := false;
__n99["expression"] := false;
__n99["async"] := false;
__n112 := {  };
__n112["type"] := "FunctionDeclaration";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "getFunc";
__n112["id"] := __n113;
__n114 := [  ];
__n112["params"] := __n114;
__n115 := {  };
__n115["type"] := "BlockStatement";
__n117 := {  };
__n117["type"] := "ReturnStatement";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 10.;
__n118["raw"] := "10";
__n117["argument"] := __n118;
__n116 := [ __n117 ];
__n115["body"] := __n116;
__n119 := [  ];
__n115["variableDeclarations"] := __n119;
__n120 := [  ];
__n115["functionDeclarations"] := __n120;
__n115["codeType"] := "function";
__n115["strict"] := false;
__n112["body"] := __n115;
__n112["generator"] := false;
__n112["expression"] := false;
__n112["async"] := false;
__n98 := [ __n99, __n112 ];
__n0["functionDeclarations"] := __n98;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}