function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arg";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Promise";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "all";
__n16["raw"] := "\"all\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "arg";
__n17 := [ __n18 ];
__n13["arguments"] := __n17;
__n12["object"] := __n13;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "then";
__n19["raw"] := "\"then\"";
__n12["property"] := __n19;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n21["id"] := null;
__n22 := [ "result" ];
__n21["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "result";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "length";
__n29["raw"] := "\"length\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ThrowStatement";
__n34 := {  };
__n34["type"] := "NewExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Test262Error";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "expected an empty array from Promise.all([]), got ";
__n38["raw"] := "\"expected an empty array from Promise.all([]), got \"";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "result";
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n40 := [  ];
__n23["variableDeclarations"] := __n40;
__n41 := [  ];
__n23["functionDeclarations"] := __n41;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n21["body"] := __n23;
__n21["generator"] := false;
__n21["async"] := false;
__n21["expression"] := false;
__n20 := [ __n21 ];
__n11["arguments"] := __n20;
__n10["object"] := __n11;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "then";
__n42["raw"] := "\"then\"";
__n10["property"] := __n42;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$DONE";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$DONE";
__n43 := [ __n44, __n45 ];
__n9["arguments"] := __n43;
__n8["expression"] := __n9;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "arg" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}