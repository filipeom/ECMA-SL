function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Promise";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "resolve";
__n9["raw"] := "\"resolve\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 3.;
__n11["raw"] := "3";
__n10 := [ __n11 ];
__n6["arguments"] := __n10;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "pAll";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Promise";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "all";
__n19["raw"] := "\"all\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "ArrayExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "p1";
__n22 := [ __n23 ];
__n21["elements"] := __n22;
__n20 := [ __n21 ];
__n16["arguments"] := __n20;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "pAll";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "then";
__n30["raw"] := "\"then\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [ "result" ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "!";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "instanceof";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "pAll";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Promise";
__n38["right"] := __n40;
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n36["test"] := __n37;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ThrowStatement";
__n44 := {  };
__n44["type"] := "NewExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Test262Error";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "Expected Promise.all() to be promise, actually ";
__n48["raw"] := "\"Expected Promise.all() to be promise, actually \"";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "pAll";
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n36["consequent"] := __n41;
__n36["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "!";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "instanceof";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "result";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Array";
__n52["right"] := __n54;
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n50["test"] := __n51;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ThrowStatement";
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Test262Error";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "Expected Promise.all() to be promise for an Array, actually ";
__n62["raw"] := "\"Expected Promise.all() to be promise for an Array, actually \"";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "result";
__n61["right"] := __n63;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["argument"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n50["consequent"] := __n55;
__n50["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "result";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "length";
__n68["raw"] := "\"length\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["left"] := __n66;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 1.;
__n69["raw"] := "1";
__n65["right"] := __n69;
__n64["test"] := __n65;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ThrowStatement";
__n73 := {  };
__n73["type"] := "NewExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "Test262Error";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "+";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "Expected Promise.all([p1]) to be a promise for one-element Array, actually ";
__n77["raw"] := "\"Expected Promise.all([p1]) to be a promise for one-element Array, actually \"";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "result";
__n76["right"] := __n78;
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["argument"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n64["consequent"] := __n70;
__n64["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "!==";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n81["computed"] := true;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "result";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 0.;
__n83["raw"] := "0";
__n81["property"] := __n83;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 3.;
__n84["raw"] := "3";
__n80["right"] := __n84;
__n79["test"] := __n80;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ThrowStatement";
__n88 := {  };
__n88["type"] := "NewExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "Test262Error";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "Expected result[0] to be 3, actually ";
__n92["raw"] := "\"Expected result[0] to be 3, actually \"";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "MemberExpression";
__n93["computed"] := true;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "result";
__n93["object"] := __n94;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 0.;
__n95["raw"] := "0";
__n93["property"] := __n95;
__n91["right"] := __n93;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["argument"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n79["consequent"] := __n85;
__n79["alternate"] := null;
__n35 := [ __n36, __n50, __n64, __n79 ];
__n34["body"] := __n35;
__n96 := [  ];
__n34["variableDeclarations"] := __n96;
__n97 := [  ];
__n34["functionDeclarations"] := __n97;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n31 := [ __n32 ];
__n27["arguments"] := __n31;
__n26["object"] := __n27;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "then";
__n98["raw"] := "\"then\"";
__n26["property"] := __n98;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$DONE";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "$DONE";
__n99 := [ __n100, __n101 ];
__n25["arguments"] := __n99;
__n24["expression"] := __n25;
__n1 := [ __n2, __n12, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n102 := [ "p1", "pAll" ];
__n0["variableDeclarations"] := __n102;
__n103 := [  ];
__n0["functionDeclarations"] := __n103;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}