function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "poison";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "error";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Test262Error";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Object";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "defineProperty";
__n19["raw"] := "\"defineProperty\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "poison";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Symbol";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "iterator";
__n24["raw"] := "\"iterator\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n25 := {  };
__n25["type"] := "ObjectExpression";
__n27 := {  };
__n27["type"] := "Property";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "get";
__n27["key"] := __n28;
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ThrowStatement";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "error";
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n35 := [  ];
__n31["variableDeclarations"] := __n35;
__n36 := [  ];
__n31["functionDeclarations"] := __n36;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n27["value"] := __n29;
__n27["computed"] := false;
__n27["kind"] := "init";
__n27["shorthand"] := false;
__n26 := [ __n27 ];
__n25["properties"] := __n26;
__n20 := [ __n21, __n22, __n25 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n37 := {  };
__n37["type"] := "TryStatement";
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Promise";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "allSettled";
__n48["raw"] := "\"allSettled\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["callee"] := __n46;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "poison";
__n49 := [ __n50 ];
__n45["arguments"] := __n49;
__n44["object"] := __n45;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "then";
__n51["raw"] := "\"then\"";
__n44["property"] := __n51;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n53 := {  };
__n53["type"] := "FunctionExpression";
__n53["id"] := null;
__n54 := [  ];
__n53["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$DONE";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "The promise should be rejected, but was resolved";
__n61["raw"] := "'The promise should be rejected, but was resolved'";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n62 := [  ];
__n55["variableDeclarations"] := __n62;
__n63 := [  ];
__n55["functionDeclarations"] := __n63;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n53["body"] := __n55;
__n53["generator"] := false;
__n53["async"] := false;
__n53["expression"] := false;
__n64 := {  };
__n64["type"] := "FunctionExpression";
__n64["id"] := null;
__n65 := [ "err" ];
__n64["params"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "assert";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "sameValue";
__n72["raw"] := "\"sameValue\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["callee"] := __n70;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "err";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "error";
__n73 := [ __n74, __n75 ];
__n69["arguments"] := __n73;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n76 := [  ];
__n66["variableDeclarations"] := __n76;
__n77 := [  ];
__n66["functionDeclarations"] := __n77;
__n66["codeType"] := "function";
__n66["strict"] := false;
__n64["body"] := __n66;
__n64["generator"] := false;
__n64["async"] := false;
__n64["expression"] := false;
__n52 := [ __n53, __n64 ];
__n43["arguments"] := __n52;
__n42["object"] := __n43;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "then";
__n78["raw"] := "\"then\"";
__n42["property"] := __n78;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$DONE";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$DONE";
__n79 := [ __n80, __n81 ];
__n41["arguments"] := __n79;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n37["block"] := __n38;
__n82 := {  };
__n82["type"] := "CatchClause";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "error";
__n82["param"] := __n83;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$DONE";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "TemplateLiteral";
__n92 := {  };
__n92["type"] := "TemplateElement";
__n93 := {  };
__n93["raw"] := "The promise should be rejected, but threw an exception: ";
__n93["cooked"] := "The promise should be rejected, but threw an exception: ";
__n92["value"] := __n93;
__n92["tail"] := false;
__n94 := {  };
__n94["type"] := "TemplateElement";
__n95 := {  };
__n95["raw"] := "";
__n95["cooked"] := "";
__n94["value"] := __n95;
__n94["tail"] := true;
__n91 := [ __n92, __n94 ];
__n90["quasis"] := __n91;
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "error";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "message";
__n99["raw"] := "\"message\"";
__n97["property"] := __n99;
__n97["computed"] := true;
__n96 := [ __n97 ];
__n90["expressions"] := __n96;
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n82["body"] := __n84;
__n37["handler"] := __n82;
__n37["finalizer"] := null;
__n1 := [ __n2, __n8, __n15, __n37 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n100 := [ "poison", "error" ];
__n0["variableDeclarations"] := __n100;
__n101 := [  ];
__n0["functionDeclarations"] := __n101;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}