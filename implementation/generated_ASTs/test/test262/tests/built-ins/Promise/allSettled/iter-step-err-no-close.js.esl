function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "iterStepThrows";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "poisonedDone";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "ObjectExpression";
__n13 := [  ];
__n12["properties"] := __n13;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "returnCount";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.;
__n18["raw"] := "0";
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n19 := {  };
__n19["type"] := "VariableDeclaration";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "error";
__n21["id"] := __n22;
__n23 := {  };
__n23["type"] := "NewExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Test262Error";
__n23["callee"] := __n24;
__n25 := [  ];
__n23["arguments"] := __n25;
__n21["init"] := __n23;
__n20 := [ __n21 ];
__n19["declarations"] := __n20;
__n19["kind"] := "var";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Object";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "defineProperty";
__n30["raw"] := "\"defineProperty\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "poisonedDone";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "done";
__n33["raw"] := "'done'";
__n34 := {  };
__n34["type"] := "ObjectExpression";
__n36 := {  };
__n36["type"] := "Property";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "get";
__n36["key"] := __n37;
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "error";
__n42["argument"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n44 := [  ];
__n40["variableDeclarations"] := __n44;
__n45 := [  ];
__n40["functionDeclarations"] := __n45;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n36["value"] := __n38;
__n36["computed"] := false;
__n36["kind"] := "init";
__n36["shorthand"] := false;
__n35 := [ __n36 ];
__n34["properties"] := __n35;
__n31 := [ __n32, __n33, __n34 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Object";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "defineProperty";
__n50["raw"] := "\"defineProperty\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "poisonedDone";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "value";
__n53["raw"] := "'value'";
__n54 := {  };
__n54["type"] := "ObjectExpression";
__n56 := {  };
__n56["type"] := "Property";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "get";
__n56["key"] := __n57;
__n58 := {  };
__n58["type"] := "FunctionExpression";
__n58["id"] := null;
__n59 := [  ];
__n58["params"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n61 := [  ];
__n60["body"] := __n61;
__n62 := [  ];
__n60["variableDeclarations"] := __n62;
__n63 := [  ];
__n60["functionDeclarations"] := __n63;
__n60["codeType"] := "function";
__n60["strict"] := false;
__n58["body"] := __n60;
__n58["generator"] := false;
__n58["async"] := false;
__n58["expression"] := false;
__n56["value"] := __n58;
__n56["computed"] := false;
__n56["kind"] := "init";
__n56["shorthand"] := false;
__n55 := [ __n56 ];
__n54["properties"] := __n55;
__n51 := [ __n52, __n53, __n54 ];
__n47["arguments"] := __n51;
__n46["expression"] := __n47;
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "AssignmentExpression";
__n65["operator"] := "=";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n66["computed"] := true;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "iterStepThrows";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Symbol";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "iterator";
__n70["raw"] := "\"iterator\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n66["property"] := __n68;
__n65["left"] := __n66;
__n71 := {  };
__n71["type"] := "FunctionExpression";
__n71["id"] := null;
__n72 := [  ];
__n71["params"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ReturnStatement";
__n76 := {  };
__n76["type"] := "ObjectExpression";
__n78 := {  };
__n78["type"] := "Property";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "next";
__n78["key"] := __n79;
__n80 := {  };
__n80["type"] := "FunctionExpression";
__n80["id"] := null;
__n81 := [  ];
__n80["params"] := __n81;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ReturnStatement";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "poisonedDone";
__n84["argument"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n86 := [  ];
__n82["variableDeclarations"] := __n86;
__n87 := [  ];
__n82["functionDeclarations"] := __n87;
__n82["codeType"] := "function";
__n82["strict"] := false;
__n80["body"] := __n82;
__n80["generator"] := false;
__n80["async"] := false;
__n80["expression"] := false;
__n78["value"] := __n80;
__n78["computed"] := false;
__n78["kind"] := "init";
__n78["shorthand"] := false;
__n88 := {  };
__n88["type"] := "Property";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "return";
__n88["key"] := __n89;
__n90 := {  };
__n90["type"] := "FunctionExpression";
__n90["id"] := null;
__n91 := [  ];
__n90["params"] := __n91;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "AssignmentExpression";
__n95["operator"] := "+=";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "returnCount";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 1.;
__n97["raw"] := "1";
__n95["right"] := __n97;
__n94["expression"] := __n95;
__n98 := {  };
__n98["type"] := "ReturnStatement";
__n99 := {  };
__n99["type"] := "ObjectExpression";
__n100 := [  ];
__n99["properties"] := __n100;
__n98["argument"] := __n99;
__n93 := [ __n94, __n98 ];
__n92["body"] := __n93;
__n101 := [  ];
__n92["variableDeclarations"] := __n101;
__n102 := [  ];
__n92["functionDeclarations"] := __n102;
__n92["codeType"] := "function";
__n92["strict"] := false;
__n90["body"] := __n92;
__n90["generator"] := false;
__n90["async"] := false;
__n90["expression"] := false;
__n88["value"] := __n90;
__n88["computed"] := false;
__n88["kind"] := "init";
__n88["shorthand"] := false;
__n77 := [ __n78, __n88 ];
__n76["properties"] := __n77;
__n75["argument"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n103 := [  ];
__n73["variableDeclarations"] := __n103;
__n104 := [  ];
__n73["functionDeclarations"] := __n104;
__n73["codeType"] := "function";
__n73["strict"] := false;
__n71["body"] := __n73;
__n71["generator"] := false;
__n71["async"] := false;
__n71["expression"] := false;
__n65["right"] := __n71;
__n64["expression"] := __n65;
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "MemberExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "Promise";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "allSettled";
__n109["raw"] := "\"allSettled\"";
__n107["property"] := __n109;
__n107["computed"] := true;
__n106["callee"] := __n107;
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "iterStepThrows";
__n110 := [ __n111 ];
__n106["arguments"] := __n110;
__n105["expression"] := __n106;
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "MemberExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "assert";
__n114["object"] := __n115;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "sameValue";
__n116["raw"] := "\"sameValue\"";
__n114["property"] := __n116;
__n114["computed"] := true;
__n113["callee"] := __n114;
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "returnCount";
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := 0.;
__n119["raw"] := "0";
__n117 := [ __n118, __n119 ];
__n113["arguments"] := __n117;
__n112["expression"] := __n113;
__n1 := [ __n2, __n8, __n14, __n19, __n26, __n46, __n64, __n105, __n112 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n120 := [ "iterStepThrows", "poisonedDone", "returnCount", "error" ];
__n0["variableDeclarations"] := __n120;
__n121 := [  ];
__n0["functionDeclarations"] := __n121;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}