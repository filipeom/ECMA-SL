function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "error";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Test262Error";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "nextCount";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "let";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "returnCount";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.;
__n18["raw"] := "0";
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "let";
__n19 := {  };
__n19["type"] := "VariableDeclaration";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "iter";
__n21["id"] := __n22;
__n23 := {  };
__n23["type"] := "ObjectExpression";
__n25 := {  };
__n25["type"] := "Property";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Symbol";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "iterator";
__n28["raw"] := "\"iterator\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["key"] := __n26;
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "ObjectExpression";
__n36 := {  };
__n36["type"] := "Property";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "next";
__n36["key"] := __n37;
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "+=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "nextCount";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 1.;
__n45["raw"] := "1";
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "ObjectExpression";
__n49 := {  };
__n49["type"] := "Property";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "value";
__n49["key"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 'null;
__n51["raw"] := "\"'null\"";
__n49["value"] := __n51;
__n49["computed"] := false;
__n49["kind"] := "init";
__n49["shorthand"] := false;
__n52 := {  };
__n52["type"] := "Property";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "done";
__n52["key"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := false;
__n54["raw"] := "false";
__n52["value"] := __n54;
__n52["computed"] := false;
__n52["kind"] := "init";
__n52["shorthand"] := false;
__n48 := [ __n49, __n52 ];
__n47["properties"] := __n48;
__n46["argument"] := __n47;
__n41 := [ __n42, __n46 ];
__n40["body"] := __n41;
__n55 := [  ];
__n40["variableDeclarations"] := __n55;
__n56 := [  ];
__n40["functionDeclarations"] := __n56;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n36["value"] := __n38;
__n36["computed"] := false;
__n36["kind"] := "init";
__n36["shorthand"] := false;
__n57 := {  };
__n57["type"] := "Property";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "return";
__n57["key"] := __n58;
__n59 := {  };
__n59["type"] := "FunctionExpression";
__n59["id"] := null;
__n60 := [  ];
__n59["params"] := __n60;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "AssignmentExpression";
__n64["operator"] := "+=";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "returnCount";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n64["right"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n67 := [  ];
__n61["variableDeclarations"] := __n67;
__n68 := [  ];
__n61["functionDeclarations"] := __n68;
__n61["codeType"] := "function";
__n61["strict"] := false;
__n59["body"] := __n61;
__n59["generator"] := false;
__n59["async"] := false;
__n59["expression"] := false;
__n57["value"] := __n59;
__n57["computed"] := false;
__n57["kind"] := "init";
__n57["shorthand"] := false;
__n35 := [ __n36, __n57 ];
__n34["properties"] := __n35;
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n69 := [  ];
__n31["variableDeclarations"] := __n69;
__n70 := [  ];
__n31["functionDeclarations"] := __n70;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n25["value"] := __n29;
__n25["computed"] := true;
__n25["kind"] := "init";
__n25["shorthand"] := false;
__n24 := [ __n25 ];
__n23["properties"] := __n24;
__n21["init"] := __n23;
__n20 := [ __n21 ];
__n19["declarations"] := __n20;
__n19["kind"] := "let";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "AssignmentExpression";
__n72["operator"] := "=";
__n73 := {  };
__n73["type"] := "MemberExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "Promise";
__n73["object"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "resolve";
__n75["raw"] := "\"resolve\"";
__n73["property"] := __n75;
__n73["computed"] := true;
__n72["left"] := __n73;
__n76 := {  };
__n76["type"] := "FunctionExpression";
__n76["id"] := null;
__n77 := [  ];
__n76["params"] := __n77;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ThrowStatement";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "error";
__n80["argument"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n82 := [  ];
__n78["variableDeclarations"] := __n82;
__n83 := [  ];
__n78["functionDeclarations"] := __n83;
__n78["codeType"] := "function";
__n78["strict"] := false;
__n76["body"] := __n78;
__n76["generator"] := false;
__n76["async"] := false;
__n76["expression"] := false;
__n72["right"] := __n76;
__n71["expression"] := __n72;
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "MemberExpression";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Promise";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "any";
__n92["raw"] := "\"any\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n89["callee"] := __n90;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "iter";
__n93 := [ __n94 ];
__n89["arguments"] := __n93;
__n88["object"] := __n89;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "then";
__n95["raw"] := "\"then\"";
__n88["property"] := __n95;
__n88["computed"] := true;
__n87["callee"] := __n88;
__n97 := {  };
__n97["type"] := "ArrowFunctionExpression";
__n97["id"] := null;
__n98 := [  ];
__n97["params"] := __n98;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$DONE";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "The promise should be rejected, but was resolved";
__n105["raw"] := "'The promise should be rejected, but was resolved'";
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n97["body"] := __n99;
__n97["generator"] := false;
__n97["expression"] := false;
__n97["async"] := false;
__n106 := {  };
__n106["type"] := "ArrowFunctionExpression";
__n106["id"] := null;
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "reason";
__n107 := [ __n108 ];
__n106["params"] := __n107;
__n109 := {  };
__n109["type"] := "BlockStatement";
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "MemberExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "assert";
__n113["object"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "sameValue";
__n115["raw"] := "\"sameValue\"";
__n113["property"] := __n115;
__n113["computed"] := true;
__n112["callee"] := __n113;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "nextCount";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 1.;
__n118["raw"] := "1";
__n116 := [ __n117, __n118 ];
__n112["arguments"] := __n116;
__n111["expression"] := __n112;
__n119 := {  };
__n119["type"] := "ExpressionStatement";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "MemberExpression";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "assert";
__n121["object"] := __n122;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "sameValue";
__n123["raw"] := "\"sameValue\"";
__n121["property"] := __n123;
__n121["computed"] := true;
__n120["callee"] := __n121;
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "returnCount";
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 1.;
__n126["raw"] := "1";
__n124 := [ __n125, __n126 ];
__n120["arguments"] := __n124;
__n119["expression"] := __n120;
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "MemberExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "assert";
__n129["object"] := __n130;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "sameValue";
__n131["raw"] := "\"sameValue\"";
__n129["property"] := __n131;
__n129["computed"] := true;
__n128["callee"] := __n129;
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "reason";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "error";
__n132 := [ __n133, __n134 ];
__n128["arguments"] := __n132;
__n127["expression"] := __n128;
__n110 := [ __n111, __n119, __n127 ];
__n109["body"] := __n110;
__n106["body"] := __n109;
__n106["generator"] := false;
__n106["expression"] := false;
__n106["async"] := false;
__n96 := [ __n97, __n106 ];
__n87["arguments"] := __n96;
__n86["object"] := __n87;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := "then";
__n135["raw"] := "\"then\"";
__n86["property"] := __n135;
__n86["computed"] := true;
__n85["callee"] := __n86;
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$DONE";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "$DONE";
__n136 := [ __n137, __n138 ];
__n85["arguments"] := __n136;
__n84["expression"] := __n85;
__n1 := [ __n2, __n9, __n14, __n19, __n71, __n84 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n139 := [ "error", "nextCount", "returnCount", "iter" ];
__n0["variableDeclarations"] := __n139;
__n140 := [  ];
__n0["functionDeclarations"] := __n140;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}