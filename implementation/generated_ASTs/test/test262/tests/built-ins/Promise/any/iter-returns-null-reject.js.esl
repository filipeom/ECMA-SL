function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "callCount";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Promise";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "any";
__n15["raw"] := "\"any\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "ObjectExpression";
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Symbol";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "iterator";
__n22["raw"] := "\"iterator\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["key"] := __n20;
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "UpdateExpression";
__n28["operator"] := "++";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "callCount";
__n28["argument"] := __n29;
__n28["prefix"] := false;
__n27["expression"] := __n28;
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 'null;
__n31["raw"] := "\"'null\"";
__n30["argument"] := __n31;
__n26 := [ __n27, __n30 ];
__n25["body"] := __n26;
__n32 := [  ];
__n25["variableDeclarations"] := __n32;
__n33 := [  ];
__n25["functionDeclarations"] := __n33;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n19["value"] := __n23;
__n19["computed"] := true;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n18 := [ __n19 ];
__n17["properties"] := __n18;
__n16 := [ __n17 ];
__n12["arguments"] := __n16;
__n11["object"] := __n12;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "then";
__n34["raw"] := "\"then\"";
__n11["property"] := __n34;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n36 := {  };
__n36["type"] := "ArrowFunctionExpression";
__n36["id"] := null;
__n37 := [  ];
__n36["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$DONE";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "The promise should be rejected, but was resolved";
__n44["raw"] := "'The promise should be rejected, but was resolved'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n36["body"] := __n38;
__n36["generator"] := false;
__n36["expression"] := false;
__n36["async"] := false;
__n45 := {  };
__n45["type"] := "ArrowFunctionExpression";
__n45["id"] := null;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "error";
__n46 := [ __n47 ];
__n45["params"] := __n46;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "assert";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "sameValue";
__n54["raw"] := "\"sameValue\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "callCount";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1.;
__n57["raw"] := "1";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "callCount === 1";
__n58["raw"] := "'callCount === 1'";
__n55 := [ __n56, __n57, __n58 ];
__n51["arguments"] := __n55;
__n50["expression"] := __n51;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "assert";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "instanceof";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "error";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "TypeError";
__n63["right"] := __n65;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n49 := [ __n50, __n59 ];
__n48["body"] := __n49;
__n45["body"] := __n48;
__n45["generator"] := false;
__n45["expression"] := false;
__n45["async"] := false;
__n35 := [ __n36, __n45 ];
__n10["arguments"] := __n35;
__n9["object"] := __n10;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "then";
__n66["raw"] := "\"then\"";
__n9["property"] := __n66;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$DONE";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$DONE";
__n67 := [ __n68, __n69 ];
__n8["arguments"] := __n67;
__n7["expression"] := __n8;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n70 := [ "callCount" ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}