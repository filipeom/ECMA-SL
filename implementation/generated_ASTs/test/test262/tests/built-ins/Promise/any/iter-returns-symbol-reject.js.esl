function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "callCount";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Promise";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "any";
__n15["raw"] := "\"any\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "ObjectExpression";
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Symbol";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "iterator";
__n22["raw"] := "\"iterator\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["key"] := __n20;
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "UpdateExpression";
__n28["operator"] := "++";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "callCount";
__n28["argument"] := __n29;
__n28["prefix"] := false;
__n27["expression"] := __n28;
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Symbol";
__n31["callee"] := __n32;
__n33 := [  ];
__n31["arguments"] := __n33;
__n30["argument"] := __n31;
__n26 := [ __n27, __n30 ];
__n25["body"] := __n26;
__n34 := [  ];
__n25["variableDeclarations"] := __n34;
__n35 := [  ];
__n25["functionDeclarations"] := __n35;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n19["value"] := __n23;
__n19["computed"] := true;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n18 := [ __n19 ];
__n17["properties"] := __n18;
__n16 := [ __n17 ];
__n12["arguments"] := __n16;
__n11["object"] := __n12;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "then";
__n36["raw"] := "\"then\"";
__n11["property"] := __n36;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n38 := {  };
__n38["type"] := "ArrowFunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$DONE";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "The promise should be rejected, but was resolved";
__n46["raw"] := "'The promise should be rejected, but was resolved'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["expression"] := false;
__n38["async"] := false;
__n47 := {  };
__n47["type"] := "ArrowFunctionExpression";
__n47["id"] := null;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "error";
__n48 := [ __n49 ];
__n47["params"] := __n48;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "assert";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "sameValue";
__n56["raw"] := "\"sameValue\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "callCount";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.;
__n59["raw"] := "1";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "callCount === 1";
__n60["raw"] := "'callCount === 1'";
__n57 := [ __n58, __n59, __n60 ];
__n53["arguments"] := __n57;
__n52["expression"] := __n53;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "assert";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "instanceof";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "error";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "TypeError";
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n51 := [ __n52, __n61 ];
__n50["body"] := __n51;
__n47["body"] := __n50;
__n47["generator"] := false;
__n47["expression"] := false;
__n47["async"] := false;
__n37 := [ __n38, __n47 ];
__n10["arguments"] := __n37;
__n9["object"] := __n10;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "then";
__n68["raw"] := "\"then\"";
__n9["property"] := __n68;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$DONE";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$DONE";
__n69 := [ __n70, __n71 ];
__n8["arguments"] := __n69;
__n7["expression"] := __n8;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n72 := [ "callCount" ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}