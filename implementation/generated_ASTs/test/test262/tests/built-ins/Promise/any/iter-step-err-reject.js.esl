function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "poisonedDone";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "error";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Test262Error";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "let";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Object";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "defineProperties";
__n19["raw"] := "\"defineProperties\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "poisonedDone";
__n22 := {  };
__n22["type"] := "ObjectExpression";
__n24 := {  };
__n24["type"] := "Property";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "done";
__n24["key"] := __n25;
__n26 := {  };
__n26["type"] := "ObjectExpression";
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "get";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n30["id"] := null;
__n31 := [  ];
__n30["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ThrowStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "error";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n36 := [  ];
__n32["variableDeclarations"] := __n36;
__n37 := [  ];
__n32["functionDeclarations"] := __n37;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n30["body"] := __n32;
__n30["generator"] := false;
__n30["async"] := false;
__n30["expression"] := false;
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n27 := [ __n28 ];
__n26["properties"] := __n27;
__n24["value"] := __n26;
__n24["computed"] := false;
__n24["kind"] := "init";
__n24["shorthand"] := false;
__n38 := {  };
__n38["type"] := "Property";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "value";
__n38["key"] := __n39;
__n40 := {  };
__n40["type"] := "ObjectExpression";
__n42 := {  };
__n42["type"] := "Property";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "get";
__n42["key"] := __n43;
__n44 := {  };
__n44["type"] := "FunctionExpression";
__n44["id"] := null;
__n45 := [  ];
__n44["params"] := __n45;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$DONE";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "The `value` property should not be accessed.";
__n52["raw"] := "'The `value` property should not be accessed.'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n53 := [  ];
__n46["variableDeclarations"] := __n53;
__n54 := [  ];
__n46["functionDeclarations"] := __n54;
__n46["codeType"] := "function";
__n46["strict"] := false;
__n44["body"] := __n46;
__n44["generator"] := false;
__n44["async"] := false;
__n44["expression"] := false;
__n42["value"] := __n44;
__n42["computed"] := false;
__n42["kind"] := "init";
__n42["shorthand"] := false;
__n41 := [ __n42 ];
__n40["properties"] := __n41;
__n38["value"] := __n40;
__n38["computed"] := false;
__n38["kind"] := "init";
__n38["shorthand"] := false;
__n23 := [ __n24, __n38 ];
__n22["properties"] := __n23;
__n20 := [ __n21, __n22 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n55 := {  };
__n55["type"] := "VariableDeclaration";
__n57 := {  };
__n57["type"] := "VariableDeclarator";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "iterStepThrows";
__n57["id"] := __n58;
__n59 := {  };
__n59["type"] := "ObjectExpression";
__n61 := {  };
__n61["type"] := "Property";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Symbol";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "iterator";
__n64["raw"] := "\"iterator\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["key"] := __n62;
__n65 := {  };
__n65["type"] := "FunctionExpression";
__n65["id"] := null;
__n66 := [  ];
__n65["params"] := __n66;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ReturnStatement";
__n70 := {  };
__n70["type"] := "ObjectExpression";
__n72 := {  };
__n72["type"] := "Property";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "next";
__n72["key"] := __n73;
__n74 := {  };
__n74["type"] := "FunctionExpression";
__n74["id"] := null;
__n75 := [  ];
__n74["params"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ReturnStatement";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "poisonedDone";
__n78["argument"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n80 := [  ];
__n76["variableDeclarations"] := __n80;
__n81 := [  ];
__n76["functionDeclarations"] := __n81;
__n76["codeType"] := "function";
__n76["strict"] := false;
__n74["body"] := __n76;
__n74["generator"] := false;
__n74["async"] := false;
__n74["expression"] := false;
__n72["value"] := __n74;
__n72["computed"] := false;
__n72["kind"] := "init";
__n72["shorthand"] := false;
__n71 := [ __n72 ];
__n70["properties"] := __n71;
__n69["argument"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n82 := [  ];
__n67["variableDeclarations"] := __n82;
__n83 := [  ];
__n67["functionDeclarations"] := __n83;
__n67["codeType"] := "function";
__n67["strict"] := false;
__n65["body"] := __n67;
__n65["generator"] := false;
__n65["async"] := false;
__n65["expression"] := false;
__n61["value"] := __n65;
__n61["computed"] := true;
__n61["kind"] := "init";
__n61["shorthand"] := false;
__n60 := [ __n61 ];
__n59["properties"] := __n60;
__n57["init"] := __n59;
__n56 := [ __n57 ];
__n55["declarations"] := __n56;
__n55["kind"] := "let";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "MemberExpression";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Promise";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "any";
__n92["raw"] := "\"any\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n89["callee"] := __n90;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "iterStepThrows";
__n93 := [ __n94 ];
__n89["arguments"] := __n93;
__n88["object"] := __n89;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "then";
__n95["raw"] := "\"then\"";
__n88["property"] := __n95;
__n88["computed"] := true;
__n87["callee"] := __n88;
__n97 := {  };
__n97["type"] := "ArrowFunctionExpression";
__n97["id"] := null;
__n98 := [  ];
__n97["params"] := __n98;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$DONE";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "The promise should be rejected.";
__n105["raw"] := "'The promise should be rejected.'";
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n97["body"] := __n99;
__n97["generator"] := false;
__n97["expression"] := false;
__n97["async"] := false;
__n106 := {  };
__n106["type"] := "ArrowFunctionExpression";
__n106["id"] := null;
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "reason";
__n107 := [ __n108 ];
__n106["params"] := __n107;
__n109 := {  };
__n109["type"] := "BlockStatement";
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "MemberExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "assert";
__n113["object"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "sameValue";
__n115["raw"] := "\"sameValue\"";
__n113["property"] := __n115;
__n113["computed"] := true;
__n112["callee"] := __n113;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "reason";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "error";
__n116 := [ __n117, __n118 ];
__n112["arguments"] := __n116;
__n111["expression"] := __n112;
__n110 := [ __n111 ];
__n109["body"] := __n110;
__n106["body"] := __n109;
__n106["generator"] := false;
__n106["expression"] := false;
__n106["async"] := false;
__n96 := [ __n97, __n106 ];
__n87["arguments"] := __n96;
__n86["object"] := __n87;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "then";
__n119["raw"] := "\"then\"";
__n86["property"] := __n119;
__n86["computed"] := true;
__n85["callee"] := __n86;
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "$DONE";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "$DONE";
__n120 := [ __n121, __n122 ];
__n85["arguments"] := __n120;
__n84["expression"] := __n85;
__n1 := [ __n2, __n8, __n15, __n55, __n84 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n123 := [ "poisonedDone", "error", "iterStepThrows" ];
__n0["variableDeclarations"] := __n123;
__n124 := [  ];
__n0["functionDeclarations"] := __n124;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}