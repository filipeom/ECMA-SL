function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "resolveP1";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "rejectP2";
__n6["id"] := __n7;
__n6["init"] := null;
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "sequence";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n11 := [  ];
__n10["elements"] := __n11;
__n8["init"] := __n10;
__n3 := [ __n4, __n6, __n8 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Promise";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [ "resolve", "reject" ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "AssignmentExpression";
__n27["operator"] := "=";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "resolveP1";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "resolve";
__n27["right"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n30 := [  ];
__n24["variableDeclarations"] := __n30;
__n31 := [  ];
__n24["functionDeclarations"] := __n31;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["async"] := false;
__n22["expression"] := false;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["object"] := __n19;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "then";
__n32["raw"] := "\"then\"";
__n18["property"] := __n32;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n34 := {  };
__n34["type"] := "FunctionExpression";
__n34["id"] := null;
__n35 := [ "msg" ];
__n34["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "sequence";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "push";
__n42["raw"] := "\"push\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "msg";
__n43 := [ __n44 ];
__n39["arguments"] := __n43;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n45 := [  ];
__n36["variableDeclarations"] := __n45;
__n46 := [  ];
__n36["functionDeclarations"] := __n46;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n34["body"] := __n36;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33 := [ __n34 ];
__n17["arguments"] := __n33;
__n16["object"] := __n17;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "then";
__n47["raw"] := "\"then\"";
__n16["property"] := __n47;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n49 := {  };
__n49["type"] := "FunctionExpression";
__n49["id"] := null;
__n50 := [  ];
__n49["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "assert";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "sameValue";
__n57["raw"] := "\"sameValue\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "sequence";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "length";
__n61["raw"] := "\"length\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 3.;
__n62["raw"] := "3";
__n58 := [ __n59, __n62 ];
__n54["arguments"] := __n58;
__n53["expression"] := __n54;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "checkSequence";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "sequence";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "Expected 1,2,3";
__n68["raw"] := "\"Expected 1,2,3\"";
__n66 := [ __n67, __n68 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n52 := [ __n53, __n63 ];
__n51["body"] := __n52;
__n69 := [  ];
__n51["variableDeclarations"] := __n69;
__n70 := [  ];
__n51["functionDeclarations"] := __n70;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n49["body"] := __n51;
__n49["generator"] := false;
__n49["async"] := false;
__n49["expression"] := false;
__n48 := [ __n49 ];
__n15["arguments"] := __n48;
__n14["object"] := __n15;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "then";
__n71["raw"] := "\"then\"";
__n14["property"] := __n71;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$DONE";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$DONE";
__n72 := [ __n73, __n74 ];
__n13["arguments"] := __n72;
__n12["expression"] := __n13;
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "MemberExpression";
__n78 := {  };
__n78["type"] := "NewExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Promise";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "FunctionExpression";
__n81["id"] := null;
__n82 := [ "resolve", "reject" ];
__n81["params"] := __n82;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "AssignmentExpression";
__n86["operator"] := "=";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "rejectP2";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "reject";
__n86["right"] := __n88;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n89 := [  ];
__n83["variableDeclarations"] := __n89;
__n90 := [  ];
__n83["functionDeclarations"] := __n90;
__n83["codeType"] := "function";
__n83["strict"] := false;
__n81["body"] := __n83;
__n81["generator"] := false;
__n81["async"] := false;
__n81["expression"] := false;
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["object"] := __n78;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "catch";
__n91["raw"] := "\"catch\"";
__n77["property"] := __n91;
__n77["computed"] := true;
__n76["callee"] := __n77;
__n93 := {  };
__n93["type"] := "FunctionExpression";
__n93["id"] := null;
__n94 := [ "msg" ];
__n93["params"] := __n94;
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "sequence";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "push";
__n101["raw"] := "\"push\"";
__n99["property"] := __n101;
__n99["computed"] := true;
__n98["callee"] := __n99;
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "msg";
__n102 := [ __n103 ];
__n98["arguments"] := __n102;
__n97["expression"] := __n98;
__n96 := [ __n97 ];
__n95["body"] := __n96;
__n104 := [  ];
__n95["variableDeclarations"] := __n104;
__n105 := [  ];
__n95["functionDeclarations"] := __n105;
__n95["codeType"] := "function";
__n95["strict"] := false;
__n93["body"] := __n95;
__n93["generator"] := false;
__n93["async"] := false;
__n93["expression"] := false;
__n92 := [ __n93 ];
__n76["arguments"] := __n92;
__n75["expression"] := __n76;
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "rejectP2";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 2.;
__n110["raw"] := "2";
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "resolveP1";
__n112["callee"] := __n113;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 3.;
__n115["raw"] := "3";
__n114 := [ __n115 ];
__n112["arguments"] := __n114;
__n111["expression"] := __n112;
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "MemberExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "sequence";
__n118["object"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "push";
__n120["raw"] := "\"push\"";
__n118["property"] := __n120;
__n118["computed"] := true;
__n117["callee"] := __n118;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := 1.;
__n122["raw"] := "1";
__n121 := [ __n122 ];
__n117["arguments"] := __n121;
__n116["expression"] := __n117;
__n1 := [ __n2, __n12, __n75, __n106, __n111, __n116 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n123 := [ "resolveP1", "rejectP2", "sequence" ];
__n0["variableDeclarations"] := __n123;
__n124 := [  ];
__n0["functionDeclarations"] := __n124;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}