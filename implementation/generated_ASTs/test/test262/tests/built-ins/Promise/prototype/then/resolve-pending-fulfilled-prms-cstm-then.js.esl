function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "value";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "resolve";
__n10["id"] := __n11;
__n10["init"] := null;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "thenable";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "NewExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Promise";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "FunctionExpression";
__n19["id"] := null;
__n20 := [ "resolve" ];
__n19["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "resolve";
__n24["callee"] := __n25;
__n26 := [  ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n27 := [  ];
__n21["variableDeclarations"] := __n27;
__n28 := [  ];
__n21["functionDeclarations"] := __n28;
__n21["codeType"] := "function";
__n21["strict"] := false;
__n19["body"] := __n21;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "p1";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "NewExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Promise";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "FunctionExpression";
__n36["id"] := null;
__n37 := [ "_resolve" ];
__n36["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "resolve";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "_resolve";
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n44 := [  ];
__n38["variableDeclarations"] := __n44;
__n45 := [  ];
__n38["functionDeclarations"] := __n45;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n36["body"] := __n38;
__n36["generator"] := false;
__n36["async"] := false;
__n36["expression"] := false;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n46 := {  };
__n46["type"] := "VariableDeclaration";
__n48 := {  };
__n48["type"] := "VariableDeclarator";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "p2";
__n48["id"] := __n49;
__n48["init"] := null;
__n47 := [ __n48 ];
__n46["declarations"] := __n47;
__n46["kind"] := "var";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "AssignmentExpression";
__n51["operator"] := "=";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "thenable";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "then";
__n54["raw"] := "\"then\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["left"] := __n52;
__n55 := {  };
__n55["type"] := "FunctionExpression";
__n55["id"] := null;
__n56 := [ "resolve" ];
__n55["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "resolve";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "value";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n64 := [  ];
__n57["variableDeclarations"] := __n64;
__n65 := [  ];
__n57["functionDeclarations"] := __n65;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n55["body"] := __n57;
__n55["generator"] := false;
__n55["async"] := false;
__n55["expression"] := false;
__n51["right"] := __n55;
__n50["expression"] := __n51;
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "AssignmentExpression";
__n67["operator"] := "=";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "p2";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "p1";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "then";
__n72["raw"] := "\"then\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["callee"] := __n70;
__n74 := {  };
__n74["type"] := "FunctionExpression";
__n74["id"] := null;
__n75 := [  ];
__n74["params"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ReturnStatement";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "thenable";
__n78["argument"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n80 := [  ];
__n76["variableDeclarations"] := __n80;
__n81 := [  ];
__n76["functionDeclarations"] := __n81;
__n76["codeType"] := "function";
__n76["strict"] := false;
__n74["body"] := __n76;
__n74["generator"] := false;
__n74["async"] := false;
__n74["expression"] := false;
__n73 := [ __n74 ];
__n69["arguments"] := __n73;
__n67["right"] := __n69;
__n66["expression"] := __n67;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "p2";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "then";
__n86["raw"] := "\"then\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n83["callee"] := __n84;
__n88 := {  };
__n88["type"] := "FunctionExpression";
__n88["id"] := null;
__n89 := [ "x" ];
__n88["params"] := __n89;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "IfStatement";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "!==";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "x";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "value";
__n93["right"] := __n95;
__n92["test"] := __n93;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$DONE";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "The promise should be fulfilled with the resolution value of the provided promise.";
__n102["raw"] := "'The promise should be fulfilled with the resolution value of the provided promise.'";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n103 := {  };
__n103["type"] := "ReturnStatement";
__n103["argument"] := null;
__n97 := [ __n98, __n103 ];
__n96["body"] := __n97;
__n92["consequent"] := __n96;
__n92["alternate"] := null;
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$DONE";
__n105["callee"] := __n106;
__n107 := [  ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n91 := [ __n92, __n104 ];
__n90["body"] := __n91;
__n108 := [  ];
__n90["variableDeclarations"] := __n108;
__n109 := [  ];
__n90["functionDeclarations"] := __n109;
__n90["codeType"] := "function";
__n90["strict"] := false;
__n88["body"] := __n90;
__n88["generator"] := false;
__n88["async"] := false;
__n88["expression"] := false;
__n110 := {  };
__n110["type"] := "FunctionExpression";
__n110["id"] := null;
__n111 := [  ];
__n110["params"] := __n111;
__n112 := {  };
__n112["type"] := "BlockStatement";
__n114 := {  };
__n114["type"] := "ExpressionStatement";
__n115 := {  };
__n115["type"] := "CallExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "$DONE";
__n115["callee"] := __n116;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "The promise should not be rejected.";
__n118["raw"] := "'The promise should not be rejected.'";
__n117 := [ __n118 ];
__n115["arguments"] := __n117;
__n114["expression"] := __n115;
__n113 := [ __n114 ];
__n112["body"] := __n113;
__n119 := [  ];
__n112["variableDeclarations"] := __n119;
__n120 := [  ];
__n112["functionDeclarations"] := __n120;
__n112["codeType"] := "function";
__n112["strict"] := false;
__n110["body"] := __n112;
__n110["generator"] := false;
__n110["async"] := false;
__n110["expression"] := false;
__n87 := [ __n88, __n110 ];
__n83["arguments"] := __n87;
__n82["expression"] := __n83;
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "resolve";
__n122["callee"] := __n123;
__n124 := [  ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n1 := [ __n2, __n8, __n12, __n29, __n46, __n50, __n66, __n82, __n121 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n125 := [ "value", "resolve", "thenable", "p1", "p2" ];
__n0["variableDeclarations"] := __n125;
__n126 := [  ];
__n0["functionDeclarations"] := __n126;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}