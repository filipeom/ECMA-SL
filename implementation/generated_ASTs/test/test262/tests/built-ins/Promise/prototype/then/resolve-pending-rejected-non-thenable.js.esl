function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "nonThenable";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "then";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 'null;
__n10["raw"] := "\"'null\"";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "reject";
__n13["id"] := __n14;
__n13["init"] := null;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "p1";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Promise";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [ "_", "_reject" ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "AssignmentExpression";
__n27["operator"] := "=";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "reject";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "_reject";
__n27["right"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n30 := [  ];
__n24["variableDeclarations"] := __n30;
__n31 := [  ];
__n24["functionDeclarations"] := __n31;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["async"] := false;
__n22["expression"] := false;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "p2";
__n34["id"] := __n35;
__n34["init"] := null;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "AssignmentExpression";
__n37["operator"] := "=";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "p2";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "p1";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "then";
__n42["raw"] := "\"then\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "FunctionExpression";
__n44["id"] := null;
__n45 := [  ];
__n44["params"] := __n45;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n47 := [  ];
__n46["body"] := __n47;
__n48 := [  ];
__n46["variableDeclarations"] := __n48;
__n49 := [  ];
__n46["functionDeclarations"] := __n49;
__n46["codeType"] := "function";
__n46["strict"] := false;
__n44["body"] := __n46;
__n44["generator"] := false;
__n44["async"] := false;
__n44["expression"] := false;
__n50 := {  };
__n50["type"] := "FunctionExpression";
__n50["id"] := null;
__n51 := [  ];
__n50["params"] := __n51;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ReturnStatement";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "nonThenable";
__n54["argument"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n56 := [  ];
__n52["variableDeclarations"] := __n56;
__n57 := [  ];
__n52["functionDeclarations"] := __n57;
__n52["codeType"] := "function";
__n52["strict"] := false;
__n50["body"] := __n52;
__n50["generator"] := false;
__n50["async"] := false;
__n50["expression"] := false;
__n43 := [ __n44, __n50 ];
__n39["arguments"] := __n43;
__n37["right"] := __n39;
__n36["expression"] := __n37;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "p2";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "then";
__n62["raw"] := "\"then\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n64 := {  };
__n64["type"] := "FunctionExpression";
__n64["id"] := null;
__n65 := [ "value" ];
__n64["params"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "value";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "nonThenable";
__n69["right"] := __n71;
__n68["test"] := __n69;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$DONE";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "The promise should be fulfilled with the provided value.";
__n78["raw"] := "'The promise should be fulfilled with the provided value.'";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n79 := {  };
__n79["type"] := "ReturnStatement";
__n79["argument"] := null;
__n73 := [ __n74, __n79 ];
__n72["body"] := __n73;
__n68["consequent"] := __n72;
__n68["alternate"] := null;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$DONE";
__n81["callee"] := __n82;
__n83 := [  ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n67 := [ __n68, __n80 ];
__n66["body"] := __n67;
__n84 := [  ];
__n66["variableDeclarations"] := __n84;
__n85 := [  ];
__n66["functionDeclarations"] := __n85;
__n66["codeType"] := "function";
__n66["strict"] := false;
__n64["body"] := __n66;
__n64["generator"] := false;
__n64["async"] := false;
__n64["expression"] := false;
__n86 := {  };
__n86["type"] := "FunctionExpression";
__n86["id"] := null;
__n87 := [  ];
__n86["params"] := __n87;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "$DONE";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "The promise should not be rejected.";
__n94["raw"] := "'The promise should not be rejected.'";
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n95 := [  ];
__n88["variableDeclarations"] := __n95;
__n96 := [  ];
__n88["functionDeclarations"] := __n96;
__n88["codeType"] := "function";
__n88["strict"] := false;
__n86["body"] := __n88;
__n86["generator"] := false;
__n86["async"] := false;
__n86["expression"] := false;
__n63 := [ __n64, __n86 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "reject";
__n98["callee"] := __n99;
__n100 := [  ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n1 := [ __n2, __n11, __n15, __n32, __n36, __n58, __n97 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n101 := [ "nonThenable", "reject", "p1", "p2" ];
__n0["variableDeclarations"] := __n101;
__n102 := [  ];
__n0["functionDeclarations"] := __n102;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}