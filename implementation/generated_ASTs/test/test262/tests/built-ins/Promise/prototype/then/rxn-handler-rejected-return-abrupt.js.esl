function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "value";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "p1";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Promise";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [ "_", "reject" ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "reject";
__n20["callee"] := __n21;
__n22 := [  ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n23 := [  ];
__n17["variableDeclarations"] := __n23;
__n24 := [  ];
__n17["functionDeclarations"] := __n24;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "p2";
__n27["id"] := __n28;
__n27["init"] := null;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "AssignmentExpression";
__n30["operator"] := "=";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "p2";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "p1";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "then";
__n35["raw"] := "\"then\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "FunctionExpression";
__n37["id"] := null;
__n38 := [  ];
__n37["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n40 := [  ];
__n39["body"] := __n40;
__n41 := [  ];
__n39["variableDeclarations"] := __n41;
__n42 := [  ];
__n39["functionDeclarations"] := __n42;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n37["body"] := __n39;
__n37["generator"] := false;
__n37["async"] := false;
__n37["expression"] := false;
__n43 := {  };
__n43["type"] := "FunctionExpression";
__n43["id"] := null;
__n44 := [  ];
__n43["params"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ThrowStatement";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "value";
__n47["argument"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n49 := [  ];
__n45["variableDeclarations"] := __n49;
__n50 := [  ];
__n45["functionDeclarations"] := __n50;
__n45["codeType"] := "function";
__n45["strict"] := false;
__n43["body"] := __n45;
__n43["generator"] := false;
__n43["async"] := false;
__n43["expression"] := false;
__n36 := [ __n37, __n43 ];
__n32["arguments"] := __n36;
__n30["right"] := __n32;
__n29["expression"] := __n30;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "p2";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "then";
__n55["raw"] := "\"then\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "FunctionExpression";
__n57["id"] := null;
__n58 := [  ];
__n57["params"] := __n58;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$DONE";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "The `onFulfilled` handler should not be invoked.";
__n65["raw"] := "'The `onFulfilled` handler should not be invoked.'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n66 := [  ];
__n59["variableDeclarations"] := __n66;
__n67 := [  ];
__n59["functionDeclarations"] := __n67;
__n59["codeType"] := "function";
__n59["strict"] := false;
__n57["body"] := __n59;
__n57["generator"] := false;
__n57["async"] := false;
__n57["expression"] := false;
__n68 := {  };
__n68["type"] := "FunctionExpression";
__n68["id"] := null;
__n69 := [ "x" ];
__n68["params"] := __n69;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "IfStatement";
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "!==";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "x";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "value";
__n73["right"] := __n75;
__n72["test"] := __n73;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$DONE";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "The `onRejected` handler should be invoked with the promise result.";
__n82["raw"] := "'The `onRejected` handler should be invoked with the promise result.'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n83 := {  };
__n83["type"] := "ReturnStatement";
__n83["argument"] := null;
__n77 := [ __n78, __n83 ];
__n76["body"] := __n77;
__n72["consequent"] := __n76;
__n72["alternate"] := null;
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$DONE";
__n85["callee"] := __n86;
__n87 := [  ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n71 := [ __n72, __n84 ];
__n70["body"] := __n71;
__n88 := [  ];
__n70["variableDeclarations"] := __n88;
__n89 := [  ];
__n70["functionDeclarations"] := __n89;
__n70["codeType"] := "function";
__n70["strict"] := false;
__n68["body"] := __n70;
__n68["generator"] := false;
__n68["async"] := false;
__n68["expression"] := false;
__n56 := [ __n57, __n68 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n1 := [ __n2, __n8, __n25, __n29, __n51 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n90 := [ "value", "p1", "p2" ];
__n0["variableDeclarations"] := __n90;
__n91 := [  ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}