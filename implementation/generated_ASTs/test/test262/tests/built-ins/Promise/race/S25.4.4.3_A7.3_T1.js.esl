function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "resolveP1";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "rejectP2";
__n6["id"] := __n7;
__n6["init"] := null;
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "p1";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "NewExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Promise";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [ "resolve" ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "resolveP1";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "resolve";
__n18["right"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n21 := [  ];
__n15["variableDeclarations"] := __n21;
__n22 := [  ];
__n15["functionDeclarations"] := __n22;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n8["init"] := __n10;
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "p2";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "NewExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Promise";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "FunctionExpression";
__n28["id"] := null;
__n29 := [ "resolve", "reject" ];
__n28["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "AssignmentExpression";
__n33["operator"] := "=";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "rejectP2";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "reject";
__n33["right"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n36 := [  ];
__n30["variableDeclarations"] := __n36;
__n37 := [  ];
__n30["functionDeclarations"] := __n37;
__n30["codeType"] := "function";
__n30["strict"] := false;
__n28["body"] := __n30;
__n28["generator"] := false;
__n28["async"] := false;
__n28["expression"] := false;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n23["init"] := __n25;
__n3 := [ __n4, __n6, __n8, __n23 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "rejectP2";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "NewExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Error";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "Promise.race should not see this if P1 already resolved";
__n45["raw"] := "\"Promise.race should not see this if P1 already resolved\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "resolveP1";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Promise";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "race";
__n59["raw"] := "\"race\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n61 := {  };
__n61["type"] := "ArrayExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "p1";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "p2";
__n62 := [ __n63, __n64 ];
__n61["elements"] := __n62;
__n60 := [ __n61 ];
__n56["arguments"] := __n60;
__n55["object"] := __n56;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "then";
__n65["raw"] := "\"then\"";
__n55["property"] := __n65;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n67 := {  };
__n67["type"] := "FunctionExpression";
__n67["id"] := null;
__n68 := [ "arg" ];
__n67["params"] := __n68;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "IfStatement";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "!==";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "arg";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 1.;
__n74["raw"] := "1";
__n72["right"] := __n74;
__n71["test"] := __n72;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ThrowStatement";
__n78 := {  };
__n78["type"] := "NewExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Test262Error";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "+";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "Expected fulfillment with 1, got ";
__n82["raw"] := "\"Expected fulfillment with 1, got \"";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "arg";
__n81["right"] := __n83;
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["argument"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n71["consequent"] := __n75;
__n71["alternate"] := null;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n84 := [  ];
__n69["variableDeclarations"] := __n84;
__n85 := [  ];
__n69["functionDeclarations"] := __n85;
__n69["codeType"] := "function";
__n69["strict"] := false;
__n67["body"] := __n69;
__n67["generator"] := false;
__n67["async"] := false;
__n67["expression"] := false;
__n66 := [ __n67 ];
__n54["arguments"] := __n66;
__n53["object"] := __n54;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "then";
__n86["raw"] := "\"then\"";
__n53["property"] := __n86;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$DONE";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$DONE";
__n87 := [ __n88, __n89 ];
__n52["arguments"] := __n87;
__n51["expression"] := __n52;
__n1 := [ __n2, __n38, __n46, __n51 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n90 := [ "resolveP1", "rejectP2", "p1", "p2" ];
__n0["variableDeclarations"] := __n90;
__n91 := [  ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}