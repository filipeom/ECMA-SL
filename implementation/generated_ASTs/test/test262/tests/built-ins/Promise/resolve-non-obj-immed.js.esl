function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "returnValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 'null;
__n6["raw"] := "\"'null\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "promise";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Promise";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "FunctionExpression";
__n14["id"] := null;
__n15 := [ "resolve" ];
__n14["params"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "returnValue";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "resolve";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 45.;
__n24["raw"] := "45";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n19["right"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n25 := [  ];
__n16["variableDeclarations"] := __n25;
__n26 := [  ];
__n16["functionDeclarations"] := __n26;
__n16["codeType"] := "function";
__n16["strict"] := false;
__n14["body"] := __n16;
__n14["generator"] := false;
__n14["async"] := false;
__n14["expression"] := false;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "assert";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "sameValue";
__n31["raw"] := "\"sameValue\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "returnValue";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "undefined";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "\"resolve\" return value";
__n35["raw"] := "'\"resolve\" return value'";
__n32 := [ __n33, __n34, __n35 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "promise";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "then";
__n40["raw"] := "\"then\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "FunctionExpression";
__n42["id"] := null;
__n43 := [ "value" ];
__n42["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "value";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 45.;
__n49["raw"] := "45";
__n47["right"] := __n49;
__n46["test"] := __n47;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$DONE";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "The promise should be fulfilled with the provided value.";
__n56["raw"] := "'The promise should be fulfilled with the provided value.'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n57 := {  };
__n57["type"] := "ReturnStatement";
__n57["argument"] := null;
__n51 := [ __n52, __n57 ];
__n50["body"] := __n51;
__n46["consequent"] := __n50;
__n46["alternate"] := null;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$DONE";
__n59["callee"] := __n60;
__n61 := [  ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n45 := [ __n46, __n58 ];
__n44["body"] := __n45;
__n62 := [  ];
__n44["variableDeclarations"] := __n62;
__n63 := [  ];
__n44["functionDeclarations"] := __n63;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n42["body"] := __n44;
__n42["generator"] := false;
__n42["async"] := false;
__n42["expression"] := false;
__n64 := {  };
__n64["type"] := "FunctionExpression";
__n64["id"] := null;
__n65 := [  ];
__n64["params"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$DONE";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "The promise should not be rejected.";
__n72["raw"] := "'The promise should not be rejected.'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n73 := [  ];
__n66["variableDeclarations"] := __n73;
__n74 := [  ];
__n66["functionDeclarations"] := __n74;
__n66["codeType"] := "function";
__n66["strict"] := false;
__n64["body"] := __n66;
__n64["generator"] := false;
__n64["async"] := false;
__n64["expression"] := false;
__n41 := [ __n42, __n64 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n1 := [ __n2, __n7, __n27, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n75 := [ "returnValue", "promise" ];
__n0["variableDeclarations"] := __n75;
__n76 := [  ];
__n0["functionDeclarations"] := __n76;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}