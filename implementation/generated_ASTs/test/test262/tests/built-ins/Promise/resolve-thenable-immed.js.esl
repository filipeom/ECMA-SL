function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "returnValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 'null;
__n6["raw"] := "\"'null\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "value";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n12 := [  ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "thenable";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Promise";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [ "resolve" ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "resolve";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "value";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n29 := [  ];
__n22["variableDeclarations"] := __n29;
__n30 := [  ];
__n22["functionDeclarations"] := __n30;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["async"] := false;
__n20["expression"] := false;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "promise";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Promise";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [ "resolve" ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "returnValue";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "resolve";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "thenable";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n49 := [  ];
__n40["variableDeclarations"] := __n49;
__n50 := [  ];
__n40["functionDeclarations"] := __n50;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "sameValue";
__n55["raw"] := "\"sameValue\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "returnValue";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "\"resolve\" return value";
__n59["raw"] := "'\"resolve\" return value'";
__n56 := [ __n57, __n58, __n59 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "promise";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "then";
__n64["raw"] := "\"then\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "FunctionExpression";
__n66["id"] := null;
__n67 := [ "val" ];
__n66["params"] := __n67;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "val";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "value";
__n71["right"] := __n73;
__n70["test"] := __n71;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$DONE";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "The promise should be fulfilled with the provided value.";
__n80["raw"] := "'The promise should be fulfilled with the provided value.'";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n81 := {  };
__n81["type"] := "ReturnStatement";
__n81["argument"] := null;
__n75 := [ __n76, __n81 ];
__n74["body"] := __n75;
__n70["consequent"] := __n74;
__n70["alternate"] := null;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$DONE";
__n83["callee"] := __n84;
__n85 := [  ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n69 := [ __n70, __n82 ];
__n68["body"] := __n69;
__n86 := [  ];
__n68["variableDeclarations"] := __n86;
__n87 := [  ];
__n68["functionDeclarations"] := __n87;
__n68["codeType"] := "function";
__n68["strict"] := false;
__n66["body"] := __n68;
__n66["generator"] := false;
__n66["async"] := false;
__n66["expression"] := false;
__n88 := {  };
__n88["type"] := "FunctionExpression";
__n88["id"] := null;
__n89 := [  ];
__n88["params"] := __n89;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$DONE";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "The promise should not be rejected.";
__n96["raw"] := "'The promise should not be rejected.'";
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n97 := [  ];
__n90["variableDeclarations"] := __n97;
__n98 := [  ];
__n90["functionDeclarations"] := __n98;
__n90["codeType"] := "function";
__n90["strict"] := false;
__n88["body"] := __n90;
__n88["generator"] := false;
__n88["async"] := false;
__n88["expression"] := false;
__n65 := [ __n66, __n88 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n1 := [ __n2, __n7, __n13, __n31, __n51, __n60 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n99 := [ "returnValue", "value", "thenable", "promise" ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}