function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "nonThenable";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "then";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 'null;
__n10["raw"] := "\"'null\"";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Promise";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "resolve";
__n19["raw"] := "\"resolve\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "nonThenable";
__n20 := [ __n21 ];
__n16["arguments"] := __n20;
__n15["object"] := __n16;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "then";
__n22["raw"] := "\"then\"";
__n15["property"] := __n22;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n24 := {  };
__n24["type"] := "FunctionExpression";
__n24["id"] := null;
__n25 := [ "value" ];
__n24["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "assert";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "sameValue";
__n32["raw"] := "\"sameValue\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "value";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "nonThenable";
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n36 := [  ];
__n26["variableDeclarations"] := __n36;
__n37 := [  ];
__n26["functionDeclarations"] := __n37;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n24["body"] := __n26;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n23 := [ __n24 ];
__n14["arguments"] := __n23;
__n13["object"] := __n14;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "then";
__n38["raw"] := "\"then\"";
__n13["property"] := __n38;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$DONE";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$DONE";
__n39 := [ __n40, __n41 ];
__n12["arguments"] := __n39;
__n11["expression"] := __n12;
__n1 := [ __n2, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [ "nonThenable" ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}