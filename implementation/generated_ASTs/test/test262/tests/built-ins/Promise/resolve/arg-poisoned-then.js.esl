function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "poisonedThen";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "err";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Test262Error";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Object";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "defineProperty";
__n19["raw"] := "\"defineProperty\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "poisonedThen";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "then";
__n22["raw"] := "'then'";
__n23 := {  };
__n23["type"] := "ObjectExpression";
__n25 := {  };
__n25["type"] := "Property";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "get";
__n25["key"] := __n26;
__n27 := {  };
__n27["type"] := "FunctionExpression";
__n27["id"] := null;
__n28 := [  ];
__n27["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ThrowStatement";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "err";
__n31["argument"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n33 := [  ];
__n29["variableDeclarations"] := __n33;
__n34 := [  ];
__n29["functionDeclarations"] := __n34;
__n29["codeType"] := "function";
__n29["strict"] := false;
__n27["body"] := __n29;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n25["value"] := __n27;
__n25["computed"] := false;
__n25["kind"] := "init";
__n25["shorthand"] := false;
__n24 := [ __n25 ];
__n23["properties"] := __n24;
__n20 := [ __n21, __n22, __n23 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Promise";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "resolve";
__n43["raw"] := "\"resolve\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "poisonedThen";
__n44 := [ __n45 ];
__n40["arguments"] := __n44;
__n39["object"] := __n40;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "then";
__n46["raw"] := "\"then\"";
__n39["property"] := __n46;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n48 := {  };
__n48["type"] := "FunctionExpression";
__n48["id"] := null;
__n49 := [  ];
__n48["params"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ThrowStatement";
__n53 := {  };
__n53["type"] := "NewExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Test262Error";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "Promise should be rejected when retrieving `then` property throws an error";
__n56["raw"] := "'Promise should be rejected when retrieving `then` property throws an error'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["argument"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n57 := [  ];
__n50["variableDeclarations"] := __n57;
__n58 := [  ];
__n50["functionDeclarations"] := __n58;
__n50["codeType"] := "function";
__n50["strict"] := false;
__n48["body"] := __n50;
__n48["generator"] := false;
__n48["async"] := false;
__n48["expression"] := false;
__n59 := {  };
__n59["type"] := "FunctionExpression";
__n59["id"] := null;
__n60 := [ "reason" ];
__n59["params"] := __n60;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "assert";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "sameValue";
__n67["raw"] := "\"sameValue\"";
__n65["property"] := __n67;
__n65["computed"] := true;
__n64["callee"] := __n65;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "reason";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "err";
__n68 := [ __n69, __n70 ];
__n64["arguments"] := __n68;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n71 := [  ];
__n61["variableDeclarations"] := __n71;
__n72 := [  ];
__n61["functionDeclarations"] := __n72;
__n61["codeType"] := "function";
__n61["strict"] := false;
__n59["body"] := __n61;
__n59["generator"] := false;
__n59["async"] := false;
__n59["expression"] := false;
__n47 := [ __n48, __n59 ];
__n38["arguments"] := __n47;
__n37["object"] := __n38;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "then";
__n73["raw"] := "\"then\"";
__n37["property"] := __n73;
__n37["computed"] := true;
__n36["callee"] := __n37;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$DONE";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$DONE";
__n74 := [ __n75, __n76 ];
__n36["arguments"] := __n74;
__n35["expression"] := __n36;
__n1 := [ __n2, __n8, __n15, __n35 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n77 := [ "poisonedThen", "err" ];
__n0["variableDeclarations"] := __n77;
__n78 := [  ];
__n0["functionDeclarations"] := __n78;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}