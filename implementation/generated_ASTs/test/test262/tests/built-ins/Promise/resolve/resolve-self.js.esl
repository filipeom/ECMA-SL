function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "resolve";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "reject";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "promise";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Promise";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [ "_resolve", "_reject" ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "resolve";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "_resolve";
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "reject";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "_reject";
__n24["right"] := __n26;
__n23["expression"] := __n24;
__n18 := [ __n19, __n23 ];
__n17["body"] := __n18;
__n27 := [  ];
__n17["variableDeclarations"] := __n27;
__n28 := [  ];
__n17["functionDeclarations"] := __n28;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "P";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [ "executor" ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "executor";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "resolve";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "reject";
__n40 := [ __n41, __n42 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "promise";
__n43["argument"] := __n44;
__n36 := [ __n37, __n43 ];
__n35["body"] := __n36;
__n45 := [  ];
__n35["variableDeclarations"] := __n45;
__n46 := [  ];
__n35["functionDeclarations"] := __n46;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["async"] := false;
__n33["expression"] := false;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Promise";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "resolve";
__n54["raw"] := "\"resolve\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["object"] := __n52;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "call";
__n55["raw"] := "\"call\"";
__n51["property"] := __n55;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "P";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "promise";
__n56 := [ __n57, __n58 ];
__n50["arguments"] := __n56;
__n49["object"] := __n50;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "then";
__n59["raw"] := "\"then\"";
__n49["property"] := __n59;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n61 := {  };
__n61["type"] := "FunctionExpression";
__n61["id"] := null;
__n62 := [  ];
__n61["params"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$DONE";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "The promise should not be fulfilled.";
__n69["raw"] := "'The promise should not be fulfilled.'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n70 := [  ];
__n63["variableDeclarations"] := __n70;
__n71 := [  ];
__n63["functionDeclarations"] := __n71;
__n63["codeType"] := "function";
__n63["strict"] := false;
__n61["body"] := __n63;
__n61["generator"] := false;
__n61["async"] := false;
__n61["expression"] := false;
__n72 := {  };
__n72["type"] := "FunctionExpression";
__n72["id"] := null;
__n73 := [ "value" ];
__n72["params"] := __n73;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "!";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "value";
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["test"] := __n77;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "$DONE";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "The promise should be rejected with a value.";
__n85["raw"] := "'The promise should be rejected with a value.'";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["expression"] := __n82;
__n86 := {  };
__n86["type"] := "ReturnStatement";
__n86["argument"] := null;
__n80 := [ __n81, __n86 ];
__n79["body"] := __n80;
__n76["consequent"] := __n79;
__n76["alternate"] := null;
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "!==";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "value";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "constructor";
__n91["raw"] := "\"constructor\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n88["left"] := __n89;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "TypeError";
__n88["right"] := __n92;
__n87["test"] := __n88;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$DONE";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "The promise should be rejected with a TypeError instance.";
__n99["raw"] := "'The promise should be rejected with a TypeError instance.'";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n100 := {  };
__n100["type"] := "ReturnStatement";
__n100["argument"] := null;
__n94 := [ __n95, __n100 ];
__n93["body"] := __n94;
__n87["consequent"] := __n93;
__n87["alternate"] := null;
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$DONE";
__n102["callee"] := __n103;
__n104 := [  ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n75 := [ __n76, __n87, __n101 ];
__n74["body"] := __n75;
__n105 := [  ];
__n74["variableDeclarations"] := __n105;
__n106 := [  ];
__n74["functionDeclarations"] := __n106;
__n74["codeType"] := "function";
__n74["strict"] := false;
__n72["body"] := __n74;
__n72["generator"] := false;
__n72["async"] := false;
__n72["expression"] := false;
__n60 := [ __n61, __n72 ];
__n48["arguments"] := __n60;
__n47["expression"] := __n48;
__n1 := [ __n2, __n8, __n29, __n47 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n107 := [ "resolve", "reject", "promise", "P" ];
__n0["variableDeclarations"] := __n107;
__n108 := [  ];
__n0["functionDeclarations"] := __n108;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}