function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/Java(?!Script)([A-Z]\\w*)/";
__n8["raw"] := "/Java(?!Script)([A-Z]\\w*)/";
__n8["source"] := "Java(?!Script)([A-Z]\\w*)";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Char";
__n12["value"] := "J";
__n12["kind"] := "simple";
__n12["symbol"] := "J";
__n12["codePoint"] := 74.;
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "a";
__n13["kind"] := "simple";
__n13["symbol"] := "a";
__n13["codePoint"] := 97.;
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "v";
__n14["kind"] := "simple";
__n14["symbol"] := "v";
__n14["codePoint"] := 118.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "a";
__n15["kind"] := "simple";
__n15["symbol"] := "a";
__n15["codePoint"] := 97.;
__n16 := {  };
__n16["type"] := "Assertion";
__n16["kind"] := "Lookahead";
__n16["negative"] := true;
__n17 := {  };
__n17["type"] := "Alternative";
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "S";
__n19["kind"] := "simple";
__n19["symbol"] := "S";
__n19["codePoint"] := 83.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "c";
__n20["kind"] := "simple";
__n20["symbol"] := "c";
__n20["codePoint"] := 99.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "r";
__n21["kind"] := "simple";
__n21["symbol"] := "r";
__n21["codePoint"] := 114.;
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "i";
__n22["kind"] := "simple";
__n22["symbol"] := "i";
__n22["codePoint"] := 105.;
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "p";
__n23["kind"] := "simple";
__n23["symbol"] := "p";
__n23["codePoint"] := 112.;
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "t";
__n24["kind"] := "simple";
__n24["symbol"] := "t";
__n24["codePoint"] := 116.;
__n18 := [ __n19, __n20, __n21, __n22, __n23, __n24 ];
__n17["expressions"] := __n18;
__n16["assertion"] := __n17;
__n25 := {  };
__n25["type"] := "Group";
__n25["capturing"] := true;
__n25["number"] := 1.;
__n26 := {  };
__n26["type"] := "Alternative";
__n28 := {  };
__n28["type"] := "CharacterClass";
__n30 := {  };
__n30["type"] := "ClassRange";
__n31 := {  };
__n31["type"] := "Char";
__n31["value"] := "A";
__n31["kind"] := "simple";
__n31["symbol"] := "A";
__n31["codePoint"] := 65.;
__n30["from"] := __n31;
__n32 := {  };
__n32["type"] := "Char";
__n32["value"] := "Z";
__n32["kind"] := "simple";
__n32["symbol"] := "Z";
__n32["codePoint"] := 90.;
__n30["to"] := __n32;
__n29 := [ __n30 ];
__n28["expressions"] := __n29;
__n33 := {  };
__n33["type"] := "Repetition";
__n34 := {  };
__n34["type"] := "Char";
__n34["value"] := "\\w";
__n34["kind"] := "meta";
__n34["symbol"] := 'undefined;
__n34["codePoint"] := nan;
__n33["expression"] := __n34;
__n35 := {  };
__n35["type"] := "Quantifier";
__n35["kind"] := "*";
__n35["greedy"] := true;
__n33["quantifier"] := __n35;
__n33["parenIndex"] := 1.;
__n33["parenCount"] := 1.;
__n27 := [ __n28, __n33 ];
__n26["expressions"] := __n27;
__n25["expression"] := __n26;
__n11 := [ __n12, __n13, __n14, __n15, __n16, __n25 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 1.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "test";
__n36["raw"] := "\"test\"";
__n7["property"] := __n36;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "i'm a JavaScripter ";
__n38["raw"] := "\"i'm a JavaScripter \"";
__n37 := [ __n38 ];
__n6["arguments"] := __n37;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__executed";
__n39["test"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#1: /Java(?!Script)([A-Z]\\w*)/.test(\"i'm a JavaScripter \") === false";
__n47["raw"] := "'#1: /Java(?!Script)([A-Z]\\\\w*)/.test(\"i\\'m a JavaScripter \") === false'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n39["consequent"] := __n41;
__n39["alternate"] := null;
__n1 := [ __n2, __n39 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n48 := [ "__executed" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}