function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/a[^b]c/";
__n8["raw"] := "/a[^b]c/";
__n8["source"] := "a[^b]c";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Char";
__n12["value"] := "a";
__n12["kind"] := "simple";
__n12["symbol"] := "a";
__n12["codePoint"] := 97.;
__n13 := {  };
__n13["type"] := "CharacterClass";
__n13["negative"] := true;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "b";
__n15["kind"] := "simple";
__n15["symbol"] := "b";
__n15["codePoint"] := 98.;
__n14 := [ __n15 ];
__n13["expressions"] := __n14;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "c";
__n16["kind"] := "simple";
__n16["symbol"] := "c";
__n16["codePoint"] := 99.;
__n11 := [ __n12, __n13, __n16 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "test";
__n17["raw"] := "\"test\"";
__n7["property"] := __n17;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "abc";
__n19["raw"] := "\"abc\"";
__n18 := [ __n19 ];
__n6["arguments"] := __n18;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__executed";
__n20["test"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: /a[^b]c/.test(\"abc\") === false";
__n28["raw"] := "'#1: /a[^b]c/.test(\"abc\") === false'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["consequent"] := __n22;
__n20["alternate"] := null;
__n1 := [ __n2, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n29 := [ "__executed" ];
__n0["variableDeclarations"] := __n29;
__n30 := [  ];
__n0["functionDeclarations"] := __n30;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}