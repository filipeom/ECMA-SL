function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/\\f/";
__n8["raw"] := "/\\f/";
__n8["source"] := "\\f";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Char";
__n10["value"] := "\\f";
__n10["kind"] := "meta";
__n10["symbol"] := "";
__n10["codePoint"] := 12.;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "exec";
__n11["raw"] := "\"exec\"";
__n7["property"] := __n11;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "";
__n13["raw"] := "\"\\u000C\"";
__n12 := [ __n13 ];
__n6["arguments"] := __n12;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "LogicalExpression";
__n15["operator"] := "||";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "===";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "arr";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 'null;
__n18["raw"] := "\"'null\"";
__n16["right"] := __n18;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n20["computed"] := true;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "arr";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 0.;
__n22["raw"] := "0";
__n20["property"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "";
__n23["raw"] := "\"\\u000C\"";
__n19["right"] := __n23;
__n15["right"] := __n19;
__n14["test"] := __n15;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: var arr = /\\f/.exec(\"\\u000C\"); arr[0] === \"\\u000C\". Actual. ";
__n31["raw"] := "'#1: var arr = /\\\\f/.exec(\"\\\\u000C\"); arr[0] === \"\\\\u000C\". Actual. '";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "LogicalExpression";
__n32["operator"] := "&&";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "arr";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "MemberExpression";
__n34["computed"] := true;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arr";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n34["property"] := __n36;
__n32["right"] := __n34;
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n14["consequent"] := __n24;
__n14["alternate"] := null;
__n37 := {  };
__n37["type"] := "VariableDeclaration";
__n39 := {  };
__n39["type"] := "VariableDeclarator";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "arr";
__n39["id"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "/\\f\\f/";
__n43["raw"] := "/\\f\\f/";
__n43["source"] := "\\f\\f";
__n44 := {  };
__n44["type"] := "RegExp";
__n45 := {  };
__n45["type"] := "Alternative";
__n47 := {  };
__n47["type"] := "Char";
__n47["value"] := "\\f";
__n47["kind"] := "meta";
__n47["symbol"] := "";
__n47["codePoint"] := 12.;
__n48 := {  };
__n48["type"] := "Char";
__n48["value"] := "\\f";
__n48["kind"] := "meta";
__n48["symbol"] := "";
__n48["codePoint"] := 12.;
__n46 := [ __n47, __n48 ];
__n45["expressions"] := __n46;
__n44["body"] := __n45;
__n44["flags"] := "";
__n44["nCaps"] := 0.;
__n43["regex"] := __n44;
__n42["object"] := __n43;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "exec";
__n49["raw"] := "\"exec\"";
__n42["property"] := __n49;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "ab";
__n51["raw"] := "\"a\\u000C\\u000Cb\"";
__n50 := [ __n51 ];
__n41["arguments"] := __n50;
__n39["init"] := __n41;
__n38 := [ __n39 ];
__n37["declarations"] := __n38;
__n37["kind"] := "var";
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "LogicalExpression";
__n53["operator"] := "||";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "===";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arr";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 'null;
__n56["raw"] := "\"'null\"";
__n54["right"] := __n56;
__n53["left"] := __n54;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n58["computed"] := true;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arr";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n58["property"] := __n60;
__n57["left"] := __n58;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "";
__n61["raw"] := "\"\\u000C\\u000C\"";
__n57["right"] := __n61;
__n53["right"] := __n57;
__n52["test"] := __n53;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "+";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#2: var arr = /\\f\\f/.exec(\"a\\u000C\\u000Cb\"); arr[0] === \"\\u000C\\u000C\". Actual. ";
__n69["raw"] := "'#2: var arr = /\\\\f\\\\f/.exec(\"a\\\\u000C\\\\u000Cb\"); arr[0] === \"\\\\u000C\\\\u000C\". Actual. '";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "LogicalExpression";
__n70["operator"] := "&&";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arr";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n72["computed"] := true;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "arr";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 0.;
__n74["raw"] := "0";
__n72["property"] := __n74;
__n70["right"] := __n72;
__n68["right"] := __n70;
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n52["consequent"] := __n62;
__n52["alternate"] := null;
__n1 := [ __n2, __n14, __n37, __n52 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n75 := [ "arr" ];
__n0["variableDeclarations"] := __n75;
__n76 := [  ];
__n0["functionDeclarations"] := __n76;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}