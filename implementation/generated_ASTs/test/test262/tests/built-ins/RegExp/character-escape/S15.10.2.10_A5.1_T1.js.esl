function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "non_ident";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "~`!@#$%^&*()-+={[}]|\\:;'<,>./?";
__n7["raw"] := "\"~`!@#$%^&*()-+={[}]|\\\\:;'<,>./?\"";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "\"";
__n8["raw"] := "'\"'";
__n6["right"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ForStatement";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "k";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n9["init"] := __n10;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "<";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "k";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "non_ident";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "length";
__n19["raw"] := "\"length\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n15["right"] := __n17;
__n9["test"] := __n15;
__n20 := {  };
__n20["type"] := "UpdateExpression";
__n20["operator"] := "++";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "k";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n9["update"] := __n20;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "VariableDeclaration";
__n26 := {  };
__n26["type"] := "VariableDeclarator";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "arr";
__n26["id"] := __n27;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "NewExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "RegExp";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "\\";
__n34["raw"] := "\"\\\\\"";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "MemberExpression";
__n35["computed"] := true;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "non_ident";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "k";
__n35["property"] := __n37;
__n33["right"] := __n35;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "g";
__n38["raw"] := "\"g\"";
__n32 := [ __n33, __n38 ];
__n30["arguments"] := __n32;
__n29["object"] := __n30;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "exec";
__n39["raw"] := "\"exec\"";
__n29["property"] := __n39;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "non_ident";
__n40 := [ __n41 ];
__n28["arguments"] := __n40;
__n26["init"] := __n28;
__n25 := [ __n26 ];
__n24["declarations"] := __n25;
__n24["kind"] := "var";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "notSameValue";
__n46["raw"] := "\"notSameValue\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "arr";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 'null;
__n49["raw"] := "\"'null\"";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "No match for character: ";
__n51["raw"] := "\"No match for character: \"";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n52["computed"] := true;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "non_ident";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "k";
__n52["property"] := __n54;
__n50["right"] := __n52;
__n47 := [ __n48, __n49, __n50 ];
__n43["arguments"] := __n47;
__n42["expression"] := __n43;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "assert";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "sameValue";
__n59["raw"] := "\"sameValue\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n61["computed"] := true;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "arr";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 0.;
__n63["raw"] := "0";
__n61["property"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "non_ident";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "k";
__n64["property"] := __n66;
__n60 := [ __n61, __n64 ];
__n56["arguments"] := __n60;
__n55["expression"] := __n56;
__n23 := [ __n24, __n42, __n55 ];
__n22["body"] := __n23;
__n9["body"] := __n22;
__n1 := [ __n2, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n67 := [ "non_ident", "k", "arr" ];
__n0["variableDeclarations"] := __n67;
__n68 := [  ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}