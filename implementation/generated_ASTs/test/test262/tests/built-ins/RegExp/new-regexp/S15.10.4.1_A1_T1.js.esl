function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__pattern";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/./i";
__n6["raw"] := "/./i";
__n6["source"] := ".";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Char";
__n8["value"] := ".";
__n8["kind"] := "meta";
__n8["symbol"] := ".";
__n8["codePoint"] := nan;
__n7["body"] := __n8;
__n7["flags"] := "i";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__re";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "NewExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "RegExp";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__pattern";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__re";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "source";
__n21["raw"] := "\"source\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__pattern";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "source";
__n24["raw"] := "\"source\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n18["right"] := __n22;
__n17["test"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#1: __pattern = /./i; __re = new RegExp(__pattern); __re.source === __pattern.source. Actual: ";
__n32["raw"] := "'#1: __pattern = /./i; __re = new RegExp(__pattern); __re.source === __pattern.source. Actual: '";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__re";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "source";
__n35["raw"] := "\"source\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n17["consequent"] := __n25;
__n17["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__re";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "multiline";
__n40["raw"] := "\"multiline\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__pattern";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "multiline";
__n43["raw"] := "\"multiline\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n37["right"] := __n41;
__n36["test"] := __n37;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: __pattern = /./i; __re = new RegExp(__pattern); __re.multiline === __pattern.multiline. Actual: ";
__n51["raw"] := "'#2: __pattern = /./i; __re = new RegExp(__pattern); __re.multiline === __pattern.multiline. Actual: '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__re";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "multiline";
__n54["raw"] := "\"multiline\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n36["consequent"] := __n44;
__n36["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__re";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "global";
__n59["raw"] := "\"global\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["left"] := __n57;
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__pattern";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "global";
__n62["raw"] := "\"global\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n56["right"] := __n60;
__n55["test"] := __n56;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "+";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#3: __pattern = /./i; __re = new RegExp(__pattern); __re.global === __pattern.global. Actual: ";
__n70["raw"] := "'#3: __pattern = /./i; __re = new RegExp(__pattern); __re.global === __pattern.global. Actual: '";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__re";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "global";
__n73["raw"] := "\"global\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n69["right"] := __n71;
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n55["consequent"] := __n63;
__n55["alternate"] := null;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "__re";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "ignoreCase";
__n78["raw"] := "\"ignoreCase\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["left"] := __n76;
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__pattern";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "ignoreCase";
__n81["raw"] := "\"ignoreCase\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n75["right"] := __n79;
__n74["test"] := __n75;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "+";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "#4: __pattern = /./i; __re = new RegExp(__pattern); __re.ignoreCase === __pattern.ignoreCase. Actual: ";
__n89["raw"] := "'#4: __pattern = /./i; __re = new RegExp(__pattern); __re.ignoreCase === __pattern.ignoreCase. Actual: '";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "__re";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "ignoreCase";
__n92["raw"] := "\"ignoreCase\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n88["right"] := __n90;
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n74["consequent"] := __n82;
__n74["alternate"] := null;
__n1 := [ __n2, __n9, __n17, __n36, __n55, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n93 := [ "__pattern", "__re" ];
__n0["variableDeclarations"] := __n93;
__n94 := [  ];
__n0["functionDeclarations"] := __n94;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}