function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "$ERROR";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "#1.1: new RegExp(/1?1/mig, {}) throw SyntaxError. Actual: ";
__n10["raw"] := "'#1.1: new RegExp(/1?1/mig, {}) throw SyntaxError. Actual: '";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "RegExp";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "/1?1/mig";
__n14["raw"] := "/1?1/mig";
__n14["source"] := "1?1";
__n15 := {  };
__n15["type"] := "RegExp";
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Repetition";
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "1";
__n19["kind"] := "simple";
__n19["symbol"] := "1";
__n19["codePoint"] := 49.;
__n18["expression"] := __n19;
__n20 := {  };
__n20["type"] := "Quantifier";
__n20["kind"] := "?";
__n20["greedy"] := true;
__n18["quantifier"] := __n20;
__n18["parenIndex"] := 0.;
__n18["parenCount"] := 0.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "1";
__n21["kind"] := "simple";
__n21["symbol"] := "1";
__n21["codePoint"] := 49.;
__n17 := [ __n18, __n21 ];
__n16["expressions"] := __n17;
__n15["body"] := __n16;
__n15["flags"] := "gim";
__n15["nCaps"] := 0.;
__n14["regex"] := __n15;
__n22 := {  };
__n22["type"] := "ObjectExpression";
__n23 := [  ];
__n22["properties"] := __n23;
__n13 := [ __n14, __n22 ];
__n11["arguments"] := __n13;
__n9["right"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "instanceof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "SyntaxError";
__n30["right"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.2: new RegExp(/1?1/mig, {}) throw SyntaxError. Actual: ";
__n41["raw"] := "'#1.2: new RegExp(/1?1/mig, {}) throw SyntaxError. Actual: '";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n2["handler"] := __n24;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n43 := [  ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}