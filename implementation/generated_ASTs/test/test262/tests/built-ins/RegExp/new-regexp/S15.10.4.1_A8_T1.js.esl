function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "a|b";
__n9["raw"] := "\"a|b\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "i";
__n10["raw"] := "\"i\"";
__n8 := [ __n9, __n10 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__re";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "ignoreCase";
__n15["raw"] := "\"ignoreCase\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["left"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := true;
__n16["raw"] := "true";
__n12["right"] := __n16;
__n11["test"] := __n12;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: __re = new RegExp(\"a|b\",\"i\"); __re.ignoreCase === true. Actual: ";
__n24["raw"] := "'#1: __re = new RegExp(\"a|b\",\"i\"); __re.ignoreCase === true. Actual: '";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "ignoreCase";
__n27["raw"] := "\"ignoreCase\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n11["consequent"] := __n17;
__n11["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__re";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "multiline";
__n32["raw"] := "\"multiline\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := false;
__n33["raw"] := "false";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: __re = new RegExp(\"a|b\",\"i\"); __re.multiline === false. Actual: ";
__n41["raw"] := "'#2: __re = new RegExp(\"a|b\",\"i\"); __re.multiline === false. Actual: '";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__re";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "multiline";
__n44["raw"] := "\"multiline\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__re";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "global";
__n49["raw"] := "\"global\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := false;
__n50["raw"] := "false";
__n46["right"] := __n50;
__n45["test"] := __n46;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: __re = new RegExp(\"a|b\",\"i\"); __re.global === false. Actual: ";
__n58["raw"] := "'#3: __re = new RegExp(\"a|b\",\"i\"); __re.global === false. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "__re";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "global";
__n61["raw"] := "\"global\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n45["consequent"] := __n51;
__n45["alternate"] := null;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__re";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "lastIndex";
__n66["raw"] := "\"lastIndex\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["left"] := __n64;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n63["right"] := __n67;
__n62["test"] := __n63;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: __re = new RegExp(\"a|b\",\"i\"); __re.lastIndex === 0. Actual: ";
__n75["raw"] := "'#4: __re = new RegExp(\"a|b\",\"i\"); __re.lastIndex === 0. Actual: '";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "__re";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "lastIndex";
__n78["raw"] := "\"lastIndex\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n62["consequent"] := __n68;
__n62["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "===";
__n81 := {  };
__n81["type"] := "UnaryExpression";
__n81["operator"] := "typeof";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "__re";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "source";
__n84["raw"] := "\"source\"";
__n82["property"] := __n84;
__n82["computed"] := true;
__n81["argument"] := __n82;
__n81["prefix"] := true;
__n80["left"] := __n81;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "undefined";
__n85["raw"] := "\"undefined\"";
__n80["right"] := __n85;
__n79["test"] := __n80;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#5: __re = new RegExp(\"a|b\",\"i\"); typeof __re.source !== \"undefined\"";
__n92["raw"] := "'#5: __re = new RegExp(\"a|b\",\"i\"); typeof __re.source !== \"undefined\"'";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n79["consequent"] := __n86;
__n79["alternate"] := null;
__n1 := [ __n2, __n11, __n28, __n45, __n62, __n79 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n93 := [ "__re" ];
__n0["variableDeclarations"] := __n93;
__n94 := [  ];
__n0["functionDeclarations"] := __n94;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}