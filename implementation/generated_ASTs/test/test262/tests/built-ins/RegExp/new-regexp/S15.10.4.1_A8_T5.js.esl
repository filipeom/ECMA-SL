function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "NewExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Object";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "abc{1}";
__n12["raw"] := "\"abc{1}\"";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "toString";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "FunctionExpression";
__n17["id"] := null;
__n18 := [  ];
__n17["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ReturnStatement";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "";
__n22["raw"] := "\"\"";
__n21["argument"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n23 := [  ];
__n19["variableDeclarations"] := __n23;
__n24 := [  ];
__n19["functionDeclarations"] := __n24;
__n19["codeType"] := "function";
__n19["strict"] := false;
__n17["body"] := __n19;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n14 := [ __n15 ];
__n13["properties"] := __n14;
__n8 := [ __n9, __n13 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__re";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "ignoreCase";
__n29["raw"] := "\"ignoreCase\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := false;
__n30["raw"] := "false";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.ignoreCase === false. Actual: ";
__n38["raw"] := "'#1: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.ignoreCase === false. Actual: '";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__re";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "ignoreCase";
__n41["raw"] := "\"ignoreCase\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__re";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "multiline";
__n46["raw"] := "\"multiline\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["left"] := __n44;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := false;
__n47["raw"] := "false";
__n43["right"] := __n47;
__n42["test"] := __n43;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#2: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.multiline === false. Actual: ";
__n55["raw"] := "'#2: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.multiline === false. Actual: '";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__re";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "multiline";
__n58["raw"] := "\"multiline\"";
__n56["property"] := __n58;
__n56["computed"] := true;
__n54["right"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n42["consequent"] := __n48;
__n42["alternate"] := null;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__re";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "global";
__n63["raw"] := "\"global\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["left"] := __n61;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := false;
__n64["raw"] := "false";
__n60["right"] := __n64;
__n59["test"] := __n60;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "+";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#3: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.global === false. Actual: ";
__n72["raw"] := "'#3: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.global === false. Actual: '";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "MemberExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "__re";
__n73["object"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "global";
__n75["raw"] := "\"global\"";
__n73["property"] := __n75;
__n73["computed"] := true;
__n71["right"] := __n73;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n59["consequent"] := __n65;
__n59["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__re";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "lastIndex";
__n80["raw"] := "\"lastIndex\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["left"] := __n78;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 0.;
__n81["raw"] := "0";
__n77["right"] := __n81;
__n76["test"] := __n77;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "+";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "#4: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.lastIndex === 0. Actual: ";
__n89["raw"] := "'#4: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; __re.lastIndex === 0. Actual: '";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "__re";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "lastIndex";
__n92["raw"] := "\"lastIndex\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n88["right"] := __n90;
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n76["consequent"] := __n82;
__n76["alternate"] := null;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "===";
__n95 := {  };
__n95["type"] := "UnaryExpression";
__n95["operator"] := "typeof";
__n96 := {  };
__n96["type"] := "MemberExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "__re";
__n96["object"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "source";
__n98["raw"] := "\"source\"";
__n96["property"] := __n98;
__n96["computed"] := true;
__n95["argument"] := __n96;
__n95["prefix"] := true;
__n94["left"] := __n95;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "undefined";
__n99["raw"] := "\"undefined\"";
__n94["right"] := __n99;
__n93["test"] := __n94;
__n100 := {  };
__n100["type"] := "BlockStatement";
__n102 := {  };
__n102["type"] := "ExpressionStatement";
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "$ERROR";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#5: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; typeof __re.source !== \"undefined\"";
__n106["raw"] := "'#5: __re = new RegExp(new Object(\"abc{1}\"), {toString:function(){return \"\"; typeof __re.source !== \"undefined\"'";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n102["expression"] := __n103;
__n101 := [ __n102 ];
__n100["body"] := __n101;
__n93["consequent"] := __n100;
__n93["alternate"] := null;
__n1 := [ __n2, __n25, __n42, __n59, __n76, __n93 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n107 := [ "__re" ];
__n0["variableDeclarations"] := __n107;
__n108 := [  ];
__n0["functionDeclarations"] := __n108;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}