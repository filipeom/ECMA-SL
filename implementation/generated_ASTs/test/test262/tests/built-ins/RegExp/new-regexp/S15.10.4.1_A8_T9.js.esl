function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n10 := {  };
__n10["type"] := "NewExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Object";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "gi";
__n13["raw"] := "\"gi\"";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n8 := [ __n9, __n10 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__re";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "ignoreCase";
__n18["raw"] := "\"ignoreCase\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n15["right"] := __n19;
__n14["test"] := __n15;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: __re = new RegExp(1, new Object(\"gi\")); __re.ignoreCase === true. Actual: ";
__n27["raw"] := "'#1: __re = new RegExp(1, new Object(\"gi\")); __re.ignoreCase === true. Actual: '";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__re";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "ignoreCase";
__n30["raw"] := "\"ignoreCase\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n14["consequent"] := __n20;
__n14["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__re";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "multiline";
__n35["raw"] := "\"multiline\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := false;
__n36["raw"] := "false";
__n32["right"] := __n36;
__n31["test"] := __n32;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: __re = new RegExp(1, new Object(\"gi\")); __re.multiline === false. Actual: ";
__n44["raw"] := "'#2: __re = new RegExp(1, new Object(\"gi\")); __re.multiline === false. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__re";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "multiline";
__n47["raw"] := "\"multiline\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n31["consequent"] := __n37;
__n31["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__re";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "global";
__n52["raw"] := "\"global\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["left"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n49["right"] := __n53;
__n48["test"] := __n49;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#3: __re = new RegExp(1, new Object(\"gi\")); __re.global === true. Actual: ";
__n61["raw"] := "'#3: __re = new RegExp(1, new Object(\"gi\")); __re.global === true. Actual: '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__re";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "global";
__n64["raw"] := "\"global\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n48["consequent"] := __n54;
__n48["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "MemberExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "__re";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "lastIndex";
__n69["raw"] := "\"lastIndex\"";
__n67["property"] := __n69;
__n67["computed"] := true;
__n66["left"] := __n67;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 0.;
__n70["raw"] := "0";
__n66["right"] := __n70;
__n65["test"] := __n66;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "+";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#4: __re = new RegExp(1, new Object(\"gi\")); __re.lastIndex === 0. Actual: ";
__n78["raw"] := "'#4: __re = new RegExp(1, new Object(\"gi\")); __re.lastIndex === 0. Actual: '";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__re";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "lastIndex";
__n81["raw"] := "\"lastIndex\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n77["right"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n65["consequent"] := __n71;
__n65["alternate"] := null;
__n82 := {  };
__n82["type"] := "IfStatement";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "===";
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "typeof";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "__re";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "source";
__n87["raw"] := "\"source\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n83["left"] := __n84;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "undefined";
__n88["raw"] := "\"undefined\"";
__n83["right"] := __n88;
__n82["test"] := __n83;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#5: __re = new RegExp(1, new Object(\"gi\")); typeof __re.source !== \"undefined\"";
__n95["raw"] := "'#5: __re = new RegExp(1, new Object(\"gi\")); typeof __re.source !== \"undefined\"'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n82["consequent"] := __n89;
__n82["alternate"] := null;
__n1 := [ __n2, __n14, __n31, __n48, __n65, __n82 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n96 := [ "__re" ];
__n0["variableDeclarations"] := __n96;
__n97 := [  ];
__n0["functionDeclarations"] := __n97;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}