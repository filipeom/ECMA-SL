function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "Hello World!";
__n6["raw"] := "\"Hello World!\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "regObj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "RegExp";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "World";
__n14["raw"] := "\"World\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "result";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := false;
__n19["raw"] := "false";
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "AssignmentExpression";
__n21["operator"] := "=";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "result";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "===";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "regObj";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "exec";
__n29["raw"] := "\"exec\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "str";
__n30 := [ __n31 ];
__n26["arguments"] := __n30;
__n25["object"] := __n26;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "toString";
__n32["raw"] := "\"toString\"";
__n25["property"] := __n32;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n33 := [  ];
__n24["arguments"] := __n33;
__n23["left"] := __n24;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "World";
__n34["raw"] := "\"World\"";
__n23["right"] := __n34;
__n21["right"] := __n23;
__n20["expression"] := __n21;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "result";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "result !== true";
__n40["raw"] := "'result !== true'";
__n38 := [ __n39, __n40 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n1 := [ __n2, __n7, __n15, __n20, __n35 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n41 := [ "str", "regObj", "result" ];
__n0["variableDeclarations"] := __n41;
__n42 := [  ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}