function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "/foo/";
__n5["raw"] := "/foo/";
__n5["source"] := "foo";
__n6 := {  };
__n6["type"] := "RegExp";
__n7 := {  };
__n7["type"] := "Alternative";
__n9 := {  };
__n9["type"] := "Char";
__n9["value"] := "f";
__n9["kind"] := "simple";
__n9["symbol"] := "f";
__n9["codePoint"] := 102.;
__n10 := {  };
__n10["type"] := "Char";
__n10["value"] := "o";
__n10["kind"] := "simple";
__n10["symbol"] := "o";
__n10["codePoint"] := 111.;
__n11 := {  };
__n11["type"] := "Char";
__n11["value"] := "o";
__n11["kind"] := "simple";
__n11["symbol"] := "o";
__n11["codePoint"] := 111.;
__n8 := [ __n9, __n10, __n11 ];
__n7["expressions"] := __n8;
__n6["body"] := __n7;
__n6["flags"] := "";
__n6["nCaps"] := 0.;
__n5["regex"] := __n6;
__n4["object"] := __n5;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "test";
__n12["raw"] := "\"test\"";
__n4["property"] := __n12;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "xfoox";
__n14["raw"] := "'xfoox'";
__n13 := [ __n14 ];
__n3["arguments"] := __n13;
__n2["expression"] := __n3;
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "match";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "MemberExpression";
__n19["computed"] := true;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "RegExp";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "(.||
)*";
__n25["raw"] := "'(.|\\r|\\n)*'";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "";
__n26["raw"] := "''";
__n24 := [ __n25, __n26 ];
__n22["arguments"] := __n24;
__n21["object"] := __n22;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "exec";
__n27["raw"] := "\"exec\"";
__n21["property"] := __n27;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n28 := [  ];
__n20["arguments"] := __n28;
__n19["object"] := __n20;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n19["property"] := __n29;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "match";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "xfoox";
__n33["raw"] := "'xfoox'";
__n31["right"] := __n33;
__n30["test"] := __n31;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#1: regExp.exec() leaks match globally";
__n40["raw"] := "'#1: regExp.exec() leaks match globally'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n30["consequent"] := __n34;
__n30["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "match";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "undefined";
__n44["raw"] := "'undefined'";
__n42["right"] := __n44;
__n41["test"] := __n42;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: regExp.exec() must coerce absent first arg to \"undefined\"";
__n51["raw"] := "'#2: regExp.exec() must coerce absent first arg to \"undefined\"'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n41["consequent"] := __n45;
__n41["alternate"] := null;
__n1 := [ __n2, __n15, __n30, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "match" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}