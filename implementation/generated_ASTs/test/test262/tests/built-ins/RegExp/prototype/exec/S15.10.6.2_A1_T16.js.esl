function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n6["computed"] := true;
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "/undefined/";
__n9["raw"] := "/undefined/";
__n9["source"] := "undefined";
__n10 := {  };
__n10["type"] := "RegExp";
__n11 := {  };
__n11["type"] := "Alternative";
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "u";
__n13["kind"] := "simple";
__n13["symbol"] := "u";
__n13["codePoint"] := 117.;
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "n";
__n14["kind"] := "simple";
__n14["symbol"] := "n";
__n14["codePoint"] := 110.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "d";
__n15["kind"] := "simple";
__n15["symbol"] := "d";
__n15["codePoint"] := 100.;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "e";
__n16["kind"] := "simple";
__n16["symbol"] := "e";
__n16["codePoint"] := 101.;
__n17 := {  };
__n17["type"] := "Char";
__n17["value"] := "f";
__n17["kind"] := "simple";
__n17["symbol"] := "f";
__n17["codePoint"] := 102.;
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "i";
__n18["kind"] := "simple";
__n18["symbol"] := "i";
__n18["codePoint"] := 105.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "n";
__n19["kind"] := "simple";
__n19["symbol"] := "n";
__n19["codePoint"] := 110.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "e";
__n20["kind"] := "simple";
__n20["symbol"] := "e";
__n20["codePoint"] := 101.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "d";
__n21["kind"] := "simple";
__n21["symbol"] := "d";
__n21["codePoint"] := 100.;
__n12 := [ __n13, __n14, __n15, __n16, __n17, __n18, __n19, __n20, __n21 ];
__n11["expressions"] := __n12;
__n10["body"] := __n11;
__n10["flags"] := "";
__n10["nCaps"] := 0.;
__n9["regex"] := __n10;
__n8["object"] := __n9;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "exec";
__n22["raw"] := "\"exec\"";
__n8["property"] := __n22;
__n8["computed"] := true;
__n7["callee"] := __n8;
__n23 := [  ];
__n7["arguments"] := __n23;
__n6["object"] := __n7;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n6["property"] := __n24;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__re";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "undefined";
__n28["raw"] := "\"undefined\"";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: /undefined/.exec()[0] === \"undefined\". Actual: ";
__n36["raw"] := "'#1: /undefined/.exec()[0] === \"undefined\". Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__re";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n1 := [ __n2, __n25 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n38 := [ "__re" ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}