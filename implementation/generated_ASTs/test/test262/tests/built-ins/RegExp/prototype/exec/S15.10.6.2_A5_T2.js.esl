function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/(?:ab|cd)\\d?/g";
__n6["raw"] := "/(?:ab|cd)\\d?/g";
__n6["source"] := "(?:ab|cd)\\d?";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Alternative";
__n10 := {  };
__n10["type"] := "Group";
__n10["capturing"] := false;
__n11 := {  };
__n11["type"] := "Disjunction";
__n12 := {  };
__n12["type"] := "Alternative";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "a";
__n14["kind"] := "simple";
__n14["symbol"] := "a";
__n14["codePoint"] := 97.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "b";
__n15["kind"] := "simple";
__n15["symbol"] := "b";
__n15["codePoint"] := 98.;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n11["left"] := __n12;
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "c";
__n18["kind"] := "simple";
__n18["symbol"] := "c";
__n18["codePoint"] := 99.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "d";
__n19["kind"] := "simple";
__n19["symbol"] := "d";
__n19["codePoint"] := 100.;
__n17 := [ __n18, __n19 ];
__n16["expressions"] := __n17;
__n11["right"] := __n16;
__n10["expression"] := __n11;
__n20 := {  };
__n20["type"] := "Repetition";
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "\\d";
__n21["kind"] := "meta";
__n21["symbol"] := 'undefined;
__n21["codePoint"] := nan;
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "Quantifier";
__n22["kind"] := "?";
__n22["greedy"] := true;
__n20["quantifier"] := __n22;
__n20["parenIndex"] := 0.;
__n20["parenCount"] := 0.;
__n9 := [ __n10, __n20 ];
__n8["expressions"] := __n9;
__n7["body"] := __n8;
__n7["flags"] := "g";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "lastIndex";
__n27["raw"] := "\"lastIndex\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 100.;
__n28["raw"] := "100";
__n24["right"] := __n28;
__n23["expression"] := __n24;
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__executed";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__re";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "exec";
__n36["raw"] := "\"exec\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "aacd22 ";
__n38["raw"] := "\"aacd22 \"";
__n37 := [ __n38 ];
__n33["arguments"] := __n37;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__executed";
__n39["test"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#1: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=100; __executed = __re.exec(\"aacd22 \"); __executed === true";
__n47["raw"] := "'#1: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=100; __executed = __re.exec(\"aacd22 \"); __executed === true'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n39["consequent"] := __n41;
__n39["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__re";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "lastIndex";
__n52["raw"] := "\"lastIndex\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["left"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 0.;
__n53["raw"] := "0";
__n49["right"] := __n53;
__n48["test"] := __n49;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#2: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=100; __executed = __re.exec(\"aacd22 \"); __re.lastIndex === 0. Actual: ";
__n61["raw"] := "'#2: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=100; __executed = __re.exec(\"aacd22 \"); __re.lastIndex === 0. Actual: '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__re";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "lastIndex";
__n64["raw"] := "\"lastIndex\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n48["consequent"] := __n54;
__n48["alternate"] := null;
__n1 := [ __n2, __n23, __n29, __n39, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n65 := [ "__re", "__executed" ];
__n0["variableDeclarations"] := __n65;
__n66 := [  ];
__n0["functionDeclarations"] := __n66;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}