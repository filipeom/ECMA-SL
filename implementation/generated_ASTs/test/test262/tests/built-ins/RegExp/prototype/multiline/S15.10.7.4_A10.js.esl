function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__re";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "hasOwnProperty";
__n14["raw"] := "\"hasOwnProperty\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "multiline";
__n16["raw"] := "'multiline'";
__n15 := [ __n16 ];
__n11["arguments"] := __n15;
__n10["left"] := __n11;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := true;
__n17["raw"] := "true";
__n10["right"] := __n17;
__n9["test"] := __n10;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: __re = RegExp.prototype; __re.hasOwnProperty('multiline') === true";
__n24["raw"] := "'#1: __re = RegExp.prototype; __re.hasOwnProperty(\\'multiline\\') === true'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n9["consequent"] := __n18;
__n9["alternate"] := null;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__sample";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "/\\n/";
__n29["raw"] := "/\\n/";
__n29["source"] := "\\n";
__n30 := {  };
__n30["type"] := "RegExp";
__n31 := {  };
__n31["type"] := "Char";
__n31["value"] := "\\n";
__n31["kind"] := "meta";
__n31["symbol"] := "
";
__n31["codePoint"] := 10.;
__n30["body"] := __n31;
__n30["flags"] := "";
__n30["nCaps"] := 0.;
__n29["regex"] := __n30;
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__obj";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__sample";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "multiline";
__n38["raw"] := "\"multiline\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "verifyNotWritable";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__sample";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "multiline";
__n44["raw"] := "\"multiline\"";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "multiline";
__n45["raw"] := "\"multiline\"";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "shifted";
__n46["raw"] := "\"shifted\"";
__n42 := [ __n43, __n44, __n45, __n46 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__sample";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "multiline";
__n51["raw"] := "\"multiline\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__obj";
__n48["right"] := __n52;
__n47["test"] := __n48;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#2: __sample = /
/; __obj = __sample.multiline; __sample.multiline = \"shifted\"; __sample.multiline === __obj. Actual: ";
__n60["raw"] := "'#2: __sample = /\\n/; __obj = __sample.multiline; __sample.multiline = \"shifted\"; __sample.multiline === __obj. Actual: '";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__sample";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "multiline";
__n63["raw"] := "\"multiline\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n59["right"] := __n61;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n47["consequent"] := __n53;
__n47["alternate"] := null;
__n1 := [ __n2, __n9, __n25, __n32, __n39, __n47 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n64 := [ "__re", "__sample", "__obj" ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}