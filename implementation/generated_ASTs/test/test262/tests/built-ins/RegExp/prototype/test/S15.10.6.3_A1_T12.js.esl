function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Math";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "PI";
__n17["raw"] := "\"PI\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n18 := [  ];
__n12["variableDeclarations"] := __n18;
__n19 := [  ];
__n12["functionDeclarations"] := __n19;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n20 := {  };
__n20["type"] := "VariableDeclaration";
__n22 := {  };
__n22["type"] := "VariableDeclarator";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__re";
__n22["id"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "/\\.14/";
__n24["raw"] := "/\\.14/";
__n24["source"] := "\\.14";
__n25 := {  };
__n25["type"] := "RegExp";
__n26 := {  };
__n26["type"] := "Alternative";
__n28 := {  };
__n28["type"] := "Char";
__n28["value"] := ".";
__n28["kind"] := "simple";
__n28["symbol"] := ".";
__n28["codePoint"] := 46.;
__n28["escaped"] := true;
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "1";
__n29["kind"] := "simple";
__n29["symbol"] := "1";
__n29["codePoint"] := 49.;
__n30 := {  };
__n30["type"] := "Char";
__n30["value"] := "4";
__n30["kind"] := "simple";
__n30["symbol"] := "4";
__n30["codePoint"] := 52.;
__n27 := [ __n28, __n29, __n30 ];
__n26["expressions"] := __n27;
__n25["body"] := __n26;
__n25["flags"] := "";
__n25["nCaps"] := 0.;
__n24["regex"] := __n25;
__n22["init"] := __n24;
__n21 := [ __n22 ];
__n20["declarations"] := __n21;
__n20["kind"] := "var";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__re";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "test";
__n36["raw"] := "\"test\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__string";
__n37 := [ __n38 ];
__n33["arguments"] := __n37;
__n32["left"] := __n33;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__re";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "exec";
__n43["raw"] := "\"exec\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__string";
__n44 := [ __n45 ];
__n40["arguments"] := __n44;
__n39["left"] := __n40;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 'null;
__n46["raw"] := "\"'null\"";
__n39["right"] := __n46;
__n32["right"] := __n39;
__n31["test"] := __n32;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#0: var __string = {toString:function(){return Math.PI;}}; __re = /\\.14/; __re.test(__string) === (__re.exec(__string) !== null)";
__n53["raw"] := "'#0: var __string = {toString:function(){return Math.PI;}}; __re = /\\\\.14/; __re.test(__string) === (__re.exec(__string) !== null)'";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n31["consequent"] := __n47;
__n31["alternate"] := null;
__n1 := [ __n2, __n20, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n54 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n54;
__n55 := [  ];
__n0["functionDeclarations"] := __n55;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}