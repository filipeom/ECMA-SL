function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__re";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "/AL|se/";
__n13["raw"] := "/AL|se/";
__n13["source"] := "AL|se";
__n14 := {  };
__n14["type"] := "RegExp";
__n15 := {  };
__n15["type"] := "Disjunction";
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "A";
__n18["kind"] := "simple";
__n18["symbol"] := "A";
__n18["codePoint"] := 65.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "L";
__n19["kind"] := "simple";
__n19["symbol"] := "L";
__n19["codePoint"] := 76.;
__n17 := [ __n18, __n19 ];
__n16["expressions"] := __n17;
__n15["left"] := __n16;
__n20 := {  };
__n20["type"] := "Alternative";
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "s";
__n22["kind"] := "simple";
__n22["symbol"] := "s";
__n22["codePoint"] := 115.;
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "e";
__n23["kind"] := "simple";
__n23["symbol"] := "e";
__n23["codePoint"] := 101.;
__n21 := [ __n22, __n23 ];
__n20["expressions"] := __n21;
__n15["right"] := __n20;
__n14["body"] := __n15;
__n14["flags"] := "";
__n14["nCaps"] := 0.;
__n13["regex"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__re";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "test";
__n29["raw"] := "\"test\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__string";
__n30 := [ __n31 ];
__n26["arguments"] := __n30;
__n25["left"] := __n26;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__re";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "exec";
__n36["raw"] := "\"exec\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__string";
__n37 := [ __n38 ];
__n33["arguments"] := __n37;
__n32["left"] := __n33;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 'null;
__n39["raw"] := "\"'null\"";
__n32["right"] := __n39;
__n25["right"] := __n32;
__n24["test"] := __n25;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#0: var __string = new Boolean;__re = /AL|se/; __re.test(__string) === (__re.exec(__string) !== null)";
__n46["raw"] := "'#0: var __string = new Boolean;__re = /AL|se/; __re.test(__string) === (__re.exec(__string) !== null)'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n24["consequent"] := __n40;
__n24["alternate"] := null;
__n1 := [ __n2, __n9, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}