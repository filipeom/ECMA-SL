function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "ObjectExpression";
__n16 := [  ];
__n15["properties"] := __n16;
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n17 := [  ];
__n12["variableDeclarations"] := __n17;
__n18 := [  ];
__n12["functionDeclarations"] := __n18;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "valueOf";
__n19["key"] := __n20;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n21["id"] := null;
__n22 := [  ];
__n21["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ReturnStatement";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "aabaac";
__n26["raw"] := "\"aabaac\"";
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n27 := [  ];
__n23["variableDeclarations"] := __n27;
__n28 := [  ];
__n23["functionDeclarations"] := __n28;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n21["body"] := __n23;
__n21["generator"] := false;
__n21["async"] := false;
__n21["expression"] := false;
__n19["value"] := __n21;
__n19["computed"] := false;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n7 := [ __n8, __n19 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__re";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "/(aa|aabaac|ba|b|c)*/";
__n33["raw"] := "/(aa|aabaac|ba|b|c)*/";
__n33["source"] := "(aa|aabaac|ba|b|c)*";
__n34 := {  };
__n34["type"] := "RegExp";
__n35 := {  };
__n35["type"] := "Repetition";
__n36 := {  };
__n36["type"] := "Group";
__n36["capturing"] := true;
__n36["number"] := 1.;
__n37 := {  };
__n37["type"] := "Disjunction";
__n38 := {  };
__n38["type"] := "Disjunction";
__n39 := {  };
__n39["type"] := "Disjunction";
__n40 := {  };
__n40["type"] := "Disjunction";
__n41 := {  };
__n41["type"] := "Alternative";
__n43 := {  };
__n43["type"] := "Char";
__n43["value"] := "a";
__n43["kind"] := "simple";
__n43["symbol"] := "a";
__n43["codePoint"] := 97.;
__n44 := {  };
__n44["type"] := "Char";
__n44["value"] := "a";
__n44["kind"] := "simple";
__n44["symbol"] := "a";
__n44["codePoint"] := 97.;
__n42 := [ __n43, __n44 ];
__n41["expressions"] := __n42;
__n40["left"] := __n41;
__n45 := {  };
__n45["type"] := "Alternative";
__n47 := {  };
__n47["type"] := "Char";
__n47["value"] := "a";
__n47["kind"] := "simple";
__n47["symbol"] := "a";
__n47["codePoint"] := 97.;
__n48 := {  };
__n48["type"] := "Char";
__n48["value"] := "a";
__n48["kind"] := "simple";
__n48["symbol"] := "a";
__n48["codePoint"] := 97.;
__n49 := {  };
__n49["type"] := "Char";
__n49["value"] := "b";
__n49["kind"] := "simple";
__n49["symbol"] := "b";
__n49["codePoint"] := 98.;
__n50 := {  };
__n50["type"] := "Char";
__n50["value"] := "a";
__n50["kind"] := "simple";
__n50["symbol"] := "a";
__n50["codePoint"] := 97.;
__n51 := {  };
__n51["type"] := "Char";
__n51["value"] := "a";
__n51["kind"] := "simple";
__n51["symbol"] := "a";
__n51["codePoint"] := 97.;
__n52 := {  };
__n52["type"] := "Char";
__n52["value"] := "c";
__n52["kind"] := "simple";
__n52["symbol"] := "c";
__n52["codePoint"] := 99.;
__n46 := [ __n47, __n48, __n49, __n50, __n51, __n52 ];
__n45["expressions"] := __n46;
__n40["right"] := __n45;
__n39["left"] := __n40;
__n53 := {  };
__n53["type"] := "Alternative";
__n55 := {  };
__n55["type"] := "Char";
__n55["value"] := "b";
__n55["kind"] := "simple";
__n55["symbol"] := "b";
__n55["codePoint"] := 98.;
__n56 := {  };
__n56["type"] := "Char";
__n56["value"] := "a";
__n56["kind"] := "simple";
__n56["symbol"] := "a";
__n56["codePoint"] := 97.;
__n54 := [ __n55, __n56 ];
__n53["expressions"] := __n54;
__n39["right"] := __n53;
__n38["left"] := __n39;
__n57 := {  };
__n57["type"] := "Char";
__n57["value"] := "b";
__n57["kind"] := "simple";
__n57["symbol"] := "b";
__n57["codePoint"] := 98.;
__n38["right"] := __n57;
__n37["left"] := __n38;
__n58 := {  };
__n58["type"] := "Char";
__n58["value"] := "c";
__n58["kind"] := "simple";
__n58["symbol"] := "c";
__n58["codePoint"] := 99.;
__n37["right"] := __n58;
__n36["expression"] := __n37;
__n35["expression"] := __n36;
__n59 := {  };
__n59["type"] := "Quantifier";
__n59["kind"] := "*";
__n59["greedy"] := true;
__n35["quantifier"] := __n59;
__n35["parenIndex"] := 1.;
__n35["parenCount"] := 0.;
__n34["body"] := __n35;
__n34["flags"] := "";
__n34["nCaps"] := 1.;
__n33["regex"] := __n34;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "MemberExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "__re";
__n63["object"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "test";
__n65["raw"] := "\"test\"";
__n63["property"] := __n65;
__n63["computed"] := true;
__n62["callee"] := __n63;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "__string";
__n66 := [ __n67 ];
__n62["arguments"] := __n66;
__n61["left"] := __n62;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "__re";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "exec";
__n72["raw"] := "\"exec\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["callee"] := __n70;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "__string";
__n73 := [ __n74 ];
__n69["arguments"] := __n73;
__n68["left"] := __n69;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 'null;
__n75["raw"] := "\"'null\"";
__n68["right"] := __n75;
__n61["right"] := __n68;
__n60["test"] := __n61;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#0: var __string = {toString:function(){return {};}, valueOf:function(){return \"aabaac\";}}; __re = /(aa|aabaac|ba|b|c)*/; __re.test(__string) === (__re.exec(__string) !== null)";
__n82["raw"] := "'#0: var __string = {toString:function(){return {};}, valueOf:function(){return \"aabaac\";}}; __re = /(aa|aabaac|ba|b|c)*/; __re.test(__string) === (__re.exec(__string) !== null)'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n60["consequent"] := __n76;
__n60["alternate"] := null;
__n1 := [ __n2, __n29, __n60 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n83 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n83;
__n84 := [  ];
__n0["functionDeclarations"] := __n84;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}