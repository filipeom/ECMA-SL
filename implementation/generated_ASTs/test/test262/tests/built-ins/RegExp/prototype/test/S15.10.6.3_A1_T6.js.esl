function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/(z)((a+)?(b+)?(c))*/";
__n6["raw"] := "/(z)((a+)?(b+)?(c))*/";
__n6["source"] := "(z)((a+)?(b+)?(c))*";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Alternative";
__n10 := {  };
__n10["type"] := "Group";
__n10["capturing"] := true;
__n10["number"] := 1.;
__n11 := {  };
__n11["type"] := "Char";
__n11["value"] := "z";
__n11["kind"] := "simple";
__n11["symbol"] := "z";
__n11["codePoint"] := 122.;
__n10["expression"] := __n11;
__n12 := {  };
__n12["type"] := "Repetition";
__n13 := {  };
__n13["type"] := "Group";
__n13["capturing"] := true;
__n13["number"] := 2.;
__n14 := {  };
__n14["type"] := "Alternative";
__n16 := {  };
__n16["type"] := "Repetition";
__n17 := {  };
__n17["type"] := "Group";
__n17["capturing"] := true;
__n17["number"] := 3.;
__n18 := {  };
__n18["type"] := "Repetition";
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "a";
__n19["kind"] := "simple";
__n19["symbol"] := "a";
__n19["codePoint"] := 97.;
__n18["expression"] := __n19;
__n20 := {  };
__n20["type"] := "Quantifier";
__n20["kind"] := "+";
__n20["greedy"] := true;
__n18["quantifier"] := __n20;
__n18["parenIndex"] := 3.;
__n18["parenCount"] := 2.;
__n17["expression"] := __n18;
__n16["expression"] := __n17;
__n21 := {  };
__n21["type"] := "Quantifier";
__n21["kind"] := "?";
__n21["greedy"] := true;
__n16["quantifier"] := __n21;
__n16["parenIndex"] := 3.;
__n16["parenCount"] := 1.;
__n22 := {  };
__n22["type"] := "Repetition";
__n23 := {  };
__n23["type"] := "Group";
__n23["capturing"] := true;
__n23["number"] := 4.;
__n24 := {  };
__n24["type"] := "Repetition";
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "b";
__n25["kind"] := "simple";
__n25["symbol"] := "b";
__n25["codePoint"] := 98.;
__n24["expression"] := __n25;
__n26 := {  };
__n26["type"] := "Quantifier";
__n26["kind"] := "+";
__n26["greedy"] := true;
__n24["quantifier"] := __n26;
__n24["parenIndex"] := 4.;
__n24["parenCount"] := 2.;
__n23["expression"] := __n24;
__n22["expression"] := __n23;
__n27 := {  };
__n27["type"] := "Quantifier";
__n27["kind"] := "?";
__n27["greedy"] := true;
__n22["quantifier"] := __n27;
__n22["parenIndex"] := 4.;
__n22["parenCount"] := 1.;
__n28 := {  };
__n28["type"] := "Group";
__n28["capturing"] := true;
__n28["number"] := 5.;
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "c";
__n29["kind"] := "simple";
__n29["symbol"] := "c";
__n29["codePoint"] := 99.;
__n28["expression"] := __n29;
__n15 := [ __n16, __n22, __n28 ];
__n14["expressions"] := __n15;
__n13["expression"] := __n14;
__n12["expression"] := __n13;
__n30 := {  };
__n30["type"] := "Quantifier";
__n30["kind"] := "*";
__n30["greedy"] := true;
__n12["quantifier"] := __n30;
__n12["parenIndex"] := 5.;
__n12["parenCount"] := 0.;
__n9 := [ __n10, __n12 ];
__n8["expressions"] := __n9;
__n7["body"] := __n8;
__n7["flags"] := "";
__n7["nCaps"] := 5.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__re";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "test";
__n36["raw"] := "\"test\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "FunctionExpression";
__n39["id"] := null;
__n40 := [  ];
__n39["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "zaacbbbcac";
__n44["raw"] := "\"zaacbbbcac\"";
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n45 := [  ];
__n41["variableDeclarations"] := __n45;
__n46 := [  ];
__n41["functionDeclarations"] := __n46;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n39["body"] := __n41;
__n39["generator"] := false;
__n39["async"] := false;
__n39["expression"] := false;
__n38["callee"] := __n39;
__n47 := [  ];
__n38["arguments"] := __n47;
__n37 := [ __n38 ];
__n33["arguments"] := __n37;
__n32["left"] := __n33;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__re";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "exec";
__n52["raw"] := "\"exec\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "FunctionExpression";
__n55["id"] := null;
__n56 := [  ];
__n55["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ReturnStatement";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "zaacbbbcac";
__n60["raw"] := "\"zaacbbbcac\"";
__n59["argument"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n61 := [  ];
__n57["variableDeclarations"] := __n61;
__n62 := [  ];
__n57["functionDeclarations"] := __n62;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n55["body"] := __n57;
__n55["generator"] := false;
__n55["async"] := false;
__n55["expression"] := false;
__n54["callee"] := __n55;
__n63 := [  ];
__n54["arguments"] := __n63;
__n53 := [ __n54 ];
__n49["arguments"] := __n53;
__n48["left"] := __n49;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 'null;
__n64["raw"] := "\"'null\"";
__n48["right"] := __n64;
__n32["right"] := __n48;
__n31["test"] := __n32;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#0: __re = /(z)((a+)?(b+)?(c))*/; __re.test((function(){return \"zaacbbbcac\"})()) === (__re.exec((function(){return \"zaacbbbcac\"})()) !== null)";
__n71["raw"] := "'#0: __re = /(z)((a+)?(b+)?(c))*/; __re.test((function(){return \"zaacbbbcac\"})()) === (__re.exec((function(){return \"zaacbbbcac\"})()) !== null)'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n31["consequent"] := __n65;
__n31["alternate"] := null;
__n1 := [ __n2, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n72 := [ "__re" ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}