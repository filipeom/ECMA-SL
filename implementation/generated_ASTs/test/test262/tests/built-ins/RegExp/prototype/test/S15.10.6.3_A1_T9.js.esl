function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "VariableDeclaration";
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "__re";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "/1|12/";
__n10["raw"] := "/1|12/";
__n10["source"] := "1|12";
__n11 := {  };
__n11["type"] := "RegExp";
__n12 := {  };
__n12["type"] := "Disjunction";
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "1";
__n13["kind"] := "simple";
__n13["symbol"] := "1";
__n13["codePoint"] := 49.;
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Alternative";
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "1";
__n16["kind"] := "simple";
__n16["symbol"] := "1";
__n16["codePoint"] := 49.;
__n17 := {  };
__n17["type"] := "Char";
__n17["value"] := "2";
__n17["kind"] := "simple";
__n17["symbol"] := "2";
__n17["codePoint"] := 50.;
__n15 := [ __n16, __n17 ];
__n14["expressions"] := __n15;
__n12["right"] := __n14;
__n11["body"] := __n12;
__n11["flags"] := "";
__n11["nCaps"] := 0.;
__n10["regex"] := __n11;
__n8["init"] := __n10;
__n7 := [ __n8 ];
__n6["declarations"] := __n7;
__n6["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__re";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "test";
__n23["raw"] := "\"test\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__string";
__n24 := [ __n25 ];
__n20["arguments"] := __n24;
__n19["left"] := __n20;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__re";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "exec";
__n30["raw"] := "\"exec\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__string";
__n31 := [ __n32 ];
__n27["arguments"] := __n31;
__n26["left"] := __n27;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 'null;
__n33["raw"] := "\"'null\"";
__n26["right"] := __n33;
__n19["right"] := __n26;
__n18["test"] := __n19;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#0: var __string;__re = /1|12/; __re.test(__string) === (__re.exec(__string) !== null); function __string(){};";
__n40["raw"] := "'#0: var __string;__re = /1|12/; __re.test(__string) === (__re.exec(__string) !== null); function __string(){};'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n18["consequent"] := __n34;
__n18["alternate"] := null;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__string";
__n41["expression"] := __n42;
__n43 := {  };
__n43["type"] := "EmptyStatement";
__n1 := [ __n2, __n6, __n18, __n41, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n44 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n44;
__n46 := {  };
__n46["type"] := "FunctionDeclaration";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__string";
__n46["id"] := __n47;
__n48 := [  ];
__n46["params"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n50 := [  ];
__n49["body"] := __n50;
__n51 := [  ];
__n49["variableDeclarations"] := __n51;
__n52 := [  ];
__n49["functionDeclarations"] := __n52;
__n49["codeType"] := "function";
__n49["strict"] := false;
__n46["body"] := __n49;
__n46["generator"] := false;
__n46["async"] := false;
__n46["expression"] := false;
__n45 := [ __n46 ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}