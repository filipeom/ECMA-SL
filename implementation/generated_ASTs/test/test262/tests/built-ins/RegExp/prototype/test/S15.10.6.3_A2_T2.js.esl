function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Math";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "AssignmentExpression";
__n8["operator"] := "=";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__instance";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "test";
__n11["raw"] := "\"test\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n8["left"] := __n9;
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "RegExp";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "prototype";
__n15["raw"] := "\"prototype\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["object"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "test";
__n16["raw"] := "\"test\"";
__n12["property"] := __n16;
__n12["computed"] := true;
__n8["right"] := __n12;
__n7["expression"] := __n8;
__n17 := {  };
__n17["type"] := "TryStatement";
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__instance";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "test";
__n24["raw"] := "\"test\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "message to investigate";
__n26["raw"] := "\"message to investigate\"";
__n25 := [ __n26 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1.1: __instance = Math; __instance.test = RegExp.prototype.test;  __instance.test(\"message to investigate\")";
__n31["raw"] := "'#1.1: __instance = Math; __instance.test = RegExp.prototype.test;  __instance.test(\"message to investigate\")'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n19 := [ __n20, __n27 ];
__n18["body"] := __n19;
__n17["block"] := __n18;
__n32 := {  };
__n32["type"] := "CatchClause";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n32["param"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "instanceof";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "e";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "TypeError";
__n38["right"] := __n40;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n37["right"] := __n41;
__n36["test"] := __n37;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#1.2: __instance = Math; __instance.test = RegExp.prototype.test;  __instance.test(\"message to investigate\"). Actual: ";
__n49["raw"] := "'#1.2: __instance = Math; __instance.test = RegExp.prototype.test;  __instance.test(\"message to investigate\"). Actual: '";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n48["right"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n36["consequent"] := __n42;
__n36["alternate"] := null;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n32["body"] := __n34;
__n17["handler"] := __n32;
__n17["finalizer"] := null;
__n1 := [ __n2, __n7, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n51 := [ "__instance" ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}