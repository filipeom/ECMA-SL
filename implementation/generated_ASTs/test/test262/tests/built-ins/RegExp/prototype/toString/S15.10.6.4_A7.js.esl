function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__FACTORY";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "RegExp";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["object"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "toString";
__n10["raw"] := "\"toString\"";
__n6["property"] := __n10;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "TryStatement";
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__instance";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "NewExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "__FACTORY";
__n18["callee"] := __n19;
__n20 := [  ];
__n18["arguments"] := __n20;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1.1: __FACTORY = RegExp.prototype.toString throw TypeError. Actual: ";
__n26["raw"] := "'#1.1: __FACTORY = RegExp.prototype.toString throw TypeError. Actual: '";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__instance";
__n25["right"] := __n27;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n13 := [ __n14, __n21 ];
__n12["body"] := __n13;
__n11["block"] := __n12;
__n28 := {  };
__n28["type"] := "CatchClause";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "e";
__n28["param"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "instanceof";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "TypeError";
__n34["right"] := __n36;
__n33["left"] := __n34;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := true;
__n37["raw"] := "true";
__n33["right"] := __n37;
__n32["test"] := __n33;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1.2: __FACTORY = RegExp.prototype.toString throw TypeError. Actual: ";
__n45["raw"] := "'#1.2: __FACTORY = RegExp.prototype.toString throw TypeError. Actual: '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n32["consequent"] := __n38;
__n32["alternate"] := null;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n28["body"] := __n30;
__n11["handler"] := __n28;
__n11["finalizer"] := null;
__n1 := [ __n2, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [ "__FACTORY", "__instance" ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}