function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/[xyz]*1/";
__n8["raw"] := "/[xyz]*1/";
__n8["source"] := "[xyz]*1";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Repetition";
__n13 := {  };
__n13["type"] := "CharacterClass";
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "x";
__n15["kind"] := "simple";
__n15["symbol"] := "x";
__n15["codePoint"] := 120.;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "y";
__n16["kind"] := "simple";
__n16["symbol"] := "y";
__n16["codePoint"] := 121.;
__n17 := {  };
__n17["type"] := "Char";
__n17["value"] := "z";
__n17["kind"] := "simple";
__n17["symbol"] := "z";
__n17["codePoint"] := 122.;
__n14 := [ __n15, __n16, __n17 ];
__n13["expressions"] := __n14;
__n12["expression"] := __n13;
__n18 := {  };
__n18["type"] := "Quantifier";
__n18["kind"] := "*";
__n18["greedy"] := true;
__n12["quantifier"] := __n18;
__n12["parenIndex"] := 0.;
__n12["parenCount"] := 0.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "1";
__n19["kind"] := "simple";
__n19["symbol"] := "1";
__n19["codePoint"] := 49.;
__n11 := [ __n12, __n19 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "test";
__n20["raw"] := "\"test\"";
__n7["property"] := __n20;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "a0.b2.c3";
__n22["raw"] := "'a0.b2.c3'";
__n21 := [ __n22 ];
__n6["arguments"] := __n21;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__executed";
__n23["test"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: /[xyz]*1/.test('a0.b2.c3') === false";
__n31["raw"] := "'#1: /[xyz]*1/.test(\\'a0.b2.c3\\') === false'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n23["consequent"] := __n25;
__n23["alternate"] := null;
__n1 := [ __n2, __n23 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [ "__executed" ];
__n0["variableDeclarations"] := __n32;
__n33 := [  ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}