function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/java(script)?/";
__n8["raw"] := "/java(script)?/";
__n8["source"] := "java(script)?";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Char";
__n12["value"] := "j";
__n12["kind"] := "simple";
__n12["symbol"] := "j";
__n12["codePoint"] := 106.;
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "a";
__n13["kind"] := "simple";
__n13["symbol"] := "a";
__n13["codePoint"] := 97.;
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "v";
__n14["kind"] := "simple";
__n14["symbol"] := "v";
__n14["codePoint"] := 118.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "a";
__n15["kind"] := "simple";
__n15["symbol"] := "a";
__n15["codePoint"] := 97.;
__n16 := {  };
__n16["type"] := "Repetition";
__n17 := {  };
__n17["type"] := "Group";
__n17["capturing"] := true;
__n17["number"] := 1.;
__n18 := {  };
__n18["type"] := "Alternative";
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "s";
__n20["kind"] := "simple";
__n20["symbol"] := "s";
__n20["codePoint"] := 115.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "c";
__n21["kind"] := "simple";
__n21["symbol"] := "c";
__n21["codePoint"] := 99.;
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "r";
__n22["kind"] := "simple";
__n22["symbol"] := "r";
__n22["codePoint"] := 114.;
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "i";
__n23["kind"] := "simple";
__n23["symbol"] := "i";
__n23["codePoint"] := 105.;
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "p";
__n24["kind"] := "simple";
__n24["symbol"] := "p";
__n24["codePoint"] := 112.;
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "t";
__n25["kind"] := "simple";
__n25["symbol"] := "t";
__n25["codePoint"] := 116.;
__n19 := [ __n20, __n21, __n22, __n23, __n24, __n25 ];
__n18["expressions"] := __n19;
__n17["expression"] := __n18;
__n16["expression"] := __n17;
__n26 := {  };
__n26["type"] := "Quantifier";
__n26["kind"] := "?";
__n26["greedy"] := true;
__n16["quantifier"] := __n26;
__n16["parenIndex"] := 1.;
__n16["parenCount"] := 0.;
__n11 := [ __n12, __n13, __n14, __n15, __n16 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 1.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "test";
__n27["raw"] := "\"test\"";
__n7["property"] := __n27;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "state: both Java and JavaScript used in web development";
__n29["raw"] := "\"state: both Java and JavaScript used in web development\"";
__n28 := [ __n29 ];
__n6["arguments"] := __n28;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__executed";
__n30["test"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: /java(script)?/.test(\"state: both Java and JavaScript used in web development\") === false";
__n38["raw"] := "'#1: /java(script)?/.test(\"state: both Java and JavaScript used in web development\") === false'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n30["consequent"] := __n32;
__n30["alternate"] := null;
__n1 := [ __n2, __n30 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [ "__executed" ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}