function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/x/i";
__n6["raw"] := "/x/i";
__n6["source"] := "x";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Char";
__n8["value"] := "x";
__n8["kind"] := "simple";
__n8["symbol"] := "x";
__n8["codePoint"] := 120.;
__n7["body"] := __n8;
__n7["flags"] := "i";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__instance";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "RegExp";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__re";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__re";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "indicator";
__n21["raw"] := "\"indicator\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n18["right"] := __n22;
__n17["expression"] := __n18;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__instance";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "indicator";
__n27["raw"] := "\"indicator\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n24["right"] := __n28;
__n23["test"] := __n24;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: __re = /x/i; __instance = RegExp(__re); __re.indicator = 1; __instance.indicator === 1. Actual: ";
__n36["raw"] := "'#1: __re = /x/i; __instance = RegExp(__re); __re.indicator = 1; __instance.indicator === 1. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__instance";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "indicator";
__n39["raw"] := "\"indicator\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n23["consequent"] := __n29;
__n23["alternate"] := null;
__n1 := [ __n2, __n9, __n17, __n23 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n40 := [ "__re", "__instance" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}