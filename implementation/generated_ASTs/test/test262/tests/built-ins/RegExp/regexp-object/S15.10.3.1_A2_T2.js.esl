function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1.1: var x = 1; RegExp(/[a-b]?/, x) throw SyntaxError. Actual: ";
__n15["raw"] := "'#1.1: var x = 1; RegExp(/[a-b]?/, x) throw SyntaxError. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "RegExp";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "/[a-b]?/";
__n19["raw"] := "/[a-b]?/";
__n19["source"] := "[a-b]?";
__n20 := {  };
__n20["type"] := "RegExp";
__n21 := {  };
__n21["type"] := "Repetition";
__n22 := {  };
__n22["type"] := "CharacterClass";
__n24 := {  };
__n24["type"] := "ClassRange";
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "a";
__n25["kind"] := "simple";
__n25["symbol"] := "a";
__n25["codePoint"] := 97.;
__n24["from"] := __n25;
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := "b";
__n26["kind"] := "simple";
__n26["symbol"] := "b";
__n26["codePoint"] := 98.;
__n24["to"] := __n26;
__n23 := [ __n24 ];
__n22["expressions"] := __n23;
__n21["expression"] := __n22;
__n27 := {  };
__n27["type"] := "Quantifier";
__n27["kind"] := "?";
__n27["greedy"] := true;
__n21["quantifier"] := __n27;
__n21["parenIndex"] := 0.;
__n21["parenCount"] := 0.;
__n20["body"] := __n21;
__n20["flags"] := "";
__n20["nCaps"] := 0.;
__n19["regex"] := __n20;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n18 := [ __n19, __n28 ];
__n16["arguments"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n29 := {  };
__n29["type"] := "CatchClause";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["param"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "instanceof";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "SyntaxError";
__n35["right"] := __n37;
__n34["left"] := __n35;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := true;
__n38["raw"] := "true";
__n34["right"] := __n38;
__n33["test"] := __n34;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#1.2: var x = 1; RegExp(/[a-b]?/, x) throw SyntaxError. Actual: ";
__n46["raw"] := "'#1.2: var x = 1; RegExp(/[a-b]?/, x) throw SyntaxError. Actual: '";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "e";
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n33["consequent"] := __n39;
__n33["alternate"] := null;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n29["body"] := __n31;
__n7["handler"] := __n29;
__n7["finalizer"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n48 := [ "x" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}