function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "isConstructor";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "MemberExpression";
__n11["computed"] := true;
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Set";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "prototype";
__n14["raw"] := "\"prototype\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["object"] := __n12;
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Symbol";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "iterator";
__n17["raw"] := "\"iterator\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n11["property"] := __n15;
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := false;
__n18["raw"] := "false";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "isConstructor(Set.prototype[Symbol.iterator]) must return false";
__n19["raw"] := "'isConstructor(Set.prototype[Symbol.iterator]) must return false'";
__n7 := [ __n8, __n18, __n19 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "throws";
__n24["raw"] := "\"throws\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "TypeError";
__n27 := {  };
__n27["type"] := "ArrowFunctionExpression";
__n27["id"] := null;
__n28 := [  ];
__n27["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "s";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Set";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "ArrayExpression";
__n39 := [  ];
__n38["elements"] := __n39;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "let";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "NewExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "s";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Symbol";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "iterator";
__n46["raw"] := "\"iterator\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n42["property"] := __n44;
__n41["callee"] := __n42;
__n47 := [  ];
__n41["arguments"] := __n47;
__n40["expression"] := __n41;
__n30 := [ __n31, __n40 ];
__n29["body"] := __n30;
__n27["body"] := __n29;
__n27["generator"] := false;
__n27["expression"] := false;
__n27["async"] := false;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "`let s = new Set([]); new s[Symbol.iterator]()` throws TypeError";
__n48["raw"] := "'`let s = new Set([]); new s[Symbol.iterator]()` throws TypeError'";
__n25 := [ __n26, __n27, __n48 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n1 := [ __n2, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n49 := [  ];
__n0["variableDeclarations"] := __n49;
__n50 := [  ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}