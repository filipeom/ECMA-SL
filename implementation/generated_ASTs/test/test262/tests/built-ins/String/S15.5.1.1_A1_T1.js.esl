function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n13 := [  ];
__n12["body"] := __n13;
__n14 := [  ];
__n12["variableDeclarations"] := __n14;
__n15 := [  ];
__n12["functionDeclarations"] := __n15;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["expression"] := false;
__n10["async"] := false;
__n9["callee"] := __n10;
__n16 := [  ];
__n9["arguments"] := __n16;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "typeof";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__str";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["left"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "string";
__n21["raw"] := "\"string\"";
__n18["right"] := __n21;
__n17["test"] := __n18;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: __str = String(function(){}()); typeof __str === \"string\". Actual: typeof __str ===";
__n29["raw"] := "'#1: __str = String(function(){}()); typeof __str === \"string\". Actual: typeof __str ==='";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "typeof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__str";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n17["consequent"] := __n22;
__n17["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__str";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "undefined";
__n35["raw"] := "\"undefined\"";
__n33["right"] := __n35;
__n32["test"] := __n33;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: __str = String(function(){}()); __str === \"undefined\". Actual: __str ===";
__n43["raw"] := "'#2: __str = String(function(){}()); __str === \"undefined\". Actual: __str ==='";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__str";
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n32["consequent"] := __n36;
__n32["alternate"] := null;
__n1 := [ __n2, __n17, __n32 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n45 := [ "__str" ];
__n0["variableDeclarations"] := __n45;
__n46 := [  ];
__n0["functionDeclarations"] := __n46;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}