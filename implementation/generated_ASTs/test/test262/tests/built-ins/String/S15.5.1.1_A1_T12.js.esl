function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "/";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "a";
__n11["raw"] := "\"a\"";
__n9["right"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "UnaryExpression";
__n14["operator"] := "typeof";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "__str";
__n14["argument"] := __n15;
__n14["prefix"] := true;
__n13["left"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "string";
__n16["raw"] := "\"string\"";
__n13["right"] := __n16;
__n12["test"] := __n13;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: __str = String(1/\"a\"); typeof __str === \"string\". Actual: typeof __str ===";
__n24["raw"] := "'#1: __str = String(1/\"a\"); typeof __str === \"string\". Actual: typeof __str ==='";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "typeof";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__str";
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n12["consequent"] := __n17;
__n12["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__str";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "NaN";
__n30["raw"] := "\"NaN\"";
__n28["right"] := __n30;
__n27["test"] := __n28;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: __str = String(1/\"a\"); __str === \"NaN\". Actual: __str ===";
__n38["raw"] := "'#2: __str = String(1/\"a\"); __str === \"NaN\". Actual: __str ==='";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__str";
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n27["consequent"] := __n31;
__n27["alternate"] := null;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__str";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "String";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "*";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "b";
__n47["raw"] := "\"b\"";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 'null;
__n48["raw"] := "\"'null\"";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "typeof";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__str";
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n50["left"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "string";
__n53["raw"] := "\"string\"";
__n50["right"] := __n53;
__n49["test"] := __n50;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#3: __str = String(\"b\"*null); typeof __str === \"string\". Actual: typeof __str ===";
__n61["raw"] := "'#3: __str = String(\"b\"*null); typeof __str === \"string\". Actual: typeof __str ==='";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "UnaryExpression";
__n62["operator"] := "typeof";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__str";
__n62["argument"] := __n63;
__n62["prefix"] := true;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n49["consequent"] := __n54;
__n49["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "__str";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "NaN";
__n67["raw"] := "\"NaN\"";
__n65["right"] := __n67;
__n64["test"] := __n65;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: __str = String(\"b\"*null); __str === \"NaN\". Actual: __str ===";
__n75["raw"] := "'#4: __str = String(\"b\"*null); __str === \"NaN\". Actual: __str ==='";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "__str";
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n64["consequent"] := __n68;
__n64["alternate"] := null;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "AssignmentExpression";
__n78["operator"] := "=";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__str";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "String";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Number";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "NaN";
__n85["raw"] := "\"NaN\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n78["right"] := __n80;
__n77["expression"] := __n78;
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "!==";
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "typeof";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "__str";
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n87["left"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "string";
__n90["raw"] := "\"string\"";
__n87["right"] := __n90;
__n86["test"] := __n87;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ExpressionStatement";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "$ERROR";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "+";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#5: __str = String(Number.NaN); typeof __str === \"string\". Actual: typeof __str ===";
__n98["raw"] := "'#5: __str = String(Number.NaN); typeof __str === \"string\". Actual: typeof __str ==='";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "UnaryExpression";
__n99["operator"] := "typeof";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "__str";
__n99["argument"] := __n100;
__n99["prefix"] := true;
__n97["right"] := __n99;
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["expression"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n86["consequent"] := __n91;
__n86["alternate"] := null;
__n101 := {  };
__n101["type"] := "IfStatement";
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "!==";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "__str";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "NaN";
__n104["raw"] := "\"NaN\"";
__n102["right"] := __n104;
__n101["test"] := __n102;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "$ERROR";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "+";
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "#6: __str = String(Number.NaN); __str === \"NaN\". Actual: __str ===";
__n112["raw"] := "'#6: __str = String(Number.NaN); __str === \"NaN\". Actual: __str ==='";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "__str";
__n111["right"] := __n113;
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["expression"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n101["consequent"] := __n105;
__n101["alternate"] := null;
__n1 := [ __n2, __n12, __n27, __n40, __n49, __n64, __n77, __n86, __n101 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n114 := [ "__str" ];
__n0["variableDeclarations"] := __n114;
__n115 := [  ];
__n0["functionDeclarations"] := __n115;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}