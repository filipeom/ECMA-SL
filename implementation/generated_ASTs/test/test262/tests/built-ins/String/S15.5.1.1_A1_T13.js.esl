function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__str";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "string";
__n14["raw"] := "\"string\"";
__n11["right"] := __n14;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: __str = String(true); typeof __str === \"string\". Actual: typeof __str ===";
__n22["raw"] := "'#1: __str = String(true); typeof __str === \"string\". Actual: typeof __str ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__str";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__str";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "true";
__n28["raw"] := "\"true\"";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: __str = String(true); __str === \"true\". Actual: __str ===";
__n36["raw"] := "'#2: __str = String(true); __str === \"true\". Actual: __str ==='";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__str";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "AssignmentExpression";
__n39["operator"] := "=";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__str";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "String";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := false;
__n44["raw"] := "false";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n39["right"] := __n41;
__n38["expression"] := __n39;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "typeof";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__str";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["left"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "string";
__n49["raw"] := "\"string\"";
__n46["right"] := __n49;
__n45["test"] := __n46;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#3: __str = String(false); typeof __str === \"string\". Actual: typeof __str ===";
__n57["raw"] := "'#3: __str = String(false); typeof __str === \"string\". Actual: typeof __str ==='";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "typeof";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__str";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n56["right"] := __n58;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n45["consequent"] := __n50;
__n45["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__str";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "false";
__n63["raw"] := "\"false\"";
__n61["right"] := __n63;
__n60["test"] := __n61;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#4: __str = String(false); __str === \"false\". Actual: __str ===";
__n71["raw"] := "'#4: __str = String(false); __str === \"false\". Actual: __str ==='";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__str";
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n60["consequent"] := __n64;
__n60["alternate"] := null;
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "AssignmentExpression";
__n74["operator"] := "=";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "__str";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "String";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "Boolean";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := true;
__n82["raw"] := "true";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n74["right"] := __n76;
__n73["expression"] := __n74;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "UnaryExpression";
__n85["operator"] := "typeof";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "__str";
__n85["argument"] := __n86;
__n85["prefix"] := true;
__n84["left"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "string";
__n87["raw"] := "\"string\"";
__n84["right"] := __n87;
__n83["test"] := __n84;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "$ERROR";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "+";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#5: __str = String(Boolean(true)); typeof __str === \"string\". Actual: typeof __str ===";
__n95["raw"] := "'#5: __str = String(Boolean(true)); typeof __str === \"string\". Actual: typeof __str ==='";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "UnaryExpression";
__n96["operator"] := "typeof";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "__str";
__n96["argument"] := __n97;
__n96["prefix"] := true;
__n94["right"] := __n96;
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n83["consequent"] := __n88;
__n83["alternate"] := null;
__n98 := {  };
__n98["type"] := "IfStatement";
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "!==";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "__str";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "true";
__n101["raw"] := "\"true\"";
__n99["right"] := __n101;
__n98["test"] := __n99;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$ERROR";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "+";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#6: __str = String(Boolean(true)); __str === \"true\". Actual: __str ===";
__n109["raw"] := "'#6: __str = String(Boolean(true)); __str === \"true\". Actual: __str ==='";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "__str";
__n108["right"] := __n110;
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n103 := [ __n104 ];
__n102["body"] := __n103;
__n98["consequent"] := __n102;
__n98["alternate"] := null;
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "AssignmentExpression";
__n112["operator"] := "=";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "__str";
__n112["left"] := __n113;
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "String";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "Boolean";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := false;
__n120["raw"] := "false";
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n112["right"] := __n114;
__n111["expression"] := __n112;
__n121 := {  };
__n121["type"] := "IfStatement";
__n122 := {  };
__n122["type"] := "BinaryExpression";
__n122["operator"] := "!==";
__n123 := {  };
__n123["type"] := "UnaryExpression";
__n123["operator"] := "typeof";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "__str";
__n123["argument"] := __n124;
__n123["prefix"] := true;
__n122["left"] := __n123;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "string";
__n125["raw"] := "\"string\"";
__n122["right"] := __n125;
__n121["test"] := __n122;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "+";
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#7: __str = String(Boolean(false)); typeof __str === \"string\". Actual: typeof __str ===";
__n133["raw"] := "'#7: __str = String(Boolean(false)); typeof __str === \"string\". Actual: typeof __str ==='";
__n132["left"] := __n133;
__n134 := {  };
__n134["type"] := "UnaryExpression";
__n134["operator"] := "typeof";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "__str";
__n134["argument"] := __n135;
__n134["prefix"] := true;
__n132["right"] := __n134;
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n121["consequent"] := __n126;
__n121["alternate"] := null;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!==";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "__str";
__n137["left"] := __n138;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "false";
__n139["raw"] := "\"false\"";
__n137["right"] := __n139;
__n136["test"] := __n137;
__n140 := {  };
__n140["type"] := "BlockStatement";
__n142 := {  };
__n142["type"] := "ExpressionStatement";
__n143 := {  };
__n143["type"] := "CallExpression";
__n144 := {  };
__n144["type"] := "Identifier";
__n144["name"] := "$ERROR";
__n143["callee"] := __n144;
__n146 := {  };
__n146["type"] := "BinaryExpression";
__n146["operator"] := "+";
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := "#8: __str = String(Boolean(false)); __str === \"false\". Actual: __str ===";
__n147["raw"] := "'#8: __str = String(Boolean(false)); __str === \"false\". Actual: __str ==='";
__n146["left"] := __n147;
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "__str";
__n146["right"] := __n148;
__n145 := [ __n146 ];
__n143["arguments"] := __n145;
__n142["expression"] := __n143;
__n141 := [ __n142 ];
__n140["body"] := __n141;
__n136["consequent"] := __n140;
__n136["alternate"] := null;
__n1 := [ __n2, __n10, __n25, __n38, __n45, __n60, __n73, __n83, __n98, __n111, __n121, __n136 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n149 := [ "__str" ];
__n0["variableDeclarations"] := __n149;
__n150 := [  ];
__n0["functionDeclarations"] := __n150;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}