function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1e+21;
__n9["raw"] := "1000000000000000000000";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__str";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "string";
__n14["raw"] := "\"string\"";
__n11["right"] := __n14;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: __str = String(1000000000000000000000); typeof __str === \"string\". Actual: typeof __str ===";
__n22["raw"] := "'#1: __str = String(1000000000000000000000); typeof __str === \"string\". Actual: typeof __str ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__str";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__str";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "1e+21";
__n28["raw"] := "\"1e+21\"";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: __str = String(1000000000000000000000); __str === \"1e+21\". Actual: __str ===";
__n36["raw"] := "'#2: __str = String(1000000000000000000000); __str === \"1e+21\". Actual: __str ==='";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__str";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "AssignmentExpression";
__n39["operator"] := "=";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__str";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "String";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1e+22;
__n44["raw"] := "10000000000000000000000";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n39["right"] := __n41;
__n38["expression"] := __n39;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "typeof";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__str";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["left"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "string";
__n49["raw"] := "\"string\"";
__n46["right"] := __n49;
__n45["test"] := __n46;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#3: __str = String(10000000000000000000000); typeof __str === \"string\". Actual: typeof __str ===";
__n57["raw"] := "'#3: __str = String(10000000000000000000000); typeof __str === \"string\". Actual: typeof __str ==='";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "typeof";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__str";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n56["right"] := __n58;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n45["consequent"] := __n50;
__n45["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__str";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "1e+22";
__n63["raw"] := "\"1e+22\"";
__n61["right"] := __n63;
__n60["test"] := __n61;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#4: __str = String(10000000000000000000000); __str === \"1e+22\". Actual: __str ===";
__n71["raw"] := "'#4: __str = String(10000000000000000000000); __str === \"1e+22\". Actual: __str ==='";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__str";
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n60["consequent"] := __n64;
__n60["alternate"] := null;
__n1 := [ __n2, __n10, __n25, __n38, __n45, __n60 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n73 := [ "__str" ];
__n0["variableDeclarations"] := __n73;
__n74 := [  ];
__n0["functionDeclarations"] := __n74;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}