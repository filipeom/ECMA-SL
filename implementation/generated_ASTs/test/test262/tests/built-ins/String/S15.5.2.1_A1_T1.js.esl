function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "typeof";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__str";
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10["left"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "object";
__n13["raw"] := "\"object\"";
__n10["right"] := __n13;
__n9["test"] := __n10;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: __str = new String; typeof __str === \"object\". Actual: typeof __str ===";
__n21["raw"] := "'#1: __str = new String; typeof __str === \"object\". Actual: typeof __str ==='";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "typeof";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__str";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n9["consequent"] := __n14;
__n9["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__str";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "constructor";
__n28["raw"] := "\"constructor\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["left"] := __n26;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "String";
__n25["right"] := __n29;
__n24["test"] := __n25;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1.5: __str = new String; __str.constructor === String. Actual: __str.constructor ===";
__n37["raw"] := "'#1.5: __str = new String; __str.constructor === String. Actual: __str.constructor ==='";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__str";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "constructor";
__n40["raw"] := "\"constructor\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n36["right"] := __n38;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n24["consequent"] := __n30;
__n24["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!=";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__str";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "";
__n44["raw"] := "\"\"";
__n42["right"] := __n44;
__n41["test"] := __n42;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2: __str = new String; __str == \"\". Actual: __str ==";
__n52["raw"] := "'#2: __str = new String; __str == \"\". Actual: __str =='";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__str";
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n41["consequent"] := __n45;
__n41["alternate"] := null;
__n54 := {  };
__n54["type"] := "IfStatement";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "===";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__str";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "";
__n57["raw"] := "\"\"";
__n55["right"] := __n57;
__n54["test"] := __n55;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#3: __str = new String; __str !== \"\"";
__n64["raw"] := "'#3: __str = new String; __str !== \"\"'";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n54["consequent"] := __n58;
__n54["alternate"] := null;
__n1 := [ __n2, __n9, __n24, __n41, __n54 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n65 := [ "__str" ];
__n0["variableDeclarations"] := __n65;
__n66 := [  ];
__n0["functionDeclarations"] := __n66;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}