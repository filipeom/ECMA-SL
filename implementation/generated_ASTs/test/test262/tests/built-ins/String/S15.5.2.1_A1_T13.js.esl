function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "f";
__n14["argument"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "f";
__n16["expression"] := __n17;
__n13 := [ __n14, __n16 ];
__n12["body"] := __n13;
__n18 := [  ];
__n12["variableDeclarations"] := __n18;
__n20 := {  };
__n20["type"] := "FunctionDeclaration";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n20["id"] := __n21;
__n22 := [  ];
__n20["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n24 := [  ];
__n23["body"] := __n24;
__n25 := [  ];
__n23["variableDeclarations"] := __n25;
__n26 := [  ];
__n23["functionDeclarations"] := __n26;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n20["body"] := __n23;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19 := [ __n20 ];
__n12["functionDeclarations"] := __n19;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["expression"] := false;
__n10["async"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__obj";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "valueOf";
__n31["raw"] := "\"valueOf\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["left"] := __n29;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [  ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ThrowStatement";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "invalueof";
__n37["raw"] := "\"invalueof\"";
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n38 := [  ];
__n34["variableDeclarations"] := __n38;
__n39 := [  ];
__n34["functionDeclarations"] := __n39;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["expression"] := false;
__n32["async"] := false;
__n28["right"] := __n32;
__n27["expression"] := __n28;
__n40 := {  };
__n40["type"] := "TryStatement";
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "VariableDeclaration";
__n45 := {  };
__n45["type"] := "VariableDeclarator";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__str";
__n45["id"] := __n46;
__n47 := {  };
__n47["type"] := "NewExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "String";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__obj";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n45["init"] := __n47;
__n44 := [ __n45 ];
__n43["declarations"] := __n44;
__n43["kind"] := "var";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#1: __obj.valueOf=function(){throw \"invalueof\"}; __str = new String(__obj) lead throwing exception";
__n55["raw"] := "'#1: __obj.valueOf=function(){throw \"invalueof\"}; __str = new String(__obj) lead throwing exception'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n42 := [ __n43, __n51 ];
__n41["body"] := __n42;
__n40["block"] := __n41;
__n56 := {  };
__n56["type"] := "CatchClause";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "e";
__n56["param"] := __n57;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "e";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "invalueof";
__n63["raw"] := "\"invalueof\"";
__n61["right"] := __n63;
__n60["test"] := __n61;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#1.1: e===\"invalueof\". Actual: e===";
__n71["raw"] := "'#1.1: e===\"invalueof\". Actual: e==='";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "e";
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n60["consequent"] := __n64;
__n60["alternate"] := null;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n56["body"] := __n58;
__n40["handler"] := __n56;
__n40["finalizer"] := null;
__n1 := [ __n2, __n27, __n40 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n73 := [ "__obj", "__str" ];
__n0["variableDeclarations"] := __n73;
__n74 := [  ];
__n0["functionDeclarations"] := __n74;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}