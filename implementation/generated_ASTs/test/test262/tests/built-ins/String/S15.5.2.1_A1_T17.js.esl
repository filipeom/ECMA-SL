function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.2345;
__n9["raw"] := "1.2345";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__str";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "object";
__n14["raw"] := "\"object\"";
__n11["right"] := __n14;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: __str = new String(1.2345); typeof __str === \"object\". Actual: typeof __str ===";
__n22["raw"] := "'#1: __str = new String(1.2345); typeof __str === \"object\". Actual: typeof __str ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__str";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__str";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "constructor";
__n29["raw"] := "\"constructor\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "String";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1.5: __str = new String(1.2345); __str.constructor === String. Actual: __str.constructor ===";
__n38["raw"] := "'#1.5: __str = new String(1.2345); __str.constructor === String. Actual: __str.constructor ==='";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__str";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "constructor";
__n41["raw"] := "\"constructor\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__str";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "1.2345";
__n45["raw"] := "\"1.2345\"";
__n43["right"] := __n45;
__n42["test"] := __n43;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#2: __str = new String(1.2345); __str ==\"1.2345\". Actual: __str ==";
__n53["raw"] := "'#2: __str = new String(1.2345); __str ==\"1.2345\". Actual: __str =='";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__str";
__n52["right"] := __n54;
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n42["consequent"] := __n46;
__n42["alternate"] := null;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "AssignmentExpression";
__n56["operator"] := "=";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__str";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "String";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 1.23456789;
__n61["raw"] := "1.234567890";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n56["right"] := __n58;
__n55["expression"] := __n56;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "typeof";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__str";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63["left"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "object";
__n66["raw"] := "\"object\"";
__n63["right"] := __n66;
__n62["test"] := __n63;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: __str = new String(1.234567890); typeof __str === \"object\". Actual: typeof __str ===";
__n74["raw"] := "'#3: __str = new String(1.234567890); typeof __str === \"object\". Actual: typeof __str ==='";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "UnaryExpression";
__n75["operator"] := "typeof";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "__str";
__n75["argument"] := __n76;
__n75["prefix"] := true;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n62["consequent"] := __n67;
__n62["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__str";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "constructor";
__n81["raw"] := "\"constructor\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n78["left"] := __n79;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "String";
__n78["right"] := __n82;
__n77["test"] := __n78;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#3.5: __str = new String(1.234567890); __str.constructor === String. Actual: __str.constructor ===";
__n90["raw"] := "'#3.5: __str = new String(1.234567890); __str.constructor === String. Actual: __str.constructor ==='";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "MemberExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "__str";
__n91["object"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "constructor";
__n93["raw"] := "\"constructor\"";
__n91["property"] := __n93;
__n91["computed"] := true;
__n89["right"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n77["consequent"] := __n83;
__n77["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "!=";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "__str";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "1.23456789";
__n97["raw"] := "\"1.23456789\"";
__n95["right"] := __n97;
__n94["test"] := __n95;
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "$ERROR";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "+";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "#4: __str = new String(1.234567890); __str ==\"1.23456789\". Actual: __str ==";
__n105["raw"] := "'#4: __str = new String(1.234567890); __str ==\"1.23456789\". Actual: __str =='";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "__str";
__n104["right"] := __n106;
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["expression"] := __n101;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n94["consequent"] := __n98;
__n94["alternate"] := null;
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "AssignmentExpression";
__n108["operator"] := "=";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "__str";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "NewExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "String";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 1.2345;
__n113["raw"] := "1.234500000000000000000000000";
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n108["right"] := __n110;
__n107["expression"] := __n108;
__n114 := {  };
__n114["type"] := "IfStatement";
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "!==";
__n116 := {  };
__n116["type"] := "UnaryExpression";
__n116["operator"] := "typeof";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "__str";
__n116["argument"] := __n117;
__n116["prefix"] := true;
__n115["left"] := __n116;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "object";
__n118["raw"] := "\"object\"";
__n115["right"] := __n118;
__n114["test"] := __n115;
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "$ERROR";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "BinaryExpression";
__n125["operator"] := "+";
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "#5: __str = new String(1.234500000000000000000000000); typeof __str === \"object\". Actual: typeof __str ===";
__n126["raw"] := "'#5: __str = new String(1.234500000000000000000000000); typeof __str === \"object\". Actual: typeof __str ==='";
__n125["left"] := __n126;
__n127 := {  };
__n127["type"] := "UnaryExpression";
__n127["operator"] := "typeof";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "__str";
__n127["argument"] := __n128;
__n127["prefix"] := true;
__n125["right"] := __n127;
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n120 := [ __n121 ];
__n119["body"] := __n120;
__n114["consequent"] := __n119;
__n114["alternate"] := null;
__n129 := {  };
__n129["type"] := "IfStatement";
__n130 := {  };
__n130["type"] := "BinaryExpression";
__n130["operator"] := "!==";
__n131 := {  };
__n131["type"] := "MemberExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "__str";
__n131["object"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "constructor";
__n133["raw"] := "\"constructor\"";
__n131["property"] := __n133;
__n131["computed"] := true;
__n130["left"] := __n131;
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "String";
__n130["right"] := __n134;
__n129["test"] := __n130;
__n135 := {  };
__n135["type"] := "BlockStatement";
__n137 := {  };
__n137["type"] := "ExpressionStatement";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "$ERROR";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "BinaryExpression";
__n141["operator"] := "+";
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := "#5.5: __str = new String(1.234500000000000000000000000); __str.constructor === String. Actual: __str.constructor ===";
__n142["raw"] := "'#5.5: __str = new String(1.234500000000000000000000000); __str.constructor === String. Actual: __str.constructor ==='";
__n141["left"] := __n142;
__n143 := {  };
__n143["type"] := "MemberExpression";
__n144 := {  };
__n144["type"] := "Identifier";
__n144["name"] := "__str";
__n143["object"] := __n144;
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "constructor";
__n145["raw"] := "\"constructor\"";
__n143["property"] := __n145;
__n143["computed"] := true;
__n141["right"] := __n143;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["expression"] := __n138;
__n136 := [ __n137 ];
__n135["body"] := __n136;
__n129["consequent"] := __n135;
__n129["alternate"] := null;
__n146 := {  };
__n146["type"] := "IfStatement";
__n147 := {  };
__n147["type"] := "BinaryExpression";
__n147["operator"] := "!=";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "__str";
__n147["left"] := __n148;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "1.2345";
__n149["raw"] := "\"1.2345\"";
__n147["right"] := __n149;
__n146["test"] := __n147;
__n150 := {  };
__n150["type"] := "BlockStatement";
__n152 := {  };
__n152["type"] := "ExpressionStatement";
__n153 := {  };
__n153["type"] := "CallExpression";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "$ERROR";
__n153["callee"] := __n154;
__n156 := {  };
__n156["type"] := "BinaryExpression";
__n156["operator"] := "+";
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "#6: __str = new String(1.234500000000000000000000000); __str ==\"1.2345\". Actual: __str ==";
__n157["raw"] := "'#6: __str = new String(1.234500000000000000000000000); __str ==\"1.2345\". Actual: __str =='";
__n156["left"] := __n157;
__n158 := {  };
__n158["type"] := "Identifier";
__n158["name"] := "__str";
__n156["right"] := __n158;
__n155 := [ __n156 ];
__n153["arguments"] := __n155;
__n152["expression"] := __n153;
__n151 := [ __n152 ];
__n150["body"] := __n151;
__n146["consequent"] := __n150;
__n146["alternate"] := null;
__n1 := [ __n2, __n10, __n25, __n42, __n55, __n62, __n77, __n94, __n107, __n114, __n129, __n146 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n159 := [ "__str" ];
__n0["variableDeclarations"] := __n159;
__n160 := [  ];
__n0["functionDeclarations"] := __n160;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}