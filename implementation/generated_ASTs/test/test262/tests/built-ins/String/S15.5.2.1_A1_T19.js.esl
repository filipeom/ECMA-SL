function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "NewExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Array";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 3.;
__n14["raw"] := "3";
__n11 := [ __n12, __n13, __n14 ];
__n9["arguments"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "typeof";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "__str";
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["left"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "object";
__n19["raw"] := "\"object\"";
__n16["right"] := __n19;
__n15["test"] := __n16;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: __str = new String(new Array(1,2,3)); typeof __str === \"object\". Actual: typeof __str ===";
__n27["raw"] := "'#1: __str = new String(new Array(1,2,3)); typeof __str === \"object\". Actual: typeof __str ==='";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "typeof";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__str";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n15["consequent"] := __n20;
__n15["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__str";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "constructor";
__n34["raw"] := "\"constructor\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "String";
__n31["right"] := __n35;
__n30["test"] := __n31;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#1.5: __str = new String(new Array(1,2,3)); __str.constructor === String. Actual: __str.constructor ===";
__n43["raw"] := "'#1.5: __str = new String(new Array(1,2,3)); __str.constructor === String. Actual: __str.constructor ==='";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__str";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "constructor";
__n46["raw"] := "\"constructor\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n30["consequent"] := __n36;
__n30["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!=";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__str";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "1,2,3";
__n50["raw"] := "\"1,2,3\"";
__n48["right"] := __n50;
__n47["test"] := __n48;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#2: __str = new String(new Array(1,2,3)); __str ==\"1,2,3\". Actual: __str ==";
__n58["raw"] := "'#2: __str = new String(new Array(1,2,3)); __str ==\"1,2,3\". Actual: __str =='";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__str";
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n47["consequent"] := __n51;
__n47["alternate"] := null;
__n1 := [ __n2, __n15, __n30, __n47 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n60 := [ "__str" ];
__n0["variableDeclarations"] := __n60;
__n61 := [  ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}