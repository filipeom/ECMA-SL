function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "";
__n9["raw"] := "\"\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__str";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "object";
__n14["raw"] := "\"object\"";
__n11["right"] := __n14;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: __str = new String(\"\"); typeof __str === \"object\". Actual: typeof __str ===";
__n22["raw"] := "'#1: __str = new String(\"\"); typeof __str === \"object\". Actual: typeof __str ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__str";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__str";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "constructor";
__n29["raw"] := "\"constructor\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "String";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1.5: __str = new String(\"\"); __str.constructor === String. Actual: __str.constructor ===";
__n38["raw"] := "'#1.5: __str = new String(\"\"); __str.constructor === String. Actual: __str.constructor ==='";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__str";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "constructor";
__n41["raw"] := "\"constructor\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__str";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "";
__n45["raw"] := "\"\"";
__n43["right"] := __n45;
__n42["test"] := __n43;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#2: __str = new String(\"\"); __str ==\"\". Actual: __str ==";
__n53["raw"] := "'#2: __str = new String(\"\"); __str ==\"\". Actual: __str =='";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__str";
__n52["right"] := __n54;
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n42["consequent"] := __n46;
__n42["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "===";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__str";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "";
__n58["raw"] := "\"\"";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: __str = new String(\"\"); __str !== \"\"";
__n65["raw"] := "'#3: __str = new String(\"\"); __str !== \"\"'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n1 := [ __n2, __n10, __n25, __n42, __n55 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n66 := [ "__str" ];
__n0["variableDeclarations"] := __n66;
__n67 := [  ];
__n0["functionDeclarations"] := __n67;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}