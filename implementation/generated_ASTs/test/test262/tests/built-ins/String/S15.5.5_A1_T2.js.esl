function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "String";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "a|b";
__n10["raw"] := "\"a|b\"";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["callee"] := __n7;
__n11 := [  ];
__n6["arguments"] := __n11;
__n5["expression"] := __n6;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: String(\"a|b\")() lead to throwing exception";
__n16["raw"] := "'#1: String(\"a|b\")() lead to throwing exception'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n4 := [ __n5, __n12 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n17 := {  };
__n17["type"] := "CatchClause";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "e";
__n17["param"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "!";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "instanceof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "e";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "TypeError";
__n23["right"] := __n25;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["test"] := __n22;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1.1: Exception is instance of TypeError. Actual: exception is ";
__n33["raw"] := "'#1.1: Exception is instance of TypeError. Actual: exception is '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "e";
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n21["consequent"] := __n26;
__n21["alternate"] := null;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n17["body"] := __n19;
__n2["handler"] := __n17;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n35 := [  ];
__n0["variableDeclarations"] := __n35;
__n36 := [  ];
__n0["functionDeclarations"] := __n36;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}