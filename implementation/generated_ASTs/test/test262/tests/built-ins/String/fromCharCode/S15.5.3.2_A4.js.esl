function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__fcc__func";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "fromCharCode";
__n8["raw"] := "\"fromCharCode\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "delete";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "String";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "fromCharCode";
__n13["raw"] := "\"fromCharCode\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["expression"] := __n10;
__n14 := {  };
__n14["type"] := "TryStatement";
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__obj";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "NewExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__fcc__func";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 65.;
__n24["raw"] := "65";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 66.;
__n25["raw"] := "66";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 66.;
__n26["raw"] := "66";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 65.;
__n27["raw"] := "65";
__n23 := [ __n24, __n25, __n26, __n27 ];
__n21["arguments"] := __n23;
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#1: __fcc__func = String.fromCharCode; var __obj = new __fcc__func(65,66,66,65) lead to throwing exception";
__n32["raw"] := "'#1: __fcc__func = String.fromCharCode; var __obj = new __fcc__func(65,66,66,65) lead to throwing exception'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n16 := [ __n17, __n28 ];
__n15["body"] := __n16;
__n14["block"] := __n15;
__n33 := {  };
__n33["type"] := "CatchClause";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "e";
__n33["param"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "instanceof";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "e";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Test262Error";
__n38["right"] := __n40;
__n37["test"] := __n38;
__n41 := {  };
__n41["type"] := "ThrowStatement";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n41["argument"] := __n42;
__n37["consequent"] := __n41;
__n37["alternate"] := null;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n33["body"] := __n35;
__n14["handler"] := __n33;
__n14["finalizer"] := null;
__n1 := [ __n2, __n9, __n14 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n43 := [ "__fcc__func", "__obj" ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}