function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 42.;
__n9["raw"] := "42";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["object"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "charAt";
__n10["raw"] := "\"charAt\"";
__n5["property"] := __n10;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "void";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11 := [ __n12 ];
__n4["arguments"] := __n11;
__n3["left"] := __n4;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "4";
__n14["raw"] := "\"4\"";
__n3["right"] := __n14;
__n2["test"] := __n3;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: String(42).charAt(void 0) === \"4\". Actual: String(42).charAt(void 0) ===";
__n22["raw"] := "'#1: String(42).charAt(void 0) === \"4\". Actual: String(42).charAt(void 0) ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "String";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 42.;
__n28["raw"] := "42";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["object"] := __n25;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "charAt";
__n29["raw"] := "\"charAt\"";
__n24["property"] := __n29;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "void";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 0.;
__n32["raw"] := "0";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30 := [ __n31 ];
__n23["arguments"] := __n30;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["consequent"] := __n15;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [  ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}