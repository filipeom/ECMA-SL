function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "valueOf";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n11 := {  };
__n11["type"] := "Property";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "toString";
__n11["key"] := __n12;
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [  ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ThrowStatement";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "intostring";
__n18["raw"] := "'intostring'";
__n17["argument"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n19 := [  ];
__n15["variableDeclarations"] := __n19;
__n20 := [  ];
__n15["functionDeclarations"] := __n20;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["expression"] := false;
__n13["async"] := false;
__n11["value"] := __n13;
__n11["computed"] := false;
__n11["kind"] := "init";
__n11["shorthand"] := false;
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "charAt";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "String";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "prototype";
__n26["raw"] := "\"prototype\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "charAt";
__n27["raw"] := "\"charAt\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n7 := [ __n8, __n11, __n21 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n28 := {  };
__n28["type"] := "TryStatement";
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "x";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__obj";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "charAt";
__n38["raw"] := "\"charAt\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n39 := [  ];
__n35["arguments"] := __n39;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#1: __obj={valueOf:1,toString:function(){throw 'intostring'},charAt:String.prototype.charAt}; \"var x = __obj.charAt()\" lead to throwing exception";
__n44["raw"] := "'#1: __obj={valueOf:1,toString:function(){throw \\'intostring\\'},charAt:String.prototype.charAt}; \"var x = __obj.charAt()\" lead to throwing exception'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n30 := [ __n31, __n40 ];
__n29["body"] := __n30;
__n28["block"] := __n29;
__n45 := {  };
__n45["type"] := "CatchClause";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n45["param"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "e";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "intostring";
__n52["raw"] := "'intostring'";
__n50["right"] := __n52;
__n49["test"] := __n50;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#1.1: Exception === 'intostring'. Actual: exception ===";
__n60["raw"] := "'#1.1: Exception === \\'intostring\\'. Actual: exception ==='";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "e";
__n59["right"] := __n61;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n49["consequent"] := __n53;
__n49["alternate"] := null;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n45["body"] := __n47;
__n28["handler"] := __n45;
__n28["finalizer"] := null;
__n1 := [ __n2, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n62 := [ "__obj", "x" ];
__n0["variableDeclarations"] := __n62;
__n63 := [  ];
__n0["functionDeclarations"] := __n63;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}