function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 42.;
__n9["raw"] := "42";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["object"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "concat";
__n10["raw"] := "\"concat\"";
__n5["property"] := __n10;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [  ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n16 := [  ];
__n15["body"] := __n16;
__n17 := [  ];
__n15["variableDeclarations"] := __n17;
__n18 := [  ];
__n15["functionDeclarations"] := __n18;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12["callee"] := __n13;
__n19 := [  ];
__n12["arguments"] := __n19;
__n11 := [ __n12 ];
__n4["arguments"] := __n11;
__n3["left"] := __n4;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "42undefined";
__n20["raw"] := "\"42undefined\"";
__n3["right"] := __n20;
__n2["test"] := __n3;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: new String(42).concat(function(){}()) === \"42undefined\". Actual: ";
__n28["raw"] := "'#1: new String(42).concat(function(){}()) === \"42undefined\". Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "NewExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "String";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 42.;
__n34["raw"] := "42";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["object"] := __n31;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "concat";
__n35["raw"] := "\"concat\"";
__n30["property"] := __n35;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n41 := [  ];
__n40["body"] := __n41;
__n42 := [  ];
__n40["variableDeclarations"] := __n42;
__n43 := [  ];
__n40["functionDeclarations"] := __n43;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n37["callee"] := __n38;
__n44 := [  ];
__n37["arguments"] := __n44;
__n36 := [ __n37 ];
__n29["arguments"] := __n36;
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n2["consequent"] := __n21;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n45 := [  ];
__n0["variableDeclarations"] := __n45;
__n46 := [  ];
__n0["functionDeclarations"] := __n46;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}