function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "one";
__n15["raw"] := "\"one\"";
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n16 := [  ];
__n12["variableDeclarations"] := __n16;
__n17 := [  ];
__n12["functionDeclarations"] := __n17;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["expression"] := false;
__n10["async"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__instance";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "concat";
__n22["raw"] := "\"concat\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "String";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "prototype";
__n26["raw"] := "\"prototype\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "concat";
__n27["raw"] := "\"concat\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n19["right"] := __n23;
__n18["expression"] := __n19;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__instance";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "concat";
__n33["raw"] := "\"concat\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "two";
__n35["raw"] := "\"two\"";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n34 := [ __n35, __n36 ];
__n30["arguments"] := __n34;
__n29["left"] := __n30;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "onetwoundefined";
__n37["raw"] := "\"onetwoundefined\"";
__n29["right"] := __n37;
__n28["test"] := __n29;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1: var x; __instance = {toString:function(){return \"one\"}}; __instance.concat = String.prototype.concat;  __instance.concat(\"two\",x) === \"onetwoundefined\". Actual: ";
__n45["raw"] := "'#1: var x; __instance = {toString:function(){return \"one\"}}; __instance.concat = String.prototype.concat;  __instance.concat(\"two\",x) === \"onetwoundefined\". Actual: '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__instance";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "concat";
__n49["raw"] := "\"concat\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["callee"] := __n47;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "two";
__n51["raw"] := "\"two\"";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n50 := [ __n51, __n52 ];
__n46["arguments"] := __n50;
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n28["consequent"] := __n38;
__n28["alternate"] := null;
__n53 := {  };
__n53["type"] := "VariableDeclaration";
__n55 := {  };
__n55["type"] := "VariableDeclarator";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["id"] := __n56;
__n55["init"] := null;
__n54 := [ __n55 ];
__n53["declarations"] := __n54;
__n53["kind"] := "var";
__n1 := [ __n2, __n18, __n28, __n53 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n57 := [ "__instance", "x" ];
__n0["variableDeclarations"] := __n57;
__n58 := [  ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}