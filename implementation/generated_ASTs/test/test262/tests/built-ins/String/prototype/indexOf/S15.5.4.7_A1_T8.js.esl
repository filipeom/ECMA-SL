function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n13 := [  ];
__n12["body"] := __n13;
__n14 := [  ];
__n12["variableDeclarations"] := __n14;
__n15 := [  ];
__n12["functionDeclarations"] := __n15;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["expression"] := false;
__n10["async"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "String";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__obj";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["object"] := __n20;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "indexOf";
__n24["raw"] := "\"indexOf\"";
__n19["property"] := __n24;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "void";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25 := [ __n26 ];
__n18["arguments"] := __n25;
__n17["left"] := __n18;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n17["right"] := __n28;
__n16["test"] := __n17;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: __obj = {toString:function(){}}; String(__obj).indexOf(void 0) === 0. Actual: ";
__n36["raw"] := "'#1: __obj = {toString:function(){}}; String(__obj).indexOf(void 0) === 0. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "String";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__obj";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["object"] := __n39;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "indexOf";
__n43["raw"] := "\"indexOf\"";
__n38["property"] := __n43;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "void";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 0.;
__n46["raw"] := "0";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44 := [ __n45 ];
__n37["arguments"] := __n44;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n16["consequent"] := __n29;
__n16["alternate"] := null;
__n1 := [ __n2, __n16 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n47 := [ "__obj" ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}