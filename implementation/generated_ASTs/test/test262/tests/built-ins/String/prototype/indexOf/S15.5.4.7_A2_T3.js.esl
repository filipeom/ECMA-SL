function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "abcd";
__n6["raw"] := "\"abcd\"";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "indexOf";
__n7["raw"] := "\"indexOf\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "abcdab";
__n9["raw"] := "\"abcdab\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 99.;
__n10["raw"] := "99";
__n8 := [ __n9, __n10 ];
__n4["arguments"] := __n8;
__n3["left"] := __n4;
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "-";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n3["right"] := __n11;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: \"abcd\".indexOf(\"abcdab\",99)===-1. Actual: ";
__n20["raw"] := "'#1: \"abcd\".indexOf(\"abcdab\",99)===-1. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "abcd";
__n23["raw"] := "\"abcd\"";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "indexOf";
__n24["raw"] := "\"indexOf\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "abcdab";
__n26["raw"] := "\"abcdab\"";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 99.;
__n27["raw"] := "99";
__n25 := [ __n26, __n27 ];
__n21["arguments"] := __n25;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n28 := [  ];
__n0["variableDeclarations"] := __n28;
__n29 := [  ];
__n0["functionDeclarations"] := __n29;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}