function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "$$abcdabcd";
__n6["raw"] := "\"$$abcdabcd\"";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "indexOf";
__n7["raw"] := "\"indexOf\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "ab";
__n9["raw"] := "\"ab\"";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n11["id"] := null;
__n12 := [  ];
__n11["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ReturnStatement";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "-";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Infinity";
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["argument"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n18 := [  ];
__n13["variableDeclarations"] := __n18;
__n19 := [  ];
__n13["functionDeclarations"] := __n19;
__n13["codeType"] := "function";
__n13["strict"] := false;
__n11["body"] := __n13;
__n11["generator"] := false;
__n11["expression"] := false;
__n11["async"] := false;
__n10["callee"] := __n11;
__n20 := [  ];
__n10["arguments"] := __n20;
__n8 := [ __n9, __n10 ];
__n4["arguments"] := __n8;
__n3["left"] := __n4;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 2.;
__n21["raw"] := "2";
__n3["right"] := __n21;
__n2["test"] := __n3;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: \"$$abcdabcd\".indexOf(\"ab\", function(){return -Infinity;}())===2. Actual: ";
__n29["raw"] := "'#1: \"$$abcdabcd\".indexOf(\"ab\", function(){return -Infinity;}())===2. Actual: '";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "$$abcdabcd";
__n32["raw"] := "\"$$abcdabcd\"";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "indexOf";
__n33["raw"] := "\"indexOf\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "ab";
__n35["raw"] := "\"ab\"";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "FunctionExpression";
__n37["id"] := null;
__n38 := [  ];
__n37["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ReturnStatement";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "-";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Infinity";
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["argument"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n44 := [  ];
__n39["variableDeclarations"] := __n44;
__n45 := [  ];
__n39["functionDeclarations"] := __n45;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n37["body"] := __n39;
__n37["generator"] := false;
__n37["expression"] := false;
__n37["async"] := false;
__n36["callee"] := __n37;
__n46 := [  ];
__n36["arguments"] := __n46;
__n34 := [ __n35, __n36 ];
__n30["arguments"] := __n34;
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n2["consequent"] := __n22;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n47 := [  ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}