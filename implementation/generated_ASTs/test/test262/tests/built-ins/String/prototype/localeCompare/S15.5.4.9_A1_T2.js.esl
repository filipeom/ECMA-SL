function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "str1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "h";
__n6["raw"] := "\"h\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "str2";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "H";
__n11["raw"] := "\"H\"";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "str1";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "localeCompare";
__n17["raw"] := "\"localeCompare\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "str2";
__n18 := [ __n19 ];
__n14["arguments"] := __n18;
__n13["left"] := __n14;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "-";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "str2";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "localeCompare";
__n24["raw"] := "\"localeCompare\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "str1";
__n25 := [ __n26 ];
__n21["arguments"] := __n25;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n13["right"] := __n20;
__n12["test"] := __n13;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1.1: var str1 = \"h\"; var str2 = \"H\"; str1.localeCompare(str2)===-str2.localeCompare(str1). Actual: ";
__n34["raw"] := "'#1.1: var str1 = \"h\"; var str2 = \"H\"; str1.localeCompare(str2)===-str2.localeCompare(str1). Actual: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "str1";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "localeCompare";
__n38["raw"] := "\"localeCompare\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "str2";
__n39 := [ __n40 ];
__n35["arguments"] := __n39;
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n12["consequent"] := __n27;
__n12["alternate"] := null;
__n1 := [ __n2, __n7, __n12 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n41 := [ "str1", "str2" ];
__n0["variableDeclarations"] := __n41;
__n42 := [  ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}