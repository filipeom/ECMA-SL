function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n4["computed"] := true;
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n8["id"] := null;
__n9 := [  ];
__n8["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ReturnStatement";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "gnulluna";
__n13["raw"] := "\"gnulluna\"";
__n12["argument"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n14 := [  ];
__n10["variableDeclarations"] := __n14;
__n15 := [  ];
__n10["functionDeclarations"] := __n15;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n8["body"] := __n10;
__n8["generator"] := false;
__n8["async"] := false;
__n8["expression"] := false;
__n7["callee"] := __n8;
__n16 := [  ];
__n7["arguments"] := __n16;
__n6["object"] := __n7;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "match";
__n17["raw"] := "\"match\"";
__n6["property"] := __n17;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 'null;
__n19["raw"] := "\"'null\"";
__n18 := [ __n19 ];
__n5["arguments"] := __n18;
__n4["object"] := __n5;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n4["property"] := __n20;
__n3["left"] := __n4;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "null";
__n21["raw"] := "\"null\"";
__n3["right"] := __n21;
__n2["test"] := __n3;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: function(){return \"gnulluna\"}().match(null)[0] === \"null\". Actual: ";
__n29["raw"] := "'#1: function(){return \"gnulluna\"}().match(null)[0] === \"null\". Actual: '";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "MemberExpression";
__n30["computed"] := true;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "FunctionExpression";
__n34["id"] := null;
__n35 := [  ];
__n34["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ReturnStatement";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "gnulluna";
__n39["raw"] := "\"gnulluna\"";
__n38["argument"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n40 := [  ];
__n36["variableDeclarations"] := __n40;
__n41 := [  ];
__n36["functionDeclarations"] := __n41;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n34["body"] := __n36;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33["callee"] := __n34;
__n42 := [  ];
__n33["arguments"] := __n42;
__n32["object"] := __n33;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "match";
__n43["raw"] := "\"match\"";
__n32["property"] := __n43;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 'null;
__n45["raw"] := "\"'null\"";
__n44 := [ __n45 ];
__n31["arguments"] := __n44;
__n30["object"] := __n31;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 0.;
__n46["raw"] := "0";
__n30["property"] := __n46;
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n2["consequent"] := __n22;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [  ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}