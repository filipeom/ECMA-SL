function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__matches";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "02134";
__n8["raw"] := "\"02134\"";
__n7 := [ __n8 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__re";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n13["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n13["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n14 := {  };
__n14["type"] := "RegExp";
__n15 := {  };
__n15["type"] := "Alternative";
__n17 := {  };
__n17["type"] := "Group";
__n17["capturing"] := true;
__n17["number"] := 1.;
__n18 := {  };
__n18["type"] := "Repetition";
__n19 := {  };
__n19["type"] := "CharacterClass";
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "\\d";
__n21["kind"] := "meta";
__n21["symbol"] := 'undefined;
__n21["codePoint"] := nan;
__n20 := [ __n21 ];
__n19["expressions"] := __n20;
__n18["expression"] := __n19;
__n22 := {  };
__n22["type"] := "Quantifier";
__n22["kind"] := "Range";
__n22["from"] := 5.;
__n22["to"] := 5.;
__n22["greedy"] := true;
__n18["quantifier"] := __n22;
__n18["parenIndex"] := 1.;
__n18["parenCount"] := 1.;
__n17["expression"] := __n18;
__n23 := {  };
__n23["type"] := "Repetition";
__n24 := {  };
__n24["type"] := "Group";
__n24["capturing"] := true;
__n24["number"] := 2.;
__n25 := {  };
__n25["type"] := "Alternative";
__n27 := {  };
__n27["type"] := "Repetition";
__n28 := {  };
__n28["type"] := "CharacterClass";
__n30 := {  };
__n30["type"] := "Char";
__n30["value"] := "-";
__n30["kind"] := "simple";
__n30["symbol"] := "-";
__n30["codePoint"] := 45.;
__n31 := {  };
__n31["type"] := "Char";
__n31["value"] := " ";
__n31["kind"] := "simple";
__n31["symbol"] := " ";
__n31["codePoint"] := 32.;
__n31["escaped"] := true;
__n29 := [ __n30, __n31 ];
__n28["expressions"] := __n29;
__n27["expression"] := __n28;
__n32 := {  };
__n32["type"] := "Quantifier";
__n32["kind"] := "?";
__n32["greedy"] := true;
__n27["quantifier"] := __n32;
__n27["parenIndex"] := 2.;
__n27["parenCount"] := 1.;
__n33 := {  };
__n33["type"] := "Repetition";
__n34 := {  };
__n34["type"] := "CharacterClass";
__n36 := {  };
__n36["type"] := "Char";
__n36["value"] := "\\d";
__n36["kind"] := "meta";
__n36["symbol"] := 'undefined;
__n36["codePoint"] := nan;
__n35 := [ __n36 ];
__n34["expressions"] := __n35;
__n33["expression"] := __n34;
__n37 := {  };
__n37["type"] := "Quantifier";
__n37["kind"] := "Range";
__n37["from"] := 4.;
__n37["to"] := 4.;
__n37["greedy"] := true;
__n33["quantifier"] := __n37;
__n33["parenIndex"] := 2.;
__n33["parenCount"] := 1.;
__n26 := [ __n27, __n33 ];
__n25["expressions"] := __n26;
__n24["expression"] := __n25;
__n23["expression"] := __n24;
__n38 := {  };
__n38["type"] := "Quantifier";
__n38["kind"] := "?";
__n38["greedy"] := true;
__n23["quantifier"] := __n38;
__n23["parenIndex"] := 2.;
__n23["parenCount"] := 0.;
__n39 := {  };
__n39["type"] := "Assertion";
__n39["kind"] := "$";
__n16 := [ __n17, __n23, __n39 ];
__n15["expressions"] := __n16;
__n14["body"] := __n15;
__n14["flags"] := "g";
__n14["nCaps"] := 2.;
__n13["regex"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__re";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "lastIndex";
__n44["raw"] := "\"lastIndex\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["left"] := __n42;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 0.;
__n45["raw"] := "0";
__n41["right"] := __n45;
__n40["expression"] := __n41;
__n46 := {  };
__n46["type"] := "VariableDeclaration";
__n48 := {  };
__n48["type"] := "VariableDeclarator";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__string";
__n48["id"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Boston, MA 02134";
__n50["raw"] := "\"Boston, MA 02134\"";
__n48["init"] := __n50;
__n47 := [ __n48 ];
__n46["declarations"] := __n47;
__n46["kind"] := "var";
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "!==";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__string";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "match";
__n57["raw"] := "\"match\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__re";
__n58 := [ __n59 ];
__n54["arguments"] := __n58;
__n53["object"] := __n54;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "length";
__n60["raw"] := "\"length\"";
__n53["property"] := __n60;
__n53["computed"] := true;
__n52["left"] := __n53;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__matches";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "length";
__n63["raw"] := "\"length\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n52["right"] := __n61;
__n51["test"] := __n52;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#1: __string.match(__re).length=== __matches.length. Actual: ";
__n71["raw"] := "'#1: __string.match(__re).length=== __matches.length. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "__string";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "match";
__n76["raw"] := "\"match\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n73["callee"] := __n74;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__re";
__n77 := [ __n78 ];
__n73["arguments"] := __n77;
__n72["object"] := __n73;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "length";
__n79["raw"] := "\"length\"";
__n72["property"] := __n79;
__n72["computed"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n51["consequent"] := __n64;
__n51["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n82["computed"] := true;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__string";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "match";
__n86["raw"] := "\"match\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n83["callee"] := __n84;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "__re";
__n87 := [ __n88 ];
__n83["arguments"] := __n87;
__n82["object"] := __n83;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 0.;
__n89["raw"] := "0";
__n82["property"] := __n89;
__n81["left"] := __n82;
__n90 := {  };
__n90["type"] := "MemberExpression";
__n90["computed"] := true;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "__matches";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := 0.;
__n92["raw"] := "0";
__n90["property"] := __n92;
__n81["right"] := __n90;
__n80["test"] := __n81;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#3: __string.match(__re)[0]===__matches[0]. Actual: ";
__n100["raw"] := "'#3: __string.match(__re)[0]===__matches[0]. Actual: '";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "MemberExpression";
__n101["computed"] := true;
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "MemberExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "__string";
__n103["object"] := __n104;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "match";
__n105["raw"] := "\"match\"";
__n103["property"] := __n105;
__n103["computed"] := true;
__n102["callee"] := __n103;
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "__re";
__n106 := [ __n107 ];
__n102["arguments"] := __n106;
__n101["object"] := __n102;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 0.;
__n108["raw"] := "0";
__n101["property"] := __n108;
__n99["right"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n80["consequent"] := __n93;
__n80["alternate"] := null;
__n1 := [ __n2, __n9, __n40, __n46, __n51, __n80 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n109 := [ "__matches", "__re", "__string" ];
__n0["variableDeclarations"] := __n109;
__n110 := [  ];
__n0["functionDeclarations"] := __n110;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}