function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__matches";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "12";
__n8["raw"] := "\"12\"";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "34";
__n9["raw"] := "\"34\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "56";
__n10["raw"] := "\"56\"";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "78";
__n11["raw"] := "\"78\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "90";
__n12["raw"] := "\"90\"";
__n7 := [ __n8, __n9, __n10, __n11, __n12 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__string";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "123456abcde7890";
__n17["raw"] := "\"123456abcde7890\"";
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__string";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "match";
__n24["raw"] := "\"match\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "/\\d{2}/g";
__n26["raw"] := "/\\d{2}/g";
__n26["source"] := "\\d{2}";
__n27 := {  };
__n27["type"] := "RegExp";
__n28 := {  };
__n28["type"] := "Repetition";
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "\\d";
__n29["kind"] := "meta";
__n29["symbol"] := 'undefined;
__n29["codePoint"] := nan;
__n28["expression"] := __n29;
__n30 := {  };
__n30["type"] := "Quantifier";
__n30["kind"] := "Range";
__n30["from"] := 2.;
__n30["to"] := 2.;
__n30["greedy"] := true;
__n28["quantifier"] := __n30;
__n28["parenIndex"] := 0.;
__n28["parenCount"] := 0.;
__n27["body"] := __n28;
__n27["flags"] := "g";
__n27["nCaps"] := 0.;
__n26["regex"] := __n27;
__n25 := [ __n26 ];
__n21["arguments"] := __n25;
__n20["object"] := __n21;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "length";
__n31["raw"] := "\"length\"";
__n20["property"] := __n31;
__n20["computed"] := true;
__n19["left"] := __n20;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 5.;
__n32["raw"] := "5";
__n19["right"] := __n32;
__n18["test"] := __n19;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#1: __string = \"123456abcde7890\"; __string.match(/\\d{2}/g).length=== 5. Actual: ";
__n40["raw"] := "'#1: __string = \"123456abcde7890\"; __string.match(/\\\\d{2}/g).length=== 5. Actual: '";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__string";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "match";
__n45["raw"] := "\"match\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "/\\d{2}/g";
__n47["raw"] := "/\\d{2}/g";
__n47["source"] := "\\d{2}";
__n48 := {  };
__n48["type"] := "RegExp";
__n49 := {  };
__n49["type"] := "Repetition";
__n50 := {  };
__n50["type"] := "Char";
__n50["value"] := "\\d";
__n50["kind"] := "meta";
__n50["symbol"] := 'undefined;
__n50["codePoint"] := nan;
__n49["expression"] := __n50;
__n51 := {  };
__n51["type"] := "Quantifier";
__n51["kind"] := "Range";
__n51["from"] := 2.;
__n51["to"] := 2.;
__n51["greedy"] := true;
__n49["quantifier"] := __n51;
__n49["parenIndex"] := 0.;
__n49["parenCount"] := 0.;
__n48["body"] := __n49;
__n48["flags"] := "g";
__n48["nCaps"] := 0.;
__n47["regex"] := __n48;
__n46 := [ __n47 ];
__n42["arguments"] := __n46;
__n41["object"] := __n42;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "length";
__n52["raw"] := "\"length\"";
__n41["property"] := __n52;
__n41["computed"] := true;
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n18["consequent"] := __n33;
__n18["alternate"] := null;
__n53 := {  };
__n53["type"] := "ForStatement";
__n54 := {  };
__n54["type"] := "VariableDeclaration";
__n56 := {  };
__n56["type"] := "VariableDeclarator";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "mi";
__n56["id"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n56["init"] := __n58;
__n55 := [ __n56 ];
__n54["declarations"] := __n55;
__n54["kind"] := "var";
__n53["init"] := __n54;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "<";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "mi";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__matches";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "length";
__n63["raw"] := "\"length\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n59["right"] := __n61;
__n53["test"] := __n59;
__n64 := {  };
__n64["type"] := "UpdateExpression";
__n64["operator"] := "++";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "mi";
__n64["argument"] := __n65;
__n64["prefix"] := false;
__n53["update"] := __n64;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n70["computed"] := true;
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__string";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "match";
__n74["raw"] := "\"match\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n71["callee"] := __n72;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "/\\d{2}/g";
__n76["raw"] := "/\\d{2}/g";
__n76["source"] := "\\d{2}";
__n77 := {  };
__n77["type"] := "RegExp";
__n78 := {  };
__n78["type"] := "Repetition";
__n79 := {  };
__n79["type"] := "Char";
__n79["value"] := "\\d";
__n79["kind"] := "meta";
__n79["symbol"] := 'undefined;
__n79["codePoint"] := nan;
__n78["expression"] := __n79;
__n80 := {  };
__n80["type"] := "Quantifier";
__n80["kind"] := "Range";
__n80["from"] := 2.;
__n80["to"] := 2.;
__n80["greedy"] := true;
__n78["quantifier"] := __n80;
__n78["parenIndex"] := 0.;
__n78["parenCount"] := 0.;
__n77["body"] := __n78;
__n77["flags"] := "g";
__n77["nCaps"] := 0.;
__n76["regex"] := __n77;
__n75 := [ __n76 ];
__n71["arguments"] := __n75;
__n70["object"] := __n71;
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "mi";
__n70["property"] := __n81;
__n69["left"] := __n70;
__n82 := {  };
__n82["type"] := "MemberExpression";
__n82["computed"] := true;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "__matches";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "mi";
__n82["property"] := __n84;
__n69["right"] := __n82;
__n68["test"] := __n69;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "+";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "+";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#2.";
__n98["raw"] := "'#2.'";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "mi";
__n97["right"] := __n99;
__n96["left"] := __n97;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := ": __matches=[\"12\", \"34\", \"56\", \"78\", \"90\"]; __string = \"123456abcde7890\"; __string.match(/\\d{2}/g)[";
__n100["raw"] := "': __matches=[\"12\", \"34\", \"56\", \"78\", \"90\"]; __string = \"123456abcde7890\"; __string.match(/\\\\d{2}/g)['";
__n96["right"] := __n100;
__n95["left"] := __n96;
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "mi";
__n95["right"] := __n101;
__n94["left"] := __n95;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "]===__matches[";
__n102["raw"] := "']===__matches['";
__n94["right"] := __n102;
__n93["left"] := __n94;
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "mi";
__n93["right"] := __n103;
__n92["left"] := __n93;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "]. Actual: ";
__n104["raw"] := "']. Actual: '";
__n92["right"] := __n104;
__n91["left"] := __n92;
__n105 := {  };
__n105["type"] := "MemberExpression";
__n105["computed"] := true;
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "MemberExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "__string";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "match";
__n109["raw"] := "\"match\"";
__n107["property"] := __n109;
__n107["computed"] := true;
__n106["callee"] := __n107;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "/\\d{2}/g";
__n111["raw"] := "/\\d{2}/g";
__n111["source"] := "\\d{2}";
__n112 := {  };
__n112["type"] := "RegExp";
__n113 := {  };
__n113["type"] := "Repetition";
__n114 := {  };
__n114["type"] := "Char";
__n114["value"] := "\\d";
__n114["kind"] := "meta";
__n114["symbol"] := 'undefined;
__n114["codePoint"] := nan;
__n113["expression"] := __n114;
__n115 := {  };
__n115["type"] := "Quantifier";
__n115["kind"] := "Range";
__n115["from"] := 2.;
__n115["to"] := 2.;
__n115["greedy"] := true;
__n113["quantifier"] := __n115;
__n113["parenIndex"] := 0.;
__n113["parenCount"] := 0.;
__n112["body"] := __n113;
__n112["flags"] := "g";
__n112["nCaps"] := 0.;
__n111["regex"] := __n112;
__n110 := [ __n111 ];
__n106["arguments"] := __n110;
__n105["object"] := __n106;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "mi";
__n105["property"] := __n116;
__n91["right"] := __n105;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n68["consequent"] := __n85;
__n68["alternate"] := null;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n53["body"] := __n66;
__n1 := [ __n2, __n13, __n18, __n53 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n117 := [ "__matches", "__string", "mi" ];
__n0["variableDeclarations"] := __n117;
__n118 := [  ];
__n0["functionDeclarations"] := __n118;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}