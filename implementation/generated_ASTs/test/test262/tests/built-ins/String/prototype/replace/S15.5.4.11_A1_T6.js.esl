function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "undefined";
__n9["raw"] := "\"undefined\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["object"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "replace";
__n10["raw"] := "\"replace\"";
__n5["property"] := __n10;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Function";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "return arguments[1]+42;";
__n16["raw"] := "\"return arguments[1]+42;\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n11 := [ __n12, __n13 ];
__n4["arguments"] := __n11;
__n3["left"] := __n4;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "42";
__n17["raw"] := "\"42\"";
__n3["right"] := __n17;
__n2["test"] := __n3;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: var x; new String(\"undefined\").replace(x,Function(\"return arguments[1]+42;\")) === \"42\". Actual: ";
__n25["raw"] := "'#1: var x; new String(\"undefined\").replace(x,Function(\"return arguments[1]+42;\")) === \"42\". Actual: '";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "NewExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "String";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "undefined";
__n31["raw"] := "\"undefined\"";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["object"] := __n28;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "replace";
__n32["raw"] := "\"replace\"";
__n27["property"] := __n32;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "x";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Function";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "return arguments[1]+42;";
__n38["raw"] := "\"return arguments[1]+42;\"";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33 := [ __n34, __n35 ];
__n26["arguments"] := __n33;
__n24["right"] := __n26;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n2["consequent"] := __n18;
__n2["alternate"] := null;
__n39 := {  };
__n39["type"] := "VariableDeclaration";
__n41 := {  };
__n41["type"] := "VariableDeclarator";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "x";
__n41["id"] := __n42;
__n41["init"] := null;
__n40 := [ __n41 ];
__n39["declarations"] := __n40;
__n39["kind"] := "var";
__n1 := [ __n2, __n39 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n43 := [ "x" ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}