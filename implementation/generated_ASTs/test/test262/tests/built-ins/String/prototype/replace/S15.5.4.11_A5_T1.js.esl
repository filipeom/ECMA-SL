function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "aaaaaaaaaa,aaaaaaaaaaaaaaa";
__n6["raw"] := "\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__pattern";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "/^(a+)\\1*,\\1+$/";
__n11["raw"] := "/^(a+)\\1*,\\1+$/";
__n11["source"] := "^(a+)\\1*,\\1+$";
__n12 := {  };
__n12["type"] := "RegExp";
__n13 := {  };
__n13["type"] := "Alternative";
__n15 := {  };
__n15["type"] := "Assertion";
__n15["kind"] := "^";
__n16 := {  };
__n16["type"] := "Group";
__n16["capturing"] := true;
__n16["number"] := 1.;
__n17 := {  };
__n17["type"] := "Repetition";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "a";
__n18["kind"] := "simple";
__n18["symbol"] := "a";
__n18["codePoint"] := 97.;
__n17["expression"] := __n18;
__n19 := {  };
__n19["type"] := "Quantifier";
__n19["kind"] := "+";
__n19["greedy"] := true;
__n17["quantifier"] := __n19;
__n17["parenIndex"] := 1.;
__n17["parenCount"] := 1.;
__n16["expression"] := __n17;
__n20 := {  };
__n20["type"] := "Repetition";
__n21 := {  };
__n21["type"] := "Backreference";
__n21["kind"] := "number";
__n21["number"] := 1.;
__n21["reference"] := 1.;
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "Quantifier";
__n22["kind"] := "*";
__n22["greedy"] := true;
__n20["quantifier"] := __n22;
__n20["parenIndex"] := 1.;
__n20["parenCount"] := 0.;
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := ",";
__n23["kind"] := "simple";
__n23["symbol"] := ",";
__n23["codePoint"] := 44.;
__n24 := {  };
__n24["type"] := "Repetition";
__n25 := {  };
__n25["type"] := "Backreference";
__n25["kind"] := "number";
__n25["number"] := 1.;
__n25["reference"] := 1.;
__n24["expression"] := __n25;
__n26 := {  };
__n26["type"] := "Quantifier";
__n26["kind"] := "+";
__n26["greedy"] := true;
__n24["quantifier"] := __n26;
__n24["parenIndex"] := 1.;
__n24["parenCount"] := 0.;
__n27 := {  };
__n27["type"] := "Assertion";
__n27["kind"] := "$";
__n14 := [ __n15, __n16, __n20, __n23, __n24, __n27 ];
__n13["expressions"] := __n14;
__n12["body"] := __n13;
__n12["flags"] := "";
__n12["nCaps"] := 1.;
__n11["regex"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__repl";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "$1";
__n32["raw"] := "\"$1\"";
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__str";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "replace";
__n38["raw"] := "\"replace\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__pattern";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__repl";
__n39 := [ __n40, __n41 ];
__n35["arguments"] := __n39;
__n34["left"] := __n35;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "aaaaa";
__n42["raw"] := "'aaaaa'";
__n34["right"] := __n42;
__n33["test"] := __n34;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "+";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#1: var __str = \"aaaaaaaaaa,aaaaaaaaaaaaaaa\"; var __pattern = /^(a+)\\1*,\\1+$/; var __repl = \"$1\"; __str.replace(__pattern, __repl)==='aaaaa'. Actual: ";
__n50["raw"] := "'#1: var __str = \"aaaaaaaaaa,aaaaaaaaaaaaaaa\"; var __pattern = /^(a+)\\\\1*,\\\\1+$/; var __repl = \"$1\"; __str.replace(__pattern, __repl)===\\'aaaaa\\'. Actual: '";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__str";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "replace";
__n54["raw"] := "\"replace\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__pattern";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__repl";
__n55 := [ __n56, __n57 ];
__n51["arguments"] := __n55;
__n49["right"] := __n51;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n33["consequent"] := __n43;
__n33["alternate"] := null;
__n1 := [ __n2, __n7, __n28, __n33 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n58 := [ "__str", "__pattern", "__repl" ];
__n0["variableDeclarations"] := __n58;
__n59 := [  ];
__n0["functionDeclarations"] := __n59;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}