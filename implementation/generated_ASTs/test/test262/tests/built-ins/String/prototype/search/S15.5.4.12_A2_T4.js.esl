function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "bString";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "one two three four five";
__n9["raw"] := "\"one two three four five\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "regExp";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "/Four/";
__n14["raw"] := "/Four/";
__n14["source"] := "Four";
__n15 := {  };
__n15["type"] := "RegExp";
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "F";
__n18["kind"] := "simple";
__n18["symbol"] := "F";
__n18["codePoint"] := 70.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "o";
__n19["kind"] := "simple";
__n19["symbol"] := "o";
__n19["codePoint"] := 111.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "u";
__n20["kind"] := "simple";
__n20["symbol"] := "u";
__n20["codePoint"] := 117.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "r";
__n21["kind"] := "simple";
__n21["symbol"] := "r";
__n21["codePoint"] := 114.;
__n17 := [ __n18, __n19, __n20, __n21 ];
__n16["expressions"] := __n17;
__n15["body"] := __n16;
__n15["flags"] := "";
__n15["nCaps"] := 0.;
__n14["regex"] := __n15;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "bString";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "search";
__n27["raw"] := "\"search\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "regExp";
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n23["left"] := __n24;
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "-";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n23["right"] := __n30;
__n22["test"] := __n23;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1: var bString = new String(\"one two three four five\"); var regExp = /Four/; bString.search(regExp)=== -1. Actual: ";
__n39["raw"] := "'#1: var bString = new String(\"one two three four five\"); var regExp = /Four/; bString.search(regExp)=== -1. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "bString";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "search";
__n43["raw"] := "\"search\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "regExp";
__n44 := [ __n45 ];
__n40["arguments"] := __n44;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n22["consequent"] := __n32;
__n22["alternate"] := null;
__n1 := [ __n2, __n10, __n22 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "bString", "regExp" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}