function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "function(){}";
__n15["raw"] := "\"function(){}\"";
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n16 := [  ];
__n12["variableDeclarations"] := __n16;
__n17 := [  ];
__n12["functionDeclarations"] := __n17;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["expression"] := false;
__n10["async"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__instance";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "slice";
__n22["raw"] := "\"slice\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "String";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "prototype";
__n26["raw"] := "\"prototype\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "slice";
__n27["raw"] := "\"slice\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n19["right"] := __n23;
__n18["expression"] := __n19;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__instance";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "slice";
__n35["raw"] := "\"slice\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "-";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Infinity";
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 8.;
__n39["raw"] := "8";
__n36 := [ __n37, __n39 ];
__n32["arguments"] := __n36;
__n31["object"] := __n32;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "slice";
__n40["raw"] := "\"slice\"";
__n31["property"] := __n40;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.;
__n42["raw"] := "1";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Infinity";
__n41 := [ __n42, __n43 ];
__n30["arguments"] := __n41;
__n29["left"] := __n30;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "unction";
__n44["raw"] := "\"unction\"";
__n29["right"] := __n44;
__n28["test"] := __n29;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#1: __instance = function(){}; __instance.slice = String.prototype.slice; __instance.slice(-Infinity,8).slice(1,Infinity) === \"unction\". Actual: ";
__n52["raw"] := "'#1: __instance = function(){}; __instance.slice = String.prototype.slice; __instance.slice(-Infinity,8).slice(1,Infinity) === \"unction\". Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__instance";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "slice";
__n58["raw"] := "\"slice\"";
__n56["property"] := __n58;
__n56["computed"] := true;
__n55["callee"] := __n56;
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "-";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "Infinity";
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 8.;
__n62["raw"] := "8";
__n59 := [ __n60, __n62 ];
__n55["arguments"] := __n59;
__n54["object"] := __n55;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "slice";
__n63["raw"] := "\"slice\"";
__n54["property"] := __n63;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "Infinity";
__n64 := [ __n65, __n66 ];
__n53["arguments"] := __n64;
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n28["consequent"] := __n45;
__n28["alternate"] := null;
__n1 := [ __n2, __n18, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n67 := [ "__instance" ];
__n0["variableDeclarations"] := __n67;
__n68 := [  ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}