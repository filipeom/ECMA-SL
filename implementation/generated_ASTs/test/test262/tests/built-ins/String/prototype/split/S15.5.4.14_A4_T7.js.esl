function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "hello";
__n9["raw"] := "\"hello\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__re";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "/l/";
__n14["raw"] := "/l/";
__n14["source"] := "l";
__n15 := {  };
__n15["type"] := "RegExp";
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "l";
__n16["kind"] := "simple";
__n16["symbol"] := "l";
__n16["codePoint"] := 108.;
__n15["body"] := __n16;
__n15["flags"] := "";
__n15["nCaps"] := 0.;
__n14["regex"] := __n15;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__split";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__string";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "split";
__n24["raw"] := "\"split\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "void";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n25 := [ __n26, __n27 ];
__n21["arguments"] := __n25;
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__split";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "constructor";
__n33["raw"] := "\"constructor\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["left"] := __n31;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Array";
__n30["right"] := __n34;
__n29["test"] := __n30;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#1: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split.constructor === Array. Actual: ";
__n42["raw"] := "'#1: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split.constructor === Array. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__split";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "constructor";
__n45["raw"] := "\"constructor\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n29["consequent"] := __n35;
__n29["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__split";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "length";
__n50["raw"] := "\"length\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["left"] := __n48;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 3.;
__n51["raw"] := "3";
__n47["right"] := __n51;
__n46["test"] := __n47;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#2: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split.length === 3. Actual: ";
__n59["raw"] := "'#2: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split.length === 3. Actual: '";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__split";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "length";
__n62["raw"] := "\"length\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n58["right"] := __n60;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n46["consequent"] := __n52;
__n46["alternate"] := null;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n65["computed"] := true;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "__split";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n65["property"] := __n67;
__n64["left"] := __n65;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "he";
__n68["raw"] := "\"he\"";
__n64["right"] := __n68;
__n63["test"] := __n64;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#3: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[0] === \"he\". Actual: ";
__n76["raw"] := "'#3: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[0] === \"he\". Actual: '";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "MemberExpression";
__n77["computed"] := true;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__split";
__n77["object"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 0.;
__n79["raw"] := "0";
__n77["property"] := __n79;
__n75["right"] := __n77;
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n63["consequent"] := __n69;
__n63["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n82["computed"] := true;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "__split";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n82["property"] := __n84;
__n81["left"] := __n82;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "";
__n85["raw"] := "\"\"";
__n81["right"] := __n85;
__n80["test"] := __n81;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#4: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[1] === \"\". Actual: ";
__n93["raw"] := "'#4: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[1] === \"\". Actual: '";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "MemberExpression";
__n94["computed"] := true;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "__split";
__n94["object"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 1.;
__n96["raw"] := "1";
__n94["property"] := __n96;
__n92["right"] := __n94;
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n80["consequent"] := __n86;
__n80["alternate"] := null;
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "!==";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n99["computed"] := true;
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "__split";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 2.;
__n101["raw"] := "2";
__n99["property"] := __n101;
__n98["left"] := __n99;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "o";
__n102["raw"] := "\"o\"";
__n98["right"] := __n102;
__n97["test"] := __n98;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#5: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[2] === \"o\". Actual: ";
__n110["raw"] := "'#5: var __string = new String(\"hello\"); var __re = /l/; __split = __string.split(__re, void 0); __split[2] === \"o\". Actual: '";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "MemberExpression";
__n111["computed"] := true;
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "__split";
__n111["object"] := __n112;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 2.;
__n113["raw"] := "2";
__n111["property"] := __n113;
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n97["consequent"] := __n103;
__n97["alternate"] := null;
__n1 := [ __n2, __n10, __n17, __n29, __n46, __n63, __n80, __n97 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n114 := [ "__string", "__re", "__split" ];
__n0["variableDeclarations"] := __n114;
__n115 := [  ];
__n0["functionDeclarations"] := __n115;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}