function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "hello";
__n9["raw"] := "\"hello\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__re";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "NewExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "RegExp";
__n14["callee"] := __n15;
__n16 := [  ];
__n14["arguments"] := __n16;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__split";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__string";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "split";
__n24["raw"] := "\"split\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "undefined";
__n25 := [ __n26, __n27 ];
__n21["arguments"] := __n25;
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__expected";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "ArrayExpression";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "h";
__n34["raw"] := "\"h\"";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "e";
__n35["raw"] := "\"e\"";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "l";
__n36["raw"] := "\"l\"";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "l";
__n37["raw"] := "\"l\"";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "o";
__n38["raw"] := "\"o\"";
__n33 := [ __n34, __n35, __n36, __n37, __n38 ];
__n32["elements"] := __n33;
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "assert";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "sameValue";
__n43["raw"] := "\"sameValue\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__split";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "constructor";
__n47["raw"] := "\"constructor\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "Array";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "The value of __split.constructor is expected to equal the value of Array";
__n49["raw"] := "'The value of __split.constructor is expected to equal the value of Array'";
__n44 := [ __n45, __n48, __n49 ];
__n40["arguments"] := __n44;
__n39["expression"] := __n40;
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "assert";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "sameValue";
__n54["raw"] := "\"sameValue\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__split";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "length";
__n58["raw"] := "\"length\"";
__n56["property"] := __n58;
__n56["computed"] := true;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "__expected";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "length";
__n61["raw"] := "\"length\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "The value of __split.length is expected to equal the value of __expected.length";
__n62["raw"] := "'The value of __split.length is expected to equal the value of __expected.length'";
__n55 := [ __n56, __n59, __n62 ];
__n51["arguments"] := __n55;
__n50["expression"] := __n51;
__n63 := {  };
__n63["type"] := "ForStatement";
__n64 := {  };
__n64["type"] := "VariableDeclaration";
__n66 := {  };
__n66["type"] := "VariableDeclarator";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "index";
__n66["id"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 0.;
__n68["raw"] := "0";
__n66["init"] := __n68;
__n65 := [ __n66 ];
__n64["declarations"] := __n65;
__n64["kind"] := "var";
__n63["init"] := __n64;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "<";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "index";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__expected";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "length";
__n73["raw"] := "\"length\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n69["right"] := __n71;
__n63["test"] := __n69;
__n74 := {  };
__n74["type"] := "UpdateExpression";
__n74["operator"] := "++";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "index";
__n74["argument"] := __n75;
__n74["prefix"] := false;
__n63["update"] := __n74;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "assert";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "sameValue";
__n82["raw"] := "\"sameValue\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n79["callee"] := __n80;
__n84 := {  };
__n84["type"] := "MemberExpression";
__n84["computed"] := true;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__split";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "index";
__n84["property"] := __n86;
__n87 := {  };
__n87["type"] := "MemberExpression";
__n87["computed"] := true;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "__expected";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "index";
__n87["property"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "The value of __split[index] is expected to equal the value of __expected[index]";
__n90["raw"] := "'The value of __split[index] is expected to equal the value of __expected[index]'";
__n83 := [ __n84, __n87, __n90 ];
__n79["arguments"] := __n83;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n63["body"] := __n76;
__n1 := [ __n2, __n10, __n17, __n28, __n39, __n50, __n63 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n91 := [ "__string", "__re", "__split", "__expected", "index" ];
__n0["variableDeclarations"] := __n91;
__n92 := [  ];
__n0["functionDeclarations"] := __n92;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}