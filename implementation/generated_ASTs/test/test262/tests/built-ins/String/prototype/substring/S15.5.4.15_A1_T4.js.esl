function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ReturnStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "gnulluna";
__n12["raw"] := "\"gnulluna\"";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n6["callee"] := __n7;
__n15 := [  ];
__n6["arguments"] := __n15;
__n5["object"] := __n6;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "substring";
__n16["raw"] := "\"substring\"";
__n5["property"] := __n16;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 'null;
__n18["raw"] := "\"'null\"";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "-";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 3.;
__n20["raw"] := "3";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n17 := [ __n18, __n19 ];
__n4["arguments"] := __n17;
__n3["left"] := __n4;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "";
__n21["raw"] := "\"\"";
__n3["right"] := __n21;
__n2["test"] := __n3;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: function(){return \"gnulluna\"}().substring(null, -3) === \"\". Actual: ";
__n29["raw"] := "'#1: function(){return \"gnulluna\"}().substring(null, -3) === \"\". Actual: '";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [  ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ReturnStatement";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "gnulluna";
__n38["raw"] := "\"gnulluna\"";
__n37["argument"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n39 := [  ];
__n35["variableDeclarations"] := __n39;
__n40 := [  ];
__n35["functionDeclarations"] := __n40;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["async"] := false;
__n33["expression"] := false;
__n32["callee"] := __n33;
__n41 := [  ];
__n32["arguments"] := __n41;
__n31["object"] := __n32;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "substring";
__n42["raw"] := "\"substring\"";
__n31["property"] := __n42;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 'null;
__n44["raw"] := "\"'null\"";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "-";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 3.;
__n46["raw"] := "3";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n43 := [ __n44, __n45 ];
__n30["arguments"] := __n43;
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n2["consequent"] := __n22;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [  ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}