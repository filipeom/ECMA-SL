function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "toStringAccessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "valueOfAccessed";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "obj";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "toString";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "toStringAccessed";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := true;
__n27["raw"] := "true";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n28 := {  };
__n28["type"] := "ReturnStatement";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "abc";
__n29["raw"] := "\"abc\"";
__n28["argument"] := __n29;
__n23 := [ __n24, __n28 ];
__n22["body"] := __n23;
__n30 := [  ];
__n22["variableDeclarations"] := __n30;
__n31 := [  ];
__n22["functionDeclarations"] := __n31;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["async"] := false;
__n20["expression"] := false;
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n32 := {  };
__n32["type"] := "Property";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "valueOf";
__n32["key"] := __n33;
__n34 := {  };
__n34["type"] := "FunctionExpression";
__n34["id"] := null;
__n35 := [  ];
__n34["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "AssignmentExpression";
__n39["operator"] := "=";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "valueOfAccessed";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n39["right"] := __n41;
__n38["expression"] := __n39;
__n42 := {  };
__n42["type"] := "ReturnStatement";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "cef";
__n43["raw"] := "\"cef\"";
__n42["argument"] := __n43;
__n37 := [ __n38, __n42 ];
__n36["body"] := __n37;
__n44 := [  ];
__n36["variableDeclarations"] := __n44;
__n45 := [  ];
__n36["functionDeclarations"] := __n45;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n34["body"] := __n36;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n32["value"] := __n34;
__n32["computed"] := false;
__n32["kind"] := "init";
__n32["shorthand"] := false;
__n17 := [ __n18, __n32 ];
__n16["properties"] := __n17;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "assert";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "sameValue";
__n50["raw"] := "\"sameValue\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "String";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "prototype";
__n57["raw"] := "\"prototype\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["object"] := __n55;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "trim";
__n58["raw"] := "\"trim\"";
__n54["property"] := __n58;
__n54["computed"] := true;
__n53["object"] := __n54;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "call";
__n59["raw"] := "\"call\"";
__n53["property"] := __n59;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "obj";
__n60 := [ __n61 ];
__n52["arguments"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "abc";
__n62["raw"] := "\"abc\"";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "String.prototype.trim.call(obj)";
__n63["raw"] := "'String.prototype.trim.call(obj)'";
__n51 := [ __n52, __n62, __n63 ];
__n47["arguments"] := __n51;
__n46["expression"] := __n47;
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "assert";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "sameValue";
__n68["raw"] := "\"sameValue\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["callee"] := __n66;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "valueOfAccessed";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := false;
__n71["raw"] := "false";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "valueOfAccessed";
__n72["raw"] := "'valueOfAccessed'";
__n69 := [ __n70, __n71, __n72 ];
__n65["arguments"] := __n69;
__n64["expression"] := __n65;
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "assert";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "toStringAccessed";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "toStringAccessed !== true";
__n78["raw"] := "'toStringAccessed !== true'";
__n76 := [ __n77, __n78 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n1 := [ __n2, __n7, __n12, __n46, __n64, __n73 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n79 := [ "toStringAccessed", "valueOfAccessed", "obj" ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}