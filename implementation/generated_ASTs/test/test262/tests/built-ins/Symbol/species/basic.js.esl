function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "assert";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Symbol";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "undefined";
__n6["right"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "Symbol exists";
__n9["raw"] := "\"Symbol exists\"";
__n5 := [ __n6, __n9 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "assert";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "!==";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Symbol";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "species";
__n17["raw"] := "\"species\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["left"] := __n15;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "undefined";
__n14["right"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "Symbol.species exists";
__n19["raw"] := "\"Symbol.species exists\"";
__n13 := [ __n14, __n19 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "verifyNotWritable";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Symbol";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "species";
__n25["raw"] := "\"species\"";
__n23 := [ __n24, __n25 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "verifyNotEnumerable";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Symbol";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "species";
__n31["raw"] := "\"species\"";
__n29 := [ __n30, __n31 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "verifyNotConfigurable";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Symbol";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "species";
__n37["raw"] := "\"species\"";
__n35 := [ __n36, __n37 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n1 := [ __n2, __n10, __n20, __n26, __n32 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n38 := [  ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}