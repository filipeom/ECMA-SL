function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "foo";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "s";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "WeakSet";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "ArrayExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "foo";
__n16 := [ __n17 ];
__n15["elements"] := __n16;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "sameValue";
__n22["raw"] := "\"sameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "s";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "add";
__n27["raw"] := "\"add\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "foo";
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "s";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "`s.add(foo)` returns `s`";
__n31["raw"] := "'`s.add(foo)` returns `s`'";
__n23 := [ __n24, __n30, __n31 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n1 := [ __n2, __n8, __n18 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [ "foo", "s" ];
__n0["variableDeclarations"] := __n32;
__n33 := [  ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}