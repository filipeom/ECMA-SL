function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "result";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "interval";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n13 := {  };
__n13["type"] := "ArrayExpression";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0x00";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 47.;
__n16["raw"] := "0x2F";
__n14 := [ __n15, __n16 ];
__n13["elements"] := __n14;
__n17 := {  };
__n17["type"] := "ArrayExpression";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 58.;
__n19["raw"] := "0x3A";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 64.;
__n20["raw"] := "0x40";
__n18 := [ __n19, __n20 ];
__n17["elements"] := __n18;
__n21 := {  };
__n21["type"] := "ArrayExpression";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 71.;
__n23["raw"] := "0x47";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 96.;
__n24["raw"] := "0x60";
__n22 := [ __n23, __n24 ];
__n21["elements"] := __n22;
__n25 := {  };
__n25["type"] := "ArrayExpression";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 103.;
__n27["raw"] := "0x67";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 65535.;
__n28["raw"] := "0xFFFF";
__n26 := [ __n27, __n28 ];
__n25["elements"] := __n26;
__n12 := [ __n13, __n17, __n21, __n25 ];
__n11["elements"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n29 := {  };
__n29["type"] := "ForStatement";
__n30 := {  };
__n30["type"] := "VariableDeclaration";
__n32 := {  };
__n32["type"] := "VariableDeclarator";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "indexI";
__n32["id"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 0.;
__n34["raw"] := "0";
__n32["init"] := __n34;
__n31 := [ __n32 ];
__n30["declarations"] := __n31;
__n30["kind"] := "var";
__n29["init"] := __n30;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "<";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "indexI";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "interval";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "length";
__n39["raw"] := "\"length\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n35["right"] := __n37;
__n29["test"] := __n35;
__n40 := {  };
__n40["type"] := "UpdateExpression";
__n40["operator"] := "++";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "indexI";
__n40["argument"] := __n41;
__n40["prefix"] := false;
__n29["update"] := __n40;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ForStatement";
__n45 := {  };
__n45["type"] := "VariableDeclaration";
__n47 := {  };
__n47["type"] := "VariableDeclarator";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "indexJ";
__n47["id"] := __n48;
__n49 := {  };
__n49["type"] := "MemberExpression";
__n49["computed"] := true;
__n50 := {  };
__n50["type"] := "MemberExpression";
__n50["computed"] := true;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "interval";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "indexI";
__n50["property"] := __n52;
__n49["object"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 0.;
__n53["raw"] := "0";
__n49["property"] := __n53;
__n47["init"] := __n49;
__n46 := [ __n47 ];
__n45["declarations"] := __n46;
__n45["kind"] := "var";
__n44["init"] := __n45;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "<=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "indexJ";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n56["computed"] := true;
__n57 := {  };
__n57["type"] := "MemberExpression";
__n57["computed"] := true;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "interval";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "indexI";
__n57["property"] := __n59;
__n56["object"] := __n57;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n56["property"] := __n60;
__n54["right"] := __n56;
__n44["test"] := __n54;
__n61 := {  };
__n61["type"] := "UpdateExpression";
__n61["operator"] := "++";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "indexJ";
__n61["argument"] := __n62;
__n61["prefix"] := false;
__n44["update"] := __n61;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "TryStatement";
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "decodeURI";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "%E0%";
__n74["raw"] := "\"%E0%\"";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "String";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "fromCharCode";
__n78["raw"] := "\"fromCharCode\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "indexJ";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "indexJ";
__n79 := [ __n80, __n81 ];
__n75["arguments"] := __n79;
__n73["right"] := __n75;
__n72["left"] := __n73;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "%A0";
__n82["raw"] := "\"%A0\"";
__n72["right"] := __n82;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "AssignmentExpression";
__n84["operator"] := "=";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "result";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := false;
__n86["raw"] := "false";
__n84["right"] := __n86;
__n83["expression"] := __n84;
__n67 := [ __n68, __n83 ];
__n66["body"] := __n67;
__n65["block"] := __n66;
__n87 := {  };
__n87["type"] := "CatchClause";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "e";
__n87["param"] := __n88;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "IfStatement";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "!==";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "instanceof";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "e";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "URIError";
__n93["right"] := __n95;
__n92["left"] := __n93;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := true;
__n96["raw"] := "true";
__n92["right"] := __n96;
__n91["test"] := __n92;
__n97 := {  };
__n97["type"] := "BlockStatement";
__n99 := {  };
__n99["type"] := "ExpressionStatement";
__n100 := {  };
__n100["type"] := "AssignmentExpression";
__n100["operator"] := "=";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "result";
__n100["left"] := __n101;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := false;
__n102["raw"] := "false";
__n100["right"] := __n102;
__n99["expression"] := __n100;
__n98 := [ __n99 ];
__n97["body"] := __n98;
__n91["consequent"] := __n97;
__n91["alternate"] := null;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n87["body"] := __n89;
__n65["handler"] := __n87;
__n65["finalizer"] := null;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n44["body"] := __n63;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n29["body"] := __n42;
__n103 := {  };
__n103["type"] := "IfStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "!==";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "result";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := true;
__n106["raw"] := "true";
__n104["right"] := __n106;
__n103["test"] := __n104;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "$ERROR";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError";
__n113["raw"] := "'#1: If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and  string.charAt(k + 5)) do not represent hexadecimal digits, throw URIError'";
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["expression"] := __n110;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n103["consequent"] := __n107;
__n103["alternate"] := null;
__n1 := [ __n2, __n7, __n29, __n103 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n114 := [ "result", "interval", "indexI", "indexJ" ];
__n0["variableDeclarations"] := __n114;
__n115 := [  ];
__n0["functionDeclarations"] := __n115;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}