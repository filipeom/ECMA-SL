function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "===";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "isNaN";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "NaN";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["left"] := __n5;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n4["right"] := __n9;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: NaN === Not-a-Number. Actual: ";
__n17["raw"] := "'#1: NaN === Not-a-Number. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "NaN";
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "!";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "===";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "isNaN";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Number";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "NaN";
__n27["raw"] := "\"NaN\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := true;
__n28["raw"] := "true";
__n21["right"] := __n28;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["test"] := __n20;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: Number.NaN === Not-a-Number. Actual: ";
__n36["raw"] := "'#2: Number.NaN === Not-a-Number. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "NaN";
__n39["raw"] := "\"NaN\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n19["consequent"] := __n29;
__n19["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "!";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "isNaN";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Number";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "void";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 0.;
__n50["raw"] := "0";
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["left"] := __n43;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := true;
__n51["raw"] := "true";
__n42["right"] := __n51;
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["test"] := __n41;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#3: Number(void 0) === Not-a-Number. Actual: ";
__n59["raw"] := "'#3: Number(void 0) === Not-a-Number. Actual: '";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "Number";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "UnaryExpression";
__n63["operator"] := "void";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n63["argument"] := __n64;
__n63["prefix"] := true;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n58["right"] := __n60;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n40["consequent"] := __n52;
__n40["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "!";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "===";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "isNaN";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "UnaryExpression";
__n71["operator"] := "void";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 0.;
__n72["raw"] := "0";
__n71["argument"] := __n72;
__n71["prefix"] := true;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["left"] := __n68;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := true;
__n73["raw"] := "true";
__n67["right"] := __n73;
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n65["test"] := __n66;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "+";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#4: void 0 === Not-a-Number. Actual: ";
__n81["raw"] := "'#4: void 0 === Not-a-Number. Actual: '";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "UnaryExpression";
__n82["operator"] := "void";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 0.;
__n83["raw"] := "0";
__n82["argument"] := __n83;
__n82["prefix"] := true;
__n80["right"] := __n82;
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n65["consequent"] := __n74;
__n65["alternate"] := null;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "UnaryExpression";
__n85["operator"] := "!";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "===";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "isNaN";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "string";
__n90["raw"] := "\"string\"";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["left"] := __n87;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := true;
__n91["raw"] := "true";
__n86["right"] := __n91;
__n85["argument"] := __n86;
__n85["prefix"] := true;
__n84["test"] := __n85;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "+";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#5: \"string\" === Not-a-Number. Actual: ";
__n99["raw"] := "'#5: \"string\" === Not-a-Number. Actual: '";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "string";
__n100["raw"] := "\"string\"";
__n98["right"] := __n100;
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n84["consequent"] := __n92;
__n84["alternate"] := null;
__n101 := {  };
__n101["type"] := "IfStatement";
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "===";
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "isNaN";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "MemberExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "Number";
__n106["object"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "POSITIVE_INFINITY";
__n108["raw"] := "\"POSITIVE_INFINITY\"";
__n106["property"] := __n108;
__n106["computed"] := true;
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n102["left"] := __n103;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := true;
__n109["raw"] := "true";
__n102["right"] := __n109;
__n101["test"] := __n102;
__n110 := {  };
__n110["type"] := "BlockStatement";
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "$ERROR";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "#6: Number.POSITIVE_INFINITY !== Not-a-Number";
__n116["raw"] := "'#6: Number.POSITIVE_INFINITY !== Not-a-Number'";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n112["expression"] := __n113;
__n111 := [ __n112 ];
__n110["body"] := __n111;
__n101["consequent"] := __n110;
__n101["alternate"] := null;
__n117 := {  };
__n117["type"] := "IfStatement";
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "===";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "isNaN";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "MemberExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "Number";
__n122["object"] := __n123;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := "NEGATIVE_INFINITY";
__n124["raw"] := "\"NEGATIVE_INFINITY\"";
__n122["property"] := __n124;
__n122["computed"] := true;
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["left"] := __n119;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := true;
__n125["raw"] := "true";
__n118["right"] := __n125;
__n117["test"] := __n118;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#7: Number.NEGATIVE_INFINITY !== Not-a-Number";
__n132["raw"] := "'#7: Number.NEGATIVE_INFINITY !== Not-a-Number'";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n117["consequent"] := __n126;
__n117["alternate"] := null;
__n133 := {  };
__n133["type"] := "IfStatement";
__n134 := {  };
__n134["type"] := "BinaryExpression";
__n134["operator"] := "===";
__n135 := {  };
__n135["type"] := "CallExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "isNaN";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "MemberExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Number";
__n138["object"] := __n139;
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "MAX_VALUE";
__n140["raw"] := "\"MAX_VALUE\"";
__n138["property"] := __n140;
__n138["computed"] := true;
__n137 := [ __n138 ];
__n135["arguments"] := __n137;
__n134["left"] := __n135;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := true;
__n141["raw"] := "true";
__n134["right"] := __n141;
__n133["test"] := __n134;
__n142 := {  };
__n142["type"] := "BlockStatement";
__n144 := {  };
__n144["type"] := "ExpressionStatement";
__n145 := {  };
__n145["type"] := "CallExpression";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "$ERROR";
__n145["callee"] := __n146;
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := "#8: Number.MAX_VALUE !== Not-a-Number";
__n148["raw"] := "'#8: Number.MAX_VALUE !== Not-a-Number'";
__n147 := [ __n148 ];
__n145["arguments"] := __n147;
__n144["expression"] := __n145;
__n143 := [ __n144 ];
__n142["body"] := __n143;
__n133["consequent"] := __n142;
__n133["alternate"] := null;
__n149 := {  };
__n149["type"] := "IfStatement";
__n150 := {  };
__n150["type"] := "BinaryExpression";
__n150["operator"] := "===";
__n151 := {  };
__n151["type"] := "CallExpression";
__n152 := {  };
__n152["type"] := "Identifier";
__n152["name"] := "isNaN";
__n151["callee"] := __n152;
__n154 := {  };
__n154["type"] := "MemberExpression";
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "Number";
__n154["object"] := __n155;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := "MIN_VALUE";
__n156["raw"] := "\"MIN_VALUE\"";
__n154["property"] := __n156;
__n154["computed"] := true;
__n153 := [ __n154 ];
__n151["arguments"] := __n153;
__n150["left"] := __n151;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := true;
__n157["raw"] := "true";
__n150["right"] := __n157;
__n149["test"] := __n150;
__n158 := {  };
__n158["type"] := "BlockStatement";
__n160 := {  };
__n160["type"] := "ExpressionStatement";
__n161 := {  };
__n161["type"] := "CallExpression";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "$ERROR";
__n161["callee"] := __n162;
__n164 := {  };
__n164["type"] := "Literal";
__n164["value"] := "#9: Number.MIN_VALUE !== Not-a-Number";
__n164["raw"] := "'#9: Number.MIN_VALUE !== Not-a-Number'";
__n163 := [ __n164 ];
__n161["arguments"] := __n163;
__n160["expression"] := __n161;
__n159 := [ __n160 ];
__n158["body"] := __n159;
__n149["consequent"] := __n158;
__n149["alternate"] := null;
__n165 := {  };
__n165["type"] := "IfStatement";
__n166 := {  };
__n166["type"] := "BinaryExpression";
__n166["operator"] := "===";
__n167 := {  };
__n167["type"] := "CallExpression";
__n168 := {  };
__n168["type"] := "Identifier";
__n168["name"] := "isNaN";
__n167["callee"] := __n168;
__n170 := {  };
__n170["type"] := "UnaryExpression";
__n170["operator"] := "-";
__n171 := {  };
__n171["type"] := "Literal";
__n171["value"] := 0.;
__n171["raw"] := "0";
__n170["argument"] := __n171;
__n170["prefix"] := true;
__n169 := [ __n170 ];
__n167["arguments"] := __n169;
__n166["left"] := __n167;
__n172 := {  };
__n172["type"] := "Literal";
__n172["value"] := true;
__n172["raw"] := "true";
__n166["right"] := __n172;
__n165["test"] := __n166;
__n173 := {  };
__n173["type"] := "BlockStatement";
__n175 := {  };
__n175["type"] := "ExpressionStatement";
__n176 := {  };
__n176["type"] := "CallExpression";
__n177 := {  };
__n177["type"] := "Identifier";
__n177["name"] := "$ERROR";
__n176["callee"] := __n177;
__n179 := {  };
__n179["type"] := "Literal";
__n179["value"] := "#10: -0 !== Not-a-Number";
__n179["raw"] := "'#10: -0 !== Not-a-Number'";
__n178 := [ __n179 ];
__n176["arguments"] := __n178;
__n175["expression"] := __n176;
__n174 := [ __n175 ];
__n173["body"] := __n174;
__n165["consequent"] := __n173;
__n165["alternate"] := null;
__n180 := {  };
__n180["type"] := "IfStatement";
__n181 := {  };
__n181["type"] := "BinaryExpression";
__n181["operator"] := "===";
__n182 := {  };
__n182["type"] := "CallExpression";
__n183 := {  };
__n183["type"] := "Identifier";
__n183["name"] := "isNaN";
__n182["callee"] := __n183;
__n185 := {  };
__n185["type"] := "Literal";
__n185["value"] := true;
__n185["raw"] := "true";
__n184 := [ __n185 ];
__n182["arguments"] := __n184;
__n181["left"] := __n182;
__n186 := {  };
__n186["type"] := "Literal";
__n186["value"] := true;
__n186["raw"] := "true";
__n181["right"] := __n186;
__n180["test"] := __n181;
__n187 := {  };
__n187["type"] := "BlockStatement";
__n189 := {  };
__n189["type"] := "ExpressionStatement";
__n190 := {  };
__n190["type"] := "CallExpression";
__n191 := {  };
__n191["type"] := "Identifier";
__n191["name"] := "$ERROR";
__n190["callee"] := __n191;
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := "#11: true !== Not-a-Number";
__n193["raw"] := "'#11: true !== Not-a-Number'";
__n192 := [ __n193 ];
__n190["arguments"] := __n192;
__n189["expression"] := __n190;
__n188 := [ __n189 ];
__n187["body"] := __n188;
__n180["consequent"] := __n187;
__n180["alternate"] := null;
__n194 := {  };
__n194["type"] := "IfStatement";
__n195 := {  };
__n195["type"] := "BinaryExpression";
__n195["operator"] := "===";
__n196 := {  };
__n196["type"] := "CallExpression";
__n197 := {  };
__n197["type"] := "Identifier";
__n197["name"] := "isNaN";
__n196["callee"] := __n197;
__n199 := {  };
__n199["type"] := "Literal";
__n199["value"] := "1";
__n199["raw"] := "\"1\"";
__n198 := [ __n199 ];
__n196["arguments"] := __n198;
__n195["left"] := __n196;
__n200 := {  };
__n200["type"] := "Literal";
__n200["value"] := true;
__n200["raw"] := "true";
__n195["right"] := __n200;
__n194["test"] := __n195;
__n201 := {  };
__n201["type"] := "BlockStatement";
__n203 := {  };
__n203["type"] := "ExpressionStatement";
__n204 := {  };
__n204["type"] := "CallExpression";
__n205 := {  };
__n205["type"] := "Identifier";
__n205["name"] := "$ERROR";
__n204["callee"] := __n205;
__n207 := {  };
__n207["type"] := "Literal";
__n207["value"] := "#12: \"1\" !== Not-a-Number";
__n207["raw"] := "'#12: \"1\" !== Not-a-Number'";
__n206 := [ __n207 ];
__n204["arguments"] := __n206;
__n203["expression"] := __n204;
__n202 := [ __n203 ];
__n201["body"] := __n202;
__n194["consequent"] := __n201;
__n194["alternate"] := null;
__n1 := [ __n2, __n19, __n40, __n65, __n84, __n101, __n117, __n133, __n149, __n165, __n180, __n194 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n208 := [  ];
__n0["variableDeclarations"] := __n208;
__n209 := [  ];
__n0["functionDeclarations"] := __n209;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}