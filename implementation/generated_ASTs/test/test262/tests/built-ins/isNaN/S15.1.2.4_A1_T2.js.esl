function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "===";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "isNaN";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "ObjectExpression";
__n9 := [  ];
__n8["properties"] := __n9;
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["left"] := __n5;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := true;
__n10["raw"] := "true";
__n4["right"] := __n10;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: {} === Not-a-Number. Actual: ";
__n18["raw"] := "'#1: {} === Not-a-Number. Actual: '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "ObjectExpression";
__n20 := [  ];
__n19["properties"] := __n20;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "!";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "===";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "isNaN";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "NewExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "String";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "string";
__n30["raw"] := "\"string\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["left"] := __n24;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n23["right"] := __n31;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["test"] := __n22;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: new String(\"string\") === Not-a-Number. Actual: ";
__n39["raw"] := "'#2: new String(\"string\") === Not-a-Number. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "String";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "string";
__n43["raw"] := "\"string\"";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n21["consequent"] := __n32;
__n21["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "===";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "isNaN";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "NewExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "String";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "1";
__n52["raw"] := "\"1\"";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["left"] := __n46;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n45["right"] := __n53;
__n44["test"] := __n45;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#3: new String(\"1\") === Not-a-Number. Actual: ";
__n61["raw"] := "'#3: new String(\"1\") === Not-a-Number. Actual: '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "NewExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "String";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "1";
__n65["raw"] := "\"1\"";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n44["consequent"] := __n54;
__n44["alternate"] := null;
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "===";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "isNaN";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "NewExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "Number";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 1.;
__n74["raw"] := "1";
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["left"] := __n68;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n67["right"] := __n75;
__n66["test"] := __n67;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#4: new Number(1) !== Not-a-Number";
__n82["raw"] := "'#4: new Number(1) !== Not-a-Number'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n66["consequent"] := __n76;
__n66["alternate"] := null;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "!";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "===";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "isNaN";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "NewExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "Number";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "NaN";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["left"] := __n86;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := true;
__n93["raw"] := "true";
__n85["right"] := __n93;
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n83["test"] := __n84;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "+";
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "#5: new Number(NaN) === Not-a-Number. Actual: ";
__n101["raw"] := "'#5: new Number(NaN) === Not-a-Number. Actual: '";
__n100["left"] := __n101;
__n102 := {  };
__n102["type"] := "NewExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "Number";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "NaN";
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n100["right"] := __n102;
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n83["consequent"] := __n94;
__n83["alternate"] := null;
__n106 := {  };
__n106["type"] := "IfStatement";
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "===";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "isNaN";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "NewExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "Boolean";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := true;
__n114["raw"] := "true";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["left"] := __n108;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := true;
__n115["raw"] := "true";
__n107["right"] := __n115;
__n106["test"] := __n107;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "ExpressionStatement";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "$ERROR";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#6: new Boolean(true) !== Not-a-Number";
__n122["raw"] := "'#6: new Boolean(true) !== Not-a-Number'";
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["expression"] := __n119;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n106["consequent"] := __n116;
__n106["alternate"] := null;
__n1 := [ __n2, __n21, __n44, __n66, __n83, __n106 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n123 := [  ];
__n0["variableDeclarations"] := __n123;
__n124 := [  ];
__n0["functionDeclarations"] := __n124;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}