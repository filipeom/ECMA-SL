function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "String";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "-1.1";
__n10["raw"] := "\"-1.1\"";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "parseFloat";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "-1.1";
__n14["raw"] := "\"-1.1\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n3["right"] := __n11;
__n2["test"] := __n3;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: parseFloat(new String(\"-1.1\")) === parseFloat(\"-1.1\"). Actual: ";
__n22["raw"] := "'#1: parseFloat(new String(\"-1.1\")) === parseFloat(\"-1.1\"). Actual: '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "parseFloat";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "NewExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "String";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "-1.1";
__n29["raw"] := "\"-1.1\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["consequent"] := __n15;
__n2["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "parseFloat";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "String";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "Infinity";
__n38["raw"] := "\"Infinity\"";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["left"] := __n32;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "parseFloat";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "Infinity";
__n42["raw"] := "\"Infinity\"";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n31["right"] := __n39;
__n30["test"] := __n31;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "+";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#2: parseFloat(new String(\"Infinity\")) === parseFloat(\"Infinity\"). Actual: ";
__n50["raw"] := "'#2: parseFloat(new String(\"Infinity\")) === parseFloat(\"Infinity\"). Actual: '";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "parseFloat";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "String";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "Infinity";
__n57["raw"] := "\"Infinity\"";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n49["right"] := __n51;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n30["consequent"] := __n43;
__n30["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "String";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "parseFloat";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "NewExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "String";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "NaN";
__n69["raw"] := "\"NaN\"";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["left"] := __n60;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "NaN";
__n70["raw"] := "\"NaN\"";
__n59["right"] := __n70;
__n58["test"] := __n59;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "+";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#3: String(parseFloat(new String(\"NaN\"))) === \"NaN\". Actual: ";
__n78["raw"] := "'#3: String(parseFloat(new String(\"NaN\"))) === \"NaN\". Actual: '";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "String";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "parseFloat";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "NewExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "String";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "NaN";
__n88["raw"] := "\"NaN\"";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n77["right"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n58["consequent"] := __n71;
__n58["alternate"] := null;
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "!==";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "parseFloat";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "NewExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "String";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := ".01e+2";
__n97["raw"] := "\".01e+2\"";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["left"] := __n91;
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "parseFloat";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := ".01e+2";
__n101["raw"] := "\".01e+2\"";
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n90["right"] := __n98;
__n89["test"] := __n90;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$ERROR";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "+";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#4: parseFloat(new String(\".01e+2\")) === parseFloat(\".01e+2\"). Actual: ";
__n109["raw"] := "'#4: parseFloat(new String(\".01e+2\")) === parseFloat(\".01e+2\"). Actual: '";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "parseFloat";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "NewExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "String";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := ".01e+2";
__n116["raw"] := "\".01e+2\"";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n108["right"] := __n110;
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n103 := [ __n104 ];
__n102["body"] := __n103;
__n89["consequent"] := __n102;
__n89["alternate"] := null;
__n117 := {  };
__n117["type"] := "IfStatement";
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "!==";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "String";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "parseFloat";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "NewExpression";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "String";
__n125["callee"] := __n126;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := "false";
__n128["raw"] := "\"false\"";
__n127 := [ __n128 ];
__n125["arguments"] := __n127;
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["left"] := __n119;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "NaN";
__n129["raw"] := "\"NaN\"";
__n118["right"] := __n129;
__n117["test"] := __n118;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ExpressionStatement";
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "$ERROR";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "+";
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := "#5: String(parseFloat(new String(\"false\"))) === \"NaN\". Actual: ";
__n137["raw"] := "'#5: String(parseFloat(new String(\"false\"))) === \"NaN\". Actual: '";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "String";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "parseFloat";
__n141["callee"] := __n142;
__n144 := {  };
__n144["type"] := "NewExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "String";
__n144["callee"] := __n145;
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := "false";
__n147["raw"] := "\"false\"";
__n146 := [ __n147 ];
__n144["arguments"] := __n146;
__n143 := [ __n144 ];
__n141["arguments"] := __n143;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n136["right"] := __n138;
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n132["expression"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n117["consequent"] := __n130;
__n117["alternate"] := null;
__n1 := [ __n2, __n30, __n58, __n89, __n117 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n148 := [  ];
__n0["variableDeclarations"] := __n148;
__n149 := [  ];
__n0["functionDeclarations"] := __n149;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}