function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "Infinity1";
__n7["raw"] := "\"Infinity1\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "POSITIVE_INFINITY";
__n10["raw"] := "\"POSITIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: parseFloat(\"Infinity1\") === Number.POSITIVE_INFINITY. Actual: ";
__n18["raw"] := "'#1: parseFloat(\"Infinity1\") === Number.POSITIVE_INFINITY. Actual: '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "parseFloat";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "Infinity1";
__n22["raw"] := "\"Infinity1\"";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "parseFloat";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "Infinityx";
__n28["raw"] := "\"Infinityx\"";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["left"] := __n25;
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Number";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "POSITIVE_INFINITY";
__n31["raw"] := "\"POSITIVE_INFINITY\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n24["right"] := __n29;
__n23["test"] := __n24;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: parseFloat(\"Infinityx\") === Number.POSITIVE_INFINITY. Actual: ";
__n39["raw"] := "'#2: parseFloat(\"Infinityx\") === Number.POSITIVE_INFINITY. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "parseFloat";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "Infinityx";
__n43["raw"] := "\"Infinityx\"";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n23["consequent"] := __n32;
__n23["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "parseFloat";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "Infinity+1";
__n49["raw"] := "\"Infinity+1\"";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["left"] := __n46;
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Number";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "POSITIVE_INFINITY";
__n52["raw"] := "\"POSITIVE_INFINITY\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n45["right"] := __n50;
__n44["test"] := __n45;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#3: parseFloat(\"Infinity+1\") === Number.POSITIVE_INFINITY. Actual: ";
__n60["raw"] := "'#3: parseFloat(\"Infinity+1\") === Number.POSITIVE_INFINITY. Actual: '";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "parseFloat";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "Infinity+1";
__n64["raw"] := "\"Infinity+1\"";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n59["right"] := __n61;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n44["consequent"] := __n53;
__n44["alternate"] := null;
__n1 := [ __n2, __n23, __n44 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n65 := [  ];
__n0["variableDeclarations"] := __n65;
__n66 := [  ];
__n0["functionDeclarations"] := __n66;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}