function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "-11string";
__n7["raw"] := "\"-11string\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "-";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 11.;
__n9["raw"] := "11";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: parseFloat(\"-11string\") === -11. Actual: ";
__n17["raw"] := "'#1: parseFloat(\"-11string\") === -11. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "parseFloat";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "-11string";
__n21["raw"] := "\"-11string\"";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "parseFloat";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "01string";
__n27["raw"] := "\"01string\"";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["left"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n23["right"] := __n28;
__n22["test"] := __n23;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: parseFloat(\"01string\") === 1. Actual: ";
__n36["raw"] := "'#2: parseFloat(\"01string\") === 1. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "parseFloat";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "01string";
__n40["raw"] := "\"01string\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n22["consequent"] := __n29;
__n22["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "parseFloat";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "-11e-1string";
__n46["raw"] := "\"-11e-1string\"";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["left"] := __n43;
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.1;
__n48["raw"] := "1.1";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n42["right"] := __n47;
__n41["test"] := __n42;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: parseFloat(\"-11e-1string\") === -1.1. Actual: ";
__n56["raw"] := "'#3: parseFloat(\"-11e-1string\") === -1.1. Actual: '";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "parseFloat";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "-11e-1string";
__n60["raw"] := "\"-11e-1string\"";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n41["consequent"] := __n49;
__n41["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "parseFloat";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "01e1string";
__n66["raw"] := "\"01e1string\"";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["left"] := __n63;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 10.;
__n67["raw"] := "10";
__n62["right"] := __n67;
__n61["test"] := __n62;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: parseFloat(\"01e1string\") === 10. Actual: ";
__n75["raw"] := "'#4: parseFloat(\"01e1string\") === 10. Actual: '";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "parseFloat";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "01e1string";
__n79["raw"] := "\"01e1string\"";
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n61["consequent"] := __n68;
__n61["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "parseFloat";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "001string";
__n85["raw"] := "\"001string\"";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["left"] := __n82;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 1.;
__n86["raw"] := "1";
__n81["right"] := __n86;
__n80["test"] := __n81;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#5: parseFloat(\"001string\") === 1. Actual: ";
__n94["raw"] := "'#5: parseFloat(\"001string\") === 1. Actual: '";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "parseFloat";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "001string";
__n98["raw"] := "\"001string\"";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n93["right"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n80["consequent"] := __n87;
__n80["alternate"] := null;
__n99 := {  };
__n99["type"] := "IfStatement";
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "!==";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "parseFloat";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "1e001string";
__n104["raw"] := "\"1e001string\"";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["left"] := __n101;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := 10.;
__n105["raw"] := "10";
__n100["right"] := __n105;
__n99["test"] := __n100;
__n106 := {  };
__n106["type"] := "BlockStatement";
__n108 := {  };
__n108["type"] := "ExpressionStatement";
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "$ERROR";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "BinaryExpression";
__n112["operator"] := "+";
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "#6: parseFloat(\"1e001string\") === 10. Actual: ";
__n113["raw"] := "'#6: parseFloat(\"1e001string\") === 10. Actual: '";
__n112["left"] := __n113;
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "parseFloat";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "1e001string";
__n117["raw"] := "\"1e001string\"";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n112["right"] := __n114;
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n108["expression"] := __n109;
__n107 := [ __n108 ];
__n106["body"] := __n107;
__n99["consequent"] := __n106;
__n99["alternate"] := null;
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!==";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "parseFloat";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "010string";
__n123["raw"] := "\"010string\"";
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["left"] := __n120;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 10.;
__n124["raw"] := "10";
__n119["right"] := __n124;
__n118["test"] := __n119;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "$ERROR";
__n128["callee"] := __n129;
__n131 := {  };
__n131["type"] := "BinaryExpression";
__n131["operator"] := "+";
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#7: parseFloat(\"010string\") === 10. Actual: ";
__n132["raw"] := "'#7: parseFloat(\"010string\") === 10. Actual: '";
__n131["left"] := __n132;
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "parseFloat";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := "010string";
__n136["raw"] := "\"010string\"";
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n131["right"] := __n133;
__n130 := [ __n131 ];
__n128["arguments"] := __n130;
__n127["expression"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n118["consequent"] := __n125;
__n118["alternate"] := null;
__n1 := [ __n2, __n22, __n41, __n61, __n80, __n99, __n118 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n137 := [  ];
__n0["variableDeclarations"] := __n137;
__n138 := [  ];
__n0["functionDeclarations"] := __n138;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}