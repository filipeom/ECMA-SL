function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "-";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "parseInt";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "-1";
__n16["raw"] := "\"-1\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "parseInt(-1) must return the same value returned by parseInt(\"-1\")";
__n17["raw"] := "'parseInt(-1) must return the same value returned by parseInt(\"-1\")'";
__n7 := [ __n8, __n13, __n17 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "sameValue";
__n22["raw"] := "\"sameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "String";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "parseInt";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Infinity";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "NaN";
__n31["raw"] := "\"NaN\"";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "String(parseInt(Infinity)) must return \"NaN\"";
__n32["raw"] := "'String(parseInt(Infinity)) must return \"NaN\"'";
__n23 := [ __n24, __n31, __n32 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "assert";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "sameValue";
__n37["raw"] := "\"sameValue\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "String";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "parseInt";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "NaN";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "NaN";
__n46["raw"] := "\"NaN\"";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "String(parseInt(NaN)) must return \"NaN\"";
__n47["raw"] := "'String(parseInt(NaN)) must return \"NaN\"'";
__n38 := [ __n39, __n46, __n47 ];
__n34["arguments"] := __n38;
__n33["expression"] := __n34;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "assert";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "sameValue";
__n52["raw"] := "\"sameValue\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "parseInt";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "UnaryExpression";
__n57["operator"] := "-";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "parseInt(-0) must return 0";
__n60["raw"] := "'parseInt(-0) must return 0'";
__n53 := [ __n54, __n59, __n60 ];
__n49["arguments"] := __n53;
__n48["expression"] := __n49;
__n1 := [ __n2, __n18, __n33, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n61 := [  ];
__n0["variableDeclarations"] := __n61;
__n62 := [  ];
__n0["functionDeclarations"] := __n62;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}