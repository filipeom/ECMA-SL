function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "UnaryExpression";
__n14["operator"] := "-";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n14["argument"] := __n15;
__n14["prefix"] := true;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "parseInt";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "-1";
__n19["raw"] := "\"-1\"";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "parseInt(new Number(-1)) must return the same value returned by parseInt(\"-1\")";
__n20["raw"] := "'parseInt(new Number(-1)) must return the same value returned by parseInt(\"-1\")'";
__n7 := [ __n8, __n16, __n20 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "assert";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "sameValue";
__n25["raw"] := "\"sameValue\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "String";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "parseInt";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "NewExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Infinity";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "NaN";
__n37["raw"] := "\"NaN\"";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "String(parseInt(new Number(Infinity))) must return \"NaN\"";
__n38["raw"] := "'String(parseInt(new Number(Infinity))) must return \"NaN\"'";
__n26 := [ __n27, __n37, __n38 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "assert";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "sameValue";
__n43["raw"] := "\"sameValue\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "String";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "parseInt";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "NewExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Number";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "NaN";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "NaN";
__n55["raw"] := "\"NaN\"";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "String(parseInt(new Number(NaN))) must return \"NaN\"";
__n56["raw"] := "'String(parseInt(new Number(NaN))) must return \"NaN\"'";
__n44 := [ __n45, __n55, __n56 ];
__n40["arguments"] := __n44;
__n39["expression"] := __n40;
__n1 := [ __n2, __n21, __n39 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n57 := [  ];
__n0["variableDeclarations"] := __n57;
__n58 := [  ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}