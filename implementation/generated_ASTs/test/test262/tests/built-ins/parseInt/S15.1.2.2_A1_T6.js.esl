function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "String";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "-1";
__n14["raw"] := "\"-1\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "parseInt";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "-1";
__n18["raw"] := "\"-1\"";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "parseInt(new String(\"-1\")) must return the same value returned by parseInt(\"-1\")";
__n19["raw"] := "'parseInt(new String(\"-1\")) must return the same value returned by parseInt(\"-1\")'";
__n7 := [ __n8, __n15, __n19 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "sameValue";
__n24["raw"] := "\"sameValue\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "String";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "parseInt";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "String";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "Infinity";
__n35["raw"] := "\"Infinity\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "NaN";
__n36["raw"] := "\"NaN\"";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "String(parseInt(new String(\"Infinity\"))) must return \"NaN\"";
__n37["raw"] := "'String(parseInt(new String(\"Infinity\"))) must return \"NaN\"'";
__n25 := [ __n26, __n36, __n37 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "assert";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "sameValue";
__n42["raw"] := "\"sameValue\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "String";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "parseInt";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "NewExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "String";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "NaN";
__n53["raw"] := "\"NaN\"";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "NaN";
__n54["raw"] := "\"NaN\"";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "String(parseInt(new String(\"NaN\"))) must return \"NaN\"";
__n55["raw"] := "'String(parseInt(new String(\"NaN\"))) must return \"NaN\"'";
__n43 := [ __n44, __n54, __n55 ];
__n39["arguments"] := __n43;
__n38["expression"] := __n39;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "assert";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "sameValue";
__n60["raw"] := "\"sameValue\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["callee"] := __n58;
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "String";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "parseInt";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "NewExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "String";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "false";
__n71["raw"] := "\"false\"";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "NaN";
__n72["raw"] := "\"NaN\"";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "String(parseInt(new String(\"false\"))) must return \"NaN\"";
__n73["raw"] := "'String(parseInt(new String(\"false\"))) must return \"NaN\"'";
__n61 := [ __n62, __n72, __n73 ];
__n57["arguments"] := __n61;
__n56["expression"] := __n57;
__n1 := [ __n2, __n20, __n38, __n56 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n74 := [  ];
__n0["variableDeclarations"] := __n74;
__n75 := [  ];
__n0["functionDeclarations"] := __n75;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}