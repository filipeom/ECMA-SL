function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := " 1";
__n11["raw"] := "\"\\u00201\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "parseInt";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "1";
__n15["raw"] := "\"1\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "parseInt(\"\\u00201\") must return the same value returned by parseInt(\"1\")";
__n16["raw"] := "'parseInt(\"\\\\u00201\") must return the same value returned by parseInt(\"1\")'";
__n7 := [ __n8, __n12, __n16 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "parseInt";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "  -1";
__n26["raw"] := "\"\\u0020\\u0020-1\"";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "parseInt";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "-1";
__n30["raw"] := "\"-1\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "parseInt(\"\\u0020\\u0020-1\") must return the same value returned by parseInt(\"-1\")";
__n31["raw"] := "'parseInt(\"\\\\u0020\\\\u0020-1\") must return the same value returned by parseInt(\"-1\")'";
__n22 := [ __n23, __n27, __n31 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "sameValue";
__n36["raw"] := "\"sameValue\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "parseInt";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := " 1";
__n41["raw"] := "\" 1\"";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "parseInt";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "1";
__n45["raw"] := "\"1\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "parseInt(\" 1\") must return the same value returned by parseInt(\"1\")";
__n46["raw"] := "'parseInt(\" 1\") must return the same value returned by parseInt(\"1\")'";
__n37 := [ __n38, __n42, __n46 ];
__n33["arguments"] := __n37;
__n32["expression"] := __n33;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "assert";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "sameValue";
__n51["raw"] := "\"sameValue\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "parseInt";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "       1";
__n56["raw"] := "\"       1\"";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "parseInt";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "1";
__n60["raw"] := "\"1\"";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "parseInt(\" 1\") must return the same value returned by parseInt(\"1\")";
__n61["raw"] := "'parseInt(\" 1\") must return the same value returned by parseInt(\"1\")'";
__n52 := [ __n53, __n57, __n61 ];
__n48["arguments"] := __n52;
__n47["expression"] := __n48;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "sameValue";
__n66["raw"] := "\"sameValue\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "parseInt";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "                -1";
__n71["raw"] := "\"       \\u0020       \\u0020-1\"";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "parseInt";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "-1";
__n75["raw"] := "\"-1\"";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "parseInt(\" \\u0020 \\u0020-1\") must return the same value returned by parseInt(\"-1\")";
__n76["raw"] := "'parseInt(\" \\\\u0020 \\\\u0020-1\") must return the same value returned by parseInt(\"-1\")'";
__n67 := [ __n68, __n72, __n76 ];
__n63["arguments"] := __n67;
__n62["expression"] := __n63;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "assert";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "sameValue";
__n81["raw"] := "\"sameValue\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n78["callee"] := __n79;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "parseInt";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := " ";
__n86["raw"] := "\"\\u0020\"";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "NaN";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "parseInt(\"\\u0020\") must return NaN";
__n88["raw"] := "'parseInt(\"\\\\u0020\") must return NaN'";
__n82 := [ __n83, __n87, __n88 ];
__n78["arguments"] := __n82;
__n77["expression"] := __n78;
__n1 := [ __n2, __n17, __n32, __n47, __n62, __n77 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n89 := [  ];
__n0["variableDeclarations"] := __n89;
__n90 := [  ];
__n0["functionDeclarations"] := __n90;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}