function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "11";
__n11["raw"] := "\"11\"";
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "String";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "2";
__n15["raw"] := "\"2\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10 := [ __n11, __n12 ];
__n8["arguments"] := __n10;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "parseInt";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "11";
__n19["raw"] := "\"11\"";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 2.;
__n20["raw"] := "2";
__n18 := [ __n19, __n20 ];
__n16["arguments"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "parseInt(\"11\", new String(\"2\")) must return the same value returned by parseInt(\"11\", 2)";
__n21["raw"] := "'parseInt(\"11\", new String(\"2\")) must return the same value returned by parseInt(\"11\", 2)'";
__n7 := [ __n8, __n16, __n21 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "sameValue";
__n26["raw"] := "\"sameValue\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "parseInt";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "11";
__n31["raw"] := "\"11\"";
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "String";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "Infinity";
__n35["raw"] := "\"Infinity\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n30 := [ __n31, __n32 ];
__n28["arguments"] := __n30;
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "parseInt";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "11";
__n39["raw"] := "\"11\"";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Infinity";
__n38 := [ __n39, __n40 ];
__n36["arguments"] := __n38;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "parseInt(\"11\", new String(\"Infinity\")) must return the same value returned by parseInt(\"11\", Infinity)";
__n41["raw"] := "'parseInt(\"11\", new String(\"Infinity\")) must return the same value returned by parseInt(\"11\", Infinity)'";
__n27 := [ __n28, __n36, __n41 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n1 := [ __n2, __n22 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}