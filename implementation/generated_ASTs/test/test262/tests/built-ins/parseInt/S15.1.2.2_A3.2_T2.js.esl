function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "11";
__n11["raw"] := "\"11\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.1;
__n12["raw"] := "2.1";
__n10 := [ __n11, __n12 ];
__n8["arguments"] := __n10;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "parseInt";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "11";
__n16["raw"] := "\"11\"";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 2.;
__n17["raw"] := "2";
__n15 := [ __n16, __n17 ];
__n13["arguments"] := __n15;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "parseInt(\"11\", 2.1) must return the same value returned by parseInt(\"11\", 2)";
__n18["raw"] := "'parseInt(\"11\", 2.1) must return the same value returned by parseInt(\"11\", 2)'";
__n7 := [ __n8, __n13, __n18 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "assert";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "sameValue";
__n23["raw"] := "\"sameValue\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "parseInt";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "11";
__n28["raw"] := "\"11\"";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 2.5;
__n29["raw"] := "2.5";
__n27 := [ __n28, __n29 ];
__n25["arguments"] := __n27;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "parseInt";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "11";
__n33["raw"] := "\"11\"";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 2.;
__n34["raw"] := "2";
__n32 := [ __n33, __n34 ];
__n30["arguments"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "parseInt(\"11\", 2.5) must return the same value returned by parseInt(\"11\", 2)";
__n35["raw"] := "'parseInt(\"11\", 2.5) must return the same value returned by parseInt(\"11\", 2)'";
__n24 := [ __n25, __n30, __n35 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "parseInt";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "11";
__n45["raw"] := "\"11\"";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 2.9;
__n46["raw"] := "2.9";
__n44 := [ __n45, __n46 ];
__n42["arguments"] := __n44;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "parseInt";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "11";
__n50["raw"] := "\"11\"";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 2.;
__n51["raw"] := "2";
__n49 := [ __n50, __n51 ];
__n47["arguments"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "parseInt(\"11\", 2.9) must return the same value returned by parseInt(\"11\", 2)";
__n52["raw"] := "'parseInt(\"11\", 2.9) must return the same value returned by parseInt(\"11\", 2)'";
__n41 := [ __n42, __n47, __n52 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "assert";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "sameValue";
__n57["raw"] := "\"sameValue\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "parseInt";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "11";
__n62["raw"] := "\"11\"";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 2.000000000001;
__n63["raw"] := "2.000000000001";
__n61 := [ __n62, __n63 ];
__n59["arguments"] := __n61;
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "parseInt";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "11";
__n67["raw"] := "\"11\"";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 2.;
__n68["raw"] := "2";
__n66 := [ __n67, __n68 ];
__n64["arguments"] := __n66;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "parseInt(\"11\", 2.000000000001) must return the same value returned by parseInt(\"11\", 2)";
__n69["raw"] := "'parseInt(\"11\", 2.000000000001) must return the same value returned by parseInt(\"11\", 2)'";
__n58 := [ __n59, __n64, __n69 ];
__n54["arguments"] := __n58;
__n53["expression"] := __n54;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "assert";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "sameValue";
__n74["raw"] := "\"sameValue\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n71["callee"] := __n72;
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "parseInt";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "11";
__n79["raw"] := "\"11\"";
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 2.999999999999;
__n80["raw"] := "2.999999999999";
__n78 := [ __n79, __n80 ];
__n76["arguments"] := __n78;
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "parseInt";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "11";
__n84["raw"] := "\"11\"";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 2.;
__n85["raw"] := "2";
__n83 := [ __n84, __n85 ];
__n81["arguments"] := __n83;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "parseInt(\"11\", 2.999999999999) must return the same value returned by parseInt(\"11\", 2)";
__n86["raw"] := "'parseInt(\"11\", 2.999999999999) must return the same value returned by parseInt(\"11\", 2)'";
__n75 := [ __n76, __n81, __n86 ];
__n71["arguments"] := __n75;
__n70["expression"] := __n71;
__n1 := [ __n2, __n19, __n36, __n53, __n70 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n87 := [  ];
__n0["variableDeclarations"] := __n87;
__n88 := [  ];
__n0["functionDeclarations"] := __n88;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}