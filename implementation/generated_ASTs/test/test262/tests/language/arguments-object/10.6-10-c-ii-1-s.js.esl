function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "foo";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "assert";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "foo";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 10.;
__n13["raw"] := "10";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "sss";
__n14["raw"] := "'sss'";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n12 := [ __n13, __n14, __n15 ];
__n10["arguments"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "foo(10, \"sss\", 1) !== true";
__n16["raw"] := "'foo(10, \"sss\", 1) !== true'";
__n9 := [ __n10, __n16 ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n17 := [  ];
__n0["variableDeclarations"] := __n17;
__n19 := {  };
__n19["type"] := "FunctionDeclaration";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "foo";
__n19["id"] := __n20;
__n21 := [ "a", "b", "c" ];
__n19["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "a";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "b";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "str";
__n31["raw"] := "'str'";
__n29["right"] := __n31;
__n28["expression"] := __n29;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "AssignmentExpression";
__n33["operator"] := "=";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "c";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 2.1;
__n35["raw"] := "2.1";
__n33["right"] := __n35;
__n32["expression"] := __n33;
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "LogicalExpression";
__n37["operator"] := "&&";
__n38 := {  };
__n38["type"] := "LogicalExpression";
__n38["operator"] := "&&";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "===";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n40["computed"] := true;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "arguments";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.;
__n42["raw"] := "0";
__n40["property"] := __n42;
__n39["left"] := __n40;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 10.;
__n43["raw"] := "10";
__n39["right"] := __n43;
__n38["left"] := __n39;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n45["computed"] := true;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "arguments";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n45["property"] := __n47;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "sss";
__n48["raw"] := "'sss'";
__n44["right"] := __n48;
__n38["right"] := __n44;
__n37["left"] := __n38;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n50["computed"] := true;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "arguments";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 2.;
__n52["raw"] := "2";
__n50["property"] := __n52;
__n49["left"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 1.;
__n53["raw"] := "1";
__n49["right"] := __n53;
__n37["right"] := __n49;
__n36["argument"] := __n37;
__n23 := [ __n24, __n28, __n32, __n36 ];
__n22["body"] := __n23;
__n54 := [  ];
__n22["variableDeclarations"] := __n54;
__n55 := [  ];
__n22["functionDeclarations"] := __n55;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n19["body"] := __n22;
__n19["generator"] := false;
__n19["expression"] := false;
__n19["async"] := false;
__n18 := [ __n19 ];
__n0["functionDeclarations"] := __n18;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}