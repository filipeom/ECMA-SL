function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "foo";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "assert";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "foo";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 10.;
__n11["raw"] := "10";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "sss";
__n12["raw"] := "'sss'";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n10 := [ __n11, __n12, __n13 ];
__n8["arguments"] := __n10;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "foo(10,\"sss\",1) !== true";
__n14["raw"] := "'foo(10,\"sss\",1) !== true'";
__n7 := [ __n8, __n14 ];
__n5["arguments"] := __n7;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n15 := [  ];
__n0["variableDeclarations"] := __n15;
__n17 := {  };
__n17["type"] := "FunctionDeclaration";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "foo";
__n17["id"] := __n18;
__n19 := [ "a", "b", "c" ];
__n17["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n24["computed"] := true;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "arguments";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n24["property"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n23["right"] := __n27;
__n22["expression"] := __n23;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n30["computed"] := true;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "arguments";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n30["property"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "str";
__n33["raw"] := "'str'";
__n29["right"] := __n33;
__n28["expression"] := __n29;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "=";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n36["computed"] := true;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "arguments";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 2.;
__n38["raw"] := "2";
__n36["property"] := __n38;
__n35["left"] := __n36;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 2.1;
__n39["raw"] := "2.1";
__n35["right"] := __n39;
__n34["expression"] := __n35;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "LogicalExpression";
__n41["operator"] := "&&";
__n42 := {  };
__n42["type"] := "LogicalExpression";
__n42["operator"] := "&&";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "===";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "a";
__n43["right"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "===";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "str";
__n47["raw"] := "'str'";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "b";
__n46["right"] := __n48;
__n42["right"] := __n46;
__n41["left"] := __n42;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 2.1;
__n50["raw"] := "2.1";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "c";
__n49["right"] := __n51;
__n41["right"] := __n49;
__n40["test"] := __n41;
__n52 := {  };
__n52["type"] := "ReturnStatement";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n52["argument"] := __n53;
__n40["consequent"] := __n52;
__n40["alternate"] := null;
__n21 := [ __n22, __n28, __n34, __n40 ];
__n20["body"] := __n21;
__n54 := [  ];
__n20["variableDeclarations"] := __n54;
__n55 := [  ];
__n20["functionDeclarations"] := __n55;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n17["body"] := __n20;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n16 := [ __n17 ];
__n0["functionDeclarations"] := __n16;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}