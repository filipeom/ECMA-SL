function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "called";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "test1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "test2";
__n9["expression"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "test1";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "assert";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "called";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "called !== true";
__n20["raw"] := "'called !== true'";
__n18 := [ __n19, __n20 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n1 := [ __n2, __n7, __n9, __n11, __n15 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n21 := [ "called" ];
__n0["variableDeclarations"] := __n21;
__n23 := {  };
__n23["type"] := "FunctionDeclaration";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "test1";
__n23["id"] := __n24;
__n25 := [ "flag" ];
__n23["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "flag";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "test2";
__n35["callee"] := __n36;
__n37 := [  ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n28["consequent"] := __n32;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "called";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := true;
__n43["raw"] := "true";
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n28["alternate"] := __n38;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n44 := [  ];
__n26["variableDeclarations"] := __n44;
__n45 := [  ];
__n26["functionDeclarations"] := __n45;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n23["body"] := __n26;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n46 := {  };
__n46["type"] := "FunctionDeclaration";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "test2";
__n46["id"] := __n47;
__n48 := [  ];
__n46["params"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "===";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arguments";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "callee";
__n56["raw"] := "\"callee\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["object"] := __n54;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "caller";
__n57["raw"] := "\"caller\"";
__n53["property"] := __n57;
__n53["computed"] := true;
__n52["left"] := __n53;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n52["right"] := __n58;
__n51["test"] := __n52;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "AssignmentExpression";
__n62["operator"] := "=";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "called";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := true;
__n64["raw"] := "true";
__n62["right"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n51["consequent"] := __n59;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arguments";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "callee";
__n72["raw"] := "\"callee\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["object"] := __n70;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "caller";
__n73["raw"] := "\"caller\"";
__n69["property"] := __n73;
__n69["computed"] := true;
__n68["callee"] := __n69;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n74 := [ __n75 ];
__n68["arguments"] := __n74;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n51["alternate"] := __n65;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n76 := [  ];
__n49["variableDeclarations"] := __n76;
__n77 := [  ];
__n49["functionDeclarations"] := __n77;
__n49["codeType"] := "function";
__n49["strict"] := false;
__n46["body"] := __n49;
__n46["generator"] := false;
__n46["async"] := false;
__n46["expression"] := false;
__n22 := [ __n23, __n46 ];
__n0["functionDeclarations"] := __n22;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}