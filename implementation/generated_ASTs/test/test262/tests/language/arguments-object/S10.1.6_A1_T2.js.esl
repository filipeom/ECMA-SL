function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "ARG_STRING";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "value of the argument property";
__n6["raw"] := "\"value of the argument property\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f1";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 2.;
__n16["raw"] := "2";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 3.;
__n17["raw"] := "3";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 4.;
__n18["raw"] := "4";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 5.;
__n19["raw"] := "5";
__n14 := [ __n15, __n16, __n17, __n18, __n19 ];
__n12["arguments"] := __n14;
__n11["object"] := __n12;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "length";
__n20["raw"] := "\"length\"";
__n11["property"] := __n20;
__n11["computed"] := true;
__n10["left"] := __n11;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 5.;
__n21["raw"] := "5";
__n10["right"] := __n21;
__n9["test"] := __n10;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: (new f1(1,2,3,4,5)).length===5, where f1 returns \"arguments\" that is set to \"";
__n28["raw"] := "'#1: (new f1(1,2,3,4,5)).length===5, where f1 returns \"arguments\" that is set to \"'";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "ARG_STRING";
__n27["right"] := __n29;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "\"";
__n30["raw"] := "'\"'";
__n26["right"] := __n30;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n9["consequent"] := __n22;
__n9["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n33["computed"] := true;
__n34 := {  };
__n34["type"] := "NewExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "f1";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 2.;
__n38["raw"] := "2";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 3.;
__n39["raw"] := "3";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 4.;
__n40["raw"] := "4";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 5.;
__n41["raw"] := "5";
__n36 := [ __n37, __n38, __n39, __n40, __n41 ];
__n34["arguments"] := __n36;
__n33["object"] := __n34;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 3.;
__n42["raw"] := "3";
__n33["property"] := __n42;
__n32["left"] := __n33;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 4.;
__n43["raw"] := "4";
__n32["right"] := __n43;
__n31["test"] := __n32;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "+";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#2: (new f1(1,2,3,4,5))[3]===4, where f1 returns \"arguments\" that is set to \"";
__n50["raw"] := "'#2: (new f1(1,2,3,4,5))[3]===4, where f1 returns \"arguments\" that is set to \"'";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "ARG_STRING";
__n49["right"] := __n51;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "\"";
__n52["raw"] := "'\"'";
__n48["right"] := __n52;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n31["consequent"] := __n44;
__n31["alternate"] := null;
__n53 := {  };
__n53["type"] := "VariableDeclaration";
__n55 := {  };
__n55["type"] := "VariableDeclarator";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["id"] := __n56;
__n57 := {  };
__n57["type"] := "NewExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "f1";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 2.;
__n61["raw"] := "2";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 3.;
__n62["raw"] := "3";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 4.;
__n63["raw"] := "4";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 5.;
__n64["raw"] := "5";
__n59 := [ __n60, __n61, __n62, __n63, __n64 ];
__n57["arguments"] := __n59;
__n55["init"] := __n57;
__n54 := [ __n55 ];
__n53["declarations"] := __n54;
__n53["kind"] := "var";
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "UnaryExpression";
__n67["operator"] := "delete";
__n68 := {  };
__n68["type"] := "MemberExpression";
__n68["computed"] := true;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "x";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 3.;
__n70["raw"] := "3";
__n68["property"] := __n70;
__n67["argument"] := __n68;
__n67["prefix"] := true;
__n66["left"] := __n67;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := true;
__n71["raw"] := "true";
__n66["right"] := __n71;
__n65["test"] := __n66;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#3.1: Function parameters have attribute {DontDelete}";
__n76["raw"] := "'#3.1: Function parameters have attribute {DontDelete}'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n65["consequent"] := __n72;
__n65["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "===";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n79["computed"] := true;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "x";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 3.;
__n81["raw"] := "3";
__n79["property"] := __n81;
__n78["left"] := __n79;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := 4.;
__n82["raw"] := "4";
__n78["right"] := __n82;
__n77["test"] := __n78;
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$ERROR";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#3.2: Function parameters have attribute {DontDelete}";
__n87["raw"] := "'#3.2: Function parameters have attribute {DontDelete}'";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n77["consequent"] := __n83;
__n77["alternate"] := null;
__n1 := [ __n2, __n7, __n9, __n31, __n53, __n65, __n77 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n88 := [ "ARG_STRING", "x" ];
__n0["variableDeclarations"] := __n88;
__n90 := {  };
__n90["type"] := "FunctionDeclaration";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "f1";
__n90["id"] := __n91;
__n92 := [  ];
__n90["params"] := __n92;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "AssignmentExpression";
__n96["operator"] := "=";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "MemberExpression";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "ThisExpression";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "constructor";
__n101["raw"] := "\"constructor\"";
__n99["property"] := __n101;
__n99["computed"] := true;
__n98["object"] := __n99;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "prototype";
__n102["raw"] := "\"prototype\"";
__n98["property"] := __n102;
__n98["computed"] := true;
__n97["object"] := __n98;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "arguments";
__n103["raw"] := "\"arguments\"";
__n97["property"] := __n103;
__n97["computed"] := true;
__n96["left"] := __n97;
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "ARG_STRING";
__n96["right"] := __n104;
__n95["expression"] := __n96;
__n105 := {  };
__n105["type"] := "ReturnStatement";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "arguments";
__n105["argument"] := __n106;
__n94 := [ __n95, __n105 ];
__n93["body"] := __n94;
__n107 := [  ];
__n93["variableDeclarations"] := __n107;
__n108 := [  ];
__n93["functionDeclarations"] := __n108;
__n93["codeType"] := "function";
__n93["strict"] := false;
__n90["body"] := __n93;
__n90["generator"] := false;
__n90["expression"] := false;
__n90["async"] := false;
__n89 := [ __n90 ];
__n0["functionDeclarations"] := __n89;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}