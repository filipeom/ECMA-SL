function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "TryStatement";
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "!";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "f1";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["test"] := __n8;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: A property callee don't have attribute { DontEnum }";
__n18["raw"] := "\"#1: A property callee don't have attribute { DontEnum }\"";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n7["consequent"] := __n12;
__n7["alternate"] := null;
__n6 := [ __n7 ];
__n5["body"] := __n6;
__n4["block"] := __n5;
__n19 := {  };
__n19["type"] := "CatchClause";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["param"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: arguments object don't exists";
__n27["raw"] := "\"#1: arguments object don't exists\"";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n19["body"] := __n21;
__n4["handler"] := __n19;
__n4["finalizer"] := null;
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "f2";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [  ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ForInStatement";
__n37 := {  };
__n37["type"] := "VariableDeclaration";
__n39 := {  };
__n39["type"] := "VariableDeclarator";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "x";
__n39["id"] := __n40;
__n39["init"] := null;
__n38 := [ __n39 ];
__n37["declarations"] := __n38;
__n37["kind"] := "var";
__n36["left"] := __n37;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "arguments";
__n36["right"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "===";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "x";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "callee";
__n47["raw"] := "\"callee\"";
__n45["right"] := __n47;
__n44["test"] := __n45;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ReturnStatement";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := false;
__n51["raw"] := "false";
__n50["argument"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n44["consequent"] := __n48;
__n44["alternate"] := null;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n36["body"] := __n42;
__n36["each"] := false;
__n52 := {  };
__n52["type"] := "ReturnStatement";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n52["argument"] := __n53;
__n35 := [ __n36, __n52 ];
__n34["body"] := __n35;
__n54 := [ "x" ];
__n34["variableDeclarations"] := __n54;
__n55 := [  ];
__n34["functionDeclarations"] := __n55;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["expression"] := false;
__n32["async"] := false;
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n56 := {  };
__n56["type"] := "TryStatement";
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "!";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "f2";
__n61["callee"] := __n62;
__n63 := [  ];
__n61["arguments"] := __n63;
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n59["test"] := __n60;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#2: A property callee don't have attribute { DontEnum }";
__n70["raw"] := "\"#2: A property callee don't have attribute { DontEnum }\"";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n59["consequent"] := __n64;
__n59["alternate"] := null;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n56["block"] := __n57;
__n71 := {  };
__n71["type"] := "CatchClause";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "e";
__n71["param"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "$ERROR";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#2: arguments object don't exists";
__n79["raw"] := "\"#2: arguments object don't exists\"";
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["expression"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n71["body"] := __n73;
__n56["handler"] := __n71;
__n56["finalizer"] := null;
__n1 := [ __n2, __n4, __n28, __n56 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n80 := [ "f2" ];
__n0["variableDeclarations"] := __n80;
__n82 := {  };
__n82["type"] := "FunctionDeclaration";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "f1";
__n82["id"] := __n83;
__n84 := [  ];
__n82["params"] := __n84;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ForInStatement";
__n88 := {  };
__n88["type"] := "VariableDeclaration";
__n90 := {  };
__n90["type"] := "VariableDeclarator";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "x";
__n90["id"] := __n91;
__n90["init"] := null;
__n89 := [ __n90 ];
__n88["declarations"] := __n89;
__n88["kind"] := "var";
__n87["left"] := __n88;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "arguments";
__n87["right"] := __n92;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "IfStatement";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "===";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "callee";
__n98["raw"] := "\"callee\"";
__n96["right"] := __n98;
__n95["test"] := __n96;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ReturnStatement";
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := false;
__n102["raw"] := "false";
__n101["argument"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n95["consequent"] := __n99;
__n95["alternate"] := null;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n87["body"] := __n93;
__n87["each"] := false;
__n103 := {  };
__n103["type"] := "ReturnStatement";
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := true;
__n104["raw"] := "true";
__n103["argument"] := __n104;
__n86 := [ __n87, __n103 ];
__n85["body"] := __n86;
__n105 := [ "x" ];
__n85["variableDeclarations"] := __n105;
__n106 := [  ];
__n85["functionDeclarations"] := __n106;
__n85["codeType"] := "function";
__n85["strict"] := false;
__n82["body"] := __n85;
__n82["generator"] := false;
__n82["expression"] := false;
__n82["async"] := false;
__n81 := [ __n82 ];
__n0["functionDeclarations"] := __n81;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}