function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ForStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "i";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n4["init"] := __n5;
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "<";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 5.;
__n12["raw"] := "5";
__n10["right"] := __n12;
__n4["test"] := __n10;
__n13 := {  };
__n13["type"] := "UpdateExpression";
__n13["operator"] := "++";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "i";
__n13["argument"] := __n14;
__n13["prefix"] := false;
__n4["update"] := __n13;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n19["computed"] := true;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f1";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 2.;
__n24["raw"] := "2";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 3.;
__n25["raw"] := "3";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 4.;
__n26["raw"] := "4";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 5.;
__n27["raw"] := "5";
__n22 := [ __n23, __n24, __n25, __n26, __n27 ];
__n20["arguments"] := __n22;
__n19["object"] := __n20;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "i";
__n19["property"] := __n28;
__n18["left"] := __n19;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "i";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n29["right"] := __n31;
__n18["right"] := __n29;
__n17["test"] := __n18;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#";
__n41["raw"] := "\"#\"";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "i";
__n40["right"] := __n42;
__n39["left"] := __n40;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := ": Returning function's arguments work wrong, f1(1,2,3,4,5)[";
__n43["raw"] := "\": Returning function's arguments work wrong, f1(1,2,3,4,5)[\"";
__n39["right"] := __n43;
__n38["left"] := __n39;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "i";
__n38["right"] := __n44;
__n37["left"] := __n38;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "] !== ";
__n45["raw"] := "\"] !== \"";
__n37["right"] := __n45;
__n36["left"] := __n37;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "i";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.;
__n48["raw"] := "1";
__n46["right"] := __n48;
__n36["right"] := __n46;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n17["consequent"] := __n32;
__n17["alternate"] := null;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n4["body"] := __n15;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n49 := [ "i" ];
__n0["variableDeclarations"] := __n49;
__n51 := {  };
__n51["type"] := "FunctionDeclaration";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "f1";
__n51["id"] := __n52;
__n53 := [  ];
__n51["params"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ReturnStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "arguments";
__n56["argument"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n58 := [  ];
__n54["variableDeclarations"] := __n58;
__n59 := [  ];
__n54["functionDeclarations"] := __n59;
__n54["codeType"] := "function";
__n54["strict"] := false;
__n51["body"] := __n54;
__n51["generator"] := false;
__n51["expression"] := false;
__n51["async"] := false;
__n50 := [ __n51 ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}