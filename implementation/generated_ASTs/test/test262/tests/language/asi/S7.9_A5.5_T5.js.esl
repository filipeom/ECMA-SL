function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "f";
__n11["id"] := __n12;
__n13 := [ "t" ];
__n11["params"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ReturnStatement";
__n17 := {  };
__n17["type"] := "ObjectExpression";
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "a";
__n19["key"] := __n20;
__n21 := {  };
__n21["type"] := "FunctionExpression";
__n21["id"] := null;
__n22 := [  ];
__n21["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ReturnStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "t";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n26["right"] := __n28;
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n29 := [  ];
__n23["variableDeclarations"] := __n29;
__n30 := [  ];
__n23["functionDeclarations"] := __n30;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n21["body"] := __n23;
__n21["generator"] := false;
__n21["async"] := false;
__n21["expression"] := false;
__n19["value"] := __n21;
__n19["computed"] := false;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n18 := [ __n19 ];
__n17["properties"] := __n18;
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n31 := [  ];
__n14["variableDeclarations"] := __n31;
__n32 := [  ];
__n14["functionDeclarations"] := __n32;
__n14["codeType"] := "function";
__n14["strict"] := false;
__n11["body"] := __n14;
__n11["generator"] := false;
__n11["async"] := false;
__n11["expression"] := false;
__n10["callee"] := __n11;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 2.;
__n35["raw"] := "2";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 3.;
__n36["raw"] := "3";
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n10["arguments"] := __n33;
__n9["object"] := __n10;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "a";
__n37["raw"] := "\"a\"";
__n9["property"] := __n37;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n38 := [  ];
__n8["arguments"] := __n38;
__n6["right"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 7.;
__n42["raw"] := "7";
__n40["right"] := __n42;
__n39["test"] := __n40;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#1: Check Function Expression for automatic semicolon insertion";
__n49["raw"] := "'#1: Check Function Expression for automatic semicolon insertion'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n39["consequent"] := __n43;
__n39["alternate"] := null;
__n1 := [ __n2, __n39 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n50 := [ "x" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}