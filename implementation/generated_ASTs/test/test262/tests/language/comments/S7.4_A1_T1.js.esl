function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "assert";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "sameValue";
__n11["raw"] := "\"sameValue\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "x";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "The value of `x` is 0";
__n15["raw"] := "'The value of `x` is 0'";
__n12 := [ __n13, __n14, __n15 ];
__n8["arguments"] := __n12;
__n7["expression"] := __n8;
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "y";
__n18["id"] := __n19;
__n18["init"] := null;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "sameValue";
__n24["raw"] := "\"sameValue\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "y";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "undefined";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "The value of `y` is expected to equal `undefined`";
__n28["raw"] := "'The value of `y` is expected to equal `undefined`'";
__n25 := [ __n26, __n27, __n28 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "UpdateExpression";
__n30["operator"] := "++";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "ThisExpression";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "y";
__n33["raw"] := "\"y\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["argument"] := __n31;
__n30["prefix"] := false;
__n29["expression"] := __n30;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "sameValue";
__n38["raw"] := "\"sameValue\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "isNaN";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "y";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := true;
__n44["raw"] := "true";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "isNaN(y) returns true";
__n45["raw"] := "'isNaN(y) returns true'";
__n39 := [ __n40, __n44, __n45 ];
__n35["arguments"] := __n39;
__n34["expression"] := __n35;
__n1 := [ __n2, __n7, __n16, __n20, __n29, __n34 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "x", "y" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}