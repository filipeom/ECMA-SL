function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "testcase";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "testcase";
__n5["callee"] := __n6;
__n7 := [  ];
__n5["arguments"] := __n7;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n8 := [  ];
__n0["variableDeclarations"] := __n8;
__n10 := {  };
__n10["type"] := "FunctionDeclaration";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "testcase";
__n10["id"] := __n11;
__n12 := [  ];
__n10["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "use strict";
__n16["raw"] := "\"use strict\"";
__n15["expression"] := __n16;
__n15["directive"] := "use strict";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "throws";
__n21["raw"] := "\"throws\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "ReferenceError";
__n24 := {  };
__n24["type"] := "FunctionExpression";
__n24["id"] := null;
__n25 := [  ];
__n24["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "test262unresolvable";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 'null;
__n31["raw"] := "\"'null\"";
__n29["right"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n32 := [  ];
__n26["variableDeclarations"] := __n32;
__n33 := [  ];
__n26["functionDeclarations"] := __n33;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n24["body"] := __n26;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n22 := [ __n23, __n24 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n14 := [ __n15, __n17 ];
__n13["body"] := __n14;
__n34 := [  ];
__n13["variableDeclarations"] := __n34;
__n35 := [  ];
__n13["functionDeclarations"] := __n35;
__n13["codeType"] := "function";
__n13["strict"] := true;
__n10["body"] := __n13;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n9 := [ __n10 ];
__n0["functionDeclarations"] := __n9;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}