function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "y";
__n10["id"] := __n11;
__n10["init"] := null;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "eval";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "y = x";
__n17["raw"] := "\"y = x\"";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["left"] := __n14;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n13["right"] := __n18;
__n12["test"] := __n13;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: var x = {}; eval(\"y = x\") === x. Actual: ";
__n26["raw"] := "'#1: var x = {}; eval(\"y = x\") === x. Actual: '";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "eval";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "y = x";
__n30["raw"] := "\"y = x\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n25["right"] := __n27;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n12["consequent"] := __n19;
__n12["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "eval";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "x";
__n36["raw"] := "\"x\"";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["left"] := __n33;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n32["right"] := __n37;
__n31["test"] := __n32;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: var x = {}; eval(\"x\") === x. Actual: ";
__n45["raw"] := "'#2: var x = {}; eval(\"x\") === x. Actual: '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "eval";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "x";
__n49["raw"] := "\"x\"";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n31["consequent"] := __n38;
__n31["alternate"] := null;
__n1 := [ __n2, __n8, __n12, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "x", "y" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}