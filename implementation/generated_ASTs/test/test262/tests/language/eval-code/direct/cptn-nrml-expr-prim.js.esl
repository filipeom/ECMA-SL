function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "IfStatement";
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "!==";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "eval";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "x = 1";
__n11["raw"] := "\"x = 1\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n7["left"] := __n8;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n7["right"] := __n12;
__n6["test"] := __n7;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: eval(\"x = 1\") === 1. Actual: ";
__n20["raw"] := "'#1: eval(\"x = 1\") === 1. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "eval";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "x = 1";
__n24["raw"] := "\"x = 1\"";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n6["consequent"] := __n13;
__n6["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "eval";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "1";
__n30["raw"] := "\"1\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["left"] := __n27;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n26["right"] := __n31;
__n25["test"] := __n26;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: eval(\"1\") === 1. Actual: ";
__n39["raw"] := "'#2: eval(\"1\") === 1. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "eval";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "1";
__n43["raw"] := "\"1\"";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n25["consequent"] := __n32;
__n25["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "eval";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "'1'";
__n49["raw"] := "\"'1'\"";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["left"] := __n46;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "1";
__n50["raw"] := "'1'";
__n45["right"] := __n50;
__n44["test"] := __n45;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: eval(\"'1'\") === '1'. Actual: ";
__n58["raw"] := "'#3: eval(\"\\'1\\'\") === \\'1\\'. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "eval";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "'1'";
__n62["raw"] := "\"'1'\"";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n44["consequent"] := __n51;
__n44["alternate"] := null;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "AssignmentExpression";
__n64["operator"] := "=";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n64["right"] := __n66;
__n63["expression"] := __n64;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "eval";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "++x";
__n72["raw"] := "\"++x\"";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["left"] := __n69;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 2.;
__n73["raw"] := "2";
__n68["right"] := __n73;
__n67["test"] := __n68;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "+";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#4: x = 1; eval(\"++x\") === 2. Actual: ";
__n81["raw"] := "'#4: x = 1; eval(\"++x\") === 2. Actual: '";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "x";
__n80["right"] := __n82;
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n67["consequent"] := __n74;
__n67["alternate"] := null;
__n1 := [ __n2, __n6, __n25, __n44, __n63, __n67 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n83 := [ "x" ];
__n0["variableDeclarations"] := __n83;
__n84 := [  ];
__n0["functionDeclarations"] := __n84;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}