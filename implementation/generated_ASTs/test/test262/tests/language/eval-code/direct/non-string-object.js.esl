function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "eval";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "x";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["left"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n9["right"] := __n14;
__n8["test"] := __n9;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: x = {}; eval(x) === x. Actual: ";
__n22["raw"] := "'#1: x = {}; eval(x) === x. Actual: '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "eval";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n8["consequent"] := __n15;
__n8["alternate"] := null;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "NewExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Number";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n28["right"] := __n30;
__n27["expression"] := __n28;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "!==";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "eval";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "x";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["left"] := __n36;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "x";
__n35["right"] := __n40;
__n34["test"] := __n35;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2: x = new Number(1); eval(x) === x. Actual: ";
__n48["raw"] := "'#2: x = new Number(1); eval(x) === x. Actual: '";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "eval";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n34["consequent"] := __n41;
__n34["alternate"] := null;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "x";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "NewExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "Boolean";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := true;
__n59["raw"] := "true";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n54["right"] := __n56;
__n53["expression"] := __n54;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "eval";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["left"] := __n62;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n61["right"] := __n66;
__n60["test"] := __n61;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: x = new Boolean(true); eval(x) === x. Actual: ";
__n74["raw"] := "'#3: x = new Boolean(true); eval(x) === x. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "eval";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n60["consequent"] := __n67;
__n60["alternate"] := null;
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "AssignmentExpression";
__n80["operator"] := "=";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "x";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "NewExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "String";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "1+1";
__n85["raw"] := "\"1+1\"";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n80["right"] := __n82;
__n79["expression"] := __n80;
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "!==";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "eval";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "x";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["left"] := __n88;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "x";
__n87["right"] := __n92;
__n86["test"] := __n87;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#4: x = new String(\"1\"); eval(x) === x. Actual: ";
__n100["raw"] := "'#4: x = new String(\"1\"); eval(x) === x. Actual: '";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "eval";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "x";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n99["right"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n86["consequent"] := __n93;
__n86["alternate"] := null;
__n1 := [ __n2, __n8, __n27, __n34, __n53, __n60, __n79, __n86 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n105 := [ "x" ];
__n0["variableDeclarations"] := __n105;
__n106 := [  ];
__n0["functionDeclarations"] := __n106;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}