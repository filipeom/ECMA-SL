function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "eval";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["left"] := __n9;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "x";
__n8["right"] := __n13;
__n7["test"] := __n8;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: x = 1; eval(x) === x. Actual: ";
__n21["raw"] := "'#1: x = 1; eval(x) === x. Actual: '";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "eval";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "x";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n7["consequent"] := __n14;
__n7["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "eval";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n27["right"] := __n32;
__n26["test"] := __n27;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: eval(1) === 1. Actual: ";
__n40["raw"] := "'#2: eval(1) === 1. Actual: '";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "eval";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n26["consequent"] := __n33;
__n26["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "eval";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := true;
__n50["raw"] := "true";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["left"] := __n47;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := true;
__n51["raw"] := "true";
__n46["right"] := __n51;
__n45["test"] := __n46;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#3: eval(true) === true. Actual: ";
__n59["raw"] := "'#3: eval(true) === true. Actual: '";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "eval";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := true;
__n63["raw"] := "true";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n58["right"] := __n60;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n45["consequent"] := __n52;
__n45["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "eval";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 'null;
__n69["raw"] := "\"'null\"";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["left"] := __n66;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 'null;
__n70["raw"] := "\"'null\"";
__n65["right"] := __n70;
__n64["test"] := __n65;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "+";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#4: eval(null) === null. Actual: ";
__n78["raw"] := "'#4: eval(null) === null. Actual: '";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "eval";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := 'null;
__n82["raw"] := "\"'null\"";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n77["right"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n64["consequent"] := __n71;
__n64["alternate"] := null;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "eval";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "undefined";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["left"] := __n85;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "undefined";
__n84["right"] := __n89;
__n83["test"] := __n84;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#5: eval(undefined) === undefined. Actual: ";
__n97["raw"] := "'#5: eval(undefined) === undefined. Actual: '";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "eval";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "undefined";
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n96["right"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n83["consequent"] := __n90;
__n83["alternate"] := null;
__n1 := [ __n2, __n7, __n26, __n45, __n64, __n83 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n102 := [ "x" ];
__n0["variableDeclarations"] := __n102;
__n103 := [  ];
__n0["functionDeclarations"] := __n103;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}