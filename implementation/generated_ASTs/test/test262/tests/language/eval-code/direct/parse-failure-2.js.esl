function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "eval";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "x = 1; x
++";
__n10["raw"] := "\"x = 1; x\\u000A++\"";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n6 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n11 := [ "x" ];
__n0["variableDeclarations"] := __n11;
__n12 := [  ];
__n0["functionDeclarations"] := __n12;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}