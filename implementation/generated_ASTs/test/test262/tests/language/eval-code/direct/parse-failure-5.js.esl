function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "eval";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "return;";
__n9["raw"] := "\"return;\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1.1: return must throw SyntaxError. Actual: ";
__n15["raw"] := "'#1.1: return must throw SyntaxError. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "eval";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "return;";
__n19["raw"] := "\"return;\"";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n4 := [ __n5, __n10 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n20 := {  };
__n20["type"] := "CatchClause";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["param"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "instanceof";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "SyntaxError";
__n26["right"] := __n28;
__n25["left"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n25["right"] := __n29;
__n24["test"] := __n25;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1.2: return must throw SyntaxError. Actual: ";
__n37["raw"] := "'#1.2: return must throw SyntaxError. Actual: '";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "e";
__n36["right"] := __n38;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n24["consequent"] := __n30;
__n24["alternate"] := null;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n2["handler"] := __n20;
__n2["finalizer"] := null;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "f";
__n39["expression"] := __n40;
__n41 := {  };
__n41["type"] := "EmptyStatement";
__n42 := {  };
__n42["type"] := "TryStatement";
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "f";
__n46["callee"] := __n47;
__n48 := [  ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2.1: return must throw SyntaxError. Actual: ";
__n54["raw"] := "'#2.1: return must throw SyntaxError. Actual: '";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "f";
__n55["callee"] := __n56;
__n57 := [  ];
__n55["arguments"] := __n57;
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n44 := [ __n45, __n49 ];
__n43["body"] := __n44;
__n42["block"] := __n43;
__n58 := {  };
__n58["type"] := "CatchClause";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "e";
__n58["param"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "instanceof";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "e";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "SyntaxError";
__n64["right"] := __n66;
__n63["left"] := __n64;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := true;
__n67["raw"] := "true";
__n63["right"] := __n67;
__n62["test"] := __n63;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#2.2: return must throw SyntaxError. Actual: ";
__n75["raw"] := "'#2.2: return must throw SyntaxError. Actual: '";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "e";
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n62["consequent"] := __n68;
__n62["alternate"] := null;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n58["body"] := __n60;
__n42["handler"] := __n58;
__n42["finalizer"] := null;
__n1 := [ __n2, __n39, __n41, __n42 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n77 := [  ];
__n0["variableDeclarations"] := __n77;
__n79 := {  };
__n79["type"] := "FunctionDeclaration";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "f";
__n79["id"] := __n80;
__n81 := [  ];
__n79["params"] := __n81;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "eval";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "return;";
__n88["raw"] := "\"return;\"";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n89 := [  ];
__n82["variableDeclarations"] := __n89;
__n90 := [  ];
__n82["functionDeclarations"] := __n90;
__n82["codeType"] := "function";
__n82["strict"] := false;
__n79["body"] := __n82;
__n79["generator"] := false;
__n79["expression"] := false;
__n79["async"] := false;
__n78 := [ __n79 ];
__n0["functionDeclarations"] := __n78;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}