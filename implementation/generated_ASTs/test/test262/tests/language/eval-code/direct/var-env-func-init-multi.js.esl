function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "initial";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "eval";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "initial = f; function f() { return \"first\"; } function f() { return \"second\"; }";
__n10["raw"] := "'initial = f; function f() { return \"first\"; } function f() { return \"second\"; }'";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "assert";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "sameValue";
__n15["raw"] := "\"sameValue\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "initial";
__n17["callee"] := __n18;
__n19 := [  ];
__n17["arguments"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "second";
__n20["raw"] := "'second'";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "initial value";
__n21["raw"] := "'initial value'";
__n16 := [ __n17, __n20, __n21 ];
__n12["arguments"] := __n16;
__n11["expression"] := __n12;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "sameValue";
__n26["raw"] := "\"sameValue\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "f";
__n28["callee"] := __n29;
__n30 := [  ];
__n28["arguments"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "second";
__n31["raw"] := "'second'";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "value following declaration evaluation";
__n32["raw"] := "'value following declaration evaluation'";
__n27 := [ __n28, __n31, __n32 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n1 := [ __n2, __n6, __n11, __n22 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [ "initial" ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}