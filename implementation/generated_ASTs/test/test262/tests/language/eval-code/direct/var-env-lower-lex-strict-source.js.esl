function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "BlockStatement";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["id"] := __n7;
__n6["init"] := null;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "let";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "eval";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "\"use strict\"; var x;";
__n14["raw"] := "'\"use strict\"; var x;'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n3 := [ __n4, __n8 ];
__n2["body"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n15 := [ "x" ];
__n0["variableDeclarations"] := __n15;
__n16 := [  ];
__n0["functionDeclarations"] := __n16;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}