function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testcase";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "testcase";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n10 := [  ];
__n0["variableDeclarations"] := __n10;
__n12 := {  };
__n12["type"] := "FunctionDeclaration";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "testcase";
__n12["id"] := __n13;
__n14 := [  ];
__n12["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "_10_4_2_3_c_2_s";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 0.;
__n21["raw"] := "0";
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "_10_4_2_3_c_2_sFunc";
__n22["expression"] := __n23;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "_10_4_2_3_c_2_sFunc";
__n25["callee"] := __n26;
__n27 := [  ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n16 := [ __n17, __n22, __n24 ];
__n15["body"] := __n16;
__n28 := [ "_10_4_2_3_c_2_s" ];
__n15["variableDeclarations"] := __n28;
__n30 := {  };
__n30["type"] := "FunctionDeclaration";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "_10_4_2_3_c_2_sFunc";
__n30["id"] := __n31;
__n32 := [  ];
__n30["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "eval";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "var _10_4_2_3_c_2_s = 1";
__n39["raw"] := "\"var _10_4_2_3_c_2_s = 1\"";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "assert";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "sameValue";
__n44["raw"] := "\"sameValue\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "_10_4_2_3_c_2_s";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n45 := [ __n46, __n47 ];
__n41["arguments"] := __n45;
__n40["expression"] := __n41;
__n34 := [ __n35, __n40 ];
__n33["body"] := __n34;
__n48 := [  ];
__n33["variableDeclarations"] := __n48;
__n49 := [  ];
__n33["functionDeclarations"] := __n49;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n30["body"] := __n33;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n29 := [ __n30 ];
__n15["functionDeclarations"] := __n29;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n12["body"] := __n15;
__n12["generator"] := false;
__n12["expression"] := false;
__n12["async"] := false;
__n11 := [ __n12 ];
__n0["functionDeclarations"] := __n11;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}