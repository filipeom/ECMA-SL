function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "+";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "POSITIVE_INFINITY";
__n7["raw"] := "\"POSITIVE_INFINITY\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "POSITIVE_INFINITY";
__n10["raw"] := "\"POSITIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n4["right"] := __n8;
__n3["left"] := __n4;
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "POSITIVE_INFINITY";
__n13["raw"] := "\"POSITIVE_INFINITY\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n3["right"] := __n11;
__n2["test"] := __n3;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: Infinity + Infinity === Infinity. Actual: ";
__n21["raw"] := "'#1: Infinity + Infinity === Infinity. Actual: '";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Infinity";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Infinity";
__n22["right"] := __n24;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n2["consequent"] := __n14;
__n2["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Number";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "NEGATIVE_INFINITY";
__n30["raw"] := "\"NEGATIVE_INFINITY\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Number";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "NEGATIVE_INFINITY";
__n33["raw"] := "\"NEGATIVE_INFINITY\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n27["right"] := __n31;
__n26["left"] := __n27;
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Number";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "NEGATIVE_INFINITY";
__n36["raw"] := "\"NEGATIVE_INFINITY\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n26["right"] := __n34;
__n25["test"] := __n26;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: -Infinity + -Infinity === -Infinity. Actual: ";
__n44["raw"] := "'#2: -Infinity + -Infinity === -Infinity. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "-";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Infinity";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n45["left"] := __n46;
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "-";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Infinity";
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n45["right"] := __n48;
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n25["consequent"] := __n37;
__n25["alternate"] := null;
__n1 := [ __n2, __n25 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [  ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}