function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "+";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "undefined";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: +(undefined) === Not-a-Number. Actual: ";
__n17["raw"] := "'#1: +(undefined) === Not-a-Number. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "undefined";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "isNaN";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "void";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := true;
__n28["raw"] := "true";
__n21["right"] := __n28;
__n20["test"] := __n21;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: +(void 0) === Not-a-Number. Actual: ";
__n36["raw"] := "'#2: +(void 0) === Not-a-Number. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "void";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.;
__n39["raw"] := "0";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n20["consequent"] := __n29;
__n20["alternate"] := null;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "isNaN";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "eval";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "var x";
__n49["raw"] := "\"var x\"";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["left"] := __n42;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := true;
__n50["raw"] := "true";
__n41["right"] := __n50;
__n40["test"] := __n41;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: +(eval(\"var x\")) === Not-a-Number. Actual: ";
__n58["raw"] := "'#3: +(eval(\"var x\")) === Not-a-Number. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "eval";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "var x";
__n63["raw"] := "\"var x\"";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n40["consequent"] := __n51;
__n40["alternate"] := null;
__n1 := [ __n2, __n20, __n40 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n64 := [  ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}