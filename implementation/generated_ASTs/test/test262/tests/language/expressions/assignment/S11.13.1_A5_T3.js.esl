function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "outerScope";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "innerScope";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "ObjectExpression";
__n17 := {  };
__n17["type"] := "Property";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n17["key"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n17["value"] := __n19;
__n17["computed"] := false;
__n17["kind"] := "init";
__n17["shorthand"] := false;
__n16 := [ __n17 ];
__n15["properties"] := __n16;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n20 := {  };
__n20["type"] := "WithStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "outerScope";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "WithStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "innerScope";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "SequenceExpression";
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "delete";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "innerScope";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "x";
__n36["raw"] := "\"x\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 2.;
__n37["raw"] := "2";
__n32 := [ __n33, __n37 ];
__n31["expressions"] := __n32;
__n29["right"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "innerScope";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "x";
__n42["raw"] := "\"x\"";
__n40["property"] := __n42;
__n40["computed"] := true;
__n39["left"] := __n40;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 2.;
__n43["raw"] := "2";
__n39["right"] := __n43;
__n38["test"] := __n39;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: innerScope.x === 2. Actual: ";
__n51["raw"] := "'#1: innerScope.x === 2. Actual: '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "innerScope";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "x";
__n54["raw"] := "\"x\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n38["consequent"] := __n44;
__n38["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "outerScope";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "x";
__n59["raw"] := "\"x\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["left"] := __n57;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n56["right"] := __n60;
__n55["test"] := __n56;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#2: outerScope.x === 0. Actual: ";
__n68["raw"] := "'#2: outerScope.x === 0. Actual: '";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "outerScope";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "x";
__n71["raw"] := "\"x\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n67["right"] := __n69;
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n55["consequent"] := __n61;
__n55["alternate"] := null;
__n1 := [ __n2, __n11, __n20, __n38, __n55 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n72 := [ "outerScope", "innerScope" ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}