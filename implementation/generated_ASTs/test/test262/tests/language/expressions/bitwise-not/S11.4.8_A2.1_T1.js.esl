function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "~";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 0.;
__n5["raw"] := "0";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "-";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n3["right"] := __n6;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: ~0 === -1. Actual: ";
__n15["raw"] := "'#1: ~0 === -1. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "~";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.;
__n17["raw"] := "0";
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "~";
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "~";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 0.;
__n22["raw"] := "0";
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n19["right"] := __n23;
__n18["test"] := __n19;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: ~(~0) === 0. Actual: ";
__n31["raw"] := "'#2: ~(~0) === 0. Actual: '";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "~";
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "~";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 0.;
__n34["raw"] := "0";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n18["consequent"] := __n24;
__n18["alternate"] := null;
__n35 := {  };
__n35["type"] := "VariableDeclaration";
__n37 := {  };
__n37["type"] := "VariableDeclarator";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37["id"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.;
__n39["raw"] := "0";
__n37["init"] := __n39;
__n36 := [ __n37 ];
__n35["declarations"] := __n36;
__n35["kind"] := "var";
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "~";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["left"] := __n42;
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "-";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 1.;
__n45["raw"] := "1";
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n41["right"] := __n44;
__n40["test"] := __n41;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#3: var x = 0; ~x === -1. Actual: ";
__n53["raw"] := "'#3: var x = 0; ~x === -1. Actual: '";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "UnaryExpression";
__n54["operator"] := "~";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "x";
__n54["argument"] := __n55;
__n54["prefix"] := true;
__n52["right"] := __n54;
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n40["consequent"] := __n46;
__n40["alternate"] := null;
__n56 := {  };
__n56["type"] := "VariableDeclaration";
__n58 := {  };
__n58["type"] := "VariableDeclarator";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "x";
__n58["id"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n58["init"] := __n60;
__n57 := [ __n58 ];
__n56["declarations"] := __n57;
__n56["kind"] := "var";
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "UnaryExpression";
__n63["operator"] := "~";
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "~";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63["argument"] := __n64;
__n63["prefix"] := true;
__n62["left"] := __n63;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 0.;
__n66["raw"] := "0";
__n62["right"] := __n66;
__n61["test"] := __n62;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#4: var x = 0; ~(~x) === 0. Actual: ";
__n74["raw"] := "'#4: var x = 0; ~(~x) === 0. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "UnaryExpression";
__n75["operator"] := "~";
__n76 := {  };
__n76["type"] := "UnaryExpression";
__n76["operator"] := "~";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n76["argument"] := __n77;
__n76["prefix"] := true;
__n75["argument"] := __n76;
__n75["prefix"] := true;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n61["consequent"] := __n67;
__n61["alternate"] := null;
__n78 := {  };
__n78["type"] := "VariableDeclaration";
__n80 := {  };
__n80["type"] := "VariableDeclarator";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "object";
__n80["id"] := __n81;
__n82 := {  };
__n82["type"] := "NewExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Object";
__n82["callee"] := __n83;
__n84 := [  ];
__n82["arguments"] := __n84;
__n80["init"] := __n82;
__n79 := [ __n80 ];
__n78["declarations"] := __n79;
__n78["kind"] := "var";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "AssignmentExpression";
__n86["operator"] := "=";
__n87 := {  };
__n87["type"] := "MemberExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "object";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "prop";
__n89["raw"] := "\"prop\"";
__n87["property"] := __n89;
__n87["computed"] := true;
__n86["left"] := __n87;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 0.;
__n90["raw"] := "0";
__n86["right"] := __n90;
__n85["expression"] := __n86;
__n91 := {  };
__n91["type"] := "IfStatement";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "!==";
__n93 := {  };
__n93["type"] := "UnaryExpression";
__n93["operator"] := "~";
__n94 := {  };
__n94["type"] := "MemberExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "object";
__n94["object"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "prop";
__n96["raw"] := "\"prop\"";
__n94["property"] := __n96;
__n94["computed"] := true;
__n93["argument"] := __n94;
__n93["prefix"] := true;
__n92["left"] := __n93;
__n97 := {  };
__n97["type"] := "UnaryExpression";
__n97["operator"] := "-";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 1.;
__n98["raw"] := "1";
__n97["argument"] := __n98;
__n97["prefix"] := true;
__n92["right"] := __n97;
__n91["test"] := __n92;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#5: var object = new Object(); object.prop = 0; ~object.prop === -1. Actual: ";
__n106["raw"] := "'#5: var object = new Object(); object.prop = 0; ~object.prop === -1. Actual: '";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "UnaryExpression";
__n107["operator"] := "~";
__n108 := {  };
__n108["type"] := "MemberExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "object";
__n108["object"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "prop";
__n110["raw"] := "\"prop\"";
__n108["property"] := __n110;
__n108["computed"] := true;
__n107["argument"] := __n108;
__n107["prefix"] := true;
__n105["right"] := __n107;
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n91["consequent"] := __n99;
__n91["alternate"] := null;
__n1 := [ __n2, __n18, __n35, __n40, __n56, __n61, __n78, __n85, __n91 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n111 := [ "x", "object" ];
__n0["variableDeclarations"] := __n111;
__n112 := [  ];
__n0["functionDeclarations"] := __n112;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}