function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "~";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 0.1;
__n5["raw"] := "0.1";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "-";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n3["right"] := __n6;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: ~0.1 === -1. Actual: ";
__n15["raw"] := "'#1: ~0.1 === -1. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "~";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.1;
__n17["raw"] := "0.1";
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "~";
__n21 := {  };
__n21["type"] := "NewExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Number";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.1;
__n25["raw"] := "0.1";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["left"] := __n20;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n19["right"] := __n26;
__n18["test"] := __n19;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: ~new Number(-0.1) === -1. Actual: ";
__n35["raw"] := "'#2: ~new Number(-0.1) === -1. Actual: '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "~";
__n37 := {  };
__n37["type"] := "NewExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "-";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.1;
__n41["raw"] := "0.1";
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n18["consequent"] := __n28;
__n18["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "~";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "NaN";
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n43["left"] := __n44;
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "-";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n43["right"] := __n46;
__n42["test"] := __n43;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#3: ~NaN === -1. Actual: ";
__n55["raw"] := "'#3: ~NaN === -1. Actual: '";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "~";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "NaN";
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n54["right"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n42["consequent"] := __n48;
__n42["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "~";
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "NaN";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n59["left"] := __n60;
__n65 := {  };
__n65["type"] := "UnaryExpression";
__n65["operator"] := "-";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n65["argument"] := __n66;
__n65["prefix"] := true;
__n59["right"] := __n65;
__n58["test"] := __n59;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#4: ~new Number(NaN) === -1. Actual: ";
__n74["raw"] := "'#4: ~new Number(NaN) === -1. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "UnaryExpression";
__n75["operator"] := "~";
__n76 := {  };
__n76["type"] := "NewExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "Number";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "NaN";
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["argument"] := __n76;
__n75["prefix"] := true;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n58["consequent"] := __n67;
__n58["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "UnaryExpression";
__n82["operator"] := "~";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 1.;
__n83["raw"] := "1";
__n82["argument"] := __n83;
__n82["prefix"] := true;
__n81["left"] := __n82;
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "-";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 2.;
__n85["raw"] := "2";
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n81["right"] := __n84;
__n80["test"] := __n81;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#5: ~1 === -2. Actual: ";
__n93["raw"] := "'#5: ~1 === -2. Actual: '";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "UnaryExpression";
__n94["operator"] := "~";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 1.;
__n95["raw"] := "1";
__n94["argument"] := __n95;
__n94["prefix"] := true;
__n92["right"] := __n94;
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n80["consequent"] := __n86;
__n80["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "UnaryExpression";
__n98["operator"] := "~";
__n99 := {  };
__n99["type"] := "NewExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "Number";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "UnaryExpression";
__n102["operator"] := "-";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := 2.;
__n103["raw"] := "2";
__n102["argument"] := __n103;
__n102["prefix"] := true;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["argument"] := __n99;
__n98["prefix"] := true;
__n97["left"] := __n98;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 1.;
__n104["raw"] := "1";
__n97["right"] := __n104;
__n96["test"] := __n97;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "$ERROR";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "+";
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "#6: ~new Number(-2) === 1. Actual: ";
__n112["raw"] := "'#6: ~new Number(-2) === 1. Actual: '";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "UnaryExpression";
__n113["operator"] := "~";
__n114 := {  };
__n114["type"] := "NewExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "Number";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "UnaryExpression";
__n117["operator"] := "-";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 2.;
__n118["raw"] := "2";
__n117["argument"] := __n118;
__n117["prefix"] := true;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["argument"] := __n114;
__n113["prefix"] := true;
__n111["right"] := __n113;
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["expression"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n96["consequent"] := __n105;
__n96["alternate"] := null;
__n119 := {  };
__n119["type"] := "IfStatement";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "!==";
__n121 := {  };
__n121["type"] := "UnaryExpression";
__n121["operator"] := "~";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "Infinity";
__n121["argument"] := __n122;
__n121["prefix"] := true;
__n120["left"] := __n121;
__n123 := {  };
__n123["type"] := "UnaryExpression";
__n123["operator"] := "-";
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 1.;
__n124["raw"] := "1";
__n123["argument"] := __n124;
__n123["prefix"] := true;
__n120["right"] := __n123;
__n119["test"] := __n120;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "$ERROR";
__n128["callee"] := __n129;
__n131 := {  };
__n131["type"] := "BinaryExpression";
__n131["operator"] := "+";
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#7: ~Infinity === -1. Actual: ";
__n132["raw"] := "'#7: ~Infinity === -1. Actual: '";
__n131["left"] := __n132;
__n133 := {  };
__n133["type"] := "UnaryExpression";
__n133["operator"] := "~";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "Infinity";
__n133["argument"] := __n134;
__n133["prefix"] := true;
__n131["right"] := __n133;
__n130 := [ __n131 ];
__n128["arguments"] := __n130;
__n127["expression"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n119["consequent"] := __n125;
__n119["alternate"] := null;
__n1 := [ __n2, __n18, __n42, __n58, __n80, __n96, __n119 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n135 := [  ];
__n0["variableDeclarations"] := __n135;
__n136 := [  ];
__n0["functionDeclarations"] := __n136;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}