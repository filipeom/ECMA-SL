function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "~";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "void";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.;
__n8["raw"] := "1";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n3["right"] := __n7;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: ~void 0 === -1. Actual: ";
__n16["raw"] := "'#1: ~void 0 === -1. Actual: '";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "~";
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "void";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.;
__n19["raw"] := "0";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n15["right"] := __n17;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "~";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 'null;
__n23["raw"] := "\"'null\"";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n21["right"] := __n24;
__n20["test"] := __n21;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#2: ~null === -1. Actual: ";
__n33["raw"] := "'#2: ~null === -1. Actual: '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "~";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 'null;
__n35["raw"] := "\"'null\"";
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n20["consequent"] := __n26;
__n20["alternate"] := null;
__n1 := [ __n2, __n20 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [  ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}