function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "fooCalled";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "foo";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "o";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n14 := [  ];
__n13["properties"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "throws";
__n19["raw"] := "\"throws\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "TypeError";
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [  ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "o";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "bar";
__n30["raw"] := "\"bar\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "foo";
__n32["callee"] := __n33;
__n34 := [  ];
__n32["arguments"] := __n34;
__n31 := [ __n32 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "o.bar does not exist!";
__n39["raw"] := "\"o.bar does not exist!\"";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n25 := [ __n26, __n35 ];
__n24["body"] := __n25;
__n40 := [  ];
__n24["variableDeclarations"] := __n40;
__n41 := [  ];
__n24["functionDeclarations"] := __n41;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["expression"] := false;
__n22["async"] := false;
__n20 := [ __n21, __n22 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "sameValue";
__n46["raw"] := "\"sameValue\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "fooCalled";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := true;
__n49["raw"] := "true";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "fooCalled";
__n50["raw"] := "'fooCalled'";
__n47 := [ __n48, __n49, __n50 ];
__n43["arguments"] := __n47;
__n42["expression"] := __n43;
__n1 := [ __n2, __n7, __n9, __n15, __n42 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n51 := [ "fooCalled", "o" ];
__n0["variableDeclarations"] := __n51;
__n53 := {  };
__n53["type"] := "FunctionDeclaration";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "foo";
__n53["id"] := __n54;
__n55 := [  ];
__n53["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "AssignmentExpression";
__n59["operator"] := "=";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "fooCalled";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := true;
__n61["raw"] := "true";
__n59["right"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n62 := [  ];
__n56["variableDeclarations"] := __n62;
__n63 := [  ];
__n56["functionDeclarations"] := __n63;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n53["body"] := __n56;
__n53["generator"] := false;
__n53["expression"] := false;
__n53["async"] := false;
__n52 := [ __n53 ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}