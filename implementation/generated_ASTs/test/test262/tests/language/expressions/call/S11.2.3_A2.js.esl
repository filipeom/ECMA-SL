function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1.1: x() throw ReferenceError. Actual: ";
__n14["raw"] := "'#1.1: x() throw ReferenceError. Actual: '";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "x";
__n15["callee"] := __n16;
__n17 := [  ];
__n15["arguments"] := __n17;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n18 := {  };
__n18["type"] := "CatchClause";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "e";
__n18["param"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "instanceof";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "ReferenceError";
__n24["right"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := true;
__n27["raw"] := "true";
__n23["right"] := __n27;
__n22["test"] := __n23;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1.2: x() throw ReferenceError. Actual: ";
__n35["raw"] := "'#1.2: x() throw ReferenceError. Actual: '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n22["consequent"] := __n28;
__n22["alternate"] := null;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n18["body"] := __n20;
__n2["handler"] := __n18;
__n2["finalizer"] := null;
__n37 := {  };
__n37["type"] := "TryStatement";
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "x";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 2.;
__n45["raw"] := "2";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 3.;
__n46["raw"] := "3";
__n43 := [ __n44, __n45, __n46 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2.1: x(1,2,3) throw ReferenceError. Actual: ";
__n52["raw"] := "'#2.1: x(1,2,3) throw ReferenceError. Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "x";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.;
__n56["raw"] := "1";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 2.;
__n57["raw"] := "2";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 3.;
__n58["raw"] := "3";
__n55 := [ __n56, __n57, __n58 ];
__n53["arguments"] := __n55;
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n39 := [ __n40, __n47 ];
__n38["body"] := __n39;
__n37["block"] := __n38;
__n59 := {  };
__n59["type"] := "CatchClause";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "e";
__n59["param"] := __n60;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "instanceof";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "e";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "ReferenceError";
__n65["right"] := __n67;
__n64["left"] := __n65;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := true;
__n68["raw"] := "true";
__n64["right"] := __n68;
__n63["test"] := __n64;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#2.2: x(1,2,3) throw ReferenceError. Actual: ";
__n76["raw"] := "'#2.2: x(1,2,3) throw ReferenceError. Actual: '";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "e";
__n75["right"] := __n77;
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n63["consequent"] := __n69;
__n63["alternate"] := null;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n59["body"] := __n61;
__n37["handler"] := __n59;
__n37["finalizer"] := null;
__n1 := [ __n2, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n78 := [  ];
__n0["variableDeclarations"] := __n78;
__n79 := [  ];
__n0["functionDeclarations"] := __n79;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}