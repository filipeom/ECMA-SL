function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "undefined";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1.1: undefined() throw TypeError. Actual: ";
__n14["raw"] := "'#1.1: undefined() throw TypeError. Actual: '";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "instanceof";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "e";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "TypeError";
__n22["right"] := __n24;
__n21["left"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := true;
__n25["raw"] := "true";
__n21["right"] := __n25;
__n20["test"] := __n21;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1.2: undefined() throw TypeError. Actual: ";
__n33["raw"] := "'#1.2: undefined() throw TypeError. Actual: '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "e";
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n20["consequent"] := __n26;
__n20["alternate"] := null;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n2["handler"] := __n16;
__n2["finalizer"] := null;
__n35 := {  };
__n35["type"] := "TryStatement";
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "VariableDeclaration";
__n40 := {  };
__n40["type"] := "VariableDeclarator";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["id"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "undefined";
__n40["init"] := __n42;
__n39 := [ __n40 ];
__n38["declarations"] := __n39;
__n38["kind"] := "var";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x";
__n44["callee"] := __n45;
__n46 := [  ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2.1: var x = undefined; x() throw TypeError. Actual: ";
__n52["raw"] := "'#2.1: var x = undefined; x() throw TypeError. Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n37 := [ __n38, __n43, __n47 ];
__n36["body"] := __n37;
__n35["block"] := __n36;
__n54 := {  };
__n54["type"] := "CatchClause";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n54["param"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "instanceof";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "e";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "TypeError";
__n60["right"] := __n62;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := true;
__n63["raw"] := "true";
__n59["right"] := __n63;
__n58["test"] := __n59;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#2.2: var x = undefined; x() throw TypeError. Actual: ";
__n71["raw"] := "'#2.2: var x = undefined; x() throw TypeError. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "e";
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n58["consequent"] := __n64;
__n58["alternate"] := null;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n54["body"] := __n56;
__n35["handler"] := __n54;
__n35["finalizer"] := null;
__n1 := [ __n2, __n35 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n73 := [ "x" ];
__n0["variableDeclarations"] := __n73;
__n74 := [  ];
__n0["functionDeclarations"] := __n74;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}