function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "String";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "1";
__n10["raw"] := "\"1\"";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["callee"] := __n7;
__n11 := [  ];
__n6["arguments"] := __n11;
__n5["expression"] := __n6;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1.1: new String(\"1\")() throw TypeError. Actual: ";
__n17["raw"] := "'#1.1: new String(\"1\")() throw TypeError. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "String";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "1";
__n22["raw"] := "\"1\"";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["callee"] := __n19;
__n23 := [  ];
__n18["arguments"] := __n23;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n4 := [ __n5, __n12 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "instanceof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "TypeError";
__n30["right"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.2: new String(\"1\")() throw TypeError. Actual: ";
__n41["raw"] := "'#1.2: new String(\"1\")() throw TypeError. Actual: '";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n2["handler"] := __n24;
__n2["finalizer"] := null;
__n43 := {  };
__n43["type"] := "TryStatement";
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "VariableDeclaration";
__n48 := {  };
__n48["type"] := "VariableDeclarator";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x";
__n48["id"] := __n49;
__n50 := {  };
__n50["type"] := "NewExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "String";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "1";
__n53["raw"] := "\"1\"";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n48["init"] := __n50;
__n47 := [ __n48 ];
__n46["declarations"] := __n47;
__n46["kind"] := "var";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["callee"] := __n56;
__n57 := [  ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2.1: var x = new String(\"1\"); x() throw TypeError. Actual: ";
__n63["raw"] := "'#2.1: var x = new String(\"1\"); x() throw TypeError. Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["callee"] := __n65;
__n66 := [  ];
__n64["arguments"] := __n66;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n45 := [ __n46, __n54, __n58 ];
__n44["body"] := __n45;
__n43["block"] := __n44;
__n67 := {  };
__n67["type"] := "CatchClause";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "e";
__n67["param"] := __n68;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "IfStatement";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "!==";
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "instanceof";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "e";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "TypeError";
__n73["right"] := __n75;
__n72["left"] := __n73;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := true;
__n76["raw"] := "true";
__n72["right"] := __n76;
__n71["test"] := __n72;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "+";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#2.2: var x = new String(\"1\"); x() throw TypeError. Actual: ";
__n84["raw"] := "'#2.2: var x = new String(\"1\"); x() throw TypeError. Actual: '";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "e";
__n83["right"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n71["consequent"] := __n77;
__n71["alternate"] := null;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n67["body"] := __n69;
__n43["handler"] := __n67;
__n43["finalizer"] := null;
__n1 := [ __n2, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n86 := [ "x" ];
__n0["variableDeclarations"] := __n86;
__n87 := [  ];
__n0["functionDeclarations"] := __n87;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}