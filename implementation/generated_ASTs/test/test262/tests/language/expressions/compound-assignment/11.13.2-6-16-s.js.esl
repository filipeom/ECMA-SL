function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testcase";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "testcase";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n10 := [  ];
__n0["variableDeclarations"] := __n10;
__n12 := {  };
__n12["type"] := "FunctionDeclaration";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "testcase";
__n12["id"] := __n13;
__n14 := [  ];
__n12["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "err";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 'null;
__n21["raw"] := "\"'null\"";
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "blah";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "arguments";
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n27 := {  };
__n27["type"] := "TryStatement";
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "eval";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "arguments -= 20;";
__n34["raw"] := "\"arguments -= 20;\"";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n27["block"] := __n28;
__n35 := {  };
__n35["type"] := "CatchClause";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["param"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "err";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n35["body"] := __n37;
__n27["handler"] := __n35;
__n27["finalizer"] := null;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "assert";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "instanceof";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "err";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "SyntaxError";
__n47["right"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "err instanceof SyntaxError";
__n50["raw"] := "'err instanceof SyntaxError'";
__n46 := [ __n47, __n50 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "sameValue";
__n55["raw"] := "\"sameValue\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "blah";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "arguments";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "blah";
__n59["raw"] := "'blah'";
__n56 := [ __n57, __n58, __n59 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n16 := [ __n17, __n22, __n27, __n43, __n51 ];
__n15["body"] := __n16;
__n60 := [ "err", "blah" ];
__n15["variableDeclarations"] := __n60;
__n61 := [  ];
__n15["functionDeclarations"] := __n61;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n12["body"] := __n15;
__n12["generator"] := false;
__n12["expression"] := false;
__n12["async"] := false;
__n11 := [ __n12 ];
__n0["functionDeclarations"] := __n11;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}