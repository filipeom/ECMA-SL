function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "-";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "eval";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "x	/=	-1";
__n16["raw"] := "\"x\\u0009/=\\u0009-1\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["left"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n12["right"] := __n17;
__n11["test"] := __n12;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: x = -1; (x\\u0009/=\\u0009-1) === 1";
__n24["raw"] := "'#1: x = -1; (x\\\\u0009/=\\\\u0009-1) === 1'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n11["consequent"] := __n18;
__n11["alternate"] := null;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "x";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "-";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1.;
__n29["raw"] := "1";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "eval";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "x/=-1";
__n35["raw"] := "\"x\\u000B/=\\u000B-1\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["left"] := __n32;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n31["right"] := __n36;
__n30["test"] := __n31;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: x = -1; (x\\u000B/=\\u000B-1) === 1";
__n43["raw"] := "'#2: x = -1; (x\\\\u000B/=\\\\u000B-1) === 1'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n30["consequent"] := __n37;
__n30["alternate"] := null;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "AssignmentExpression";
__n45["operator"] := "=";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "x";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.;
__n48["raw"] := "1";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n45["right"] := __n47;
__n44["expression"] := __n45;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "eval";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "x/=-1";
__n54["raw"] := "\"x\\u000C/=\\u000C-1\"";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["left"] := __n51;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 1.;
__n55["raw"] := "1";
__n50["right"] := __n55;
__n49["test"] := __n50;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#3: x = -1; (x\\u000C/=\\u000C-1) === 1";
__n62["raw"] := "'#3: x = -1; (x\\\\u000C/=\\\\u000C-1) === 1'";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n49["consequent"] := __n56;
__n49["alternate"] := null;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "AssignmentExpression";
__n64["operator"] := "=";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "-";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n64["right"] := __n66;
__n63["expression"] := __n64;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "eval";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "x /= -1";
__n73["raw"] := "\"x\\u0020/=\\u0020-1\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["left"] := __n70;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 1.;
__n74["raw"] := "1";
__n69["right"] := __n74;
__n68["test"] := __n69;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "$ERROR";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#4: x = -1; (x\\u0020/=\\u0020-1) === 1";
__n81["raw"] := "'#4: x = -1; (x\\\\u0020/=\\\\u0020-1) === 1'";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["expression"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n68["consequent"] := __n75;
__n68["alternate"] := null;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "AssignmentExpression";
__n83["operator"] := "=";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "x";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "UnaryExpression";
__n85["operator"] := "-";
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 1.;
__n86["raw"] := "1";
__n85["argument"] := __n86;
__n85["prefix"] := true;
__n83["right"] := __n85;
__n82["expression"] := __n83;
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "!==";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "eval";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "x /= -1";
__n92["raw"] := "\"x\\u00A0/=\\u00A0-1\"";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["left"] := __n89;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 1.;
__n93["raw"] := "1";
__n88["right"] := __n93;
__n87["test"] := __n88;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#5: x = -1; (x\\u00A0/=\\u00A0-1) === 1";
__n100["raw"] := "'#5: x = -1; (x\\\\u00A0/=\\\\u00A0-1) === 1'";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n87["consequent"] := __n94;
__n87["alternate"] := null;
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "AssignmentExpression";
__n102["operator"] := "=";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "x";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "UnaryExpression";
__n104["operator"] := "-";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := 1.;
__n105["raw"] := "1";
__n104["argument"] := __n105;
__n104["prefix"] := true;
__n102["right"] := __n104;
__n101["expression"] := __n102;
__n106 := {  };
__n106["type"] := "IfStatement";
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "!==";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "eval";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "x
/=
-1";
__n111["raw"] := "\"x\\u000A/=\\u000A-1\"";
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["left"] := __n108;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 1.;
__n112["raw"] := "1";
__n107["right"] := __n112;
__n106["test"] := __n107;
__n113 := {  };
__n113["type"] := "BlockStatement";
__n115 := {  };
__n115["type"] := "ExpressionStatement";
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "$ERROR";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "#6: x = -1; (x\\u000A/=\\u000A-1) === 1";
__n119["raw"] := "'#6: x = -1; (x\\\\u000A/=\\\\u000A-1) === 1'";
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n115["expression"] := __n116;
__n114 := [ __n115 ];
__n113["body"] := __n114;
__n106["consequent"] := __n113;
__n106["alternate"] := null;
__n120 := {  };
__n120["type"] := "ExpressionStatement";
__n121 := {  };
__n121["type"] := "AssignmentExpression";
__n121["operator"] := "=";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "x";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "UnaryExpression";
__n123["operator"] := "-";
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 1.;
__n124["raw"] := "1";
__n123["argument"] := __n124;
__n123["prefix"] := true;
__n121["right"] := __n123;
__n120["expression"] := __n121;
__n125 := {  };
__n125["type"] := "IfStatement";
__n126 := {  };
__n126["type"] := "BinaryExpression";
__n126["operator"] := "!==";
__n127 := {  };
__n127["type"] := "CallExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "eval";
__n127["callee"] := __n128;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "x/=-1";
__n130["raw"] := "\"x\\u000D/=\\u000D-1\"";
__n129 := [ __n130 ];
__n127["arguments"] := __n129;
__n126["left"] := __n127;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := 1.;
__n131["raw"] := "1";
__n126["right"] := __n131;
__n125["test"] := __n126;
__n132 := {  };
__n132["type"] := "BlockStatement";
__n134 := {  };
__n134["type"] := "ExpressionStatement";
__n135 := {  };
__n135["type"] := "CallExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "$ERROR";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := "#7: x = -1; (x\\u000D/=\\u000D-1) === 1";
__n138["raw"] := "'#7: x = -1; (x\\\\u000D/=\\\\u000D-1) === 1'";
__n137 := [ __n138 ];
__n135["arguments"] := __n137;
__n134["expression"] := __n135;
__n133 := [ __n134 ];
__n132["body"] := __n133;
__n125["consequent"] := __n132;
__n125["alternate"] := null;
__n139 := {  };
__n139["type"] := "ExpressionStatement";
__n140 := {  };
__n140["type"] := "AssignmentExpression";
__n140["operator"] := "=";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "x";
__n140["left"] := __n141;
__n142 := {  };
__n142["type"] := "UnaryExpression";
__n142["operator"] := "-";
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := 1.;
__n143["raw"] := "1";
__n142["argument"] := __n143;
__n142["prefix"] := true;
__n140["right"] := __n142;
__n139["expression"] := __n140;
__n144 := {  };
__n144["type"] := "IfStatement";
__n145 := {  };
__n145["type"] := "BinaryExpression";
__n145["operator"] := "!==";
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "eval";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "x /= -1";
__n149["raw"] := "\"x\\u2028/=\\u2028-1\"";
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n145["left"] := __n146;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := 1.;
__n150["raw"] := "1";
__n145["right"] := __n150;
__n144["test"] := __n145;
__n151 := {  };
__n151["type"] := "BlockStatement";
__n153 := {  };
__n153["type"] := "ExpressionStatement";
__n154 := {  };
__n154["type"] := "CallExpression";
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "$ERROR";
__n154["callee"] := __n155;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "#8: x = -1; (x\\u2028/=\\u2028-1) === 1";
__n157["raw"] := "'#8: x = -1; (x\\\\u2028/=\\\\u2028-1) === 1'";
__n156 := [ __n157 ];
__n154["arguments"] := __n156;
__n153["expression"] := __n154;
__n152 := [ __n153 ];
__n151["body"] := __n152;
__n144["consequent"] := __n151;
__n144["alternate"] := null;
__n158 := {  };
__n158["type"] := "ExpressionStatement";
__n159 := {  };
__n159["type"] := "AssignmentExpression";
__n159["operator"] := "=";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "x";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "UnaryExpression";
__n161["operator"] := "-";
__n162 := {  };
__n162["type"] := "Literal";
__n162["value"] := 1.;
__n162["raw"] := "1";
__n161["argument"] := __n162;
__n161["prefix"] := true;
__n159["right"] := __n161;
__n158["expression"] := __n159;
__n163 := {  };
__n163["type"] := "IfStatement";
__n164 := {  };
__n164["type"] := "BinaryExpression";
__n164["operator"] := "!==";
__n165 := {  };
__n165["type"] := "CallExpression";
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "eval";
__n165["callee"] := __n166;
__n168 := {  };
__n168["type"] := "Literal";
__n168["value"] := "x /= -1";
__n168["raw"] := "\"x\\u2029/=\\u2029-1\"";
__n167 := [ __n168 ];
__n165["arguments"] := __n167;
__n164["left"] := __n165;
__n169 := {  };
__n169["type"] := "Literal";
__n169["value"] := 1.;
__n169["raw"] := "1";
__n164["right"] := __n169;
__n163["test"] := __n164;
__n170 := {  };
__n170["type"] := "BlockStatement";
__n172 := {  };
__n172["type"] := "ExpressionStatement";
__n173 := {  };
__n173["type"] := "CallExpression";
__n174 := {  };
__n174["type"] := "Identifier";
__n174["name"] := "$ERROR";
__n173["callee"] := __n174;
__n176 := {  };
__n176["type"] := "Literal";
__n176["value"] := "#9: x = -1; (x\\u2029/=\\u2029-1) === 1";
__n176["raw"] := "'#9: x = -1; (x\\\\u2029/=\\\\u2029-1) === 1'";
__n175 := [ __n176 ];
__n173["arguments"] := __n175;
__n172["expression"] := __n173;
__n171 := [ __n172 ];
__n170["body"] := __n171;
__n163["consequent"] := __n170;
__n163["alternate"] := null;
__n177 := {  };
__n177["type"] := "ExpressionStatement";
__n178 := {  };
__n178["type"] := "AssignmentExpression";
__n178["operator"] := "=";
__n179 := {  };
__n179["type"] := "Identifier";
__n179["name"] := "x";
__n178["left"] := __n179;
__n180 := {  };
__n180["type"] := "UnaryExpression";
__n180["operator"] := "-";
__n181 := {  };
__n181["type"] := "Literal";
__n181["value"] := 1.;
__n181["raw"] := "1";
__n180["argument"] := __n181;
__n180["prefix"] := true;
__n178["right"] := __n180;
__n177["expression"] := __n178;
__n182 := {  };
__n182["type"] := "IfStatement";
__n183 := {  };
__n183["type"] := "BinaryExpression";
__n183["operator"] := "!==";
__n184 := {  };
__n184["type"] := "CallExpression";
__n185 := {  };
__n185["type"] := "Identifier";
__n185["name"] := "eval";
__n184["callee"] := __n185;
__n187 := {  };
__n187["type"] := "Literal";
__n187["value"] := "x	  
  /=	  
  -1";
__n187["raw"] := "\"x\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029/=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029-1\"";
__n186 := [ __n187 ];
__n184["arguments"] := __n186;
__n183["left"] := __n184;
__n188 := {  };
__n188["type"] := "Literal";
__n188["value"] := 1.;
__n188["raw"] := "1";
__n183["right"] := __n188;
__n182["test"] := __n183;
__n189 := {  };
__n189["type"] := "BlockStatement";
__n191 := {  };
__n191["type"] := "ExpressionStatement";
__n192 := {  };
__n192["type"] := "CallExpression";
__n193 := {  };
__n193["type"] := "Identifier";
__n193["name"] := "$ERROR";
__n192["callee"] := __n193;
__n195 := {  };
__n195["type"] := "Literal";
__n195["value"] := "#10: x = -1; (x\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029/=\\u0009\\u000B\\u000C\\u0020\\u00A0\\u000A\\u000D\\u2028\\u2029-1) === 1";
__n195["raw"] := "'#10: x = -1; (x\\\\u0009\\\\u000B\\\\u000C\\\\u0020\\\\u00A0\\\\u000A\\\\u000D\\\\u2028\\\\u2029/=\\\\u0009\\\\u000B\\\\u000C\\\\u0020\\\\u00A0\\\\u000A\\\\u000D\\\\u2028\\\\u2029-1) === 1'";
__n194 := [ __n195 ];
__n192["arguments"] := __n194;
__n191["expression"] := __n192;
__n190 := [ __n191 ];
__n189["body"] := __n190;
__n182["consequent"] := __n189;
__n182["alternate"] := null;
__n1 := [ __n2, __n6, __n11, __n25, __n30, __n44, __n49, __n63, __n68, __n82, __n87, __n101, __n106, __n120, __n125, __n139, __n144, __n158, __n163, __n177, __n182 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n196 := [ "x" ];
__n0["variableDeclarations"] := __n196;
__n197 := [  ];
__n0["functionDeclarations"] := __n197;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}