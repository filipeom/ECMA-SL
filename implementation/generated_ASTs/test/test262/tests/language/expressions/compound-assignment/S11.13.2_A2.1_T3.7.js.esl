function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "z";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := ">>=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n9["right"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1.1: x >>= 1 throw ReferenceError. Actual: ";
__n17["raw"] := "'#1.1: x >>= 1 throw ReferenceError. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "z";
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n4 := [ __n5, __n12 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n19 := {  };
__n19["type"] := "CatchClause";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["param"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "instanceof";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "ReferenceError";
__n25["right"] := __n27;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := true;
__n28["raw"] := "true";
__n24["right"] := __n28;
__n23["test"] := __n24;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1.2: x >>= 1 throw ReferenceError. Actual: ";
__n36["raw"] := "'#1.2: x >>= 1 throw ReferenceError. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "e";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n23["consequent"] := __n29;
__n23["alternate"] := null;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n19["body"] := __n21;
__n2["handler"] := __n19;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [ "z" ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}