function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "/=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "undefined";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "isNaN";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "x";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["left"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n15["right"] := __n20;
__n14["test"] := __n15;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: x = 1; x /= undefined; x === Not-a-Number. Actual: ";
__n28["raw"] := "'#1: x = 1; x /= undefined; x === Not-a-Number. Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n14["consequent"] := __n21;
__n14["alternate"] := null;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "undefined";
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "/=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "isNaN";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["left"] := __n40;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := true;
__n44["raw"] := "true";
__n39["right"] := __n44;
__n38["test"] := __n39;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2: x = undefined; x /= 1; x === Not-a-Number. Actual: ";
__n52["raw"] := "'#2: x = undefined; x /= 1; x === Not-a-Number. Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n38["consequent"] := __n45;
__n38["alternate"] := null;
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "=";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "NewExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Number";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n55["right"] := __n57;
__n54["expression"] := __n55;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "AssignmentExpression";
__n62["operator"] := "/=";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "x";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "undefined";
__n62["right"] := __n64;
__n61["expression"] := __n62;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "isNaN";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "x";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["left"] := __n67;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := true;
__n71["raw"] := "true";
__n66["right"] := __n71;
__n65["test"] := __n66;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "+";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#3: x = new Number(1); x /= undefined; x === Not-a-Number. Actual: ";
__n79["raw"] := "'#3: x = new Number(1); x /= undefined; x === Not-a-Number. Actual: '";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "x";
__n78["right"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n65["consequent"] := __n72;
__n65["alternate"] := null;
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "AssignmentExpression";
__n82["operator"] := "=";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "x";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "undefined";
__n82["right"] := __n84;
__n81["expression"] := __n82;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "AssignmentExpression";
__n86["operator"] := "/=";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "x";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "NewExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "Number";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := 1.;
__n91["raw"] := "1";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n86["right"] := __n88;
__n85["expression"] := __n86;
__n92 := {  };
__n92["type"] := "IfStatement";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "!==";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "isNaN";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["left"] := __n94;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := true;
__n98["raw"] := "true";
__n93["right"] := __n98;
__n92["test"] := __n93;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#4: x = undefined; x /= new Number(1); x === Not-a-Number. Actual: ";
__n106["raw"] := "'#4: x = undefined; x /= new Number(1); x === Not-a-Number. Actual: '";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "x";
__n105["right"] := __n107;
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n92["consequent"] := __n99;
__n92["alternate"] := null;
__n1 := [ __n2, __n6, __n10, __n14, __n30, __n34, __n38, __n54, __n61, __n65, __n81, __n85, __n92 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n108 := [ "x" ];
__n0["variableDeclarations"] := __n108;
__n109 := [  ];
__n0["functionDeclarations"] := __n109;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}