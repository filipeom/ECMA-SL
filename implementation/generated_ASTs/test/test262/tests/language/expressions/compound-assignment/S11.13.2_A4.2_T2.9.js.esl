function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "/=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 'null;
__n13["raw"] := "\"'null\"";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "x";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Number";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "POSITIVE_INFINITY";
__n19["raw"] := "\"POSITIVE_INFINITY\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n15["right"] := __n17;
__n14["test"] := __n15;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: x = true; x /= null; x === +Infinity. Actual: ";
__n27["raw"] := "'#1: x = true; x /= null; x === +Infinity. Actual: '";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n14["consequent"] := __n20;
__n14["alternate"] := null;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "AssignmentExpression";
__n30["operator"] := "=";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "x";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 'null;
__n32["raw"] := "\"'null\"";
__n30["right"] := __n32;
__n29["expression"] := __n30;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "AssignmentExpression";
__n34["operator"] := "/=";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "x";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n34["right"] := __n36;
__n33["expression"] := __n34;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "x";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.;
__n40["raw"] := "0";
__n38["right"] := __n40;
__n37["test"] := __n38;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2: x = null; x /= true; x === 0. Actual: ";
__n48["raw"] := "'#2: x = null; x /= true; x === 0. Actual: '";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x";
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n37["consequent"] := __n41;
__n37["alternate"] := null;
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "AssignmentExpression";
__n51["operator"] := "=";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "NewExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Boolean";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := true;
__n56["raw"] := "true";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n51["right"] := __n53;
__n50["expression"] := __n51;
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "AssignmentExpression";
__n58["operator"] := "/=";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "x";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 'null;
__n60["raw"] := "\"'null\"";
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "x";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "Number";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "POSITIVE_INFINITY";
__n66["raw"] := "\"POSITIVE_INFINITY\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n62["right"] := __n64;
__n61["test"] := __n62;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: x = new Boolean(true); x /= null; x === +Infinity. Actual: ";
__n74["raw"] := "'#3: x = new Boolean(true); x /= null; x === +Infinity. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n61["consequent"] := __n67;
__n61["alternate"] := null;
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := "=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 'null;
__n79["raw"] := "\"'null\"";
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "AssignmentExpression";
__n81["operator"] := "/=";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "x";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "NewExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Boolean";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := true;
__n86["raw"] := "true";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n81["right"] := __n83;
__n80["expression"] := __n81;
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "!==";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "x";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 0.;
__n90["raw"] := "0";
__n88["right"] := __n90;
__n87["test"] := __n88;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ExpressionStatement";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "$ERROR";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "+";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#4: x = null; x /= new Boolean(true); x === 0. Actual: ";
__n98["raw"] := "'#4: x = null; x /= new Boolean(true); x === 0. Actual: '";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "x";
__n97["right"] := __n99;
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["expression"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n87["consequent"] := __n91;
__n87["alternate"] := null;
__n1 := [ __n2, __n6, __n10, __n14, __n29, __n33, __n37, __n50, __n57, __n61, __n76, __n80, __n87 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n100 := [ "x" ];
__n0["variableDeclarations"] := __n100;
__n101 := [  ];
__n0["functionDeclarations"] := __n101;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}