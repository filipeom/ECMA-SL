function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "%=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 'null;
__n13["raw"] := "\"'null\"";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "isNaN";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "x";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["left"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n15["right"] := __n20;
__n14["test"] := __n15;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: x = 1; x %= null; x === Not-a-Number. Actual: ";
__n28["raw"] := "'#1: x = 1; x %= null; x === Not-a-Number. Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n14["consequent"] := __n21;
__n14["alternate"] := null;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 'null;
__n33["raw"] := "\"'null\"";
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "%=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "x";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n39["right"] := __n41;
__n38["test"] := __n39;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: x = null; x %= 1; x === 0. Actual: ";
__n49["raw"] := "'#2: x = null; x %= 1; x === 0. Actual: '";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "x";
__n48["right"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n38["consequent"] := __n42;
__n38["alternate"] := null;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "AssignmentExpression";
__n52["operator"] := "=";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Number";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1.;
__n57["raw"] := "1";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n52["right"] := __n54;
__n51["expression"] := __n52;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "AssignmentExpression";
__n59["operator"] := "%=";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "x";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 'null;
__n61["raw"] := "\"'null\"";
__n59["right"] := __n61;
__n58["expression"] := __n59;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "isNaN";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "x";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["left"] := __n64;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := true;
__n68["raw"] := "true";
__n63["right"] := __n68;
__n62["test"] := __n63;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#3: x = new Number(1); x %= null; x === Not-a-Number. Actual: ";
__n76["raw"] := "'#3: x = new Number(1); x %= null; x === Not-a-Number. Actual: '";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n75["right"] := __n77;
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n62["consequent"] := __n69;
__n62["alternate"] := null;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "AssignmentExpression";
__n79["operator"] := "=";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "x";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 'null;
__n81["raw"] := "\"'null\"";
__n79["right"] := __n81;
__n78["expression"] := __n79;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "AssignmentExpression";
__n83["operator"] := "%=";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "x";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "NewExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Number";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n83["right"] := __n85;
__n82["expression"] := __n83;
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "!==";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "x";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := 0.;
__n92["raw"] := "0";
__n90["right"] := __n92;
__n89["test"] := __n90;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#4: x = null; x %= new Number(1); x === 0. Actual: ";
__n100["raw"] := "'#4: x = null; x %= new Number(1); x === 0. Actual: '";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "x";
__n99["right"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n89["consequent"] := __n93;
__n89["alternate"] := null;
__n1 := [ __n2, __n6, __n10, __n14, __n30, __n34, __n38, __n51, __n58, __n62, __n78, __n82, __n89 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n102 := [ "x" ];
__n0["variableDeclarations"] := __n102;
__n103 := [  ];
__n0["functionDeclarations"] := __n103;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}