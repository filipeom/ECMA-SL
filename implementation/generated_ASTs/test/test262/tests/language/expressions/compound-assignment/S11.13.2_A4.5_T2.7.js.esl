function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "1";
__n9["raw"] := "\"1\"";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "-=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 'null;
__n13["raw"] := "\"'null\"";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "x";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n15["right"] := __n17;
__n14["test"] := __n15;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: x = \"1\"; x -= null; x === 1. Actual: ";
__n25["raw"] := "'#1: x = \"1\"; x -= null; x === 1. Actual: '";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n24["right"] := __n26;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n14["consequent"] := __n18;
__n14["alternate"] := null;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 'null;
__n30["raw"] := "\"'null\"";
__n28["right"] := __n30;
__n27["expression"] := __n28;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := "-=";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "1";
__n34["raw"] := "\"1\"";
__n32["right"] := __n34;
__n31["expression"] := __n32;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "-";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 1.;
__n39["raw"] := "1";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n36["right"] := __n38;
__n35["test"] := __n36;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: x = null; x -= \"1\"; x === -1. Actual: ";
__n47["raw"] := "'#2: x = null; x -= \"1\"; x === -1. Actual: '";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "x";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n35["consequent"] := __n40;
__n35["alternate"] := null;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "x";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "NewExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "String";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "1";
__n55["raw"] := "\"1\"";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n50["right"] := __n52;
__n49["expression"] := __n50;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "AssignmentExpression";
__n57["operator"] := "-=";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "x";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 'null;
__n59["raw"] := "\"'null\"";
__n57["right"] := __n59;
__n56["expression"] := __n57;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "x";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1.;
__n63["raw"] := "1";
__n61["right"] := __n63;
__n60["test"] := __n61;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#3: x = new String(\"1\"); x -= null; x === 1. Actual: ";
__n71["raw"] := "'#3: x = new String(\"1\"); x -= null; x === 1. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "x";
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n60["consequent"] := __n64;
__n60["alternate"] := null;
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "AssignmentExpression";
__n74["operator"] := "=";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 'null;
__n76["raw"] := "\"'null\"";
__n74["right"] := __n76;
__n73["expression"] := __n74;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "AssignmentExpression";
__n78["operator"] := "-=";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "x";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "NewExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "String";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "1";
__n83["raw"] := "\"1\"";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n78["right"] := __n80;
__n77["expression"] := __n78;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "!==";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "x";
__n85["left"] := __n86;
__n87 := {  };
__n87["type"] := "UnaryExpression";
__n87["operator"] := "-";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n87["argument"] := __n88;
__n87["prefix"] := true;
__n85["right"] := __n87;
__n84["test"] := __n85;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "#4: x = null; x -= new String(\"1\"); x === -1. Actual: ";
__n96["raw"] := "'#4: x = null; x -= new String(\"1\"); x === -1. Actual: '";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x";
__n95["right"] := __n97;
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n84["consequent"] := __n89;
__n84["alternate"] := null;
__n1 := [ __n2, __n6, __n10, __n14, __n27, __n31, __n35, __n49, __n56, __n60, __n73, __n77, __n84 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n98 := [ "x" ];
__n0["variableDeclarations"] := __n98;
__n99 := [  ];
__n0["functionDeclarations"] := __n99;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}