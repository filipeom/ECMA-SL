function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := ">>=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "1";
__n13["raw"] := "\"1\"";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "x";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.;
__n17["raw"] := "0";
__n15["right"] := __n17;
__n14["test"] := __n15;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: x = true; x >>= \"1\"; x === 0. Actual: ";
__n25["raw"] := "'#1: x = true; x >>= \"1\"; x === 0. Actual: '";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n24["right"] := __n26;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n14["consequent"] := __n18;
__n14["alternate"] := null;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "1";
__n30["raw"] := "\"1\"";
__n28["right"] := __n30;
__n27["expression"] := __n28;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := ">>=";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n32["right"] := __n34;
__n31["expression"] := __n32;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["right"] := __n38;
__n35["test"] := __n36;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#2: x = \"1\"; x >>= true; x === 0. Actual: ";
__n46["raw"] := "'#2: x = \"1\"; x >>= true; x === 0. Actual: '";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n35["consequent"] := __n39;
__n35["alternate"] := null;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "AssignmentExpression";
__n49["operator"] := "=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "x";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "NewExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Boolean";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := true;
__n54["raw"] := "true";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n49["right"] := __n51;
__n48["expression"] := __n49;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "AssignmentExpression";
__n56["operator"] := ">>=";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "x";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "1";
__n58["raw"] := "\"1\"";
__n56["right"] := __n58;
__n55["expression"] := __n56;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "x";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 0.;
__n62["raw"] := "0";
__n60["right"] := __n62;
__n59["test"] := __n60;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "+";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#3: x = new Boolean(true); x >>= \"1\"; x === 0. Actual: ";
__n70["raw"] := "'#3: x = new Boolean(true); x >>= \"1\"; x === 0. Actual: '";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "x";
__n69["right"] := __n71;
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n59["consequent"] := __n63;
__n59["alternate"] := null;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "AssignmentExpression";
__n73["operator"] := "=";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "x";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "1";
__n75["raw"] := "\"1\"";
__n73["right"] := __n75;
__n72["expression"] := __n73;
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := ">>=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "NewExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "Boolean";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := true;
__n82["raw"] := "true";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "x";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 0.;
__n86["raw"] := "0";
__n84["right"] := __n86;
__n83["test"] := __n84;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#4: x = \"1\"; x >>= new Boolean(true); x === 0. Actual: ";
__n94["raw"] := "'#4: x = \"1\"; x >>= new Boolean(true); x === 0. Actual: '";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "x";
__n93["right"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n83["consequent"] := __n87;
__n83["alternate"] := null;
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "AssignmentExpression";
__n97["operator"] := "=";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "x";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := true;
__n99["raw"] := "true";
__n97["right"] := __n99;
__n96["expression"] := __n97;
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "AssignmentExpression";
__n101["operator"] := ">>=";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "x";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "NewExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "String";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "1";
__n106["raw"] := "\"1\"";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n101["right"] := __n103;
__n100["expression"] := __n101;
__n107 := {  };
__n107["type"] := "IfStatement";
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "!==";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "x";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 0.;
__n110["raw"] := "0";
__n108["right"] := __n110;
__n107["test"] := __n108;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "BinaryExpression";
__n117["operator"] := "+";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "#5: x = true; x >>= new String(\"1\"); x === 0. Actual: ";
__n118["raw"] := "'#5: x = true; x >>= new String(\"1\"); x === 0. Actual: '";
__n117["left"] := __n118;
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "x";
__n117["right"] := __n119;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n107["consequent"] := __n111;
__n107["alternate"] := null;
__n120 := {  };
__n120["type"] := "ExpressionStatement";
__n121 := {  };
__n121["type"] := "AssignmentExpression";
__n121["operator"] := "=";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "x";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "NewExpression";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "String";
__n123["callee"] := __n124;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "1";
__n126["raw"] := "\"1\"";
__n125 := [ __n126 ];
__n123["arguments"] := __n125;
__n121["right"] := __n123;
__n120["expression"] := __n121;
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "AssignmentExpression";
__n128["operator"] := ">>=";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "x";
__n128["left"] := __n129;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := true;
__n130["raw"] := "true";
__n128["right"] := __n130;
__n127["expression"] := __n128;
__n131 := {  };
__n131["type"] := "IfStatement";
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "!==";
__n133 := {  };
__n133["type"] := "Identifier";
__n133["name"] := "x";
__n132["left"] := __n133;
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 0.;
__n134["raw"] := "0";
__n132["right"] := __n134;
__n131["test"] := __n132;
__n135 := {  };
__n135["type"] := "BlockStatement";
__n137 := {  };
__n137["type"] := "ExpressionStatement";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "$ERROR";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "BinaryExpression";
__n141["operator"] := "+";
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := "#6: x = new String(\"1\"); x >>= true; x === 0. Actual: ";
__n142["raw"] := "'#6: x = new String(\"1\"); x >>= true; x === 0. Actual: '";
__n141["left"] := __n142;
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "x";
__n141["right"] := __n143;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["expression"] := __n138;
__n136 := [ __n137 ];
__n135["body"] := __n136;
__n131["consequent"] := __n135;
__n131["alternate"] := null;
__n144 := {  };
__n144["type"] := "ExpressionStatement";
__n145 := {  };
__n145["type"] := "AssignmentExpression";
__n145["operator"] := "=";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "x";
__n145["left"] := __n146;
__n147 := {  };
__n147["type"] := "NewExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "Boolean";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := true;
__n150["raw"] := "true";
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n145["right"] := __n147;
__n144["expression"] := __n145;
__n151 := {  };
__n151["type"] := "ExpressionStatement";
__n152 := {  };
__n152["type"] := "AssignmentExpression";
__n152["operator"] := ">>=";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "x";
__n152["left"] := __n153;
__n154 := {  };
__n154["type"] := "NewExpression";
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "String";
__n154["callee"] := __n155;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "1";
__n157["raw"] := "\"1\"";
__n156 := [ __n157 ];
__n154["arguments"] := __n156;
__n152["right"] := __n154;
__n151["expression"] := __n152;
__n158 := {  };
__n158["type"] := "IfStatement";
__n159 := {  };
__n159["type"] := "BinaryExpression";
__n159["operator"] := "!==";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "x";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := 0.;
__n161["raw"] := "0";
__n159["right"] := __n161;
__n158["test"] := __n159;
__n162 := {  };
__n162["type"] := "BlockStatement";
__n164 := {  };
__n164["type"] := "ExpressionStatement";
__n165 := {  };
__n165["type"] := "CallExpression";
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "$ERROR";
__n165["callee"] := __n166;
__n168 := {  };
__n168["type"] := "BinaryExpression";
__n168["operator"] := "+";
__n169 := {  };
__n169["type"] := "Literal";
__n169["value"] := "#7: x = new Boolean(true); x >>= new String(\"1\"); x === 0. Actual: ";
__n169["raw"] := "'#7: x = new Boolean(true); x >>= new String(\"1\"); x === 0. Actual: '";
__n168["left"] := __n169;
__n170 := {  };
__n170["type"] := "Identifier";
__n170["name"] := "x";
__n168["right"] := __n170;
__n167 := [ __n168 ];
__n165["arguments"] := __n167;
__n164["expression"] := __n165;
__n163 := [ __n164 ];
__n162["body"] := __n163;
__n158["consequent"] := __n162;
__n158["alternate"] := null;
__n171 := {  };
__n171["type"] := "ExpressionStatement";
__n172 := {  };
__n172["type"] := "AssignmentExpression";
__n172["operator"] := "=";
__n173 := {  };
__n173["type"] := "Identifier";
__n173["name"] := "x";
__n172["left"] := __n173;
__n174 := {  };
__n174["type"] := "NewExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "String";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := "1";
__n177["raw"] := "\"1\"";
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n172["right"] := __n174;
__n171["expression"] := __n172;
__n178 := {  };
__n178["type"] := "ExpressionStatement";
__n179 := {  };
__n179["type"] := "AssignmentExpression";
__n179["operator"] := ">>=";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "x";
__n179["left"] := __n180;
__n181 := {  };
__n181["type"] := "NewExpression";
__n182 := {  };
__n182["type"] := "Identifier";
__n182["name"] := "Boolean";
__n181["callee"] := __n182;
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := true;
__n184["raw"] := "true";
__n183 := [ __n184 ];
__n181["arguments"] := __n183;
__n179["right"] := __n181;
__n178["expression"] := __n179;
__n185 := {  };
__n185["type"] := "IfStatement";
__n186 := {  };
__n186["type"] := "BinaryExpression";
__n186["operator"] := "!==";
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "x";
__n186["left"] := __n187;
__n188 := {  };
__n188["type"] := "Literal";
__n188["value"] := 0.;
__n188["raw"] := "0";
__n186["right"] := __n188;
__n185["test"] := __n186;
__n189 := {  };
__n189["type"] := "BlockStatement";
__n191 := {  };
__n191["type"] := "ExpressionStatement";
__n192 := {  };
__n192["type"] := "CallExpression";
__n193 := {  };
__n193["type"] := "Identifier";
__n193["name"] := "$ERROR";
__n192["callee"] := __n193;
__n195 := {  };
__n195["type"] := "BinaryExpression";
__n195["operator"] := "+";
__n196 := {  };
__n196["type"] := "Literal";
__n196["value"] := "#8: x = new String(\"1\"); x >>= new Boolean(true); x === 0. Actual: ";
__n196["raw"] := "'#8: x = new String(\"1\"); x >>= new Boolean(true); x === 0. Actual: '";
__n195["left"] := __n196;
__n197 := {  };
__n197["type"] := "Identifier";
__n197["name"] := "x";
__n195["right"] := __n197;
__n194 := [ __n195 ];
__n192["arguments"] := __n194;
__n191["expression"] := __n192;
__n190 := [ __n191 ];
__n189["body"] := __n190;
__n185["consequent"] := __n189;
__n185["alternate"] := null;
__n1 := [ __n2, __n6, __n10, __n14, __n27, __n31, __n35, __n48, __n55, __n59, __n72, __n76, __n83, __n96, __n100, __n107, __n120, __n127, __n131, __n144, __n151, __n158, __n171, __n178, __n185 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n198 := [ "x" ];
__n0["variableDeclarations"] := __n198;
__n199 := [  ];
__n0["functionDeclarations"] := __n199;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}