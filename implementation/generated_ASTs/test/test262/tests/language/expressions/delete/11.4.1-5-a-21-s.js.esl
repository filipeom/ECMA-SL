function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "throws";
__n8["raw"] := "\"throws\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "SyntaxError";
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n11["id"] := null;
__n12 := [  ];
__n11["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "eval";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "delete String;";
__n19["raw"] := "\"delete String;\"";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n20 := [  ];
__n13["variableDeclarations"] := __n20;
__n21 := [  ];
__n13["functionDeclarations"] := __n21;
__n13["codeType"] := "function";
__n13["strict"] := false;
__n11["body"] := __n13;
__n11["generator"] := false;
__n11["async"] := false;
__n11["expression"] := false;
__n9 := [ __n10, __n11 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n22 := [  ];
__n0["variableDeclarations"] := __n22;
__n23 := [  ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}