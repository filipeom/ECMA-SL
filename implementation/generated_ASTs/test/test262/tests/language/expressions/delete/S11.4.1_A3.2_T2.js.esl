function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "MyFunction";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "MyFunction";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prop";
__n9["raw"] := "\"prop\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n6["right"] := __n10;
__n5["expression"] := __n6;
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "delete";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "MyFunction";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "prop";
__n16["raw"] := "\"prop\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n12["left"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := true;
__n17["raw"] := "true";
__n12["right"] := __n17;
__n11["test"] := __n12;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: function MyFunction(){}; MyFunction.prop = 1; delete MyFunction.prop === true";
__n24["raw"] := "'#1: function MyFunction(){}; MyFunction.prop = 1; delete MyFunction.prop === true'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n11["consequent"] := __n18;
__n11["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n25 := [  ];
__n0["variableDeclarations"] := __n25;
__n27 := {  };
__n27["type"] := "FunctionDeclaration";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "MyFunction";
__n27["id"] := __n28;
__n29 := [  ];
__n27["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n31 := [  ];
__n30["body"] := __n31;
__n32 := [  ];
__n30["variableDeclarations"] := __n32;
__n33 := [  ];
__n30["functionDeclarations"] := __n33;
__n30["codeType"] := "function";
__n30["strict"] := false;
__n27["body"] := __n30;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n26 := [ __n27 ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}