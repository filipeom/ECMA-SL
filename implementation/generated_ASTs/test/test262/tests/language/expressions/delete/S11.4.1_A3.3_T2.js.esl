function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "MyFunction";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "MyFunction";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prop";
__n9["raw"] := "\"prop\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n6["right"] := __n10;
__n5["expression"] := __n6;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "delete";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "MyFunction";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "prop";
__n15["raw"] := "\"prop\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["expression"] := __n12;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "MyFunction";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "prop";
__n20["raw"] := "\"prop\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "undefined";
__n17["right"] := __n21;
__n16["test"] := __n17;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: function MyFunction(){}; MyFunction.prop = 1; delete MyFunction.prop; MyFunction.prop === undefined. Actual: ";
__n29["raw"] := "'#1: function MyFunction(){}; MyFunction.prop = 1; delete MyFunction.prop; MyFunction.prop === undefined. Actual: '";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "MyFunction";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "prop";
__n32["raw"] := "\"prop\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n16["consequent"] := __n22;
__n16["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n11, __n16 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [  ];
__n0["variableDeclarations"] := __n33;
__n35 := {  };
__n35["type"] := "FunctionDeclaration";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "MyFunction";
__n35["id"] := __n36;
__n37 := [  ];
__n35["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n39 := [  ];
__n38["body"] := __n39;
__n40 := [  ];
__n38["variableDeclarations"] := __n40;
__n41 := [  ];
__n38["functionDeclarations"] := __n41;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n35["body"] := __n38;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n34 := [ __n35 ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}