function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "MyFunction";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "MyObjectVar";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "NewExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "MyFunction";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "AssignmentExpression";
__n13["operator"] := "=";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "MyObjectVar";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "prop";
__n16["raw"] := "\"prop\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["left"] := __n14;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n13["right"] := __n17;
__n12["expression"] := __n13;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "delete";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "MyObjectVar";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "prop";
__n22["raw"] := "\"prop\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["expression"] := __n19;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "MyObjectVar";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "prop";
__n27["raw"] := "\"prop\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "undefined";
__n24["right"] := __n28;
__n23["test"] := __n24;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: function MyFunction(){}; var MyObjectVar = new MyFunction(); MyFunction.prop = 1; delete MyObjectVar.prop; MyObjectVar.prop === undefined. Actual: ";
__n36["raw"] := "'#1: function MyFunction(){}; var MyObjectVar = new MyFunction(); MyFunction.prop = 1; delete MyObjectVar.prop; MyObjectVar.prop === undefined. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "MyObjectVar";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "prop";
__n39["raw"] := "\"prop\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n23["consequent"] := __n29;
__n23["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n12, __n18, __n23 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [ "MyObjectVar" ];
__n0["variableDeclarations"] := __n40;
__n42 := {  };
__n42["type"] := "FunctionDeclaration";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "MyFunction";
__n42["id"] := __n43;
__n44 := [  ];
__n42["params"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n46 := [  ];
__n45["body"] := __n46;
__n47 := [  ];
__n45["variableDeclarations"] := __n47;
__n48 := [  ];
__n45["functionDeclarations"] := __n48;
__n45["codeType"] := "function";
__n45["strict"] := false;
__n42["body"] := __n45;
__n42["generator"] := false;
__n42["expression"] := false;
__n42["async"] := false;
__n41 := [ __n42 ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}