function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "Palette";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Palette";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "ObjectExpression";
__n12 := {  };
__n12["type"] := "Property";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "red";
__n12["key"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 16711680.;
__n14["raw"] := "0xFF0000";
__n12["value"] := __n14;
__n12["computed"] := false;
__n12["kind"] := "init";
__n12["shorthand"] := false;
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "green";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 65280.;
__n17["raw"] := "0x00FF00";
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n11 := [ __n12, __n15 ];
__n10["properties"] := __n11;
__n6["right"] := __n10;
__n5["expression"] := __n6;
__n18 := {  };
__n18["type"] := "VariableDeclaration";
__n20 := {  };
__n20["type"] := "VariableDeclarator";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__palette";
__n20["id"] := __n21;
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Palette";
__n22["callee"] := __n23;
__n24 := [  ];
__n22["arguments"] := __n24;
__n20["init"] := __n22;
__n19 := [ __n20 ];
__n18["declarations"] := __n19;
__n18["kind"] := "var";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__palette";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "red";
__n29["raw"] := "\"red\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 16711680.;
__n30["raw"] := "0xFF0000";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; __palette.red === 0xFF0000. Actual: ";
__n38["raw"] := "'#1: function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; __palette.red === 0xFF0000. Actual: '";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__palette";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "red";
__n41["raw"] := "\"red\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "delete";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__palette";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "red";
__n47["raw"] := "\"red\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n43["left"] := __n44;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n43["right"] := __n48;
__n42["test"] := __n43;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#2 function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; delete __palette.red === true. Actual: ";
__n56["raw"] := "'#2 function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; delete __palette.red === true. Actual: '";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "UnaryExpression";
__n57["operator"] := "delete";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__palette";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "red";
__n60["raw"] := "\"red\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n42["consequent"] := __n49;
__n42["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "MemberExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "__palette";
__n63["object"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "red";
__n65["raw"] := "\"red\"";
__n63["property"] := __n65;
__n63["computed"] := true;
__n62["left"] := __n63;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 16711680.;
__n66["raw"] := "0xFF0000";
__n62["right"] := __n66;
__n61["test"] := __n62;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; __palette.red === 0xFF0000. Actual: ";
__n74["raw"] := "'#3: function Palette(){}; Palette.prototype = {red:0xFF0000, green:0x00FF00}; __palette = new Palette; __palette.red === 0xFF0000. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "__palette";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "red";
__n77["raw"] := "\"red\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n61["consequent"] := __n67;
__n61["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n18, __n25, __n42, __n61 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n78 := [ "__palette" ];
__n0["variableDeclarations"] := __n78;
__n80 := {  };
__n80["type"] := "FunctionDeclaration";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Palette";
__n80["id"] := __n81;
__n82 := [  ];
__n80["params"] := __n82;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n84 := [  ];
__n83["body"] := __n84;
__n85 := [  ];
__n83["variableDeclarations"] := __n85;
__n86 := [  ];
__n83["functionDeclarations"] := __n86;
__n83["codeType"] := "function";
__n83["strict"] := false;
__n80["body"] := __n83;
__n80["generator"] := false;
__n80["expression"] := false;
__n80["async"] := false;
__n79 := [ __n80 ];
__n0["functionDeclarations"] := __n79;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}