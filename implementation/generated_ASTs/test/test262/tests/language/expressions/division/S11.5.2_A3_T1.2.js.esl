function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "/";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 1.;
__n5["raw"] := "1";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: 1 / 1 === 1. Actual: ";
__n15["raw"] := "'#1: 1 / 1 === 1. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "/";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 1.;
__n18["raw"] := "1";
__n16["right"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "/";
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Number";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n21["right"] := __n26;
__n20["left"] := __n21;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n20["right"] := __n27;
__n19["test"] := __n20;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: new Number(1) / 1 === 1. Actual: ";
__n35["raw"] := "'#2: new Number(1) / 1 === 1. Actual: '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "/";
__n37 := {  };
__n37["type"] := "NewExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["left"] := __n37;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 1.;
__n41["raw"] := "1";
__n36["right"] := __n41;
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n19["consequent"] := __n28;
__n19["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "/";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 1.;
__n45["raw"] := "1";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "NewExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Number";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n44["right"] := __n46;
__n43["left"] := __n44;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n43["right"] := __n50;
__n42["test"] := __n43;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: 1 / new Number(1) === 1. Actual: ";
__n58["raw"] := "'#3: 1 / new Number(1) === 1. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "/";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n59["right"] := __n61;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n42["consequent"] := __n51;
__n42["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "/";
__n68 := {  };
__n68["type"] := "NewExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Number";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 1.;
__n71["raw"] := "1";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["left"] := __n68;
__n72 := {  };
__n72["type"] := "NewExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "Number";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 1.;
__n75["raw"] := "1";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n67["right"] := __n72;
__n66["left"] := __n67;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 1.;
__n76["raw"] := "1";
__n66["right"] := __n76;
__n65["test"] := __n66;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "+";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#4: new Number(1) / new Number(1) === 1. Actual: ";
__n84["raw"] := "'#4: new Number(1) / new Number(1) === 1. Actual: '";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "/";
__n86 := {  };
__n86["type"] := "NewExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Number";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 1.;
__n89["raw"] := "1";
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["left"] := __n86;
__n90 := {  };
__n90["type"] := "NewExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Number";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 1.;
__n93["raw"] := "1";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n85["right"] := __n90;
__n83["right"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n65["consequent"] := __n77;
__n65["alternate"] := null;
__n1 := [ __n2, __n19, __n42, __n65 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n94 := [  ];
__n0["variableDeclarations"] := __n94;
__n95 := [  ];
__n0["functionDeclarations"] := __n95;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}