function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "/";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 1.;
__n5["raw"] := "1";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 'null;
__n6["raw"] := "\"'null\"";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Number";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "POSITIVE_INFINITY";
__n9["raw"] := "\"POSITIVE_INFINITY\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n3["right"] := __n7;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: 1 / null === +Infinity. Actual: ";
__n17["raw"] := "'#1: 1 / null === +Infinity. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "/";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 'null;
__n20["raw"] := "\"'null\"";
__n18["right"] := __n20;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "/";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 'null;
__n24["raw"] := "\"'null\"";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n23["right"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n22["right"] := __n26;
__n21["test"] := __n22;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2: null / 1 === 0. Actual: ";
__n34["raw"] := "'#2: null / 1 === 0. Actual: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "/";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 'null;
__n36["raw"] := "\"'null\"";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n21["consequent"] := __n27;
__n21["alternate"] := null;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "/";
__n41 := {  };
__n41["type"] := "NewExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Number";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["left"] := __n41;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 'null;
__n45["raw"] := "\"'null\"";
__n40["right"] := __n45;
__n39["left"] := __n40;
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Number";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "POSITIVE_INFINITY";
__n48["raw"] := "\"POSITIVE_INFINITY\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n39["right"] := __n46;
__n38["test"] := __n39;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: new Number(1) / null === +Infinity. Actual: ";
__n56["raw"] := "'#3: new Number(1) / null === +Infinity. Actual: '";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "/";
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Number";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 1.;
__n61["raw"] := "1";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["left"] := __n58;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 'null;
__n62["raw"] := "\"'null\"";
__n57["right"] := __n62;
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n38["consequent"] := __n49;
__n38["alternate"] := null;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "/";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 'null;
__n66["raw"] := "\"'null\"";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "NewExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "Number";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n65["right"] := __n67;
__n64["left"] := __n65;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 0.;
__n71["raw"] := "0";
__n64["right"] := __n71;
__n63["test"] := __n64;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "+";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#4: null / new Number(1) === 0. Actual: ";
__n79["raw"] := "'#4: null / new Number(1) === 0. Actual: '";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "/";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 'null;
__n81["raw"] := "\"'null\"";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "NewExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Number";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 1.;
__n85["raw"] := "1";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n80["right"] := __n82;
__n78["right"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n63["consequent"] := __n72;
__n63["alternate"] := null;
__n1 := [ __n2, __n21, __n38, __n63 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n86 := [  ];
__n0["variableDeclarations"] := __n86;
__n87 := [  ];
__n0["functionDeclarations"] := __n87;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}