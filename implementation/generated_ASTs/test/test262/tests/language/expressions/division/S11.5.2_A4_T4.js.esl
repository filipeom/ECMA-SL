function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "/";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "NEGATIVE_INFINITY";
__n10["raw"] := "\"NEGATIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "NEGATIVE_INFINITY";
__n13["raw"] := "\"NEGATIVE_INFINITY\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n7["right"] := __n11;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n3["right"] := __n14;
__n2["test"] := __n3;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: -Infinity / -Infinity === Not-a-Number. Actual: ";
__n22["raw"] := "'#1: -Infinity / -Infinity === Not-a-Number. Actual: '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "/";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Infinity";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["left"] := __n24;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Infinity";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n23["right"] := __n26;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["consequent"] := __n15;
__n2["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "isNaN";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "/";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Number";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "POSITIVE_INFINITY";
__n36["raw"] := "\"POSITIVE_INFINITY\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["left"] := __n34;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "POSITIVE_INFINITY";
__n39["raw"] := "\"POSITIVE_INFINITY\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n33["right"] := __n37;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["left"] := __n30;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n29["right"] := __n40;
__n28["test"] := __n29;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2: Infinity / Infinity === Not-a-Number. Actual: ";
__n48["raw"] := "'#2: Infinity / Infinity === Not-a-Number. Actual: '";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "/";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Infinity";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Infinity";
__n49["right"] := __n51;
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n28["consequent"] := __n41;
__n28["alternate"] := null;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "!==";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "isNaN";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "/";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Number";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "NEGATIVE_INFINITY";
__n60["raw"] := "\"NEGATIVE_INFINITY\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["left"] := __n58;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "POSITIVE_INFINITY";
__n63["raw"] := "\"POSITIVE_INFINITY\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n57["right"] := __n61;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["left"] := __n54;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := true;
__n64["raw"] := "true";
__n53["right"] := __n64;
__n52["test"] := __n53;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "+";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#3: -Infinity / Infinity === Not-a-Number. Actual: ";
__n72["raw"] := "'#3: -Infinity / Infinity === Not-a-Number. Actual: '";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "/";
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "-";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Infinity";
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n73["left"] := __n74;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Infinity";
__n73["right"] := __n76;
__n71["right"] := __n73;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n52["consequent"] := __n65;
__n52["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "isNaN";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "/";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Number";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "POSITIVE_INFINITY";
__n85["raw"] := "\"POSITIVE_INFINITY\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82["left"] := __n83;
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Number";
__n86["object"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "NEGATIVE_INFINITY";
__n88["raw"] := "\"NEGATIVE_INFINITY\"";
__n86["property"] := __n88;
__n86["computed"] := true;
__n82["right"] := __n86;
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["left"] := __n79;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := true;
__n89["raw"] := "true";
__n78["right"] := __n89;
__n77["test"] := __n78;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#4: Infinity / -Infinity === Not-a-Number. Actual: ";
__n97["raw"] := "'#4: Infinity / -Infinity === Not-a-Number. Actual: '";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "/";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "Infinity";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "-";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Infinity";
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n98["right"] := __n100;
__n96["right"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n77["consequent"] := __n90;
__n77["alternate"] := null;
__n1 := [ __n2, __n28, __n52, __n77 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n102 := [  ];
__n0["variableDeclarations"] := __n102;
__n103 := [  ];
__n0["functionDeclarations"] := __n103;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}