function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "/";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "+";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["left"] := __n8;
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "+";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n7["right"] := __n10;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: +0 / +0 === Not-a-Number. Actual: ";
__n20["raw"] := "'#1: +0 / +0 === Not-a-Number. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "/";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.;
__n25["raw"] := "0";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n21["right"] := __n24;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "isNaN";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "/";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "-";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 0.;
__n33["raw"] := "0";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["left"] := __n32;
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n31["right"] := __n34;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n27["right"] := __n36;
__n26["test"] := __n27;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: -0 / +0 === Not-a-Number. Actual: ";
__n44["raw"] := "'#2: -0 / +0 === Not-a-Number. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "/";
__n46 := {  };
__n46["type"] := "UnaryExpression";
__n46["operator"] := "-";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n46["argument"] := __n47;
__n46["prefix"] := true;
__n45["left"] := __n46;
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 0.;
__n49["raw"] := "0";
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n45["right"] := __n48;
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n26["consequent"] := __n37;
__n26["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "isNaN";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "/";
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 0.;
__n57["raw"] := "0";
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n55["left"] := __n56;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "-";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n55["right"] := __n58;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["left"] := __n52;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := true;
__n60["raw"] := "true";
__n51["right"] := __n60;
__n50["test"] := __n51;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#3: +0 / -0 === Not-a-Number. Actual: ";
__n68["raw"] := "'#3: +0 / -0 === Not-a-Number. Actual: '";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "/";
__n70 := {  };
__n70["type"] := "UnaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 0.;
__n71["raw"] := "0";
__n70["argument"] := __n71;
__n70["prefix"] := true;
__n69["left"] := __n70;
__n72 := {  };
__n72["type"] := "UnaryExpression";
__n72["operator"] := "-";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n72["argument"] := __n73;
__n72["prefix"] := true;
__n69["right"] := __n72;
__n67["right"] := __n69;
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n50["consequent"] := __n61;
__n50["alternate"] := null;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "isNaN";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "/";
__n80 := {  };
__n80["type"] := "UnaryExpression";
__n80["operator"] := "-";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 0.;
__n81["raw"] := "0";
__n80["argument"] := __n81;
__n80["prefix"] := true;
__n79["left"] := __n80;
__n82 := {  };
__n82["type"] := "UnaryExpression";
__n82["operator"] := "-";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 0.;
__n83["raw"] := "0";
__n82["argument"] := __n83;
__n82["prefix"] := true;
__n79["right"] := __n82;
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["left"] := __n76;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := true;
__n84["raw"] := "true";
__n75["right"] := __n84;
__n74["test"] := __n75;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#4: -0 / -0 === Not-a-Number. Actual: ";
__n92["raw"] := "'#4: -0 / -0 === Not-a-Number. Actual: '";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "/";
__n94 := {  };
__n94["type"] := "UnaryExpression";
__n94["operator"] := "-";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 0.;
__n95["raw"] := "0";
__n94["argument"] := __n95;
__n94["prefix"] := true;
__n93["left"] := __n94;
__n96 := {  };
__n96["type"] := "UnaryExpression";
__n96["operator"] := "-";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 0.;
__n97["raw"] := "0";
__n96["argument"] := __n97;
__n96["prefix"] := true;
__n93["right"] := __n96;
__n91["right"] := __n93;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n74["consequent"] := __n85;
__n74["alternate"] := null;
__n1 := [ __n2, __n26, __n50, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n98 := [  ];
__n0["variableDeclarations"] := __n98;
__n99 := [  ];
__n0["functionDeclarations"] := __n99;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}