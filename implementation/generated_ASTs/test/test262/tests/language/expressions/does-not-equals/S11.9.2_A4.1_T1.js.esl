function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!=";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "NaN";
__n7["raw"] := "\"NaN\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := true;
__n8["raw"] := "true";
__n4["right"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: (NaN != true) === true";
__n16["raw"] := "'#1: (NaN != true) === true'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "NaN";
__n22["raw"] := "\"NaN\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n19["right"] := __n23;
__n18["left"] := __n19;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := true;
__n24["raw"] := "true";
__n18["right"] := __n24;
__n17["test"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: (NaN != 1) === true";
__n31["raw"] := "'#2: (NaN != 1) === true'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n17["consequent"] := __n25;
__n17["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!=";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Number";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "NaN";
__n37["raw"] := "\"NaN\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["left"] := __n35;
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "Number";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "NaN";
__n40["raw"] := "\"NaN\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n34["right"] := __n38;
__n33["left"] := __n34;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n33["right"] := __n41;
__n32["test"] := __n33;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#3: (NaN != NaN) === true";
__n48["raw"] := "'#3: (NaN != NaN) === true'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n32["consequent"] := __n42;
__n32["alternate"] := null;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!=";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "NaN";
__n54["raw"] := "\"NaN\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["left"] := __n52;
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "Number";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "POSITIVE_INFINITY";
__n57["raw"] := "\"POSITIVE_INFINITY\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n51["right"] := __n55;
__n50["left"] := __n51;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := true;
__n58["raw"] := "true";
__n50["right"] := __n58;
__n49["test"] := __n50;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#4: (NaN != +Infinity) === true";
__n65["raw"] := "'#4: (NaN != +Infinity) === true'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n49["consequent"] := __n59;
__n49["alternate"] := null;
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "!==";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!=";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "NaN";
__n71["raw"] := "\"NaN\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n68["left"] := __n69;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "Number";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "NEGATIVE_INFINITY";
__n74["raw"] := "\"NEGATIVE_INFINITY\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n68["right"] := __n72;
__n67["left"] := __n68;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n67["right"] := __n75;
__n66["test"] := __n67;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#5: (NaN != -Infinity) === true";
__n82["raw"] := "'#5: (NaN != -Infinity) === true'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n66["consequent"] := __n76;
__n66["alternate"] := null;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "!=";
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Number";
__n86["object"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "NaN";
__n88["raw"] := "\"NaN\"";
__n86["property"] := __n88;
__n86["computed"] := true;
__n85["left"] := __n86;
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "Number";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "MAX_VALUE";
__n91["raw"] := "\"MAX_VALUE\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n85["right"] := __n89;
__n84["left"] := __n85;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := true;
__n92["raw"] := "true";
__n84["right"] := __n92;
__n83["test"] := __n84;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#6: (NaN != Number.MAX_VALUE) === true";
__n99["raw"] := "'#6: (NaN != Number.MAX_VALUE) === true'";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n83["consequent"] := __n93;
__n83["alternate"] := null;
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "!==";
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "!=";
__n103 := {  };
__n103["type"] := "MemberExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "Number";
__n103["object"] := __n104;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "NaN";
__n105["raw"] := "\"NaN\"";
__n103["property"] := __n105;
__n103["computed"] := true;
__n102["left"] := __n103;
__n106 := {  };
__n106["type"] := "MemberExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "Number";
__n106["object"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "MIN_VALUE";
__n108["raw"] := "\"MIN_VALUE\"";
__n106["property"] := __n108;
__n106["computed"] := true;
__n102["right"] := __n106;
__n101["left"] := __n102;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := true;
__n109["raw"] := "true";
__n101["right"] := __n109;
__n100["test"] := __n101;
__n110 := {  };
__n110["type"] := "BlockStatement";
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "$ERROR";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "#7: (NaN != Number.MIN_VALUE) === true";
__n116["raw"] := "'#7: (NaN != Number.MIN_VALUE) === true'";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n112["expression"] := __n113;
__n111 := [ __n112 ];
__n110["body"] := __n111;
__n100["consequent"] := __n110;
__n100["alternate"] := null;
__n117 := {  };
__n117["type"] := "IfStatement";
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "!==";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!=";
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "Number";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "NaN";
__n122["raw"] := "\"NaN\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n119["left"] := __n120;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "string";
__n123["raw"] := "\"string\"";
__n119["right"] := __n123;
__n118["left"] := __n119;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := true;
__n124["raw"] := "true";
__n118["right"] := __n124;
__n117["test"] := __n118;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "$ERROR";
__n128["callee"] := __n129;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "#8: (NaN != \"string\") === true";
__n131["raw"] := "'#8: (NaN != \"string\") === true'";
__n130 := [ __n131 ];
__n128["arguments"] := __n130;
__n127["expression"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n117["consequent"] := __n125;
__n117["alternate"] := null;
__n132 := {  };
__n132["type"] := "IfStatement";
__n133 := {  };
__n133["type"] := "BinaryExpression";
__n133["operator"] := "!==";
__n134 := {  };
__n134["type"] := "BinaryExpression";
__n134["operator"] := "!=";
__n135 := {  };
__n135["type"] := "MemberExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "Number";
__n135["object"] := __n136;
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := "NaN";
__n137["raw"] := "\"NaN\"";
__n135["property"] := __n137;
__n135["computed"] := true;
__n134["left"] := __n135;
__n138 := {  };
__n138["type"] := "NewExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Object";
__n138["callee"] := __n139;
__n140 := [  ];
__n138["arguments"] := __n140;
__n134["right"] := __n138;
__n133["left"] := __n134;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := true;
__n141["raw"] := "true";
__n133["right"] := __n141;
__n132["test"] := __n133;
__n142 := {  };
__n142["type"] := "BlockStatement";
__n144 := {  };
__n144["type"] := "ExpressionStatement";
__n145 := {  };
__n145["type"] := "CallExpression";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "$ERROR";
__n145["callee"] := __n146;
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := "#9: (NaN != new Object()) === true";
__n148["raw"] := "'#9: (NaN != new Object()) === true'";
__n147 := [ __n148 ];
__n145["arguments"] := __n147;
__n144["expression"] := __n145;
__n143 := [ __n144 ];
__n142["body"] := __n143;
__n132["consequent"] := __n142;
__n132["alternate"] := null;
__n1 := [ __n2, __n17, __n32, __n49, __n66, __n83, __n100, __n117, __n132 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n149 := [  ];
__n0["variableDeclarations"] := __n149;
__n150 := [  ];
__n0["functionDeclarations"] := __n150;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}