function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!=";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := true;
__n5["raw"] := "true";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "NaN";
__n8["raw"] := "\"NaN\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["right"] := __n6;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: (true != NaN) === true";
__n16["raw"] := "'#1: (true != NaN) === true'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!=";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "-";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["left"] := __n20;
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Number";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "NaN";
__n24["raw"] := "\"NaN\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n19["right"] := __n22;
__n18["left"] := __n19;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := true;
__n25["raw"] := "true";
__n18["right"] := __n25;
__n17["test"] := __n18;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: (-1 != NaN) === true";
__n32["raw"] := "'#2: (-1 != NaN) === true'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n17["consequent"] := __n26;
__n17["alternate"] := null;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "!=";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "NaN";
__n38["raw"] := "\"NaN\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["left"] := __n36;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Number";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "NaN";
__n41["raw"] := "\"NaN\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n35["right"] := __n39;
__n34["left"] := __n35;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := true;
__n42["raw"] := "true";
__n34["right"] := __n42;
__n33["test"] := __n34;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#3: (NaN != NaN) === true";
__n49["raw"] := "'#3: (NaN != NaN) === true'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n33["consequent"] := __n43;
__n33["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "!=";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Number";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "POSITIVE_INFINITY";
__n55["raw"] := "\"POSITIVE_INFINITY\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["left"] := __n53;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "Number";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "NaN";
__n58["raw"] := "\"NaN\"";
__n56["property"] := __n58;
__n56["computed"] := true;
__n52["right"] := __n56;
__n51["left"] := __n52;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := true;
__n59["raw"] := "true";
__n51["right"] := __n59;
__n50["test"] := __n51;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#4: (+Infinity != NaN) === true";
__n66["raw"] := "'#4: (+Infinity != NaN) === true'";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n50["consequent"] := __n60;
__n50["alternate"] := null;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!=";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "Number";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "NEGATIVE_INFINITY";
__n72["raw"] := "\"NEGATIVE_INFINITY\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["left"] := __n70;
__n73 := {  };
__n73["type"] := "MemberExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "Number";
__n73["object"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "NaN";
__n75["raw"] := "\"NaN\"";
__n73["property"] := __n75;
__n73["computed"] := true;
__n69["right"] := __n73;
__n68["left"] := __n69;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := true;
__n76["raw"] := "true";
__n68["right"] := __n76;
__n67["test"] := __n68;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "#5: (-Infinity != NaN) === true";
__n83["raw"] := "'#5: (-Infinity != NaN) === true'";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n67["consequent"] := __n77;
__n67["alternate"] := null;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "!==";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "!=";
__n87 := {  };
__n87["type"] := "MemberExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "Number";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "MAX_VALUE";
__n89["raw"] := "\"MAX_VALUE\"";
__n87["property"] := __n89;
__n87["computed"] := true;
__n86["left"] := __n87;
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Number";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "NaN";
__n92["raw"] := "\"NaN\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n86["right"] := __n90;
__n85["left"] := __n86;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := true;
__n93["raw"] := "true";
__n85["right"] := __n93;
__n84["test"] := __n85;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#6: (Number.MAX_VALUE != NaN) === true";
__n100["raw"] := "'#6: (Number.MAX_VALUE != NaN) === true'";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n84["consequent"] := __n94;
__n84["alternate"] := null;
__n101 := {  };
__n101["type"] := "IfStatement";
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "!==";
__n103 := {  };
__n103["type"] := "BinaryExpression";
__n103["operator"] := "!=";
__n104 := {  };
__n104["type"] := "MemberExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "Number";
__n104["object"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "MIN_VALUE";
__n106["raw"] := "\"MIN_VALUE\"";
__n104["property"] := __n106;
__n104["computed"] := true;
__n103["left"] := __n104;
__n107 := {  };
__n107["type"] := "MemberExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "Number";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "NaN";
__n109["raw"] := "\"NaN\"";
__n107["property"] := __n109;
__n107["computed"] := true;
__n103["right"] := __n107;
__n102["left"] := __n103;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := true;
__n110["raw"] := "true";
__n102["right"] := __n110;
__n101["test"] := __n102;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#7: (Number.MIN_VALUE != NaN) === true";
__n117["raw"] := "'#7: (Number.MIN_VALUE != NaN) === true'";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n101["consequent"] := __n111;
__n101["alternate"] := null;
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!==";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "!=";
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "string";
__n121["raw"] := "\"string\"";
__n120["left"] := __n121;
__n122 := {  };
__n122["type"] := "MemberExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "Number";
__n122["object"] := __n123;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := "NaN";
__n124["raw"] := "\"NaN\"";
__n122["property"] := __n124;
__n122["computed"] := true;
__n120["right"] := __n122;
__n119["left"] := __n120;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := true;
__n125["raw"] := "true";
__n119["right"] := __n125;
__n118["test"] := __n119;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#8: (\"string\" != NaN) === true";
__n132["raw"] := "'#8: (\"string\" != NaN) === true'";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n118["consequent"] := __n126;
__n118["alternate"] := null;
__n133 := {  };
__n133["type"] := "IfStatement";
__n134 := {  };
__n134["type"] := "BinaryExpression";
__n134["operator"] := "!==";
__n135 := {  };
__n135["type"] := "BinaryExpression";
__n135["operator"] := "!=";
__n136 := {  };
__n136["type"] := "NewExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "Object";
__n136["callee"] := __n137;
__n138 := [  ];
__n136["arguments"] := __n138;
__n135["left"] := __n136;
__n139 := {  };
__n139["type"] := "MemberExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "Number";
__n139["object"] := __n140;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "NaN";
__n141["raw"] := "\"NaN\"";
__n139["property"] := __n141;
__n139["computed"] := true;
__n135["right"] := __n139;
__n134["left"] := __n135;
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := true;
__n142["raw"] := "true";
__n134["right"] := __n142;
__n133["test"] := __n134;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "ExpressionStatement";
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "$ERROR";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "#9: (new Object() != NaN) === true";
__n149["raw"] := "'#9: (new Object() != NaN) === true'";
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n145["expression"] := __n146;
__n144 := [ __n145 ];
__n143["body"] := __n144;
__n133["consequent"] := __n143;
__n133["alternate"] := null;
__n1 := [ __n2, __n17, __n33, __n50, __n67, __n84, __n101, __n118, __n133 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n150 := [  ];
__n0["variableDeclarations"] := __n150;
__n151 := [  ];
__n0["functionDeclarations"] := __n151;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}