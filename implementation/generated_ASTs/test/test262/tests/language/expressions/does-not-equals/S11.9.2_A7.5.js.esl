function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!=";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 1.;
__n5["raw"] := "1";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["right"] := __n6;
__n3["left"] := __n4;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := false;
__n10["raw"] := "false";
__n3["right"] := __n10;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: (1 != new Boolean(true)) === false";
__n17["raw"] := "'#1: (1 != new Boolean(true)) === false'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!=";
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "-";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n20["left"] := __n21;
__n23 := {  };
__n23["type"] := "NewExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Number";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n20["right"] := __n23;
__n19["left"] := __n20;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := false;
__n28["raw"] := "false";
__n19["right"] := __n28;
__n18["test"] := __n19;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: (-1 != new Number(-1)) === false";
__n35["raw"] := "'#2: (-1 != new Number(-1)) === false'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n18["consequent"] := __n29;
__n18["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!=";
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n38["left"] := __n39;
__n41 := {  };
__n41["type"] := "NewExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "String";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "-1";
__n44["raw"] := "\"-1\"";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n38["right"] := __n41;
__n37["left"] := __n38;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := false;
__n45["raw"] := "false";
__n37["right"] := __n45;
__n36["test"] := __n37;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: (-1 != new String(\"-1\")) === false";
__n52["raw"] := "'#3: (-1 != new String(\"-1\")) === false'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n36["consequent"] := __n46;
__n36["alternate"] := null;
__n1 := [ __n2, __n18, __n36 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n53 := [  ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}