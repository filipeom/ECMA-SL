function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!=";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "1";
__n5["raw"] := "\"1\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["right"] := __n6;
__n3["left"] := __n4;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := false;
__n10["raw"] := "false";
__n3["right"] := __n10;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: (\"1\" != new Boolean(true)) === false";
__n17["raw"] := "'#1: (\"1\" != new Boolean(true)) === false'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!=";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "-1";
__n21["raw"] := "\"-1\"";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Number";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "-";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n20["right"] := __n22;
__n19["left"] := __n20;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := false;
__n27["raw"] := "false";
__n19["right"] := __n27;
__n18["test"] := __n19;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2: (\"-1\" != new Number(-1)) === false";
__n34["raw"] := "'#2: (\"-1\" != new Number(-1)) === false'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n18["consequent"] := __n28;
__n18["alternate"] := null;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!=";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "x";
__n38["raw"] := "\"x\"";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "NewExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "String";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "x";
__n42["raw"] := "\"x\"";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n37["right"] := __n39;
__n36["left"] := __n37;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := false;
__n43["raw"] := "false";
__n36["right"] := __n43;
__n35["test"] := __n36;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#3: (\"x\" != new String(\"x\")) === false";
__n50["raw"] := "'#3: (\"x\" != new String(\"x\")) === false'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n35["consequent"] := __n44;
__n35["alternate"] := null;
__n1 := [ __n2, __n18, __n35 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n51 := [  ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}