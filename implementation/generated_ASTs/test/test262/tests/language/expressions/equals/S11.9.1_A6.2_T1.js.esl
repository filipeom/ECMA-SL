function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "==";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "undefined";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := false;
__n7["raw"] := "false";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: (undefined == true) === false";
__n14["raw"] := "'#1: (undefined == true) === false'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "==";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "undefined";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.;
__n19["raw"] := "0";
__n17["right"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := false;
__n20["raw"] := "false";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: (undefined == 0) === false";
__n27["raw"] := "'#2: (undefined == 0) === false'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "undefined";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "undefined";
__n32["raw"] := "\"undefined\"";
__n30["right"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := false;
__n33["raw"] := "false";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#3: (undefined == \"undefined\") === false";
__n40["raw"] := "'#3: (undefined == \"undefined\") === false'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "==";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "undefined";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "ObjectExpression";
__n46 := [  ];
__n45["properties"] := __n46;
__n43["right"] := __n45;
__n42["left"] := __n43;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := false;
__n47["raw"] := "false";
__n42["right"] := __n47;
__n41["test"] := __n42;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#4: (undefined == {}) === false";
__n54["raw"] := "'#4: (undefined == {}) === false'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n41["consequent"] := __n48;
__n41["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "==";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 'null;
__n58["raw"] := "\"'null\"";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := false;
__n59["raw"] := "false";
__n57["right"] := __n59;
__n56["left"] := __n57;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := false;
__n60["raw"] := "false";
__n56["right"] := __n60;
__n55["test"] := __n56;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#5: (null == false) === false";
__n67["raw"] := "'#5: (null == false) === false'";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n55["consequent"] := __n61;
__n55["alternate"] := null;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "==";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 'null;
__n71["raw"] := "\"'null\"";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 0.;
__n72["raw"] := "0";
__n70["right"] := __n72;
__n69["left"] := __n70;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := false;
__n73["raw"] := "false";
__n69["right"] := __n73;
__n68["test"] := __n69;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#6: (null == 0) === false";
__n80["raw"] := "'#6: (null == 0) === false'";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n68["consequent"] := __n74;
__n68["alternate"] := null;
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "!==";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "==";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 'null;
__n84["raw"] := "\"'null\"";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "null";
__n85["raw"] := "\"null\"";
__n83["right"] := __n85;
__n82["left"] := __n83;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := false;
__n86["raw"] := "false";
__n82["right"] := __n86;
__n81["test"] := __n82;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#7: (null == \"null\") === false";
__n93["raw"] := "'#7: (null == \"null\") === false'";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n81["consequent"] := __n87;
__n81["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "!==";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "==";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 'null;
__n97["raw"] := "\"'null\"";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "ObjectExpression";
__n99 := [  ];
__n98["properties"] := __n99;
__n96["right"] := __n98;
__n95["left"] := __n96;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := false;
__n100["raw"] := "false";
__n95["right"] := __n100;
__n94["test"] := __n95;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ExpressionStatement";
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "$ERROR";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "#8: (null == {}) === false";
__n107["raw"] := "'#8: (null == {}) === false'";
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["expression"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n94["consequent"] := __n101;
__n94["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n41, __n55, __n68, __n81, __n94 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n108 := [  ];
__n0["variableDeclarations"] := __n108;
__n109 := [  ];
__n0["functionDeclarations"] := __n109;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}