function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := ">=";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "1";
__n5["raw"] := "\"1\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := true;
__n7["raw"] := "true";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: \"1\" >= \"1\" === true";
__n14["raw"] := "'#1: \"1\" >= \"1\" === true'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := ">=";
__n18 := {  };
__n18["type"] := "NewExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "String";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "1";
__n21["raw"] := "\"1\"";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["left"] := __n18;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "1";
__n22["raw"] := "\"1\"";
__n17["right"] := __n22;
__n16["left"] := __n17;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n16["right"] := __n23;
__n15["test"] := __n16;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#2: new String(\"1\") >= \"1\" === true";
__n30["raw"] := "'#2: new String(\"1\") >= \"1\" === true'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n15["consequent"] := __n24;
__n15["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := ">=";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "1";
__n34["raw"] := "\"1\"";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "String";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "1";
__n38["raw"] := "\"1\"";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33["right"] := __n35;
__n32["left"] := __n33;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n32["right"] := __n39;
__n31["test"] := __n32;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#3: \"1\" >= new String(\"1\") === true";
__n46["raw"] := "'#3: \"1\" >= new String(\"1\") === true'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n31["consequent"] := __n40;
__n31["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := ">=";
__n50 := {  };
__n50["type"] := "NewExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "String";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "1";
__n53["raw"] := "\"1\"";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["left"] := __n50;
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "String";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "1";
__n57["raw"] := "\"1\"";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n49["right"] := __n54;
__n48["left"] := __n49;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := true;
__n58["raw"] := "true";
__n48["right"] := __n58;
__n47["test"] := __n48;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#4: new String(\"1\") >= new String(\"1\") === true";
__n65["raw"] := "'#4: new String(\"1\") >= new String(\"1\") === true'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n47["consequent"] := __n59;
__n47["alternate"] := null;
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "!==";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := ">=";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "x";
__n69["raw"] := "\"x\"";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "1";
__n70["raw"] := "\"1\"";
__n68["right"] := __n70;
__n67["left"] := __n68;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := true;
__n71["raw"] := "true";
__n67["right"] := __n71;
__n66["test"] := __n67;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#5: \"x\" >= \"1\" === true";
__n78["raw"] := "'#5: \"x\" >= \"1\" === true'";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n66["consequent"] := __n72;
__n66["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "!==";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := ">=";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "1";
__n82["raw"] := "\"1\"";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "x";
__n83["raw"] := "\"x\"";
__n81["right"] := __n83;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := false;
__n84["raw"] := "false";
__n80["right"] := __n84;
__n79["test"] := __n80;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#6: \"1\" >= \"x\" === false";
__n91["raw"] := "'#6: \"1\" >= \"x\" === false'";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n79["consequent"] := __n85;
__n79["alternate"] := null;
__n1 := [ __n2, __n15, __n31, __n47, __n66, __n79 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n92 := [  ];
__n0["variableDeclarations"] := __n92;
__n93 := [  ];
__n0["functionDeclarations"] := __n93;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}