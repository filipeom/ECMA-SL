function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := ">";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "NEGATIVE_INFINITY";
__n7["raw"] := "\"NEGATIVE_INFINITY\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n4["right"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := false;
__n9["raw"] := "false";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: (-Infinity > 0) === false";
__n16["raw"] := "'#1: (-Infinity > 0) === false'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := ">";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "NEGATIVE_INFINITY";
__n22["raw"] := "\"NEGATIVE_INFINITY\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.1;
__n23["raw"] := "1.1";
__n19["right"] := __n23;
__n18["left"] := __n19;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := false;
__n24["raw"] := "false";
__n18["right"] := __n24;
__n17["test"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: (-Infinity > 1.1) === false";
__n31["raw"] := "'#2: (-Infinity > 1.1) === false'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n17["consequent"] := __n25;
__n17["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := ">";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Number";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "NEGATIVE_INFINITY";
__n37["raw"] := "\"NEGATIVE_INFINITY\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["left"] := __n35;
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "-";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 1.1;
__n39["raw"] := "1.1";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n34["right"] := __n38;
__n33["left"] := __n34;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := false;
__n40["raw"] := "false";
__n33["right"] := __n40;
__n32["test"] := __n33;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#3: (-Infinity > -1.1) === false";
__n47["raw"] := "'#3: (-Infinity > -1.1) === false'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n32["consequent"] := __n41;
__n32["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := ">";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Number";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "NEGATIVE_INFINITY";
__n53["raw"] := "\"NEGATIVE_INFINITY\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["left"] := __n51;
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Number";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "POSITIVE_INFINITY";
__n56["raw"] := "\"POSITIVE_INFINITY\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n50["right"] := __n54;
__n49["left"] := __n50;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := false;
__n57["raw"] := "false";
__n49["right"] := __n57;
__n48["test"] := __n49;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#4: (-Infinity > +Infinity) === false";
__n64["raw"] := "'#4: (-Infinity > +Infinity) === false'";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n48["consequent"] := __n58;
__n48["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := ">";
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Number";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "NEGATIVE_INFINITY";
__n70["raw"] := "\"NEGATIVE_INFINITY\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n67["left"] := __n68;
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "Number";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "MAX_VALUE";
__n73["raw"] := "\"MAX_VALUE\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n67["right"] := __n71;
__n66["left"] := __n67;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := false;
__n74["raw"] := "false";
__n66["right"] := __n74;
__n65["test"] := __n66;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "$ERROR";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#5: (-Infinity > Number.MAX_VALUE) === false";
__n81["raw"] := "'#5: (-Infinity > Number.MAX_VALUE) === false'";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["expression"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n65["consequent"] := __n75;
__n65["alternate"] := null;
__n82 := {  };
__n82["type"] := "IfStatement";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "!==";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := ">";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Number";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "NEGATIVE_INFINITY";
__n87["raw"] := "\"NEGATIVE_INFINITY\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["left"] := __n85;
__n88 := {  };
__n88["type"] := "MemberExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "Number";
__n88["object"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "MIN_VALUE";
__n90["raw"] := "\"MIN_VALUE\"";
__n88["property"] := __n90;
__n88["computed"] := true;
__n84["right"] := __n88;
__n83["left"] := __n84;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := false;
__n91["raw"] := "false";
__n83["right"] := __n91;
__n82["test"] := __n83;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#6: (-Infinity > Number.MIN_VALUE) === false";
__n98["raw"] := "'#6: (-Infinity > Number.MIN_VALUE) === false'";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n82["consequent"] := __n92;
__n82["alternate"] := null;
__n1 := [ __n2, __n17, __n32, __n48, __n65, __n82 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n99 := [  ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}