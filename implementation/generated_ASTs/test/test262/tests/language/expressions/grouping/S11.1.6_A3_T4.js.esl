function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "undefined";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "undefined";
__n3["right"] := __n5;
__n2["test"] := __n3;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "$ERROR";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "+";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: (undefined) === undefined. Actual: ";
__n13["raw"] := "'#1: (undefined) === undefined. Actual: '";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "undefined";
__n12["right"] := __n14;
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["expression"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n2["consequent"] := __n6;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "void";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.;
__n18["raw"] := "0";
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["left"] := __n17;
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "void";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n16["right"] := __n19;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2: (void 0) === void 0. Actual: ";
__n28["raw"] := "'#2: (void 0) === void 0. Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "void";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 'null;
__n33["raw"] := "\"'null\"";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 'null;
__n34["raw"] := "\"'null\"";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: (null) === null. Actual: ";
__n42["raw"] := "'#2: (null) === null. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 'null;
__n43["raw"] := "\"'null\"";
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n1 := [ __n2, __n15, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n44 := [  ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}