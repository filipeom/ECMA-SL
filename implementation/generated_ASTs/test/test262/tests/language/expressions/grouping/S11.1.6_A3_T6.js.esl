function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "delete";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: delete (x) === true";
__n13["raw"] := "'#1: delete (x) === true'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n14 := [  ];
__n0["variableDeclarations"] := __n14;
__n15 := [  ];
__n0["functionDeclarations"] := __n15;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}