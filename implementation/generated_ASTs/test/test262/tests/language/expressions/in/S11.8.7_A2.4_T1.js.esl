function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "NUMBER";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "in";
__n10 := {  };
__n10["type"] := "SequenceExpression";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "NUMBER";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Number";
__n12["right"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "MAX_VALUE";
__n15["raw"] := "\"MAX_VALUE\"";
__n11 := [ __n12, __n15 ];
__n10["expressions"] := __n11;
__n9["left"] := __n10;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "NUMBER";
__n9["right"] := __n16;
__n8["left"] := __n9;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := true;
__n17["raw"] := "true";
__n8["right"] := __n17;
__n7["test"] := __n8;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: var NUMBER = 0; (NUMBER = Number, \"MAX_VALUE\") in NUMBER === true";
__n24["raw"] := "'#1: var NUMBER = 0; (NUMBER = Number, \"MAX_VALUE\") in NUMBER === true'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n7["consequent"] := __n18;
__n7["alternate"] := null;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "max_value";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "MAX_VALUE";
__n29["raw"] := "\"MAX_VALUE\"";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "in";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "max_value";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "SequenceExpression";
__n36 := {  };
__n36["type"] := "AssignmentExpression";
__n36["operator"] := "=";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "max_value";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "none";
__n38["raw"] := "\"none\"";
__n36["right"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "Number";
__n35 := [ __n36, __n39 ];
__n34["expressions"] := __n35;
__n32["right"] := __n34;
__n31["left"] := __n32;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := true;
__n40["raw"] := "true";
__n31["right"] := __n40;
__n30["test"] := __n31;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: var max_value = \"MAX_VALUE\"; max_value in (max_value = \"none\", Number) === true";
__n47["raw"] := "'#2: var max_value = \"MAX_VALUE\"; max_value in (max_value = \"none\", Number) === true'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n30["consequent"] := __n41;
__n30["alternate"] := null;
__n1 := [ __n2, __n7, __n25, __n30 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n48 := [ "NUMBER", "max_value" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}