function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "in";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "max_value";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "SequenceExpression";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "max_value";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "MAX_VALUE";
__n12["raw"] := "\"MAX_VALUE\"";
__n10["right"] := __n12;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Number";
__n9 := [ __n10, __n13 ];
__n8["expressions"] := __n9;
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1.1: max_value in (max_value = \"MAX_VALUE\", Number) throw ReferenceError. Actual: ";
__n19["raw"] := "'#1.1: max_value in (max_value = \"MAX_VALUE\", Number) throw ReferenceError. Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "in";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "max_value";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "SequenceExpression";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "max_value";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "MAX_VALUE";
__n26["raw"] := "\"MAX_VALUE\"";
__n24["right"] := __n26;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Number";
__n23 := [ __n24, __n27 ];
__n22["expressions"] := __n23;
__n20["right"] := __n22;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n4 := [ __n5, __n14 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n28 := {  };
__n28["type"] := "CatchClause";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "e";
__n28["param"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "instanceof";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "ReferenceError";
__n34["right"] := __n36;
__n33["left"] := __n34;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := true;
__n37["raw"] := "true";
__n33["right"] := __n37;
__n32["test"] := __n33;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1.2: max_value in (max_value = \"MAX_VALUE\", Number) throw ReferenceError. Actual: ";
__n45["raw"] := "'#1.2: max_value in (max_value = \"MAX_VALUE\", Number) throw ReferenceError. Actual: '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n32["consequent"] := __n38;
__n32["alternate"] := null;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n28["body"] := __n30;
__n2["handler"] := __n28;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n47 := [  ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}