function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "in";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "toString";
__n7["raw"] := "\"toString\"";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := true;
__n8["raw"] := "true";
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: \"toString\" in true throw TypeError";
__n13["raw"] := "'#1: \"toString\" in true throw TypeError'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "instanceof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "TypeError";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n19["right"] := __n23;
__n18["test"] := __n19;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1: \"toString\" in true throw TypeError";
__n30["raw"] := "'#1: \"toString\" in true throw TypeError'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n18["consequent"] := __n24;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n2["handler"] := __n14;
__n2["finalizer"] := null;
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "in";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "MAX_VALUE";
__n36["raw"] := "\"MAX_VALUE\"";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: \"MAX_VALUE\" in 1 throw TypeError";
__n42["raw"] := "'#2: \"MAX_VALUE\" in 1 throw TypeError'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n33 := [ __n34, __n38 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n43 := {  };
__n43["type"] := "CatchClause";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "e";
__n43["param"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "instanceof";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "TypeError";
__n49["right"] := __n51;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := true;
__n52["raw"] := "true";
__n48["right"] := __n52;
__n47["test"] := __n48;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#2: \"MAX_VALUE\" in 1 throw TypeError";
__n59["raw"] := "'#2: \"MAX_VALUE\" in 1 throw TypeError'";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n47["consequent"] := __n53;
__n47["alternate"] := null;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n43["body"] := __n45;
__n31["handler"] := __n43;
__n31["finalizer"] := null;
__n60 := {  };
__n60["type"] := "TryStatement";
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "in";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "length";
__n65["raw"] := "\"length\"";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "string";
__n66["raw"] := "\"string\"";
__n64["right"] := __n66;
__n63["expression"] := __n64;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#3: \"length\" in \"string\" throw TypeError";
__n71["raw"] := "'#3: \"length\" in \"string\" throw TypeError'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n62 := [ __n63, __n67 ];
__n61["body"] := __n62;
__n60["block"] := __n61;
__n72 := {  };
__n72["type"] := "CatchClause";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "e";
__n72["param"] := __n73;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "instanceof";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "e";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "TypeError";
__n78["right"] := __n80;
__n77["left"] := __n78;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := true;
__n81["raw"] := "true";
__n77["right"] := __n81;
__n76["test"] := __n77;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#3: \"length\" in \"string\" throw TypeError";
__n88["raw"] := "'#3: \"length\" in \"string\" throw TypeError'";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n76["consequent"] := __n82;
__n76["alternate"] := null;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n72["body"] := __n74;
__n60["handler"] := __n72;
__n60["finalizer"] := null;
__n89 := {  };
__n89["type"] := "TryStatement";
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "in";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "toString";
__n94["raw"] := "\"toString\"";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "undefined";
__n93["right"] := __n95;
__n92["expression"] := __n93;
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#4: \"toString\" in undefined throw TypeError";
__n100["raw"] := "'#4: \"toString\" in undefined throw TypeError'";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n91 := [ __n92, __n96 ];
__n90["body"] := __n91;
__n89["block"] := __n90;
__n101 := {  };
__n101["type"] := "CatchClause";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "e";
__n101["param"] := __n102;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "IfStatement";
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "!==";
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "instanceof";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "e";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "TypeError";
__n107["right"] := __n109;
__n106["left"] := __n107;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := true;
__n110["raw"] := "true";
__n106["right"] := __n110;
__n105["test"] := __n106;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#4: \"toString\" in undefined throw TypeError";
__n117["raw"] := "'#4: \"toString\" in undefined throw TypeError'";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n105["consequent"] := __n111;
__n105["alternate"] := null;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n101["body"] := __n103;
__n89["handler"] := __n101;
__n89["finalizer"] := null;
__n118 := {  };
__n118["type"] := "TryStatement";
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "BinaryExpression";
__n122["operator"] := "in";
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "toString";
__n123["raw"] := "\"toString\"";
__n122["left"] := __n123;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 'null;
__n124["raw"] := "\"'null\"";
__n122["right"] := __n124;
__n121["expression"] := __n122;
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "$ERROR";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "#5: \"toString\" in null throw TypeError";
__n129["raw"] := "'#5: \"toString\" in null throw TypeError'";
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["expression"] := __n126;
__n120 := [ __n121, __n125 ];
__n119["body"] := __n120;
__n118["block"] := __n119;
__n130 := {  };
__n130["type"] := "CatchClause";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "e";
__n130["param"] := __n131;
__n132 := {  };
__n132["type"] := "BlockStatement";
__n134 := {  };
__n134["type"] := "IfStatement";
__n135 := {  };
__n135["type"] := "BinaryExpression";
__n135["operator"] := "!==";
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "instanceof";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "e";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "TypeError";
__n136["right"] := __n138;
__n135["left"] := __n136;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := true;
__n139["raw"] := "true";
__n135["right"] := __n139;
__n134["test"] := __n135;
__n140 := {  };
__n140["type"] := "BlockStatement";
__n142 := {  };
__n142["type"] := "ExpressionStatement";
__n143 := {  };
__n143["type"] := "CallExpression";
__n144 := {  };
__n144["type"] := "Identifier";
__n144["name"] := "$ERROR";
__n143["callee"] := __n144;
__n146 := {  };
__n146["type"] := "Literal";
__n146["value"] := "#5: \"toString\" in null throw TypeError";
__n146["raw"] := "'#5: \"toString\" in null throw TypeError'";
__n145 := [ __n146 ];
__n143["arguments"] := __n145;
__n142["expression"] := __n143;
__n141 := [ __n142 ];
__n140["body"] := __n141;
__n134["consequent"] := __n140;
__n134["alternate"] := null;
__n133 := [ __n134 ];
__n132["body"] := __n133;
__n130["body"] := __n132;
__n118["handler"] := __n130;
__n118["finalizer"] := null;
__n1 := [ __n2, __n31, __n60, __n89, __n118 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n147 := [  ];
__n0["variableDeclarations"] := __n147;
__n148 := [  ];
__n0["functionDeclarations"] := __n148;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}