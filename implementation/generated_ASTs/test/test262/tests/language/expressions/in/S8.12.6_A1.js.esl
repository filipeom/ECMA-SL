function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "fooProp";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "fooooooo";
__n10["raw"] := "\"fooooooo\"";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "in";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "fooProp";
__n14["raw"] := "\"fooProp\"";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "__obj";
__n13["right"] := __n15;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: var __obj={fooProp:\"fooooooo\"}; \"fooProp\" in __obj";
__n22["raw"] := "'#1: var __obj={fooProp:\"fooooooo\"}; \"fooProp\" in __obj'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n11["consequent"] := __n16;
__n11["alternate"] := null;
__n1 := [ __n2, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n23 := [ "__obj" ];
__n0["variableDeclarations"] := __n23;
__n24 := [  ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}