function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__proto";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "phylum";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "avis";
__n10["raw"] := "\"avis\"";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "in";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "valueOf";
__n14["raw"] := "\"valueOf\"";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "__proto";
__n13["right"] := __n15;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: var __proto={phylum:\"avis\"}; \"valueOf\" in __proto";
__n22["raw"] := "'#1: var __proto={phylum:\"avis\"}; \"valueOf\" in __proto'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n11["consequent"] := __n16;
__n11["alternate"] := null;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Robin";
__n23["expression"] := __n24;
__n25 := {  };
__n25["type"] := "EmptyStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "AssignmentExpression";
__n27["operator"] := "=";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Robin";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "prototype";
__n30["raw"] := "\"prototype\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__proto";
__n27["right"] := __n31;
__n26["expression"] := __n27;
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__my__robin";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Robin";
__n36["callee"] := __n37;
__n38 := [  ];
__n36["arguments"] := __n38;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "!";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "in";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "phylum";
__n42["raw"] := "\"phylum\"";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__my__robin";
__n41["right"] := __n43;
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n39["test"] := __n40;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#2: var __proto={phylum:\"avis\"}; function Robin(){this.name=\"robin\"}; Robin.prototype=__proto; var __my__robin = new Robin; \"phylum\" in __my__robin";
__n50["raw"] := "'#2: var __proto={phylum:\"avis\"}; function Robin(){this.name=\"robin\"}; Robin.prototype=__proto; var __my__robin = new Robin; \"phylum\" in __my__robin'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n39["consequent"] := __n44;
__n39["alternate"] := null;
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__my__robin";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "hasOwnProperty";
__n55["raw"] := "\"hasOwnProperty\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "phylum";
__n57["raw"] := "\"phylum\"";
__n56 := [ __n57 ];
__n52["arguments"] := __n56;
__n51["test"] := __n52;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: var __proto={phylum:\"avis\"}; function Robin(){this.name=\"robin\"}; Robin.prototype=__proto; var __my__robin = new Robin; __my__robin.hasOwnProperty(\"phylum\") === false. Actual: ";
__n65["raw"] := "'#3: var __proto={phylum:\"avis\"}; function Robin(){this.name=\"robin\"}; Robin.prototype=__proto; var __my__robin = new Robin; __my__robin.hasOwnProperty(\"phylum\") === false. Actual: '";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "MemberExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "__my__robin";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "hasOwnProperty";
__n69["raw"] := "\"hasOwnProperty\"";
__n67["property"] := __n69;
__n67["computed"] := true;
__n66["callee"] := __n67;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "phylum";
__n71["raw"] := "\"phylum\"";
__n70 := [ __n71 ];
__n66["arguments"] := __n70;
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n51["consequent"] := __n58;
__n51["alternate"] := null;
__n1 := [ __n2, __n11, __n23, __n25, __n26, __n32, __n39, __n51 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n72 := [ "__proto", "__my__robin" ];
__n0["variableDeclarations"] := __n72;
__n74 := {  };
__n74["type"] := "FunctionDeclaration";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Robin";
__n74["id"] := __n75;
__n76 := [  ];
__n74["params"] := __n76;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "AssignmentExpression";
__n80["operator"] := "=";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "ThisExpression";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "name";
__n83["raw"] := "\"name\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "robin";
__n84["raw"] := "\"robin\"";
__n80["right"] := __n84;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n85 := [  ];
__n77["variableDeclarations"] := __n85;
__n86 := [  ];
__n77["functionDeclarations"] := __n86;
__n77["codeType"] := "function";
__n77["strict"] := false;
__n74["body"] := __n77;
__n74["generator"] := false;
__n74["expression"] := false;
__n74["async"] := false;
__n73 := [ __n74 ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}