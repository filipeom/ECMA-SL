function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "instanceof";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "object";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "SequenceExpression";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "object";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "ObjectExpression";
__n13 := [  ];
__n12["properties"] := __n13;
__n10["right"] := __n12;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Object";
__n9 := [ __n10, __n14 ];
__n8["expressions"] := __n9;
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1.1: object instanceof (object = {}, Object) throw ReferenceError. Actual: ";
__n20["raw"] := "'#1.1: object instanceof (object = {}, Object) throw ReferenceError. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "instanceof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "object";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "SequenceExpression";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "object";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "ObjectExpression";
__n28 := [  ];
__n27["properties"] := __n28;
__n25["right"] := __n27;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Object";
__n24 := [ __n25, __n29 ];
__n23["expressions"] := __n24;
__n21["right"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n4 := [ __n5, __n15 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n30 := {  };
__n30["type"] := "CatchClause";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["param"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "!==";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "instanceof";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "e";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "ReferenceError";
__n36["right"] := __n38;
__n35["left"] := __n36;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n35["right"] := __n39;
__n34["test"] := __n35;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#1.2: object instanceof (object = {}, Object) throw ReferenceError. Actual: ";
__n47["raw"] := "'#1.2: object instanceof (object = {}, Object) throw ReferenceError. Actual: '";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "e";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n34["consequent"] := __n40;
__n34["alternate"] := null;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n30["body"] := __n32;
__n2["handler"] := __n30;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n49 := [  ];
__n0["variableDeclarations"] := __n49;
__n50 := [  ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}