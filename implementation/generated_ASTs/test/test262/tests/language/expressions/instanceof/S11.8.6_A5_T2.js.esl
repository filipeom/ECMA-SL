function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__t__err";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "TypeError";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "!";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "instanceof";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__t__err";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Error";
__n11["right"] := __n13;
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["test"] := __n10;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: TypeError is subclass of Error from instanceof operator point of view";
__n20["raw"] := "'#1: TypeError is subclass of Error from instanceof operator point of view'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n9["consequent"] := __n14;
__n9["alternate"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "!";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "instanceof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__t__err";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "TypeError";
__n23["right"] := __n25;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["test"] := __n22;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: TypeError is subclass of Error from instanceof operator point of view";
__n32["raw"] := "'#2: TypeError is subclass of Error from instanceof operator point of view'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n21["consequent"] := __n26;
__n21["alternate"] := null;
__n33 := {  };
__n33["type"] := "VariableDeclaration";
__n35 := {  };
__n35["type"] := "VariableDeclarator";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "err__t__";
__n35["id"] := __n36;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "TypeError";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "failed";
__n40["raw"] := "'failed'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n35["init"] := __n37;
__n34 := [ __n35 ];
__n33["declarations"] := __n34;
__n33["kind"] := "var";
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "!";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "instanceof";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "err__t__";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Error";
__n43["right"] := __n45;
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["test"] := __n42;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: TypeError is subclass of Error from instanceof operator point of view";
__n52["raw"] := "'#3: TypeError is subclass of Error from instanceof operator point of view'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n41["consequent"] := __n46;
__n41["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "UnaryExpression";
__n54["operator"] := "!";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "instanceof";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "err__t__";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "TypeError";
__n55["right"] := __n57;
__n54["argument"] := __n55;
__n54["prefix"] := true;
__n53["test"] := __n54;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#4: TypeError is subclass of Error from instanceof operator point of view";
__n64["raw"] := "'#4: TypeError is subclass of Error from instanceof operator point of view'";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n53["consequent"] := __n58;
__n53["alternate"] := null;
__n1 := [ __n2, __n9, __n21, __n33, __n41, __n53 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n65 := [ "__t__err", "err__t__" ];
__n0["variableDeclarations"] := __n65;
__n66 := [  ];
__n0["functionDeclarations"] := __n66;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}