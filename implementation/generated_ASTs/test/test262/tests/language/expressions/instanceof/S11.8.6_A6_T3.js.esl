function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "MyFunct";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "instanceof";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "MyFunct";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "MyFunct";
__n6["right"] := __n8;
__n5["test"] := __n6;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1 function MyFunct(){return 0}; MyFunct instanceof MyFunct === false";
__n15["raw"] := "'#1 function MyFunct(){return 0}; MyFunct instanceof MyFunct === false'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n5["consequent"] := __n9;
__n5["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "instanceof";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "MyFunct";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Function";
__n18["right"] := __n20;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := true;
__n21["raw"] := "true";
__n17["right"] := __n21;
__n16["test"] := __n17;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2 function MyFunct(){return 0}; MyFunct instanceof Function === true";
__n28["raw"] := "'#2 function MyFunct(){return 0}; MyFunct instanceof Function === true'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n16["consequent"] := __n22;
__n16["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "instanceof";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "MyFunct";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Object";
__n31["right"] := __n33;
__n30["left"] := __n31;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n30["right"] := __n34;
__n29["test"] := __n30;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#3 function MyFunct(){return 0}; MyFunct instanceof Object === true";
__n41["raw"] := "'#3 function MyFunct(){return 0}; MyFunct instanceof Object === true'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n29["consequent"] := __n35;
__n29["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n16, __n29 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n44 := {  };
__n44["type"] := "FunctionDeclaration";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "MyFunct";
__n44["id"] := __n45;
__n46 := [  ];
__n44["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ReturnStatement";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 0.;
__n50["raw"] := "0";
__n49["argument"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n51 := [  ];
__n47["variableDeclarations"] := __n51;
__n52 := [  ];
__n47["functionDeclarations"] := __n52;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n44["body"] := __n47;
__n44["generator"] := false;
__n44["expression"] := false;
__n44["async"] := false;
__n43 := [ __n44 ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}