function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "MyFunct";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n9 := [  ];
__n8["body"] := __n9;
__n10 := [  ];
__n8["variableDeclarations"] := __n10;
__n11 := [  ];
__n8["functionDeclarations"] := __n11;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "__my__funct";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "NewExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "MyFunct";
__n16["callee"] := __n17;
__n18 := [  ];
__n16["arguments"] := __n18;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "!";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "instanceof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__my__funct";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "MyFunct";
__n21["right"] := __n23;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["test"] := __n20;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator";
__n30["raw"] := "'#1 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n19["consequent"] := __n24;
__n19["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "instanceof";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__my__funct";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Function";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator";
__n41["raw"] := "'#2 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "!";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "instanceof";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__my__funct";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Object";
__n44["right"] := __n46;
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42["test"] := __n43;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#3 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator";
__n53["raw"] := "'#3 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator'";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n42["consequent"] := __n47;
__n42["alternate"] := null;
__n54 := {  };
__n54["type"] := "TryStatement";
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "instanceof";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__my__funct";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "__my__funct";
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#4 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator";
__n65["raw"] := "'#4 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n56 := [ __n57, __n61 ];
__n55["body"] := __n56;
__n54["block"] := __n55;
__n66 := {  };
__n66["type"] := "CatchClause";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "e";
__n66["param"] := __n67;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "instanceof";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "e";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "TypeError";
__n72["right"] := __n74;
__n71["left"] := __n72;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n71["right"] := __n75;
__n70["test"] := __n71;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#4 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator";
__n82["raw"] := "'#4 Only Function objects implement [[HasInstance]] and consequently can be proper ShiftExpression for The instanceof operator'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n70["consequent"] := __n76;
__n70["alternate"] := null;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n66["body"] := __n68;
__n54["handler"] := __n66;
__n54["finalizer"] := null;
__n1 := [ __n2, __n12, __n19, __n31, __n42, __n54 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n83 := [ "MyFunct", "__my__funct" ];
__n0["variableDeclarations"] := __n83;
__n84 := [  ];
__n0["functionDeclarations"] := __n84;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}