function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "FACTORY";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "FACTORY";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "NewExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Function";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "AssignmentExpression";
__n13["operator"] := "=";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "FACTORY";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "prototype";
__n16["raw"] := "\"prototype\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["left"] := __n14;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "error";
__n17["raw"] := "\"error\"";
__n13["right"] := __n17;
__n12["expression"] := __n13;
__n18 := {  };
__n18["type"] := "TryStatement";
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "instanceof";
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n26 := [  ];
__n25["body"] := __n26;
__n27 := [  ];
__n25["variableDeclarations"] := __n27;
__n28 := [  ];
__n25["functionDeclarations"] := __n28;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["expression"] := false;
__n23["async"] := false;
__n22["left"] := __n23;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "FACTORY";
__n22["right"] := __n29;
__n21["expression"] := __n22;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1: O is not an object, throw a TypeError exception";
__n34["raw"] := "'#1: O is not an object, throw a TypeError exception'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n20 := [ __n21, __n30 ];
__n19["body"] := __n20;
__n18["block"] := __n19;
__n35 := {  };
__n35["type"] := "CatchClause";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["param"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "!";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "instanceof";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "TypeError";
__n41["right"] := __n43;
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n39["test"] := __n40;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#1.1: O is not an object, throw a TypeError exception";
__n50["raw"] := "'#1.1: O is not an object, throw a TypeError exception'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n39["consequent"] := __n44;
__n39["alternate"] := null;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n35["body"] := __n37;
__n18["handler"] := __n35;
__n18["finalizer"] := null;
__n1 := [ __n2, __n6, __n12, __n18 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n51 := [ "FACTORY" ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}