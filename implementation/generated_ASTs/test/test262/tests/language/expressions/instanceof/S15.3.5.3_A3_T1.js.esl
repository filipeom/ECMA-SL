function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "FACTORY";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "FACTORY";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Function";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "this.name=\"root\"";
__n12["raw"] := "\"this.name=\\\"root\\\"\"";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "AssignmentExpression";
__n14["operator"] := "=";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "FACTORY";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "prototype";
__n18["raw"] := "\"prototype\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "type";
__n19["raw"] := "\"type\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["left"] := __n15;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n14["right"] := __n20;
__n13["expression"] := __n14;
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "instance";
__n23["id"] := __n24;
__n23["init"] := null;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "instance";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "NewExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "FACTORY";
__n28["callee"] := __n29;
__n30 := [  ];
__n28["arguments"] := __n30;
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "!";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "instanceof";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "instance";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "FACTORY";
__n33["right"] := __n35;
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["test"] := __n32;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#1: If O and V refer to the same object or if they refer to objects joined to each other (13.1.2), return true";
__n42["raw"] := "'#1: If O and V refer to the same object or if they refer to objects joined to each other (13.1.2), return true'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n31["consequent"] := __n36;
__n31["alternate"] := null;
__n1 := [ __n2, __n6, __n13, __n21, __n25, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n43 := [ "FACTORY", "instance" ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}