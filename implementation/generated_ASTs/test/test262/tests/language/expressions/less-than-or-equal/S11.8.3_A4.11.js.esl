function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "<=";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "x";
__n5["raw"] := "\"x\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "x";
__n6["raw"] := "\"x\"";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := true;
__n7["raw"] := "true";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: (\"x\" <= \"x\") === true";
__n14["raw"] := "'#1: (\"x\" <= \"x\") === true'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "<=";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "";
__n18["raw"] := "\"\"";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "x";
__n19["raw"] := "\"x\"";
__n17["right"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: (\"\" <= \"x\") === true";
__n27["raw"] := "'#2: (\"\" <= \"x\") === true'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "<=";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "ab";
__n31["raw"] := "\"ab\"";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "abcd";
__n32["raw"] := "\"abcd\"";
__n30["right"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#3: (\"ab\" <= abcd\") === true";
__n40["raw"] := "'#3: (\"ab\" <= abcd\") === true'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "<=";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "abcd";
__n44["raw"] := "\"abcd\"";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "abcd";
__n45["raw"] := "\"abc\\u0064\"";
__n43["right"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := true;
__n46["raw"] := "true";
__n42["right"] := __n46;
__n41["test"] := __n42;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#4: (\"abcd\" <= abc\\u0064\") === true";
__n53["raw"] := "'#4: (\"abcd\" <= abc\\\\u0064\") === true'";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n41["consequent"] := __n47;
__n41["alternate"] := null;
__n54 := {  };
__n54["type"] := "IfStatement";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "!==";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "<=";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "x";
__n57["raw"] := "\"x\"";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "x";
__n59["raw"] := "\"x\"";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "y";
__n60["raw"] := "\"y\"";
__n58["right"] := __n60;
__n56["right"] := __n58;
__n55["left"] := __n56;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := true;
__n61["raw"] := "true";
__n55["right"] := __n61;
__n54["test"] := __n55;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#5: (\"x\" <= \"x\" + \"y\") === true";
__n68["raw"] := "'#5: (\"x\" <= \"x\" + \"y\") === true'";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n54["consequent"] := __n62;
__n54["alternate"] := null;
__n69 := {  };
__n69["type"] := "VariableDeclaration";
__n71 := {  };
__n71["type"] := "VariableDeclarator";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "x";
__n71["id"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "x";
__n73["raw"] := "\"x\"";
__n71["init"] := __n73;
__n70 := [ __n71 ];
__n69["declarations"] := __n70;
__n69["kind"] := "var";
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "<=";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "+";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "x";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "y";
__n80["raw"] := "\"y\"";
__n78["right"] := __n80;
__n76["right"] := __n78;
__n75["left"] := __n76;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := true;
__n81["raw"] := "true";
__n75["right"] := __n81;
__n74["test"] := __n75;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#6: var x = \"x\"; (x <= x + \"y\") === true";
__n88["raw"] := "'#6: var x = \"x\"; (x <= x + \"y\") === true'";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n74["consequent"] := __n82;
__n74["alternate"] := null;
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "!==";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "<=";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "a ";
__n92["raw"] := "\"a\\u0000\"";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "a a";
__n93["raw"] := "\"a\\u0000a\"";
__n91["right"] := __n93;
__n90["left"] := __n91;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := true;
__n94["raw"] := "true";
__n90["right"] := __n94;
__n89["test"] := __n90;
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "$ERROR";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "#7: (\"a\\u0000\" <= \"a\\u0000a\") === true";
__n101["raw"] := "'#7: (\"a\\\\u0000\" <= \"a\\\\u0000a\") === true'";
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n96 := [ __n97 ];
__n95["body"] := __n96;
__n89["consequent"] := __n95;
__n89["alternate"] := null;
__n102 := {  };
__n102["type"] := "IfStatement";
__n103 := {  };
__n103["type"] := "BinaryExpression";
__n103["operator"] := "!==";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "<=";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "x";
__n105["raw"] := "\"x\"";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := " x";
__n106["raw"] := "\" x\"";
__n104["right"] := __n106;
__n103["left"] := __n104;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := false;
__n107["raw"] := "false";
__n103["right"] := __n107;
__n102["test"] := __n103;
__n108 := {  };
__n108["type"] := "BlockStatement";
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "$ERROR";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#8: (\"x\" <= \" x\") === false";
__n114["raw"] := "'#8: (\"x\" <= \" x\") === false'";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["expression"] := __n111;
__n109 := [ __n110 ];
__n108["body"] := __n109;
__n102["consequent"] := __n108;
__n102["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n41, __n54, __n69, __n74, __n89, __n102 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n115 := [ "x" ];
__n0["variableDeclarations"] := __n115;
__n116 := [  ];
__n0["functionDeclarations"] := __n116;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}