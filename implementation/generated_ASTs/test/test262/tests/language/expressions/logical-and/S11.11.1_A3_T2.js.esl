function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "&&";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "-";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["left"] := __n5;
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.;
__n8["raw"] := "1";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n4["right"] := __n7;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1.1: (-0 && -1) === 0";
__n16["raw"] := "'#1.1: (-0 && -1) === 0'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "/";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "LogicalExpression";
__n23["operator"] := "&&";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.;
__n25["raw"] := "0";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["left"] := __n24;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n23["right"] := __n26;
__n21["right"] := __n23;
__n20["left"] := __n21;
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Number";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "NEGATIVE_INFINITY";
__n30["raw"] := "\"NEGATIVE_INFINITY\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n20["right"] := __n28;
__n19["test"] := __n20;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1.2: (-0 && -1) === -0";
__n37["raw"] := "'#1.2: (-0 && -1) === -0'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n19["consequent"] := __n31;
__n19["alternate"] := null;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n2["alternate"] := __n17;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "LogicalExpression";
__n40["operator"] := "&&";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "NewExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Number";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "-";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.;
__n46["raw"] := "1";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n40["right"] := __n42;
__n39["left"] := __n40;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n39["right"] := __n47;
__n38["test"] := __n39;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2.1: (0 && new Number(-1)) === 0";
__n54["raw"] := "'#2.1: (0 && new Number(-1)) === 0'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n38["consequent"] := __n48;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "/";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "LogicalExpression";
__n61["operator"] := "&&";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 0.;
__n62["raw"] := "0";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "NewExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "Number";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "-";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n61["right"] := __n63;
__n59["right"] := __n61;
__n58["left"] := __n59;
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Number";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "POSITIVE_INFINITY";
__n70["raw"] := "\"POSITIVE_INFINITY\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n58["right"] := __n68;
__n57["test"] := __n58;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#2.2: (0 && new Number(-1)) === +0";
__n77["raw"] := "'#2.2: (0 && new Number(-1)) === +0'";
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n57["consequent"] := __n71;
__n57["alternate"] := null;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n38["alternate"] := __n55;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!==";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "isNaN";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "LogicalExpression";
__n83["operator"] := "&&";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "NaN";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 1.;
__n85["raw"] := "1";
__n83["right"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["left"] := __n80;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := true;
__n86["raw"] := "true";
__n79["right"] := __n86;
__n78["test"] := __n79;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#3: (NaN && 1) === Not-a-Number";
__n93["raw"] := "'#3: (NaN && 1) === Not-a-Number'";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n78["consequent"] := __n87;
__n78["alternate"] := null;
__n1 := [ __n2, __n38, __n78 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n94 := [  ];
__n0["variableDeclarations"] := __n94;
__n95 := [  ];
__n0["functionDeclarations"] := __n95;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}