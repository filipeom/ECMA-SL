function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "&&";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "";
__n5["raw"] := "\"\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "";
__n7["raw"] := "\"\"";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: (\"\" && \"1\") === \"\"";
__n14["raw"] := "'#1: (\"\" && \"1\") === \"\"'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "LogicalExpression";
__n17["operator"] := "&&";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "";
__n18["raw"] := "\"\"";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "String";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "1";
__n22["raw"] := "\"1\"";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n17["right"] := __n19;
__n16["left"] := __n17;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "";
__n23["raw"] := "\"\"";
__n16["right"] := __n23;
__n15["test"] := __n16;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#2: (\"\" && new String(\"1\")) === \"\"";
__n30["raw"] := "'#2: (\"\" && new String(\"1\")) === \"\"'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n15["consequent"] := __n24;
__n15["alternate"] := null;
__n1 := [ __n2, __n15 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n31 := [  ];
__n0["variableDeclarations"] := __n31;
__n32 := [  ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}