function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "&&";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := true;
__n5["raw"] := "true";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := true;
__n7["raw"] := "true";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: (true && true) === true";
__n14["raw"] := "'#1: (true && true) === true'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "LogicalExpression";
__n17["operator"] := "&&";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := true;
__n18["raw"] := "true";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := false;
__n19["raw"] := "false";
__n17["right"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := false;
__n20["raw"] := "false";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: (true && false) === false";
__n27["raw"] := "'#2: (true && false) === false'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "y";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Boolean";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "LogicalExpression";
__n38["operator"] := "&&";
__n39 := {  };
__n39["type"] := "NewExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Boolean";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := true;
__n42["raw"] := "true";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["left"] := __n39;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "y";
__n38["right"] := __n43;
__n37["left"] := __n38;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "y";
__n37["right"] := __n44;
__n36["test"] := __n37;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#3: (var y = new Boolean(true); (new Boolean(true) &&  y) === y";
__n51["raw"] := "'#3: (var y = new Boolean(true); (new Boolean(true) &&  y) === y'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n36["consequent"] := __n45;
__n36["alternate"] := null;
__n52 := {  };
__n52["type"] := "VariableDeclaration";
__n54 := {  };
__n54["type"] := "VariableDeclarator";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "y";
__n54["id"] := __n55;
__n56 := {  };
__n56["type"] := "NewExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "Boolean";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := false;
__n59["raw"] := "false";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n54["init"] := __n56;
__n53 := [ __n54 ];
__n52["declarations"] := __n53;
__n52["kind"] := "var";
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "LogicalExpression";
__n62["operator"] := "&&";
__n63 := {  };
__n63["type"] := "NewExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "Boolean";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := true;
__n66["raw"] := "true";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["left"] := __n63;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "y";
__n62["right"] := __n67;
__n61["left"] := __n62;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "y";
__n61["right"] := __n68;
__n60["test"] := __n61;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: (var y = new Boolean(false); (new Boolean(true) &&  y) === y";
__n75["raw"] := "'#4: (var y = new Boolean(false); (new Boolean(true) &&  y) === y'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n60["consequent"] := __n69;
__n60["alternate"] := null;
__n76 := {  };
__n76["type"] := "VariableDeclaration";
__n78 := {  };
__n78["type"] := "VariableDeclarator";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "y";
__n78["id"] := __n79;
__n80 := {  };
__n80["type"] := "NewExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Boolean";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := true;
__n83["raw"] := "true";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n78["init"] := __n80;
__n77 := [ __n78 ];
__n76["declarations"] := __n77;
__n76["kind"] := "var";
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "!==";
__n86 := {  };
__n86["type"] := "LogicalExpression";
__n86["operator"] := "&&";
__n87 := {  };
__n87["type"] := "NewExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "Boolean";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := false;
__n90["raw"] := "false";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["left"] := __n87;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "y";
__n86["right"] := __n91;
__n85["left"] := __n86;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "y";
__n85["right"] := __n92;
__n84["test"] := __n85;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#5: (var y = new Boolean(true); (new Boolean(false) &&  y) === y";
__n99["raw"] := "'#5: (var y = new Boolean(true); (new Boolean(false) &&  y) === y'";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n84["consequent"] := __n93;
__n84["alternate"] := null;
__n100 := {  };
__n100["type"] := "VariableDeclaration";
__n102 := {  };
__n102["type"] := "VariableDeclarator";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "y";
__n102["id"] := __n103;
__n104 := {  };
__n104["type"] := "NewExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "Boolean";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := false;
__n107["raw"] := "false";
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n102["init"] := __n104;
__n101 := [ __n102 ];
__n100["declarations"] := __n101;
__n100["kind"] := "var";
__n108 := {  };
__n108["type"] := "IfStatement";
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "!==";
__n110 := {  };
__n110["type"] := "LogicalExpression";
__n110["operator"] := "&&";
__n111 := {  };
__n111["type"] := "NewExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "Boolean";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := false;
__n114["raw"] := "false";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["left"] := __n111;
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "y";
__n110["right"] := __n115;
__n109["left"] := __n110;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "y";
__n109["right"] := __n116;
__n108["test"] := __n109;
__n117 := {  };
__n117["type"] := "BlockStatement";
__n119 := {  };
__n119["type"] := "ExpressionStatement";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "$ERROR";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "#6: (var y = new Boolean(false); (new Boolean(false) &&  y) === y";
__n123["raw"] := "'#6: (var y = new Boolean(false); (new Boolean(false) &&  y) === y'";
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["expression"] := __n120;
__n118 := [ __n119 ];
__n117["body"] := __n118;
__n108["consequent"] := __n117;
__n108["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n36, __n52, __n60, __n76, __n84, __n100, __n108 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n124 := [ "y" ];
__n0["variableDeclarations"] := __n124;
__n125 := [  ];
__n0["functionDeclarations"] := __n125;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}