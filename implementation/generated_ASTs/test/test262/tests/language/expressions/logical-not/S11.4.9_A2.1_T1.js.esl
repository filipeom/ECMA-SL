function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "!";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := true;
__n5["raw"] := "true";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: !true === false";
__n13["raw"] := "'#1: !true === false'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "!";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "!";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := true;
__n18["raw"] := "true";
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n15["right"] := __n19;
__n14["test"] := __n15;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#2: !(!true) === true";
__n26["raw"] := "'#2: !(!true) === true'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n14["consequent"] := __n20;
__n14["alternate"] := null;
__n27 := {  };
__n27["type"] := "VariableDeclaration";
__n29 := {  };
__n29["type"] := "VariableDeclarator";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["id"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n29["init"] := __n31;
__n28 := [ __n29 ];
__n27["declarations"] := __n28;
__n27["kind"] := "var";
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "!";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "x";
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n33["left"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := false;
__n36["raw"] := "false";
__n33["right"] := __n36;
__n32["test"] := __n33;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#3: var x = true; !x === false";
__n43["raw"] := "'#3: var x = true; !x === false'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n32["consequent"] := __n37;
__n32["alternate"] := null;
__n44 := {  };
__n44["type"] := "VariableDeclaration";
__n46 := {  };
__n46["type"] := "VariableDeclarator";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n46["id"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n46["init"] := __n48;
__n45 := [ __n46 ];
__n44["declarations"] := __n45;
__n44["kind"] := "var";
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "!";
__n52 := {  };
__n52["type"] := "UnaryExpression";
__n52["operator"] := "!";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n52["argument"] := __n53;
__n52["prefix"] := true;
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n50["left"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := true;
__n54["raw"] := "true";
__n50["right"] := __n54;
__n49["test"] := __n50;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#4: var x = true; !(!x) === true";
__n61["raw"] := "'#4: var x = true; !(!x) === true'";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n49["consequent"] := __n55;
__n49["alternate"] := null;
__n62 := {  };
__n62["type"] := "VariableDeclaration";
__n64 := {  };
__n64["type"] := "VariableDeclarator";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "object";
__n64["id"] := __n65;
__n66 := {  };
__n66["type"] := "NewExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "Object";
__n66["callee"] := __n67;
__n68 := [  ];
__n66["arguments"] := __n68;
__n64["init"] := __n66;
__n63 := [ __n64 ];
__n62["declarations"] := __n63;
__n62["kind"] := "var";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "AssignmentExpression";
__n70["operator"] := "=";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "object";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "prop";
__n73["raw"] := "\"prop\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n70["left"] := __n71;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := true;
__n74["raw"] := "true";
__n70["right"] := __n74;
__n69["expression"] := __n70;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "!";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "object";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "prop";
__n80["raw"] := "\"prop\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["left"] := __n77;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := false;
__n81["raw"] := "false";
__n76["right"] := __n81;
__n75["test"] := __n76;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#5: var object = new Object(); object.prop = true; !object.prop === false";
__n88["raw"] := "'#5: var object = new Object(); object.prop = true; !object.prop === false'";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n75["consequent"] := __n82;
__n75["alternate"] := null;
__n1 := [ __n2, __n14, __n27, __n32, __n44, __n49, __n62, __n69, __n75 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n89 := [ "x", "object" ];
__n0["variableDeclarations"] := __n89;
__n90 := [  ];
__n0["functionDeclarations"] := __n90;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}