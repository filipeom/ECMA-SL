function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "!";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := false;
__n5["raw"] := "false";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: !false === true";
__n13["raw"] := "'#1: !false === true'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "!";
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Boolean";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["left"] := __n16;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := false;
__n21["raw"] := "false";
__n15["right"] := __n21;
__n14["test"] := __n15;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2: !new Boolean(true) === false";
__n28["raw"] := "'#2: !new Boolean(true) === false'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n14["consequent"] := __n22;
__n14["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "!";
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Boolean";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := false;
__n35["raw"] := "false";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["left"] := __n31;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := false;
__n36["raw"] := "false";
__n30["right"] := __n36;
__n29["test"] := __n30;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#3: !new Boolean(false) === false";
__n43["raw"] := "'#3: !new Boolean(false) === false'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n29["consequent"] := __n37;
__n29["alternate"] := null;
__n1 := [ __n2, __n14, __n29 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n44 := [  ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}