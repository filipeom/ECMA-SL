function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "!";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 0.1;
__n5["raw"] := "0.1";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: !0.1 === false";
__n13["raw"] := "'#1: !0.1 === false'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "!";
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Number";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "-";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 0.1;
__n21["raw"] := "0.1";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["left"] := __n16;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := false;
__n22["raw"] := "false";
__n15["right"] := __n22;
__n14["test"] := __n15;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#2: !new Number(-0.1) === false";
__n29["raw"] := "'#2: !new Number(-0.1) === false'";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n14["consequent"] := __n23;
__n14["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "!";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "NaN";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["left"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n31["right"] := __n34;
__n30["test"] := __n31;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#3: !NaN === true";
__n41["raw"] := "'#3: !NaN === true'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n30["consequent"] := __n35;
__n30["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "!";
__n45 := {  };
__n45["type"] := "NewExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Number";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "NaN";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n43["left"] := __n44;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := false;
__n49["raw"] := "false";
__n43["right"] := __n49;
__n42["test"] := __n43;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#4: !new Number(NaN) === false";
__n56["raw"] := "'#4: !new Number(NaN) === false'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n42["consequent"] := __n50;
__n42["alternate"] := null;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "!";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n58["left"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := true;
__n61["raw"] := "true";
__n58["right"] := __n61;
__n57["test"] := __n58;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#5: !0 === true";
__n68["raw"] := "'#5: !0 === true'";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n57["consequent"] := __n62;
__n57["alternate"] := null;
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "UnaryExpression";
__n71["operator"] := "!";
__n72 := {  };
__n72["type"] := "NewExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "Number";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 0.;
__n75["raw"] := "0";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["argument"] := __n72;
__n71["prefix"] := true;
__n70["left"] := __n71;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := false;
__n76["raw"] := "false";
__n70["right"] := __n76;
__n69["test"] := __n70;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "#6: !new Number(0) === false";
__n83["raw"] := "'#6: !new Number(0) === false'";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n69["consequent"] := __n77;
__n69["alternate"] := null;
__n84 := {  };
__n84["type"] := "IfStatement";
__n85 := {  };
__n85["type"] := "BinaryExpression";
__n85["operator"] := "!==";
__n86 := {  };
__n86["type"] := "UnaryExpression";
__n86["operator"] := "!";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Infinity";
__n86["argument"] := __n87;
__n86["prefix"] := true;
__n85["left"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := false;
__n88["raw"] := "false";
__n85["right"] := __n88;
__n84["test"] := __n85;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#7: !Infinity === false";
__n95["raw"] := "'#7: !Infinity === false'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n84["consequent"] := __n89;
__n84["alternate"] := null;
__n1 := [ __n2, __n14, __n30, __n42, __n57, __n69, __n84 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n96 := [  ];
__n0["variableDeclarations"] := __n96;
__n97 := [  ];
__n0["functionDeclarations"] := __n97;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}