function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "||";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 0.;
__n5["raw"] := "0";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "-";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["right"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1.1: (0 || -0) === 0";
__n15["raw"] := "'#1.1: (0 || -0) === 0'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "/";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "LogicalExpression";
__n22["operator"] := "||";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.;
__n25["raw"] := "0";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n22["right"] := __n24;
__n20["right"] := __n22;
__n19["left"] := __n20;
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Number";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "NEGATIVE_INFINITY";
__n28["raw"] := "\"NEGATIVE_INFINITY\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n19["right"] := __n26;
__n18["test"] := __n19;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1.2: (0 || -0) === -0";
__n35["raw"] := "'#1.2: (0 || -0) === -0'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n18["consequent"] := __n29;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n2["alternate"] := __n16;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "LogicalExpression";
__n38["operator"] := "||";
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.;
__n40["raw"] := "0";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n38["left"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n38["right"] := __n41;
__n37["left"] := __n38;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.;
__n42["raw"] := "0";
__n37["right"] := __n42;
__n36["test"] := __n37;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2.1: (-0 || 0) === 0";
__n49["raw"] := "'#2.1: (-0 || 0) === 0'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n36["consequent"] := __n43;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "!==";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "/";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 1.;
__n55["raw"] := "1";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "LogicalExpression";
__n56["operator"] := "||";
__n57 := {  };
__n57["type"] := "UnaryExpression";
__n57["operator"] := "-";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n56["left"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n56["right"] := __n59;
__n54["right"] := __n56;
__n53["left"] := __n54;
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "Number";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "POSITIVE_INFINITY";
__n62["raw"] := "\"POSITIVE_INFINITY\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n53["right"] := __n60;
__n52["test"] := __n53;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#2.2: (-0 || 0) === +0";
__n69["raw"] := "'#2.2: (-0 || 0) === +0'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n52["consequent"] := __n63;
__n52["alternate"] := null;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n36["alternate"] := __n50;
__n70 := {  };
__n70["type"] := "VariableDeclaration";
__n72 := {  };
__n72["type"] := "VariableDeclarator";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "y";
__n72["id"] := __n73;
__n74 := {  };
__n74["type"] := "NewExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Number";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "-";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 1.;
__n78["raw"] := "1";
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n72["init"] := __n74;
__n71 := [ __n72 ];
__n70["declarations"] := __n71;
__n70["kind"] := "var";
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "!==";
__n81 := {  };
__n81["type"] := "LogicalExpression";
__n81["operator"] := "||";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := 0.;
__n82["raw"] := "0";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "y";
__n81["right"] := __n83;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "y";
__n80["right"] := __n84;
__n79["test"] := __n80;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#3: (var y = new Number(-1); 0 || y) === y";
__n91["raw"] := "'#3: (var y = new Number(-1); 0 || y) === y'";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n79["consequent"] := __n85;
__n79["alternate"] := null;
__n92 := {  };
__n92["type"] := "VariableDeclaration";
__n94 := {  };
__n94["type"] := "VariableDeclarator";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "y";
__n94["id"] := __n95;
__n96 := {  };
__n96["type"] := "NewExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Number";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 0.;
__n99["raw"] := "0";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n94["init"] := __n96;
__n93 := [ __n94 ];
__n92["declarations"] := __n93;
__n92["kind"] := "var";
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "!==";
__n102 := {  };
__n102["type"] := "LogicalExpression";
__n102["operator"] := "||";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "NaN";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "y";
__n102["right"] := __n104;
__n101["left"] := __n102;
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "y";
__n101["right"] := __n105;
__n100["test"] := __n101;
__n106 := {  };
__n106["type"] := "BlockStatement";
__n108 := {  };
__n108["type"] := "ExpressionStatement";
__n109 := {  };
__n109["type"] := "CallExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "$ERROR";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "#4: (var y = new Number(0); NaN || y) === y";
__n112["raw"] := "'#4: (var y = new Number(0); NaN || y) === y'";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n108["expression"] := __n109;
__n107 := [ __n108 ];
__n106["body"] := __n107;
__n100["consequent"] := __n106;
__n100["alternate"] := null;
__n1 := [ __n2, __n36, __n70, __n79, __n92, __n100 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n113 := [ "y" ];
__n0["variableDeclarations"] := __n113;
__n114 := [  ];
__n0["functionDeclarations"] := __n114;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}