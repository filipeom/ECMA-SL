function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "||";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "-";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["left"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n4["right"] := __n7;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "-";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: (-1 || 1) === -1";
__n16["raw"] := "'#1: (-1 || 1) === -1'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "LogicalExpression";
__n19["operator"] := "||";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "NewExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Number";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n19["right"] := __n21;
__n18["left"] := __n19;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n18["right"] := __n25;
__n17["test"] := __n18;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: (1 || new Number(0)) === 1";
__n32["raw"] := "'#2: (1 || new Number(0)) === 1'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n17["consequent"] := __n26;
__n17["alternate"] := null;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "LogicalExpression";
__n35["operator"] := "||";
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "-";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n35["left"] := __n36;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "NaN";
__n35["right"] := __n38;
__n34["left"] := __n35;
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n34["right"] := __n39;
__n33["test"] := __n34;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#3: (-1 || NaN) === -1";
__n47["raw"] := "'#3: (-1 || NaN) === -1'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n33["consequent"] := __n41;
__n33["alternate"] := null;
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "x";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "NewExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "UnaryExpression";
__n55["operator"] := "-";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.;
__n56["raw"] := "1";
__n55["argument"] := __n56;
__n55["prefix"] := true;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "LogicalExpression";
__n59["operator"] := "||";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "x";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n59["right"] := __n61;
__n58["left"] := __n59;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n58["right"] := __n65;
__n57["test"] := __n58;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#4: (var x = new Number(-1); (x || new Number(-1)) === x";
__n72["raw"] := "'#4: (var x = new Number(-1); (x || new Number(-1)) === x'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n57["consequent"] := __n66;
__n57["alternate"] := null;
__n73 := {  };
__n73["type"] := "VariableDeclaration";
__n75 := {  };
__n75["type"] := "VariableDeclarator";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "x";
__n75["id"] := __n76;
__n77 := {  };
__n77["type"] := "NewExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "Number";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "NaN";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n75["init"] := __n77;
__n74 := [ __n75 ];
__n73["declarations"] := __n74;
__n73["kind"] := "var";
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "!==";
__n83 := {  };
__n83["type"] := "LogicalExpression";
__n83["operator"] := "||";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "x";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "NewExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Number";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n83["right"] := __n85;
__n82["left"] := __n83;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "x";
__n82["right"] := __n89;
__n81["test"] := __n82;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "#5: (var x = new Number(NaN); (x || new Number(1)) === x";
__n96["raw"] := "'#5: (var x = new Number(NaN); (x || new Number(1)) === x'";
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n81["consequent"] := __n90;
__n81["alternate"] := null;
__n97 := {  };
__n97["type"] := "VariableDeclaration";
__n99 := {  };
__n99["type"] := "VariableDeclarator";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "x";
__n99["id"] := __n100;
__n101 := {  };
__n101["type"] := "NewExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Number";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 0.;
__n104["raw"] := "0";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n99["init"] := __n101;
__n98 := [ __n99 ];
__n97["declarations"] := __n98;
__n97["kind"] := "var";
__n105 := {  };
__n105["type"] := "IfStatement";
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "!==";
__n107 := {  };
__n107["type"] := "LogicalExpression";
__n107["operator"] := "||";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "x";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "NewExpression";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "Number";
__n109["callee"] := __n110;
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "NaN";
__n111 := [ __n112 ];
__n109["arguments"] := __n111;
__n107["right"] := __n109;
__n106["left"] := __n107;
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "x";
__n106["right"] := __n113;
__n105["test"] := __n106;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "$ERROR";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "#6: (var x = new Number(0); (x || new Number(NaN)) === x";
__n120["raw"] := "'#6: (var x = new Number(0); (x || new Number(NaN)) === x'";
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["expression"] := __n117;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n105["consequent"] := __n114;
__n105["alternate"] := null;
__n1 := [ __n2, __n17, __n33, __n48, __n57, __n73, __n81, __n97, __n105 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n121 := [ "x" ];
__n0["variableDeclarations"] := __n121;
__n122 := [  ];
__n0["functionDeclarations"] := __n122;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}