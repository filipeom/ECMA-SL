function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "LogicalExpression";
__n4["operator"] := "||";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "-1";
__n5["raw"] := "\"-1\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "-1";
__n7["raw"] := "\"-1\"";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#-1: (\"-1\" || \"1\") === \"-1\"";
__n14["raw"] := "'#-1: (\"-1\" || \"1\") === \"-1\"'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "LogicalExpression";
__n17["operator"] := "||";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "-1";
__n18["raw"] := "\"-1\"";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "x";
__n19["raw"] := "\"x\"";
__n17["right"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "-1";
__n20["raw"] := "\"-1\"";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: (\"-1\" || \"x\") === \"-1\"";
__n27["raw"] := "'#2: (\"-1\" || \"x\") === \"-1\"'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "x";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "String";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "-1";
__n35["raw"] := "\"-1\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "LogicalExpression";
__n38["operator"] := "||";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "x";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "String";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "-";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37["left"] := __n38;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x";
__n37["right"] := __n45;
__n36["test"] := __n37;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: (var x = new String(\"-1\"); (x || new String(-1)) === x";
__n52["raw"] := "'#3: (var x = new String(\"-1\"); (x || new String(-1)) === x'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n36["consequent"] := __n46;
__n36["alternate"] := null;
__n53 := {  };
__n53["type"] := "VariableDeclaration";
__n55 := {  };
__n55["type"] := "VariableDeclarator";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["id"] := __n56;
__n57 := {  };
__n57["type"] := "NewExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "String";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "NaN";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n55["init"] := __n57;
__n54 := [ __n55 ];
__n53["declarations"] := __n54;
__n53["kind"] := "var";
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "LogicalExpression";
__n63["operator"] := "||";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "x";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "NewExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "String";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "1";
__n68["raw"] := "\"1\"";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n63["right"] := __n65;
__n62["left"] := __n63;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "x";
__n62["right"] := __n69;
__n61["test"] := __n62;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#4: (var x = new String(NaN); (x || new String(\"1\")) === x";
__n76["raw"] := "'#4: (var x = new String(NaN); (x || new String(\"1\")) === x'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n61["consequent"] := __n70;
__n61["alternate"] := null;
__n77 := {  };
__n77["type"] := "VariableDeclaration";
__n79 := {  };
__n79["type"] := "VariableDeclarator";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "x";
__n79["id"] := __n80;
__n81 := {  };
__n81["type"] := "NewExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "String";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "-x";
__n84["raw"] := "\"-x\"";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n79["init"] := __n81;
__n78 := [ __n79 ];
__n77["declarations"] := __n78;
__n77["kind"] := "var";
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "!==";
__n87 := {  };
__n87["type"] := "LogicalExpression";
__n87["operator"] := "||";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "x";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "NewExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "String";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "x";
__n92["raw"] := "\"x\"";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n87["right"] := __n89;
__n86["left"] := __n87;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "x";
__n86["right"] := __n93;
__n85["test"] := __n86;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#5: (var x = new String(\"-x\"); (x || new String(\"x\")) === x";
__n100["raw"] := "'#5: (var x = new String(\"-x\"); (x || new String(\"x\")) === x'";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n85["consequent"] := __n94;
__n85["alternate"] := null;
__n101 := {  };
__n101["type"] := "VariableDeclaration";
__n103 := {  };
__n103["type"] := "VariableDeclarator";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "x";
__n103["id"] := __n104;
__n105 := {  };
__n105["type"] := "NewExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "String";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 0.;
__n108["raw"] := "0";
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n103["init"] := __n105;
__n102 := [ __n103 ];
__n101["declarations"] := __n102;
__n101["kind"] := "var";
__n109 := {  };
__n109["type"] := "IfStatement";
__n110 := {  };
__n110["type"] := "BinaryExpression";
__n110["operator"] := "!==";
__n111 := {  };
__n111["type"] := "LogicalExpression";
__n111["operator"] := "||";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "x";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "NewExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "String";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "NaN";
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n111["right"] := __n113;
__n110["left"] := __n111;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "x";
__n110["right"] := __n117;
__n109["test"] := __n110;
__n118 := {  };
__n118["type"] := "BlockStatement";
__n120 := {  };
__n120["type"] := "ExpressionStatement";
__n121 := {  };
__n121["type"] := "CallExpression";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "$ERROR";
__n121["callee"] := __n122;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := "#6: (var x = new String(0); (x || new String(NaN)) === x";
__n124["raw"] := "'#6: (var x = new String(0); (x || new String(NaN)) === x'";
__n123 := [ __n124 ];
__n121["arguments"] := __n123;
__n120["expression"] := __n121;
__n119 := [ __n120 ];
__n118["body"] := __n119;
__n109["consequent"] := __n118;
__n109["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n36, __n53, __n61, __n77, __n85, __n101, __n109 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n125 := [ "x" ];
__n0["variableDeclarations"] := __n125;
__n126 := [  ];
__n0["functionDeclarations"] := __n126;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}