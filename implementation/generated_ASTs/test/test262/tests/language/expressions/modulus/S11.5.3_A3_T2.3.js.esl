function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "%";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.;
__n8["raw"] := "1";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 'null;
__n9["raw"] := "\"'null\"";
__n7["right"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := true;
__n10["raw"] := "true";
__n3["right"] := __n10;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: 1 % null === Not-a-Number. Actual: ";
__n18["raw"] := "'#1: 1 % null === Not-a-Number. Actual: '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "%";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 'null;
__n21["raw"] := "\"'null\"";
__n19["right"] := __n21;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "%";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 'null;
__n25["raw"] := "\"'null\"";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n24["right"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n23["right"] := __n27;
__n22["test"] := __n23;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: null % 1 === 0. Actual: ";
__n35["raw"] := "'#2: null % 1 === 0. Actual: '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "%";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 'null;
__n37["raw"] := "\"'null\"";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n36["right"] := __n38;
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n22["consequent"] := __n28;
__n22["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "isNaN";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "%";
__n45 := {  };
__n45["type"] := "NewExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Number";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.;
__n48["raw"] := "1";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["left"] := __n45;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 'null;
__n49["raw"] := "\"'null\"";
__n44["right"] := __n49;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["left"] := __n41;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := true;
__n50["raw"] := "true";
__n40["right"] := __n50;
__n39["test"] := __n40;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#3: new Number(1) % null === Not-a-Number. Actual: ";
__n58["raw"] := "'#3: new Number(1) % null === Not-a-Number. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "%";
__n60 := {  };
__n60["type"] := "NewExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "Number";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1.;
__n63["raw"] := "1";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["left"] := __n60;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 'null;
__n64["raw"] := "\"'null\"";
__n59["right"] := __n64;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n39["consequent"] := __n51;
__n39["alternate"] := null;
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "%";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 'null;
__n68["raw"] := "\"'null\"";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "NewExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n67["right"] := __n69;
__n66["left"] := __n67;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n66["right"] := __n73;
__n65["test"] := __n66;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "+";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#4: null % new Number(1) === 0. Actual: ";
__n81["raw"] := "'#4: null % new Number(1) === 0. Actual: '";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "%";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 'null;
__n83["raw"] := "\"'null\"";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "NewExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "Number";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 1.;
__n87["raw"] := "1";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n82["right"] := __n84;
__n80["right"] := __n82;
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n65["consequent"] := __n74;
__n65["alternate"] := null;
__n1 := [ __n2, __n22, __n39, __n65 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n88 := [  ];
__n0["variableDeclarations"] := __n88;
__n89 := [  ];
__n0["functionDeclarations"] := __n89;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}