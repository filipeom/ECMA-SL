function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "%";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "NEGATIVE_INFINITY";
__n10["raw"] := "\"NEGATIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "POSITIVE_INFINITY";
__n13["raw"] := "\"POSITIVE_INFINITY\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n7["right"] := __n11;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n3["right"] := __n14;
__n2["test"] := __n3;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: -Infinity % Infinity === Not-a-Number. Actual: ";
__n22["raw"] := "'#1: -Infinity % Infinity === Not-a-Number. Actual: '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "%";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Infinity";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["left"] := __n24;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Infinity";
__n23["right"] := __n26;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["consequent"] := __n15;
__n2["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "isNaN";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "%";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "NEGATIVE_INFINITY";
__n35["raw"] := "\"NEGATIVE_INFINITY\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "NEGATIVE_INFINITY";
__n38["raw"] := "\"NEGATIVE_INFINITY\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n32["right"] := __n36;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["left"] := __n29;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n28["right"] := __n39;
__n27["test"] := __n28;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: -Infinity % -Infinity === Not-a-Number. Actual: ";
__n47["raw"] := "'#2: -Infinity % -Infinity === Not-a-Number. Actual: '";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "%";
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "-";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Infinity";
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["left"] := __n49;
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "-";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Infinity";
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n48["right"] := __n51;
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n27["consequent"] := __n40;
__n27["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "isNaN";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "%";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Number";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "POSITIVE_INFINITY";
__n61["raw"] := "\"POSITIVE_INFINITY\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n58["left"] := __n59;
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Number";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "POSITIVE_INFINITY";
__n64["raw"] := "\"POSITIVE_INFINITY\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n58["right"] := __n62;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["left"] := __n55;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := true;
__n65["raw"] := "true";
__n54["right"] := __n65;
__n53["test"] := __n54;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#3: Infinity % Infinity === Not-a-Number. Actual: ";
__n73["raw"] := "'#3: Infinity % Infinity === Not-a-Number. Actual: '";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "%";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Infinity";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Infinity";
__n74["right"] := __n76;
__n72["right"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n53["consequent"] := __n66;
__n53["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "isNaN";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "%";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "Number";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "POSITIVE_INFINITY";
__n85["raw"] := "\"POSITIVE_INFINITY\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82["left"] := __n83;
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "Number";
__n86["object"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "NEGATIVE_INFINITY";
__n88["raw"] := "\"NEGATIVE_INFINITY\"";
__n86["property"] := __n88;
__n86["computed"] := true;
__n82["right"] := __n86;
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["left"] := __n79;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := true;
__n89["raw"] := "true";
__n78["right"] := __n89;
__n77["test"] := __n78;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#4: Infinity % -Infinity === Not-a-Number. Actual: ";
__n97["raw"] := "'#4: Infinity % -Infinity === Not-a-Number. Actual: '";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "%";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "Infinity";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "-";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Infinity";
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n98["right"] := __n100;
__n96["right"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n77["consequent"] := __n90;
__n77["alternate"] := null;
__n102 := {  };
__n102["type"] := "IfStatement";
__n103 := {  };
__n103["type"] := "BinaryExpression";
__n103["operator"] := "!==";
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "isNaN";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "%";
__n108 := {  };
__n108["type"] := "MemberExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "Number";
__n108["object"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "NEGATIVE_INFINITY";
__n110["raw"] := "\"NEGATIVE_INFINITY\"";
__n108["property"] := __n110;
__n108["computed"] := true;
__n107["left"] := __n108;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := 1.;
__n111["raw"] := "1";
__n107["right"] := __n111;
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["left"] := __n104;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := true;
__n112["raw"] := "true";
__n103["right"] := __n112;
__n102["test"] := __n103;
__n113 := {  };
__n113["type"] := "BlockStatement";
__n115 := {  };
__n115["type"] := "ExpressionStatement";
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "$ERROR";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "+";
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "#5: Infinity % 1 === Not-a-Number. Actual: ";
__n120["raw"] := "'#5: Infinity % 1 === Not-a-Number. Actual: '";
__n119["left"] := __n120;
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "%";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "Infinity";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := 1.;
__n123["raw"] := "1";
__n121["right"] := __n123;
__n119["right"] := __n121;
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n115["expression"] := __n116;
__n114 := [ __n115 ];
__n113["body"] := __n114;
__n102["consequent"] := __n113;
__n102["alternate"] := null;
__n124 := {  };
__n124["type"] := "IfStatement";
__n125 := {  };
__n125["type"] := "BinaryExpression";
__n125["operator"] := "!==";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "isNaN";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "BinaryExpression";
__n129["operator"] := "%";
__n130 := {  };
__n130["type"] := "MemberExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "Number";
__n130["object"] := __n131;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "NEGATIVE_INFINITY";
__n132["raw"] := "\"NEGATIVE_INFINITY\"";
__n130["property"] := __n132;
__n130["computed"] := true;
__n129["left"] := __n130;
__n133 := {  };
__n133["type"] := "UnaryExpression";
__n133["operator"] := "-";
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 1.;
__n134["raw"] := "1";
__n133["argument"] := __n134;
__n133["prefix"] := true;
__n129["right"] := __n133;
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n125["left"] := __n126;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := true;
__n135["raw"] := "true";
__n125["right"] := __n135;
__n124["test"] := __n125;
__n136 := {  };
__n136["type"] := "BlockStatement";
__n138 := {  };
__n138["type"] := "ExpressionStatement";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "$ERROR";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "BinaryExpression";
__n142["operator"] := "+";
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "#6: -Infinity % -1 === Not-a-Number. Actual: ";
__n143["raw"] := "'#6: -Infinity % -1 === Not-a-Number. Actual: '";
__n142["left"] := __n143;
__n144 := {  };
__n144["type"] := "BinaryExpression";
__n144["operator"] := "%";
__n145 := {  };
__n145["type"] := "UnaryExpression";
__n145["operator"] := "-";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "Infinity";
__n145["argument"] := __n146;
__n145["prefix"] := true;
__n144["left"] := __n145;
__n147 := {  };
__n147["type"] := "UnaryExpression";
__n147["operator"] := "-";
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := 1.;
__n148["raw"] := "1";
__n147["argument"] := __n148;
__n147["prefix"] := true;
__n144["right"] := __n147;
__n142["right"] := __n144;
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["expression"] := __n139;
__n137 := [ __n138 ];
__n136["body"] := __n137;
__n124["consequent"] := __n136;
__n124["alternate"] := null;
__n149 := {  };
__n149["type"] := "IfStatement";
__n150 := {  };
__n150["type"] := "BinaryExpression";
__n150["operator"] := "!==";
__n151 := {  };
__n151["type"] := "CallExpression";
__n152 := {  };
__n152["type"] := "Identifier";
__n152["name"] := "isNaN";
__n151["callee"] := __n152;
__n154 := {  };
__n154["type"] := "BinaryExpression";
__n154["operator"] := "%";
__n155 := {  };
__n155["type"] := "MemberExpression";
__n156 := {  };
__n156["type"] := "Identifier";
__n156["name"] := "Number";
__n155["object"] := __n156;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "POSITIVE_INFINITY";
__n157["raw"] := "\"POSITIVE_INFINITY\"";
__n155["property"] := __n157;
__n155["computed"] := true;
__n154["left"] := __n155;
__n158 := {  };
__n158["type"] := "Literal";
__n158["value"] := 1.;
__n158["raw"] := "1";
__n154["right"] := __n158;
__n153 := [ __n154 ];
__n151["arguments"] := __n153;
__n150["left"] := __n151;
__n159 := {  };
__n159["type"] := "Literal";
__n159["value"] := true;
__n159["raw"] := "true";
__n150["right"] := __n159;
__n149["test"] := __n150;
__n160 := {  };
__n160["type"] := "BlockStatement";
__n162 := {  };
__n162["type"] := "ExpressionStatement";
__n163 := {  };
__n163["type"] := "CallExpression";
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "$ERROR";
__n163["callee"] := __n164;
__n166 := {  };
__n166["type"] := "BinaryExpression";
__n166["operator"] := "+";
__n167 := {  };
__n167["type"] := "Literal";
__n167["value"] := "#7: Infinity % 1 === Not-a-Number. Actual: ";
__n167["raw"] := "'#7: Infinity % 1 === Not-a-Number. Actual: '";
__n166["left"] := __n167;
__n168 := {  };
__n168["type"] := "BinaryExpression";
__n168["operator"] := "%";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "Infinity";
__n168["left"] := __n169;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := 1.;
__n170["raw"] := "1";
__n168["right"] := __n170;
__n166["right"] := __n168;
__n165 := [ __n166 ];
__n163["arguments"] := __n165;
__n162["expression"] := __n163;
__n161 := [ __n162 ];
__n160["body"] := __n161;
__n149["consequent"] := __n160;
__n149["alternate"] := null;
__n171 := {  };
__n171["type"] := "IfStatement";
__n172 := {  };
__n172["type"] := "BinaryExpression";
__n172["operator"] := "!==";
__n173 := {  };
__n173["type"] := "CallExpression";
__n174 := {  };
__n174["type"] := "Identifier";
__n174["name"] := "isNaN";
__n173["callee"] := __n174;
__n176 := {  };
__n176["type"] := "BinaryExpression";
__n176["operator"] := "%";
__n177 := {  };
__n177["type"] := "MemberExpression";
__n178 := {  };
__n178["type"] := "Identifier";
__n178["name"] := "Number";
__n177["object"] := __n178;
__n179 := {  };
__n179["type"] := "Literal";
__n179["value"] := "POSITIVE_INFINITY";
__n179["raw"] := "\"POSITIVE_INFINITY\"";
__n177["property"] := __n179;
__n177["computed"] := true;
__n176["left"] := __n177;
__n180 := {  };
__n180["type"] := "UnaryExpression";
__n180["operator"] := "-";
__n181 := {  };
__n181["type"] := "Literal";
__n181["value"] := 1.;
__n181["raw"] := "1";
__n180["argument"] := __n181;
__n180["prefix"] := true;
__n176["right"] := __n180;
__n175 := [ __n176 ];
__n173["arguments"] := __n175;
__n172["left"] := __n173;
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := true;
__n182["raw"] := "true";
__n172["right"] := __n182;
__n171["test"] := __n172;
__n183 := {  };
__n183["type"] := "BlockStatement";
__n185 := {  };
__n185["type"] := "ExpressionStatement";
__n186 := {  };
__n186["type"] := "CallExpression";
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "$ERROR";
__n186["callee"] := __n187;
__n189 := {  };
__n189["type"] := "BinaryExpression";
__n189["operator"] := "+";
__n190 := {  };
__n190["type"] := "Literal";
__n190["value"] := "#8: Infinity % -1 === Not-a-Number. Actual: ";
__n190["raw"] := "'#8: Infinity % -1 === Not-a-Number. Actual: '";
__n189["left"] := __n190;
__n191 := {  };
__n191["type"] := "BinaryExpression";
__n191["operator"] := "%";
__n192 := {  };
__n192["type"] := "Identifier";
__n192["name"] := "Infinity";
__n191["left"] := __n192;
__n193 := {  };
__n193["type"] := "UnaryExpression";
__n193["operator"] := "-";
__n194 := {  };
__n194["type"] := "Literal";
__n194["value"] := 1.;
__n194["raw"] := "1";
__n193["argument"] := __n194;
__n193["prefix"] := true;
__n191["right"] := __n193;
__n189["right"] := __n191;
__n188 := [ __n189 ];
__n186["arguments"] := __n188;
__n185["expression"] := __n186;
__n184 := [ __n185 ];
__n183["body"] := __n184;
__n171["consequent"] := __n183;
__n171["alternate"] := null;
__n195 := {  };
__n195["type"] := "IfStatement";
__n196 := {  };
__n196["type"] := "BinaryExpression";
__n196["operator"] := "!==";
__n197 := {  };
__n197["type"] := "CallExpression";
__n198 := {  };
__n198["type"] := "Identifier";
__n198["name"] := "isNaN";
__n197["callee"] := __n198;
__n200 := {  };
__n200["type"] := "BinaryExpression";
__n200["operator"] := "%";
__n201 := {  };
__n201["type"] := "MemberExpression";
__n202 := {  };
__n202["type"] := "Identifier";
__n202["name"] := "Number";
__n201["object"] := __n202;
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := "NEGATIVE_INFINITY";
__n203["raw"] := "\"NEGATIVE_INFINITY\"";
__n201["property"] := __n203;
__n201["computed"] := true;
__n200["left"] := __n201;
__n204 := {  };
__n204["type"] := "MemberExpression";
__n205 := {  };
__n205["type"] := "Identifier";
__n205["name"] := "Number";
__n204["object"] := __n205;
__n206 := {  };
__n206["type"] := "Literal";
__n206["value"] := "MAX_VALUE";
__n206["raw"] := "\"MAX_VALUE\"";
__n204["property"] := __n206;
__n204["computed"] := true;
__n200["right"] := __n204;
__n199 := [ __n200 ];
__n197["arguments"] := __n199;
__n196["left"] := __n197;
__n207 := {  };
__n207["type"] := "Literal";
__n207["value"] := true;
__n207["raw"] := "true";
__n196["right"] := __n207;
__n195["test"] := __n196;
__n208 := {  };
__n208["type"] := "BlockStatement";
__n210 := {  };
__n210["type"] := "ExpressionStatement";
__n211 := {  };
__n211["type"] := "CallExpression";
__n212 := {  };
__n212["type"] := "Identifier";
__n212["name"] := "$ERROR";
__n211["callee"] := __n212;
__n214 := {  };
__n214["type"] := "BinaryExpression";
__n214["operator"] := "+";
__n215 := {  };
__n215["type"] := "Literal";
__n215["value"] := "#9: Infinity % Number.MAX_VALUE === Not-a-Number. Actual: ";
__n215["raw"] := "'#9: Infinity % Number.MAX_VALUE === Not-a-Number. Actual: '";
__n214["left"] := __n215;
__n216 := {  };
__n216["type"] := "BinaryExpression";
__n216["operator"] := "%";
__n217 := {  };
__n217["type"] := "Identifier";
__n217["name"] := "Infinity";
__n216["left"] := __n217;
__n218 := {  };
__n218["type"] := "MemberExpression";
__n219 := {  };
__n219["type"] := "Identifier";
__n219["name"] := "Number";
__n218["object"] := __n219;
__n220 := {  };
__n220["type"] := "Literal";
__n220["value"] := "MAX_VALUE";
__n220["raw"] := "\"MAX_VALUE\"";
__n218["property"] := __n220;
__n218["computed"] := true;
__n216["right"] := __n218;
__n214["right"] := __n216;
__n213 := [ __n214 ];
__n211["arguments"] := __n213;
__n210["expression"] := __n211;
__n209 := [ __n210 ];
__n208["body"] := __n209;
__n195["consequent"] := __n208;
__n195["alternate"] := null;
__n221 := {  };
__n221["type"] := "IfStatement";
__n222 := {  };
__n222["type"] := "BinaryExpression";
__n222["operator"] := "!==";
__n223 := {  };
__n223["type"] := "CallExpression";
__n224 := {  };
__n224["type"] := "Identifier";
__n224["name"] := "isNaN";
__n223["callee"] := __n224;
__n226 := {  };
__n226["type"] := "BinaryExpression";
__n226["operator"] := "%";
__n227 := {  };
__n227["type"] := "MemberExpression";
__n228 := {  };
__n228["type"] := "Identifier";
__n228["name"] := "Number";
__n227["object"] := __n228;
__n229 := {  };
__n229["type"] := "Literal";
__n229["value"] := "NEGATIVE_INFINITY";
__n229["raw"] := "\"NEGATIVE_INFINITY\"";
__n227["property"] := __n229;
__n227["computed"] := true;
__n226["left"] := __n227;
__n230 := {  };
__n230["type"] := "UnaryExpression";
__n230["operator"] := "-";
__n231 := {  };
__n231["type"] := "MemberExpression";
__n232 := {  };
__n232["type"] := "Identifier";
__n232["name"] := "Number";
__n231["object"] := __n232;
__n233 := {  };
__n233["type"] := "Literal";
__n233["value"] := "MAX_VALUE";
__n233["raw"] := "\"MAX_VALUE\"";
__n231["property"] := __n233;
__n231["computed"] := true;
__n230["argument"] := __n231;
__n230["prefix"] := true;
__n226["right"] := __n230;
__n225 := [ __n226 ];
__n223["arguments"] := __n225;
__n222["left"] := __n223;
__n234 := {  };
__n234["type"] := "Literal";
__n234["value"] := true;
__n234["raw"] := "true";
__n222["right"] := __n234;
__n221["test"] := __n222;
__n235 := {  };
__n235["type"] := "BlockStatement";
__n237 := {  };
__n237["type"] := "ExpressionStatement";
__n238 := {  };
__n238["type"] := "CallExpression";
__n239 := {  };
__n239["type"] := "Identifier";
__n239["name"] := "$ERROR";
__n238["callee"] := __n239;
__n241 := {  };
__n241["type"] := "BinaryExpression";
__n241["operator"] := "+";
__n242 := {  };
__n242["type"] := "Literal";
__n242["value"] := "#10: -Infinity % -Number.MAX_VALUE === Not-a-Number. Actual: ";
__n242["raw"] := "'#10: -Infinity % -Number.MAX_VALUE === Not-a-Number. Actual: '";
__n241["left"] := __n242;
__n243 := {  };
__n243["type"] := "BinaryExpression";
__n243["operator"] := "%";
__n244 := {  };
__n244["type"] := "UnaryExpression";
__n244["operator"] := "-";
__n245 := {  };
__n245["type"] := "Identifier";
__n245["name"] := "Infinity";
__n244["argument"] := __n245;
__n244["prefix"] := true;
__n243["left"] := __n244;
__n246 := {  };
__n246["type"] := "UnaryExpression";
__n246["operator"] := "-";
__n247 := {  };
__n247["type"] := "MemberExpression";
__n248 := {  };
__n248["type"] := "Identifier";
__n248["name"] := "Number";
__n247["object"] := __n248;
__n249 := {  };
__n249["type"] := "Literal";
__n249["value"] := "MAX_VALUE";
__n249["raw"] := "\"MAX_VALUE\"";
__n247["property"] := __n249;
__n247["computed"] := true;
__n246["argument"] := __n247;
__n246["prefix"] := true;
__n243["right"] := __n246;
__n241["right"] := __n243;
__n240 := [ __n241 ];
__n238["arguments"] := __n240;
__n237["expression"] := __n238;
__n236 := [ __n237 ];
__n235["body"] := __n236;
__n221["consequent"] := __n235;
__n221["alternate"] := null;
__n250 := {  };
__n250["type"] := "IfStatement";
__n251 := {  };
__n251["type"] := "BinaryExpression";
__n251["operator"] := "!==";
__n252 := {  };
__n252["type"] := "CallExpression";
__n253 := {  };
__n253["type"] := "Identifier";
__n253["name"] := "isNaN";
__n252["callee"] := __n253;
__n255 := {  };
__n255["type"] := "BinaryExpression";
__n255["operator"] := "%";
__n256 := {  };
__n256["type"] := "MemberExpression";
__n257 := {  };
__n257["type"] := "Identifier";
__n257["name"] := "Number";
__n256["object"] := __n257;
__n258 := {  };
__n258["type"] := "Literal";
__n258["value"] := "POSITIVE_INFINITY";
__n258["raw"] := "\"POSITIVE_INFINITY\"";
__n256["property"] := __n258;
__n256["computed"] := true;
__n255["left"] := __n256;
__n259 := {  };
__n259["type"] := "MemberExpression";
__n260 := {  };
__n260["type"] := "Identifier";
__n260["name"] := "Number";
__n259["object"] := __n260;
__n261 := {  };
__n261["type"] := "Literal";
__n261["value"] := "MAX_VALUE";
__n261["raw"] := "\"MAX_VALUE\"";
__n259["property"] := __n261;
__n259["computed"] := true;
__n255["right"] := __n259;
__n254 := [ __n255 ];
__n252["arguments"] := __n254;
__n251["left"] := __n252;
__n262 := {  };
__n262["type"] := "Literal";
__n262["value"] := true;
__n262["raw"] := "true";
__n251["right"] := __n262;
__n250["test"] := __n251;
__n263 := {  };
__n263["type"] := "BlockStatement";
__n265 := {  };
__n265["type"] := "ExpressionStatement";
__n266 := {  };
__n266["type"] := "CallExpression";
__n267 := {  };
__n267["type"] := "Identifier";
__n267["name"] := "$ERROR";
__n266["callee"] := __n267;
__n269 := {  };
__n269["type"] := "BinaryExpression";
__n269["operator"] := "+";
__n270 := {  };
__n270["type"] := "Literal";
__n270["value"] := "#11: Infinity % Number.MAX_VALUE === Not-a-Number. Actual: ";
__n270["raw"] := "'#11: Infinity % Number.MAX_VALUE === Not-a-Number. Actual: '";
__n269["left"] := __n270;
__n271 := {  };
__n271["type"] := "BinaryExpression";
__n271["operator"] := "%";
__n272 := {  };
__n272["type"] := "Identifier";
__n272["name"] := "Infinity";
__n271["left"] := __n272;
__n273 := {  };
__n273["type"] := "MemberExpression";
__n274 := {  };
__n274["type"] := "Identifier";
__n274["name"] := "Number";
__n273["object"] := __n274;
__n275 := {  };
__n275["type"] := "Literal";
__n275["value"] := "MAX_VALUE";
__n275["raw"] := "\"MAX_VALUE\"";
__n273["property"] := __n275;
__n273["computed"] := true;
__n271["right"] := __n273;
__n269["right"] := __n271;
__n268 := [ __n269 ];
__n266["arguments"] := __n268;
__n265["expression"] := __n266;
__n264 := [ __n265 ];
__n263["body"] := __n264;
__n250["consequent"] := __n263;
__n250["alternate"] := null;
__n276 := {  };
__n276["type"] := "IfStatement";
__n277 := {  };
__n277["type"] := "BinaryExpression";
__n277["operator"] := "!==";
__n278 := {  };
__n278["type"] := "CallExpression";
__n279 := {  };
__n279["type"] := "Identifier";
__n279["name"] := "isNaN";
__n278["callee"] := __n279;
__n281 := {  };
__n281["type"] := "BinaryExpression";
__n281["operator"] := "%";
__n282 := {  };
__n282["type"] := "MemberExpression";
__n283 := {  };
__n283["type"] := "Identifier";
__n283["name"] := "Number";
__n282["object"] := __n283;
__n284 := {  };
__n284["type"] := "Literal";
__n284["value"] := "POSITIVE_INFINITY";
__n284["raw"] := "\"POSITIVE_INFINITY\"";
__n282["property"] := __n284;
__n282["computed"] := true;
__n281["left"] := __n282;
__n285 := {  };
__n285["type"] := "UnaryExpression";
__n285["operator"] := "-";
__n286 := {  };
__n286["type"] := "MemberExpression";
__n287 := {  };
__n287["type"] := "Identifier";
__n287["name"] := "Number";
__n286["object"] := __n287;
__n288 := {  };
__n288["type"] := "Literal";
__n288["value"] := "MAX_VALUE";
__n288["raw"] := "\"MAX_VALUE\"";
__n286["property"] := __n288;
__n286["computed"] := true;
__n285["argument"] := __n286;
__n285["prefix"] := true;
__n281["right"] := __n285;
__n280 := [ __n281 ];
__n278["arguments"] := __n280;
__n277["left"] := __n278;
__n289 := {  };
__n289["type"] := "Literal";
__n289["value"] := true;
__n289["raw"] := "true";
__n277["right"] := __n289;
__n276["test"] := __n277;
__n290 := {  };
__n290["type"] := "BlockStatement";
__n292 := {  };
__n292["type"] := "ExpressionStatement";
__n293 := {  };
__n293["type"] := "CallExpression";
__n294 := {  };
__n294["type"] := "Identifier";
__n294["name"] := "$ERROR";
__n293["callee"] := __n294;
__n296 := {  };
__n296["type"] := "BinaryExpression";
__n296["operator"] := "+";
__n297 := {  };
__n297["type"] := "Literal";
__n297["value"] := "#12: Infinity % -Number.MAX_VALUE === Not-a-Number. Actual: ";
__n297["raw"] := "'#12: Infinity % -Number.MAX_VALUE === Not-a-Number. Actual: '";
__n296["left"] := __n297;
__n298 := {  };
__n298["type"] := "BinaryExpression";
__n298["operator"] := "%";
__n299 := {  };
__n299["type"] := "Identifier";
__n299["name"] := "Infinity";
__n298["left"] := __n299;
__n300 := {  };
__n300["type"] := "UnaryExpression";
__n300["operator"] := "-";
__n301 := {  };
__n301["type"] := "MemberExpression";
__n302 := {  };
__n302["type"] := "Identifier";
__n302["name"] := "Number";
__n301["object"] := __n302;
__n303 := {  };
__n303["type"] := "Literal";
__n303["value"] := "MAX_VALUE";
__n303["raw"] := "\"MAX_VALUE\"";
__n301["property"] := __n303;
__n301["computed"] := true;
__n300["argument"] := __n301;
__n300["prefix"] := true;
__n298["right"] := __n300;
__n296["right"] := __n298;
__n295 := [ __n296 ];
__n293["arguments"] := __n295;
__n292["expression"] := __n293;
__n291 := [ __n292 ];
__n290["body"] := __n291;
__n276["consequent"] := __n290;
__n276["alternate"] := null;
__n1 := [ __n2, __n27, __n53, __n77, __n102, __n124, __n149, __n171, __n195, __n221, __n250, __n276 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n304 := [  ];
__n0["variableDeclarations"] := __n304;
__n305 := [  ];
__n0["functionDeclarations"] := __n305;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}