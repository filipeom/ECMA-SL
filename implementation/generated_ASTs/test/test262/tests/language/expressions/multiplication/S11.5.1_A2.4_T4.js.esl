function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "*";
__n5 := {  };
__n5["type"] := "AssignmentExpression";
__n5["operator"] := "=";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "y";
__n5["left"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n5["right"] := __n7;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "y";
__n4["right"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: (y = 1) * y === 1. Actual: ";
__n17["raw"] := "'#1: (y = 1) * y === 1. Actual: '";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "*";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "y";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n19["right"] := __n21;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "y";
__n18["right"] := __n22;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n23 := [  ];
__n0["variableDeclarations"] := __n23;
__n24 := [  ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}