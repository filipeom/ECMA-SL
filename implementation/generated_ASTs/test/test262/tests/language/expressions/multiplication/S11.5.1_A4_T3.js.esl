function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "*";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "NEGATIVE_INFINITY";
__n10["raw"] := "\"NEGATIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n7["right"] := __n11;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Infinity * 0 === Not-a-Number. Actual: ";
__n20["raw"] := "'#1: Infinity * 0 === Not-a-Number. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "*";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Infinity";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n21["right"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "isNaN";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "*";
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "-";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 0.;
__n31["raw"] := "0";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29["left"] := __n30;
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Number";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "NEGATIVE_INFINITY";
__n34["raw"] := "\"NEGATIVE_INFINITY\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n29["right"] := __n32;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n25["right"] := __n35;
__n24["test"] := __n25;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: -0 * -Infinity === Not-a-Number. Actual: ";
__n43["raw"] := "'#2: -0 * -Infinity === Not-a-Number. Actual: '";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "*";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "-";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 0.;
__n46["raw"] := "0";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44["left"] := __n45;
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "Infinity";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n44["right"] := __n47;
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n24["consequent"] := __n36;
__n24["alternate"] := null;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "isNaN";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "*";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "Number";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "POSITIVE_INFINITY";
__n57["raw"] := "\"POSITIVE_INFINITY\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "-";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n54["right"] := __n58;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["left"] := __n51;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := true;
__n60["raw"] := "true";
__n50["right"] := __n60;
__n49["test"] := __n50;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#3: Infinity * -0 === Not-a-Number. Actual: ";
__n68["raw"] := "'#3: Infinity * -0 === Not-a-Number. Actual: '";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "*";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Infinity";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "UnaryExpression";
__n71["operator"] := "-";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 0.;
__n72["raw"] := "0";
__n71["argument"] := __n72;
__n71["prefix"] := true;
__n69["right"] := __n71;
__n67["right"] := __n69;
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n62 := [ __n63 ];
__n61["body"] := __n62;
__n49["consequent"] := __n61;
__n49["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!==";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "isNaN";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "*";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 0.;
__n79["raw"] := "0";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Number";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "POSITIVE_INFINITY";
__n82["raw"] := "\"POSITIVE_INFINITY\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n78["right"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["left"] := __n75;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := true;
__n83["raw"] := "true";
__n74["right"] := __n83;
__n73["test"] := __n74;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "+";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#4: 0 * Infinity === Not-a-Number. Actual: ";
__n91["raw"] := "'#4: 0 * Infinity === Not-a-Number. Actual: '";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "*";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 0.;
__n93["raw"] := "0";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "Infinity";
__n92["right"] := __n94;
__n90["right"] := __n92;
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n73["consequent"] := __n84;
__n73["alternate"] := null;
__n95 := {  };
__n95["type"] := "IfStatement";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "!==";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "isNaN";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "*";
__n101 := {  };
__n101["type"] := "MemberExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Number";
__n101["object"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "NEGATIVE_INFINITY";
__n103["raw"] := "\"NEGATIVE_INFINITY\"";
__n101["property"] := __n103;
__n101["computed"] := true;
__n100["left"] := __n101;
__n104 := {  };
__n104["type"] := "UnaryExpression";
__n104["operator"] := "-";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := 0.;
__n105["raw"] := "0";
__n104["argument"] := __n105;
__n104["prefix"] := true;
__n100["right"] := __n104;
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["left"] := __n97;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := true;
__n106["raw"] := "true";
__n96["right"] := __n106;
__n95["test"] := __n96;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "$ERROR";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "BinaryExpression";
__n113["operator"] := "+";
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#5: Infinity * -0 === Not-a-Number. Actual: ";
__n114["raw"] := "'#5: Infinity * -0 === Not-a-Number. Actual: '";
__n113["left"] := __n114;
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "*";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "Infinity";
__n115["left"] := __n116;
__n117 := {  };
__n117["type"] := "UnaryExpression";
__n117["operator"] := "-";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 0.;
__n118["raw"] := "0";
__n117["argument"] := __n118;
__n117["prefix"] := true;
__n115["right"] := __n117;
__n113["right"] := __n115;
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["expression"] := __n110;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n95["consequent"] := __n107;
__n95["alternate"] := null;
__n119 := {  };
__n119["type"] := "IfStatement";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "!==";
__n121 := {  };
__n121["type"] := "CallExpression";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "isNaN";
__n121["callee"] := __n122;
__n124 := {  };
__n124["type"] := "BinaryExpression";
__n124["operator"] := "*";
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := 0.;
__n125["raw"] := "0";
__n124["left"] := __n125;
__n126 := {  };
__n126["type"] := "MemberExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "Number";
__n126["object"] := __n127;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := "NEGATIVE_INFINITY";
__n128["raw"] := "\"NEGATIVE_INFINITY\"";
__n126["property"] := __n128;
__n126["computed"] := true;
__n124["right"] := __n126;
__n123 := [ __n124 ];
__n121["arguments"] := __n123;
__n120["left"] := __n121;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := true;
__n129["raw"] := "true";
__n120["right"] := __n129;
__n119["test"] := __n120;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ExpressionStatement";
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "$ERROR";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "+";
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := "#6: 0 * -Infinity === Not-a-Number. Actual: ";
__n137["raw"] := "'#6: 0 * -Infinity === Not-a-Number. Actual: '";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "BinaryExpression";
__n138["operator"] := "*";
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := 0.;
__n139["raw"] := "0";
__n138["left"] := __n139;
__n140 := {  };
__n140["type"] := "UnaryExpression";
__n140["operator"] := "-";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "Infinity";
__n140["argument"] := __n141;
__n140["prefix"] := true;
__n138["right"] := __n140;
__n136["right"] := __n138;
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n132["expression"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n119["consequent"] := __n130;
__n119["alternate"] := null;
__n142 := {  };
__n142["type"] := "IfStatement";
__n143 := {  };
__n143["type"] := "BinaryExpression";
__n143["operator"] := "!==";
__n144 := {  };
__n144["type"] := "CallExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "isNaN";
__n144["callee"] := __n145;
__n147 := {  };
__n147["type"] := "BinaryExpression";
__n147["operator"] := "*";
__n148 := {  };
__n148["type"] := "MemberExpression";
__n149 := {  };
__n149["type"] := "Identifier";
__n149["name"] := "Number";
__n148["object"] := __n149;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := "POSITIVE_INFINITY";
__n150["raw"] := "\"POSITIVE_INFINITY\"";
__n148["property"] := __n150;
__n148["computed"] := true;
__n147["left"] := __n148;
__n151 := {  };
__n151["type"] := "Literal";
__n151["value"] := 0.;
__n151["raw"] := "0";
__n147["right"] := __n151;
__n146 := [ __n147 ];
__n144["arguments"] := __n146;
__n143["left"] := __n144;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := true;
__n152["raw"] := "true";
__n143["right"] := __n152;
__n142["test"] := __n143;
__n153 := {  };
__n153["type"] := "BlockStatement";
__n155 := {  };
__n155["type"] := "ExpressionStatement";
__n156 := {  };
__n156["type"] := "CallExpression";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "$ERROR";
__n156["callee"] := __n157;
__n159 := {  };
__n159["type"] := "BinaryExpression";
__n159["operator"] := "+";
__n160 := {  };
__n160["type"] := "Literal";
__n160["value"] := "#7: Infinity * 0 === Not-a-Number. Actual: ";
__n160["raw"] := "'#7: Infinity * 0 === Not-a-Number. Actual: '";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "BinaryExpression";
__n161["operator"] := "*";
__n162 := {  };
__n162["type"] := "Identifier";
__n162["name"] := "Infinity";
__n161["left"] := __n162;
__n163 := {  };
__n163["type"] := "Literal";
__n163["value"] := 0.;
__n163["raw"] := "0";
__n161["right"] := __n163;
__n159["right"] := __n161;
__n158 := [ __n159 ];
__n156["arguments"] := __n158;
__n155["expression"] := __n156;
__n154 := [ __n155 ];
__n153["body"] := __n154;
__n142["consequent"] := __n153;
__n142["alternate"] := null;
__n164 := {  };
__n164["type"] := "IfStatement";
__n165 := {  };
__n165["type"] := "BinaryExpression";
__n165["operator"] := "!==";
__n166 := {  };
__n166["type"] := "CallExpression";
__n167 := {  };
__n167["type"] := "Identifier";
__n167["name"] := "isNaN";
__n166["callee"] := __n167;
__n169 := {  };
__n169["type"] := "BinaryExpression";
__n169["operator"] := "*";
__n170 := {  };
__n170["type"] := "UnaryExpression";
__n170["operator"] := "-";
__n171 := {  };
__n171["type"] := "Literal";
__n171["value"] := 0.;
__n171["raw"] := "0";
__n170["argument"] := __n171;
__n170["prefix"] := true;
__n169["left"] := __n170;
__n172 := {  };
__n172["type"] := "MemberExpression";
__n173 := {  };
__n173["type"] := "Identifier";
__n173["name"] := "Number";
__n172["object"] := __n173;
__n174 := {  };
__n174["type"] := "Literal";
__n174["value"] := "POSITIVE_INFINITY";
__n174["raw"] := "\"POSITIVE_INFINITY\"";
__n172["property"] := __n174;
__n172["computed"] := true;
__n169["right"] := __n172;
__n168 := [ __n169 ];
__n166["arguments"] := __n168;
__n165["left"] := __n166;
__n175 := {  };
__n175["type"] := "Literal";
__n175["value"] := true;
__n175["raw"] := "true";
__n165["right"] := __n175;
__n164["test"] := __n165;
__n176 := {  };
__n176["type"] := "BlockStatement";
__n178 := {  };
__n178["type"] := "ExpressionStatement";
__n179 := {  };
__n179["type"] := "CallExpression";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "$ERROR";
__n179["callee"] := __n180;
__n182 := {  };
__n182["type"] := "BinaryExpression";
__n182["operator"] := "+";
__n183 := {  };
__n183["type"] := "Literal";
__n183["value"] := "#8: -0 * Infinity === Not-a-Number. Actual: ";
__n183["raw"] := "'#8: -0 * Infinity === Not-a-Number. Actual: '";
__n182["left"] := __n183;
__n184 := {  };
__n184["type"] := "BinaryExpression";
__n184["operator"] := "*";
__n185 := {  };
__n185["type"] := "UnaryExpression";
__n185["operator"] := "-";
__n186 := {  };
__n186["type"] := "Literal";
__n186["value"] := 0.;
__n186["raw"] := "0";
__n185["argument"] := __n186;
__n185["prefix"] := true;
__n184["left"] := __n185;
__n187 := {  };
__n187["type"] := "Identifier";
__n187["name"] := "Infinity";
__n184["right"] := __n187;
__n182["right"] := __n184;
__n181 := [ __n182 ];
__n179["arguments"] := __n181;
__n178["expression"] := __n179;
__n177 := [ __n178 ];
__n176["body"] := __n177;
__n164["consequent"] := __n176;
__n164["alternate"] := null;
__n1 := [ __n2, __n24, __n49, __n73, __n95, __n119, __n142, __n164 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n188 := [  ];
__n0["variableDeclarations"] := __n188;
__n189 := [  ];
__n0["functionDeclarations"] := __n189;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}