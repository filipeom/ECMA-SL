function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "*";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "MAX_VALUE";
__n7["raw"] := "\"MAX_VALUE\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.1;
__n8["raw"] := "1.1";
__n4["right"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Number";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "POSITIVE_INFINITY";
__n11["raw"] := "\"POSITIVE_INFINITY\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n3["right"] := __n9;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: Number.MAX_VALUE * 1.1 === Number.POSITIVE_INFINITY. Actual: ";
__n19["raw"] := "'#1: Number.MAX_VALUE * 1.1 === Number.POSITIVE_INFINITY. Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "*";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Number";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "MAX_VALUE";
__n23["raw"] := "\"MAX_VALUE\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["left"] := __n21;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.1;
__n24["raw"] := "1.1";
__n20["right"] := __n24;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n2["alternate"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "*";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "-";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1.1;
__n29["raw"] := "1.1";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["left"] := __n28;
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Number";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "MAX_VALUE";
__n32["raw"] := "\"MAX_VALUE\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n27["right"] := __n30;
__n26["left"] := __n27;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "NEGATIVE_INFINITY";
__n35["raw"] := "\"NEGATIVE_INFINITY\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n26["right"] := __n33;
__n25["test"] := __n26;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: -1.1 * Number.MAX_VALUE === Number.NEGATIVE_INFINITY. Actual: ";
__n43["raw"] := "'#2: -1.1 * Number.MAX_VALUE === Number.NEGATIVE_INFINITY. Actual: '";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "*";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "-";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.1;
__n46["raw"] := "1.1";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44["left"] := __n45;
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "Number";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "MAX_VALUE";
__n49["raw"] := "\"MAX_VALUE\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n44["right"] := __n47;
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n25["consequent"] := __n36;
__n25["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "*";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Number";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "MAX_VALUE";
__n55["raw"] := "\"MAX_VALUE\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["left"] := __n53;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.;
__n56["raw"] := "1";
__n52["right"] := __n56;
__n51["left"] := __n52;
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "Number";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "MAX_VALUE";
__n59["raw"] := "\"MAX_VALUE\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n51["right"] := __n57;
__n50["test"] := __n51;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#3: Number.MAX_VALUE * 1 === Number.MAX_VALUE. Actual: ";
__n67["raw"] := "'#3: Number.MAX_VALUE * 1 === Number.MAX_VALUE. Actual: '";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "*";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "MAX_VALUE";
__n71["raw"] := "\"MAX_VALUE\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n68["left"] := __n69;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n68["right"] := __n72;
__n66["right"] := __n68;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n50["consequent"] := __n60;
__n50["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!==";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "*";
__n76 := {  };
__n76["type"] := "UnaryExpression";
__n76["operator"] := "-";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n76["argument"] := __n77;
__n76["prefix"] := true;
__n75["left"] := __n76;
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Number";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "MAX_VALUE";
__n80["raw"] := "\"MAX_VALUE\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n75["right"] := __n78;
__n74["left"] := __n75;
__n81 := {  };
__n81["type"] := "UnaryExpression";
__n81["operator"] := "-";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Number";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "MAX_VALUE";
__n84["raw"] := "\"MAX_VALUE\"";
__n82["property"] := __n84;
__n82["computed"] := true;
__n81["argument"] := __n82;
__n81["prefix"] := true;
__n74["right"] := __n81;
__n73["test"] := __n74;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#4: -1 * Number.MAX_VALUE === -Number.MAX_VALUE. Actual: ";
__n92["raw"] := "'#4: -1 * Number.MAX_VALUE === -Number.MAX_VALUE. Actual: '";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "*";
__n94 := {  };
__n94["type"] := "UnaryExpression";
__n94["operator"] := "-";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 1.;
__n95["raw"] := "1";
__n94["argument"] := __n95;
__n94["prefix"] := true;
__n93["left"] := __n94;
__n96 := {  };
__n96["type"] := "MemberExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Number";
__n96["object"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "MAX_VALUE";
__n98["raw"] := "\"MAX_VALUE\"";
__n96["property"] := __n98;
__n96["computed"] := true;
__n93["right"] := __n96;
__n91["right"] := __n93;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n73["consequent"] := __n85;
__n73["alternate"] := null;
__n1 := [ __n2, __n25, __n50, __n73 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n99 := [  ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}