function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := true;
__n7["raw"] := "true";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: new true throw TypeError";
__n13["raw"] := "'#1: new true throw TypeError'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "instanceof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "TypeError";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n19["right"] := __n23;
__n18["test"] := __n19;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1: new true throw TypeError";
__n30["raw"] := "'#1: new true throw TypeError'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n18["consequent"] := __n24;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n2["handler"] := __n14;
__n2["finalizer"] := null;
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["id"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := true;
__n38["raw"] := "true";
__n36["init"] := __n38;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["callee"] := __n41;
__n42 := [  ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: var x = true; new x throw TypeError";
__n47["raw"] := "'#2: var x = true; new x throw TypeError'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n33 := [ __n34, __n39, __n43 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n48 := {  };
__n48["type"] := "CatchClause";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "e";
__n48["param"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "!==";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "instanceof";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "TypeError";
__n54["right"] := __n56;
__n53["left"] := __n54;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := true;
__n57["raw"] := "true";
__n53["right"] := __n57;
__n52["test"] := __n53;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#2: var x = true; new x throw TypeError";
__n64["raw"] := "'#2: var x = true; new x throw TypeError'";
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n52["consequent"] := __n58;
__n52["alternate"] := null;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n48["body"] := __n50;
__n31["handler"] := __n48;
__n31["finalizer"] := null;
__n65 := {  };
__n65["type"] := "TryStatement";
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "VariableDeclaration";
__n70 := {  };
__n70["type"] := "VariableDeclarator";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "x";
__n70["id"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := true;
__n72["raw"] := "true";
__n70["init"] := __n72;
__n69 := [ __n70 ];
__n68["declarations"] := __n69;
__n68["kind"] := "var";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "NewExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n74["callee"] := __n75;
__n76 := [  ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "$ERROR";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#3: var x = true; new x() throw TypeError";
__n81["raw"] := "'#3: var x = true; new x() throw TypeError'";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["expression"] := __n78;
__n67 := [ __n68, __n73, __n77 ];
__n66["body"] := __n67;
__n65["block"] := __n66;
__n82 := {  };
__n82["type"] := "CatchClause";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "e";
__n82["param"] := __n83;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "!==";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "instanceof";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "e";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "TypeError";
__n88["right"] := __n90;
__n87["left"] := __n88;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := true;
__n91["raw"] := "true";
__n87["right"] := __n91;
__n86["test"] := __n87;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#3: var x = true; new x() throw TypeError";
__n98["raw"] := "'#3: var x = true; new x() throw TypeError'";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n86["consequent"] := __n92;
__n86["alternate"] := null;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n82["body"] := __n84;
__n65["handler"] := __n82;
__n65["finalizer"] := null;
__n1 := [ __n2, __n31, __n65 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n99 := [ "x" ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}