function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "ThisExpression";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: new this throw TypeError";
__n13["raw"] := "'#1: new this throw TypeError'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "instanceof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "TypeError";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n19["right"] := __n23;
__n18["test"] := __n19;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1: new this throw TypeError";
__n30["raw"] := "'#1: new this throw TypeError'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n18["consequent"] := __n24;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n2["handler"] := __n14;
__n2["finalizer"] := null;
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "ThisExpression";
__n35["callee"] := __n36;
__n37 := [  ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: new this() throw TypeError";
__n42["raw"] := "'#2: new this() throw TypeError'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n33 := [ __n34, __n38 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n43 := {  };
__n43["type"] := "CatchClause";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "e";
__n43["param"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "instanceof";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "TypeError";
__n49["right"] := __n51;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := true;
__n52["raw"] := "true";
__n48["right"] := __n52;
__n47["test"] := __n48;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#2: new this() throw TypeError";
__n59["raw"] := "'#2: new this() throw TypeError'";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n47["consequent"] := __n53;
__n47["alternate"] := null;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n43["body"] := __n45;
__n31["handler"] := __n43;
__n31["finalizer"] := null;
__n1 := [ __n2, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n60 := [  ];
__n0["variableDeclarations"] := __n60;
__n61 := [  ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}