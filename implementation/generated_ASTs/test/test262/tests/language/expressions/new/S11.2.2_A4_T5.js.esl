function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Math";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: new Math throw TypeError";
__n13["raw"] := "'#1: new Math throw TypeError'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "instanceof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "TypeError";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := true;
__n23["raw"] := "true";
__n19["right"] := __n23;
__n18["test"] := __n19;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1: new Math throw TypeError";
__n30["raw"] := "'#1: new Math throw TypeError'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n18["consequent"] := __n24;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n2["handler"] := __n14;
__n2["finalizer"] := null;
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "NewExpression";
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Math";
__n36["callee"] := __n37;
__n38 := [  ];
__n36["arguments"] := __n38;
__n35["callee"] := __n36;
__n39 := [  ];
__n35["arguments"] := __n39;
__n34["expression"] := __n35;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: new new Math() throw TypeError";
__n44["raw"] := "'#2: new new Math() throw TypeError'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n33 := [ __n34, __n40 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n45 := {  };
__n45["type"] := "CatchClause";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n45["param"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "instanceof";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "e";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "TypeError";
__n51["right"] := __n53;
__n50["left"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := true;
__n54["raw"] := "true";
__n50["right"] := __n54;
__n49["test"] := __n50;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#2: new new Math() throw TypeError";
__n61["raw"] := "'#2: new new Math() throw TypeError'";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n49["consequent"] := __n55;
__n49["alternate"] := null;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n45["body"] := __n47;
__n31["handler"] := __n45;
__n31["finalizer"] := null;
__n62 := {  };
__n62["type"] := "TryStatement";
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "VariableDeclaration";
__n67 := {  };
__n67["type"] := "VariableDeclarator";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "x";
__n67["id"] := __n68;
__n69 := {  };
__n69["type"] := "NewExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Math";
__n69["callee"] := __n70;
__n71 := [  ];
__n69["arguments"] := __n71;
__n67["init"] := __n69;
__n66 := [ __n67 ];
__n65["declarations"] := __n66;
__n65["kind"] := "var";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "NewExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "x";
__n73["callee"] := __n74;
__n75 := [  ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#3: var x = new Math(); new x() throw TypeError";
__n80["raw"] := "'#3: var x = new Math(); new x() throw TypeError'";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n64 := [ __n65, __n72, __n76 ];
__n63["body"] := __n64;
__n62["block"] := __n63;
__n81 := {  };
__n81["type"] := "CatchClause";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "e";
__n81["param"] := __n82;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "!==";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "instanceof";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "e";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "TypeError";
__n87["right"] := __n89;
__n86["left"] := __n87;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := true;
__n90["raw"] := "true";
__n86["right"] := __n90;
__n85["test"] := __n86;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ExpressionStatement";
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "$ERROR";
__n94["callee"] := __n95;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#3: var x = new Math(); new x() throw TypeError";
__n97["raw"] := "'#3: var x = new Math(); new x() throw TypeError'";
__n96 := [ __n97 ];
__n94["arguments"] := __n96;
__n93["expression"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n85["consequent"] := __n91;
__n85["alternate"] := null;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n81["body"] := __n83;
__n62["handler"] := __n81;
__n62["finalizer"] := null;
__n1 := [ __n2, __n31, __n62 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n98 := [ "x" ];
__n0["variableDeclarations"] := __n98;
__n99 := [  ];
__n0["functionDeclarations"] := __n99;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}