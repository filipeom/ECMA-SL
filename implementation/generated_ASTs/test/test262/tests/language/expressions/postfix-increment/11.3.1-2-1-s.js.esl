function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "testcase";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "testcase";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n10 := [  ];
__n0["variableDeclarations"] := __n10;
__n12 := {  };
__n12["type"] := "FunctionDeclaration";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "testcase";
__n12["id"] := __n13;
__n14 := [  ];
__n12["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "blah";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "arguments";
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "throws";
__n26["raw"] := "\"throws\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "SyntaxError";
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "eval";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "arguments++;";
__n37["raw"] := "\"arguments++;\"";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n38 := [  ];
__n31["variableDeclarations"] := __n38;
__n39 := [  ];
__n31["functionDeclarations"] := __n39;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["expression"] := false;
__n29["async"] := false;
__n27 := [ __n28, __n29 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "assert";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "sameValue";
__n44["raw"] := "\"sameValue\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "blah";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "arguments";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "blah";
__n48["raw"] := "'blah'";
__n45 := [ __n46, __n47, __n48 ];
__n41["arguments"] := __n45;
__n40["expression"] := __n41;
__n16 := [ __n17, __n22, __n40 ];
__n15["body"] := __n16;
__n49 := [ "blah" ];
__n15["variableDeclarations"] := __n49;
__n50 := [  ];
__n15["functionDeclarations"] := __n50;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n12["body"] := __n15;
__n12["generator"] := false;
__n12["expression"] := false;
__n12["async"] := false;
__n11 := [ __n12 ];
__n0["functionDeclarations"] := __n11;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}