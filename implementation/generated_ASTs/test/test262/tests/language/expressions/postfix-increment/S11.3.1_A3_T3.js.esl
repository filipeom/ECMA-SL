function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "UpdateExpression";
__n8["operator"] := "++";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["argument"] := __n9;
__n8["prefix"] := false;
__n7["expression"] := __n8;
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n13["right"] := __n15;
__n11["right"] := __n13;
__n10["test"] := __n11;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: var x = \"1\"; x++; x === 1 + 1. Actual: ";
__n23["raw"] := "'#1: var x = \"1\"; x++; x === 1 + 1. Actual: '";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "x";
__n22["right"] := __n24;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n10["consequent"] := __n16;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "x";
__n29["raw"] := "\"x\"";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "UpdateExpression";
__n31["operator"] := "++";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["argument"] := __n32;
__n31["prefix"] := false;
__n30["expression"] := __n31;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "isNaN";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["left"] := __n35;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := true;
__n39["raw"] := "true";
__n34["right"] := __n39;
__n33["test"] := __n34;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#2: var x = \"x\"; x++; x === Not-a-Number. Actual: ";
__n47["raw"] := "'#2: var x = \"x\"; x++; x === Not-a-Number. Actual: '";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "x";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n33["consequent"] := __n40;
__n33["alternate"] := null;
__n49 := {  };
__n49["type"] := "VariableDeclaration";
__n51 := {  };
__n51["type"] := "VariableDeclarator";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n51["id"] := __n52;
__n53 := {  };
__n53["type"] := "NewExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Number";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "-1";
__n56["raw"] := "\"-1\"";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n51["init"] := __n53;
__n50 := [ __n51 ];
__n49["declarations"] := __n50;
__n49["kind"] := "var";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "UpdateExpression";
__n58["operator"] := "++";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "x";
__n58["argument"] := __n59;
__n58["prefix"] := false;
__n57["expression"] := __n58;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "x";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "+";
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "-";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63["left"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n63["right"] := __n66;
__n61["right"] := __n63;
__n60["test"] := __n61;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#3: var x = new String(\"-1\"); x++; x === -1 + 1. Actual: ";
__n74["raw"] := "'#3: var x = new String(\"-1\"); x++; x === -1 + 1. Actual: '";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n60["consequent"] := __n67;
__n60["alternate"] := null;
__n1 := [ __n2, __n7, __n10, __n25, __n30, __n33, __n49, __n57, __n60 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n76 := [ "x" ];
__n0["variableDeclarations"] := __n76;
__n77 := [  ];
__n0["functionDeclarations"] := __n77;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}