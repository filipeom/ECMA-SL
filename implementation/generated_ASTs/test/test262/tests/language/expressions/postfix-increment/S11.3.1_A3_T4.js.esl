function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "UpdateExpression";
__n7["operator"] := "++";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["argument"] := __n8;
__n7["prefix"] := false;
__n6["expression"] := __n7;
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "isNaN";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["left"] := __n11;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := true;
__n15["raw"] := "true";
__n10["right"] := __n15;
__n9["test"] := __n10;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: var x; x++; x === Not-a-Number. Actual: ";
__n23["raw"] := "'#1: var x; x++; x === Not-a-Number. Actual: '";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "x";
__n22["right"] := __n24;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n9["consequent"] := __n16;
__n9["alternate"] := null;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 'null;
__n29["raw"] := "\"'null\"";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "UpdateExpression";
__n31["operator"] := "++";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["argument"] := __n32;
__n31["prefix"] := false;
__n30["expression"] := __n31;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "x";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n34["right"] := __n36;
__n33["test"] := __n34;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: var x = null; x++; x === 1. Actual: ";
__n44["raw"] := "'#2: var x = null; x++; x === 1. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x";
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n33["consequent"] := __n37;
__n33["alternate"] := null;
__n1 := [ __n2, __n6, __n9, __n25, __n30, __n33 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n46 := [ "x" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}