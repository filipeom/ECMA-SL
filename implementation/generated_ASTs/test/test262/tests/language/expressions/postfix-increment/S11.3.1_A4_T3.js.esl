function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "y";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "UpdateExpression";
__n11["operator"] := "++";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["argument"] := __n12;
__n11["prefix"] := false;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "!==";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "y";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n14["right"] := __n16;
__n13["test"] := __n14;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: var x = \"1\"; var y = x++; y === 1. Actual: ";
__n24["raw"] := "'#1: var x = \"1\"; var y = x++; y === 1. Actual: '";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "y";
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n13["consequent"] := __n17;
__n13["alternate"] := null;
__n26 := {  };
__n26["type"] := "VariableDeclaration";
__n28 := {  };
__n28["type"] := "VariableDeclarator";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28["id"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "x";
__n30["raw"] := "\"x\"";
__n28["init"] := __n30;
__n27 := [ __n28 ];
__n26["declarations"] := __n27;
__n26["kind"] := "var";
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "y";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "UpdateExpression";
__n35["operator"] := "++";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["argument"] := __n36;
__n35["prefix"] := false;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "isNaN";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "y";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["left"] := __n39;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := true;
__n43["raw"] := "true";
__n38["right"] := __n43;
__n37["test"] := __n38;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: var x = \"x\"; var y = x++; y === Not-a-Number. Actual: ";
__n51["raw"] := "'#2: var x = \"x\"; var y = x++; y === Not-a-Number. Actual: '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "y";
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n37["consequent"] := __n44;
__n37["alternate"] := null;
__n53 := {  };
__n53["type"] := "VariableDeclaration";
__n55 := {  };
__n55["type"] := "VariableDeclarator";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["id"] := __n56;
__n57 := {  };
__n57["type"] := "NewExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "String";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "-1";
__n60["raw"] := "\"-1\"";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n55["init"] := __n57;
__n54 := [ __n55 ];
__n53["declarations"] := __n54;
__n53["kind"] := "var";
__n61 := {  };
__n61["type"] := "VariableDeclaration";
__n63 := {  };
__n63["type"] := "VariableDeclarator";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "y";
__n63["id"] := __n64;
__n65 := {  };
__n65["type"] := "UpdateExpression";
__n65["operator"] := "++";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n65["argument"] := __n66;
__n65["prefix"] := false;
__n63["init"] := __n65;
__n62 := [ __n63 ];
__n61["declarations"] := __n62;
__n61["kind"] := "var";
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "y";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "UnaryExpression";
__n70["operator"] := "-";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 1.;
__n71["raw"] := "1";
__n70["argument"] := __n71;
__n70["prefix"] := true;
__n68["right"] := __n70;
__n67["test"] := __n68;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "+";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#3: var x = new String(\"-1\"); var y = x++; y === -1. Actual: ";
__n79["raw"] := "'#3: var x = new String(\"-1\"); var y = x++; y === -1. Actual: '";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "y";
__n78["right"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n67["consequent"] := __n72;
__n67["alternate"] := null;
__n1 := [ __n2, __n7, __n13, __n26, __n31, __n37, __n53, __n61, __n67 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n81 := [ "x", "y" ];
__n0["variableDeclarations"] := __n81;
__n82 := [  ];
__n0["functionDeclarations"] := __n82;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}