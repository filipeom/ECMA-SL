function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "UpdateExpression";
__n9["operator"] := "++";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n8["left"] := __n9;
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "+";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n11["right"] := __n13;
__n8["right"] := __n11;
__n7["test"] := __n8;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: var x = 1; ++x === 1 + 1. Actual: ";
__n21["raw"] := "'#1: var x = 1; ++x === 1 + 1. Actual: '";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "UpdateExpression";
__n22["operator"] := "++";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "x";
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n7["consequent"] := __n14;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n29["right"] := __n31;
__n27["right"] := __n29;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1: var x = 1; ++x; x === 1 + 1. Actual: ";
__n39["raw"] := "'#1: var x = 1; ++x; x === 1 + 1. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "x";
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n7["alternate"] := __n24;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "ThisExpression";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "x";
__n45["raw"] := "\"x\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.;
__n46["raw"] := "1";
__n42["right"] := __n46;
__n41["expression"] := __n42;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "UpdateExpression";
__n49["operator"] := "++";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "ThisExpression";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "x";
__n52["raw"] := "\"x\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["left"] := __n49;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1.;
__n54["raw"] := "1";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 1.;
__n55["raw"] := "1";
__n53["right"] := __n55;
__n48["right"] := __n53;
__n47["test"] := __n48;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2: this.x = 1; ++this.x === 1 + 1. Actual: ";
__n63["raw"] := "'#2: this.x = 1; ++this.x === 1 + 1. Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "UpdateExpression";
__n64["operator"] := "++";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n66 := {  };
__n66["type"] := "ThisExpression";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "x";
__n67["raw"] := "\"x\"";
__n65["property"] := __n67;
__n65["computed"] := true;
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n47["consequent"] := __n56;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "ThisExpression";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "x";
__n74["raw"] := "\"x\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n71["left"] := __n72;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 1.;
__n76["raw"] := "1";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n75["right"] := __n77;
__n71["right"] := __n75;
__n70["test"] := __n71;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "+";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "#2: this.x = 1; ++this.x; this.x === 1 + 1. Actual: ";
__n85["raw"] := "'#2: this.x = 1; ++this.x; this.x === 1 + 1. Actual: '";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "ThisExpression";
__n86["object"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "x";
__n88["raw"] := "\"x\"";
__n86["property"] := __n88;
__n86["computed"] := true;
__n84["right"] := __n86;
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n70["consequent"] := __n78;
__n70["alternate"] := null;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n47["alternate"] := __n68;
__n89 := {  };
__n89["type"] := "VariableDeclaration";
__n91 := {  };
__n91["type"] := "VariableDeclarator";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "object";
__n91["id"] := __n92;
__n93 := {  };
__n93["type"] := "NewExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "Object";
__n93["callee"] := __n94;
__n95 := [  ];
__n93["arguments"] := __n95;
__n91["init"] := __n93;
__n90 := [ __n91 ];
__n89["declarations"] := __n90;
__n89["kind"] := "var";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "AssignmentExpression";
__n97["operator"] := "=";
__n98 := {  };
__n98["type"] := "MemberExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "object";
__n98["object"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "prop";
__n100["raw"] := "\"prop\"";
__n98["property"] := __n100;
__n98["computed"] := true;
__n97["left"] := __n98;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 1.;
__n101["raw"] := "1";
__n97["right"] := __n101;
__n96["expression"] := __n97;
__n102 := {  };
__n102["type"] := "IfStatement";
__n103 := {  };
__n103["type"] := "BinaryExpression";
__n103["operator"] := "!==";
__n104 := {  };
__n104["type"] := "UpdateExpression";
__n104["operator"] := "++";
__n105 := {  };
__n105["type"] := "MemberExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "object";
__n105["object"] := __n106;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "prop";
__n107["raw"] := "\"prop\"";
__n105["property"] := __n107;
__n105["computed"] := true;
__n104["argument"] := __n105;
__n104["prefix"] := true;
__n103["left"] := __n104;
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "+";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := 1.;
__n109["raw"] := "1";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 1.;
__n110["raw"] := "1";
__n108["right"] := __n110;
__n103["right"] := __n108;
__n102["test"] := __n103;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "BinaryExpression";
__n117["operator"] := "+";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "#3: var object = new Object(); object.prop = 1; ++object.prop === 1 + 1. Actual: ";
__n118["raw"] := "'#3: var object = new Object(); object.prop = 1; ++object.prop === 1 + 1. Actual: '";
__n117["left"] := __n118;
__n119 := {  };
__n119["type"] := "UpdateExpression";
__n119["operator"] := "++";
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "object";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "prop";
__n122["raw"] := "\"prop\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n119["argument"] := __n120;
__n119["prefix"] := true;
__n117["right"] := __n119;
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n102["consequent"] := __n111;
__n123 := {  };
__n123["type"] := "BlockStatement";
__n125 := {  };
__n125["type"] := "IfStatement";
__n126 := {  };
__n126["type"] := "BinaryExpression";
__n126["operator"] := "!==";
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "ThisExpression";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "x";
__n129["raw"] := "\"x\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n126["left"] := __n127;
__n130 := {  };
__n130["type"] := "BinaryExpression";
__n130["operator"] := "+";
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := 1.;
__n131["raw"] := "1";
__n130["left"] := __n131;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 1.;
__n132["raw"] := "1";
__n130["right"] := __n132;
__n126["right"] := __n130;
__n125["test"] := __n126;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$ERROR";
__n136["callee"] := __n137;
__n139 := {  };
__n139["type"] := "BinaryExpression";
__n139["operator"] := "+";
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "#3: var object = new Object(); object.prop = 1; ++object.prop; object.prop === 1 + 1. Actual: ";
__n140["raw"] := "'#3: var object = new Object(); object.prop = 1; ++object.prop; object.prop === 1 + 1. Actual: '";
__n139["left"] := __n140;
__n141 := {  };
__n141["type"] := "MemberExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "object";
__n141["object"] := __n142;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "prop";
__n143["raw"] := "\"prop\"";
__n141["property"] := __n143;
__n141["computed"] := true;
__n139["right"] := __n141;
__n138 := [ __n139 ];
__n136["arguments"] := __n138;
__n135["expression"] := __n136;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n125["consequent"] := __n133;
__n125["alternate"] := null;
__n124 := [ __n125 ];
__n123["body"] := __n124;
__n102["alternate"] := __n123;
__n1 := [ __n2, __n7, __n41, __n47, __n89, __n96, __n102 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n144 := [ "x", "object" ];
__n0["variableDeclarations"] := __n144;
__n145 := [  ];
__n0["functionDeclarations"] := __n145;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}