function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.1;
__n6["raw"] := "0.1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "UpdateExpression";
__n8["operator"] := "++";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["expression"] := __n8;
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.1;
__n14["raw"] := "0.1";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n13["right"] := __n15;
__n11["right"] := __n13;
__n10["test"] := __n11;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: var x = 0.1; ++x; x === 0.1 + 1. Actual: ";
__n23["raw"] := "'#1: var x = 0.1; ++x; x === 0.1 + 1. Actual: '";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "x";
__n22["right"] := __n24;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n10["consequent"] := __n16;
__n10["alternate"] := null;
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "NewExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Number";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "-";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.1;
__n33["raw"] := "1.1";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "UpdateExpression";
__n35["operator"] := "++";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["expression"] := __n35;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "x";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "-";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.1;
__n42["raw"] := "1.1";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["left"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 1.;
__n43["raw"] := "1";
__n40["right"] := __n43;
__n38["right"] := __n40;
__n37["test"] := __n38;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: var x = new Number(-1.1); ++x; x === -1.1 + 1. Actual: ";
__n51["raw"] := "'#2: var x = new Number(-1.1); ++x; x === -1.1 + 1. Actual: '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n37["consequent"] := __n44;
__n37["alternate"] := null;
__n1 := [ __n2, __n7, __n10, __n25, __n34, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n53 := [ "x" ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}