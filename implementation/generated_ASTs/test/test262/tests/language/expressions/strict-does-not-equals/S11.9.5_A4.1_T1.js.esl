function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!==";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "NaN";
__n7["raw"] := "\"NaN\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := true;
__n8["raw"] := "true";
__n4["right"] := __n8;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: NaN !== true";
__n15["raw"] := "'#1: NaN !== true'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "!";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Number";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "NaN";
__n21["raw"] := "\"NaN\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n18["right"] := __n22;
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["test"] := __n17;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#2: NaN !== 1";
__n29["raw"] := "'#2: NaN !== 1'";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n16["consequent"] := __n23;
__n16["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "!";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "NaN";
__n35["raw"] := "\"NaN\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "NaN";
__n38["raw"] := "\"NaN\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n32["right"] := __n36;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["test"] := __n31;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#3: NaN !== NaN";
__n45["raw"] := "'#3: NaN !== NaN'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n30["consequent"] := __n39;
__n30["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Number";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "NaN";
__n51["raw"] := "\"NaN\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "POSITIVE_INFINITY";
__n54["raw"] := "\"POSITIVE_INFINITY\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n48["right"] := __n52;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#4: NaN !== +Infinity";
__n61["raw"] := "'#4: NaN !== +Infinity'";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n46["consequent"] := __n55;
__n46["alternate"] := null;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "UnaryExpression";
__n63["operator"] := "!";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "Number";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "NaN";
__n67["raw"] := "\"NaN\"";
__n65["property"] := __n67;
__n65["computed"] := true;
__n64["left"] := __n65;
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Number";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "NEGATIVE_INFINITY";
__n70["raw"] := "\"NEGATIVE_INFINITY\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n64["right"] := __n68;
__n63["argument"] := __n64;
__n63["prefix"] := true;
__n62["test"] := __n63;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#5: NaN !== -Infinity";
__n77["raw"] := "'#5: NaN !== -Infinity'";
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n62["consequent"] := __n71;
__n62["alternate"] := null;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "UnaryExpression";
__n79["operator"] := "!";
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "!==";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "Number";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "NaN";
__n83["raw"] := "\"NaN\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["left"] := __n81;
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "Number";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "MAX_VALUE";
__n86["raw"] := "\"MAX_VALUE\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n80["right"] := __n84;
__n79["argument"] := __n80;
__n79["prefix"] := true;
__n78["test"] := __n79;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#6: NaN !== Number.MAX_VALUE";
__n93["raw"] := "'#6: NaN !== Number.MAX_VALUE'";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n78["consequent"] := __n87;
__n78["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "UnaryExpression";
__n95["operator"] := "!";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "!==";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "Number";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "NaN";
__n99["raw"] := "\"NaN\"";
__n97["property"] := __n99;
__n97["computed"] := true;
__n96["left"] := __n97;
__n100 := {  };
__n100["type"] := "MemberExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Number";
__n100["object"] := __n101;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "MIN_VALUE";
__n102["raw"] := "\"MIN_VALUE\"";
__n100["property"] := __n102;
__n100["computed"] := true;
__n96["right"] := __n100;
__n95["argument"] := __n96;
__n95["prefix"] := true;
__n94["test"] := __n95;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#7: NaN !== Number.MIN_VALUE";
__n109["raw"] := "'#7: NaN !== Number.MIN_VALUE'";
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n94["consequent"] := __n103;
__n94["alternate"] := null;
__n110 := {  };
__n110["type"] := "IfStatement";
__n111 := {  };
__n111["type"] := "UnaryExpression";
__n111["operator"] := "!";
__n112 := {  };
__n112["type"] := "BinaryExpression";
__n112["operator"] := "!==";
__n113 := {  };
__n113["type"] := "MemberExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "Number";
__n113["object"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "NaN";
__n115["raw"] := "\"NaN\"";
__n113["property"] := __n115;
__n113["computed"] := true;
__n112["left"] := __n113;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "string";
__n116["raw"] := "\"string\"";
__n112["right"] := __n116;
__n111["argument"] := __n112;
__n111["prefix"] := true;
__n110["test"] := __n111;
__n117 := {  };
__n117["type"] := "BlockStatement";
__n119 := {  };
__n119["type"] := "ExpressionStatement";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "$ERROR";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "#8: NaN !== \"string\"";
__n123["raw"] := "'#8: NaN !== \"string\"'";
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["expression"] := __n120;
__n118 := [ __n119 ];
__n117["body"] := __n118;
__n110["consequent"] := __n117;
__n110["alternate"] := null;
__n124 := {  };
__n124["type"] := "IfStatement";
__n125 := {  };
__n125["type"] := "UnaryExpression";
__n125["operator"] := "!";
__n126 := {  };
__n126["type"] := "BinaryExpression";
__n126["operator"] := "!==";
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "Number";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "NaN";
__n129["raw"] := "\"NaN\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n126["left"] := __n127;
__n130 := {  };
__n130["type"] := "NewExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "Object";
__n130["callee"] := __n131;
__n132 := [  ];
__n130["arguments"] := __n132;
__n126["right"] := __n130;
__n125["argument"] := __n126;
__n125["prefix"] := true;
__n124["test"] := __n125;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$ERROR";
__n136["callee"] := __n137;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "#9: NaN !== new Object()";
__n139["raw"] := "'#9: NaN !== new Object()'";
__n138 := [ __n139 ];
__n136["arguments"] := __n138;
__n135["expression"] := __n136;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n124["consequent"] := __n133;
__n124["alternate"] := null;
__n1 := [ __n2, __n16, __n30, __n46, __n62, __n78, __n94, __n110, __n124 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n140 := [  ];
__n0["variableDeclarations"] := __n140;
__n141 := [  ];
__n0["functionDeclarations"] := __n141;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}