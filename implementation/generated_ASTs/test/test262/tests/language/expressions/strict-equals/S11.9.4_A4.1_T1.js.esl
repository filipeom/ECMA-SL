function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "===";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "NaN";
__n6["raw"] := "\"NaN\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := true;
__n7["raw"] := "true";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: NaN !== true";
__n14["raw"] := "'#1: NaN !== true'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "===";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "Number";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "NaN";
__n19["raw"] := "\"NaN\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n16["right"] := __n20;
__n15["test"] := __n16;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: NaN !== 1";
__n27["raw"] := "'#2: NaN !== 1'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n15["consequent"] := __n21;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "===";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Number";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "NaN";
__n32["raw"] := "\"NaN\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "NaN";
__n35["raw"] := "\"NaN\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n29["right"] := __n33;
__n28["test"] := __n29;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#3: NaN !== NaN";
__n42["raw"] := "'#3: NaN !== NaN'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n28["consequent"] := __n36;
__n28["alternate"] := null;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Number";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "NaN";
__n47["raw"] := "\"NaN\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Number";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "POSITIVE_INFINITY";
__n50["raw"] := "\"POSITIVE_INFINITY\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n44["right"] := __n48;
__n43["test"] := __n44;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#4: NaN !== +Infinity";
__n57["raw"] := "'#4: NaN !== +Infinity'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n43["consequent"] := __n51;
__n43["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "===";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "Number";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "NaN";
__n62["raw"] := "\"NaN\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "MemberExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "Number";
__n63["object"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "NEGATIVE_INFINITY";
__n65["raw"] := "\"NEGATIVE_INFINITY\"";
__n63["property"] := __n65;
__n63["computed"] := true;
__n59["right"] := __n63;
__n58["test"] := __n59;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#5: NaN !== -Infinity";
__n72["raw"] := "'#5: NaN !== -Infinity'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n58["consequent"] := __n66;
__n58["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "===";
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Number";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "NaN";
__n77["raw"] := "\"NaN\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n74["left"] := __n75;
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "Number";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "MAX_VALUE";
__n80["raw"] := "\"MAX_VALUE\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n74["right"] := __n78;
__n73["test"] := __n74;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$ERROR";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#6: NaN !== Number.MAX_VALUE";
__n87["raw"] := "'#6: NaN !== Number.MAX_VALUE'";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n73["consequent"] := __n81;
__n73["alternate"] := null;
__n88 := {  };
__n88["type"] := "IfStatement";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "===";
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Number";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "NaN";
__n92["raw"] := "\"NaN\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n89["left"] := __n90;
__n93 := {  };
__n93["type"] := "MemberExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "Number";
__n93["object"] := __n94;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "MIN_VALUE";
__n95["raw"] := "\"MIN_VALUE\"";
__n93["property"] := __n95;
__n93["computed"] := true;
__n89["right"] := __n93;
__n88["test"] := __n89;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "#7: NaN !== Number.MIN_VALUE";
__n102["raw"] := "'#7: NaN !== Number.MIN_VALUE'";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n88["consequent"] := __n96;
__n88["alternate"] := null;
__n103 := {  };
__n103["type"] := "IfStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "===";
__n105 := {  };
__n105["type"] := "MemberExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "Number";
__n105["object"] := __n106;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "NaN";
__n107["raw"] := "\"NaN\"";
__n105["property"] := __n107;
__n105["computed"] := true;
__n104["left"] := __n105;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "string";
__n108["raw"] := "\"string\"";
__n104["right"] := __n108;
__n103["test"] := __n104;
__n109 := {  };
__n109["type"] := "BlockStatement";
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "$ERROR";
__n112["callee"] := __n113;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "#8: NaN !== \"string\"";
__n115["raw"] := "'#8: NaN !== \"string\"'";
__n114 := [ __n115 ];
__n112["arguments"] := __n114;
__n111["expression"] := __n112;
__n110 := [ __n111 ];
__n109["body"] := __n110;
__n103["consequent"] := __n109;
__n103["alternate"] := null;
__n116 := {  };
__n116["type"] := "IfStatement";
__n117 := {  };
__n117["type"] := "BinaryExpression";
__n117["operator"] := "===";
__n118 := {  };
__n118["type"] := "MemberExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "Number";
__n118["object"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "NaN";
__n120["raw"] := "\"NaN\"";
__n118["property"] := __n120;
__n118["computed"] := true;
__n117["left"] := __n118;
__n121 := {  };
__n121["type"] := "NewExpression";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "Object";
__n121["callee"] := __n122;
__n123 := [  ];
__n121["arguments"] := __n123;
__n117["right"] := __n121;
__n116["test"] := __n117;
__n124 := {  };
__n124["type"] := "BlockStatement";
__n126 := {  };
__n126["type"] := "ExpressionStatement";
__n127 := {  };
__n127["type"] := "CallExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "$ERROR";
__n127["callee"] := __n128;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "#9: NaN !== new Object()";
__n130["raw"] := "'#9: NaN !== new Object()'";
__n129 := [ __n130 ];
__n127["arguments"] := __n129;
__n126["expression"] := __n127;
__n125 := [ __n126 ];
__n124["body"] := __n125;
__n116["consequent"] := __n124;
__n116["alternate"] := null;
__n1 := [ __n2, __n15, __n28, __n43, __n58, __n73, __n88, __n103, __n116 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n131 := [  ];
__n0["variableDeclarations"] := __n131;
__n132 := [  ];
__n0["functionDeclarations"] := __n132;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}