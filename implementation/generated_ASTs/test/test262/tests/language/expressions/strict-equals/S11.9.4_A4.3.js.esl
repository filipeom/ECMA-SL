function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "===";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "POSITIVE_INFINITY";
__n7["raw"] := "\"POSITIVE_INFINITY\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["left"] := __n5;
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "POSITIVE_INFINITY";
__n10["raw"] := "\"POSITIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n4["right"] := __n8;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: +Infinity === +Infinity";
__n17["raw"] := "'#1: +Infinity === +Infinity'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "!";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Number";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "NEGATIVE_INFINITY";
__n23["raw"] := "\"NEGATIVE_INFINITY\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["left"] := __n21;
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Number";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "NEGATIVE_INFINITY";
__n26["raw"] := "\"NEGATIVE_INFINITY\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n20["right"] := __n24;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["test"] := __n19;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#2: -Infinity === -Infinity";
__n33["raw"] := "'#2: -Infinity === -Infinity'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n18["consequent"] := __n27;
__n18["alternate"] := null;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "!";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "===";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 13.;
__n37["raw"] := "13";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 13.;
__n38["raw"] := "13";
__n36["right"] := __n38;
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["test"] := __n35;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#3: 13 === 13";
__n45["raw"] := "'#3: 13 === 13'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n34["consequent"] := __n39;
__n34["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "===";
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "-";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 13.;
__n50["raw"] := "13";
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["left"] := __n49;
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "-";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 13.;
__n52["raw"] := "13";
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n48["right"] := __n51;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#4: -13 === -13";
__n59["raw"] := "'#4: -13 === -13'";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n46["consequent"] := __n53;
__n46["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "!";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "===";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1.3;
__n63["raw"] := "1.3";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.3;
__n64["raw"] := "1.3";
__n62["right"] := __n64;
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60["test"] := __n61;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#5: 1.3 === 1.3";
__n71["raw"] := "'#5: 1.3 === 1.3'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n60["consequent"] := __n65;
__n60["alternate"] := null;
__n72 := {  };
__n72["type"] := "IfStatement";
__n73 := {  };
__n73["type"] := "UnaryExpression";
__n73["operator"] := "!";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "===";
__n75 := {  };
__n75["type"] := "UnaryExpression";
__n75["operator"] := "-";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 1.3;
__n76["raw"] := "1.3";
__n75["argument"] := __n76;
__n75["prefix"] := true;
__n74["left"] := __n75;
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "-";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 1.3;
__n78["raw"] := "1.3";
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n74["right"] := __n77;
__n73["argument"] := __n74;
__n73["prefix"] := true;
__n72["test"] := __n73;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "$ERROR";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "#6: -1.3 === -1.3";
__n85["raw"] := "'#6: -1.3 === -1.3'";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["expression"] := __n82;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n72["consequent"] := __n79;
__n72["alternate"] := null;
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "UnaryExpression";
__n87["operator"] := "!";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "===";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "Number";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "POSITIVE_INFINITY";
__n91["raw"] := "\"POSITIVE_INFINITY\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n88["left"] := __n89;
__n92 := {  };
__n92["type"] := "UnaryExpression";
__n92["operator"] := "-";
__n93 := {  };
__n93["type"] := "MemberExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "Number";
__n93["object"] := __n94;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "NEGATIVE_INFINITY";
__n95["raw"] := "\"NEGATIVE_INFINITY\"";
__n93["property"] := __n95;
__n93["computed"] := true;
__n92["argument"] := __n93;
__n92["prefix"] := true;
__n88["right"] := __n92;
__n87["argument"] := __n88;
__n87["prefix"] := true;
__n86["test"] := __n87;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "#7: +Infinity === -(-Infinity)";
__n102["raw"] := "'#7: +Infinity === -(-Infinity)'";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n86["consequent"] := __n96;
__n86["alternate"] := null;
__n103 := {  };
__n103["type"] := "IfStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "===";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := 1.;
__n105["raw"] := "1";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 0.999999999999;
__n106["raw"] := "0.999999999999";
__n104["right"] := __n106;
__n103["test"] := __n104;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "$ERROR";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "#8: 1 !== 0.999999999999";
__n113["raw"] := "'#8: 1 !== 0.999999999999'";
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["expression"] := __n110;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n103["consequent"] := __n107;
__n103["alternate"] := null;
__n114 := {  };
__n114["type"] := "IfStatement";
__n115 := {  };
__n115["type"] := "UnaryExpression";
__n115["operator"] := "!";
__n116 := {  };
__n116["type"] := "BinaryExpression";
__n116["operator"] := "===";
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 1.;
__n117["raw"] := "1.0";
__n116["left"] := __n117;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 1.;
__n118["raw"] := "1";
__n116["right"] := __n118;
__n115["argument"] := __n116;
__n115["prefix"] := true;
__n114["test"] := __n115;
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "$ERROR";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "#9: 1.0 === 1";
__n125["raw"] := "'#9: 1.0 === 1'";
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n120 := [ __n121 ];
__n119["body"] := __n120;
__n114["consequent"] := __n119;
__n114["alternate"] := null;
__n1 := [ __n2, __n18, __n34, __n46, __n60, __n72, __n86, __n103, __n114 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n126 := [  ];
__n0["variableDeclarations"] := __n126;
__n127 := [  ];
__n0["functionDeclarations"] := __n127;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}