function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "===";
__n4 := {  };
__n4["type"] := "NewExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Object";
__n4["callee"] := __n5;
__n6 := [  ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Object";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n3["right"] := __n7;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: new Object() !== new Object()";
__n16["raw"] := "'#1: new Object() !== new Object()'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "===";
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "Object";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := true;
__n22["raw"] := "true";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["left"] := __n19;
__n23 := {  };
__n23["type"] := "NewExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Object";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n18["right"] := __n23;
__n17["test"] := __n18;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#2: new Object() !== new Object()";
__n33["raw"] := "'#2: new Object() !== new Object()'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n17["consequent"] := __n27;
__n17["alternate"] := null;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "===";
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Object";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := false;
__n39["raw"] := "false";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["left"] := __n36;
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Object";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := false;
__n43["raw"] := "false";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n35["right"] := __n40;
__n34["test"] := __n35;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#3: new Object() !== new Object()";
__n50["raw"] := "'#3: new Object() !== new Object()'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n34["consequent"] := __n44;
__n34["alternate"] := null;
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "===";
__n53 := {  };
__n53["type"] := "NewExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Object";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 0.;
__n57["raw"] := "0";
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["left"] := __n53;
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Object";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "-";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 0.;
__n62["raw"] := "0";
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n52["right"] := __n58;
__n51["test"] := __n52;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#4: new Object(+0) !== new Object(-0)";
__n69["raw"] := "'#4: new Object(+0) !== new Object(-0)'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n51["consequent"] := __n63;
__n51["alternate"] := null;
__n70 := {  };
__n70["type"] := "VariableDeclaration";
__n72 := {  };
__n72["type"] := "VariableDeclarator";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "x";
__n72["id"] := __n73;
__n72["init"] := null;
__n74 := {  };
__n74["type"] := "VariableDeclarator";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "y";
__n74["id"] := __n75;
__n74["init"] := null;
__n71 := [ __n72, __n74 ];
__n70["declarations"] := __n71;
__n70["kind"] := "var";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := "=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "ObjectExpression";
__n80 := [  ];
__n79["properties"] := __n80;
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "AssignmentExpression";
__n82["operator"] := "=";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "y";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "x";
__n82["right"] := __n84;
__n81["expression"] := __n82;
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "UnaryExpression";
__n86["operator"] := "!";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "===";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "x";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "y";
__n87["right"] := __n89;
__n86["argument"] := __n87;
__n86["prefix"] := true;
__n85["test"] := __n86;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "#5: x = {}; y = x; x === y";
__n96["raw"] := "'#5: x = {}; y = x; x === y'";
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n85["consequent"] := __n90;
__n85["alternate"] := null;
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "===";
__n99 := {  };
__n99["type"] := "NewExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "Boolean";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := true;
__n102["raw"] := "true";
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["left"] := __n99;
__n103 := {  };
__n103["type"] := "NewExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "Number";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 1.;
__n106["raw"] := "1";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n98["right"] := __n103;
__n97["test"] := __n98;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "$ERROR";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := "#6 new Boolean(true) === new Number(1)";
__n113["raw"] := "'#6 new Boolean(true) === new Number(1)'";
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["expression"] := __n110;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n97["consequent"] := __n107;
__n97["alternate"] := null;
__n114 := {  };
__n114["type"] := "IfStatement";
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "===";
__n116 := {  };
__n116["type"] := "NewExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "Number";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := 1.;
__n119["raw"] := "1";
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n115["left"] := __n116;
__n120 := {  };
__n120["type"] := "NewExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "String";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "1";
__n123["raw"] := "\"1\"";
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n115["right"] := __n120;
__n114["test"] := __n115;
__n124 := {  };
__n124["type"] := "BlockStatement";
__n126 := {  };
__n126["type"] := "ExpressionStatement";
__n127 := {  };
__n127["type"] := "CallExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "$ERROR";
__n127["callee"] := __n128;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "#7: new Number(1) === new String(\"1\")";
__n130["raw"] := "'#7: new Number(1) === new String(\"1\")'";
__n129 := [ __n130 ];
__n127["arguments"] := __n129;
__n126["expression"] := __n127;
__n125 := [ __n126 ];
__n124["body"] := __n125;
__n114["consequent"] := __n124;
__n114["alternate"] := null;
__n131 := {  };
__n131["type"] := "IfStatement";
__n132 := {  };
__n132["type"] := "BinaryExpression";
__n132["operator"] := "===";
__n133 := {  };
__n133["type"] := "NewExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "String";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := "1";
__n136["raw"] := "\"1\"";
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n132["left"] := __n133;
__n137 := {  };
__n137["type"] := "NewExpression";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "Boolean";
__n137["callee"] := __n138;
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := true;
__n140["raw"] := "true";
__n139 := [ __n140 ];
__n137["arguments"] := __n139;
__n132["right"] := __n137;
__n131["test"] := __n132;
__n141 := {  };
__n141["type"] := "BlockStatement";
__n143 := {  };
__n143["type"] := "ExpressionStatement";
__n144 := {  };
__n144["type"] := "CallExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "$ERROR";
__n144["callee"] := __n145;
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := "#8: new String(\"x\") === new Boolean(true)";
__n147["raw"] := "'#8: new String(\"x\") === new Boolean(true)'";
__n146 := [ __n147 ];
__n144["arguments"] := __n146;
__n143["expression"] := __n144;
__n142 := [ __n143 ];
__n141["body"] := __n142;
__n131["consequent"] := __n141;
__n131["alternate"] := null;
__n1 := [ __n2, __n17, __n34, __n51, __n70, __n76, __n81, __n85, __n97, __n114, __n131 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n148 := [ "x", "y" ];
__n0["variableDeclarations"] := __n148;
__n149 := [  ];
__n0["functionDeclarations"] := __n149;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}