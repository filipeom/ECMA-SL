function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := true;
__n8["raw"] := "true";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "undefined";
__n7["right"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := true;
__n10["raw"] := "true";
__n3["right"] := __n10;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: true - undefined === Not-a-Number. Actual: ";
__n18["raw"] := "'#1: true - undefined === Not-a-Number. Actual: '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "-";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "undefined";
__n19["right"] := __n21;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "isNaN";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "-";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "undefined";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["left"] := __n24;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := true;
__n30["raw"] := "true";
__n23["right"] := __n30;
__n22["test"] := __n23;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: undefined - true === Not-a-Number. Actual: ";
__n38["raw"] := "'#2: undefined - true === Not-a-Number. Actual: '";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "undefined";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n39["right"] := __n41;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n22["consequent"] := __n31;
__n22["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "isNaN";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "NewExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Boolean";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := true;
__n51["raw"] := "true";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["left"] := __n48;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "undefined";
__n47["right"] := __n52;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := true;
__n53["raw"] := "true";
__n43["right"] := __n53;
__n42["test"] := __n43;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#3: new Boolean(true) - undefined === Not-a-Number. Actual: ";
__n61["raw"] := "'#3: new Boolean(true) - undefined === Not-a-Number. Actual: '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "-";
__n63 := {  };
__n63["type"] := "NewExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "Boolean";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := true;
__n66["raw"] := "true";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["left"] := __n63;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "undefined";
__n62["right"] := __n67;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n42["consequent"] := __n54;
__n42["alternate"] := null;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "isNaN";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "-";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "undefined";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "NewExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Boolean";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := true;
__n78["raw"] := "true";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n73["right"] := __n75;
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["left"] := __n70;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := true;
__n79["raw"] := "true";
__n69["right"] := __n79;
__n68["test"] := __n69;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "+";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#4: undefined - new Boolean(true) === Not-a-Number. Actual: ";
__n87["raw"] := "'#4: undefined - new Boolean(true) === Not-a-Number. Actual: '";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "-";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "undefined";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "NewExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "Boolean";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := true;
__n93["raw"] := "true";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n88["right"] := __n90;
__n86["right"] := __n88;
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n81 := [ __n82 ];
__n80["body"] := __n81;
__n68["consequent"] := __n80;
__n68["alternate"] := null;
__n1 := [ __n2, __n22, __n42, __n68 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n94 := [  ];
__n0["variableDeclarations"] := __n94;
__n95 := [  ];
__n0["functionDeclarations"] := __n95;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}