function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "POSITIVE_INFINITY";
__n10["raw"] := "\"POSITIVE_INFINITY\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Number";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "POSITIVE_INFINITY";
__n13["raw"] := "\"POSITIVE_INFINITY\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n7["right"] := __n11;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n3["right"] := __n14;
__n2["test"] := __n3;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: Infinity - Infinity === Not-a-Number. Actual: ";
__n22["raw"] := "'#1: Infinity - Infinity === Not-a-Number. Actual: '";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "-";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Infinity";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Infinity";
__n23["right"] := __n25;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["consequent"] := __n15;
__n2["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "isNaN";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "-";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Number";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "NEGATIVE_INFINITY";
__n34["raw"] := "\"NEGATIVE_INFINITY\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Number";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "NEGATIVE_INFINITY";
__n37["raw"] := "\"NEGATIVE_INFINITY\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n31["right"] := __n35;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := true;
__n38["raw"] := "true";
__n27["right"] := __n38;
__n26["test"] := __n27;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#2: -Infinity - -Infinity === Not-a-Number. Actual: ";
__n46["raw"] := "'#2: -Infinity - -Infinity === Not-a-Number. Actual: '";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "-";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Infinity";
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["left"] := __n48;
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "-";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Infinity";
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n47["right"] := __n50;
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n26["consequent"] := __n39;
__n26["alternate"] := null;
__n1 := [ __n2, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n52 := [  ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}