function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "typeof";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := true;
__n9["raw"] := "true";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "boolean";
__n10["raw"] := "\"boolean\"";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "+";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "#1: typeof true === \"boolean\". Actual: ";
__n12["raw"] := "'#1: typeof true === \"boolean\". Actual: '";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "typeof";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n11["right"] := __n13;
__n7 := [ __n8, __n10, __n11 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "sameValue";
__n19["raw"] := "\"sameValue\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "typeof";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := false;
__n22["raw"] := "false";
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "boolean";
__n23["raw"] := "\"boolean\"";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#2: typeof false === \"boolean\". Actual: ";
__n25["raw"] := "'#2: typeof false === \"boolean\". Actual: '";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "typeof";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := false;
__n27["raw"] := "false";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n24["right"] := __n26;
__n20 := [ __n21, __n23, __n24 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "assert";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "sameValue";
__n32["raw"] := "\"sameValue\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "typeof";
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "!";
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "-";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "boolean";
__n38["raw"] := "\"boolean\"";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#3: typeof !-1 === \"boolean\". Actual: ";
__n40["raw"] := "'#3: typeof !-1 === \"boolean\". Actual: '";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "typeof";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "!";
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "-";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n39["right"] := __n41;
__n33 := [ __n34, __n38, __n39 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n1 := [ __n2, __n15, __n28 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n45 := [  ];
__n0["variableDeclarations"] := __n45;
__n46 := [  ];
__n0["functionDeclarations"] := __n46;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}