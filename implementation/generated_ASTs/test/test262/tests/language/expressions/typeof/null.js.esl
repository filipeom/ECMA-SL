function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "typeof";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 'null;
__n9["raw"] := "\"'null\"";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "object";
__n10["raw"] := "\"object\"";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "typeof null === \"object\"";
__n11["raw"] := "'typeof null === \"object\"'";
__n7 := [ __n8, __n10, __n11 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "assert";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "sameValue";
__n16["raw"] := "\"sameValue\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "typeof";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "RegExp";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "0";
__n24["raw"] := "\"0\"";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["object"] := __n21;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "exec";
__n25["raw"] := "\"exec\"";
__n20["property"] := __n25;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "1";
__n27["raw"] := "\"1\"";
__n26 := [ __n27 ];
__n19["arguments"] := __n26;
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "object";
__n28["raw"] := "\"object\"";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "typeof RegExp(\"0\").exec(\"1\") === \"object\"";
__n29["raw"] := "'typeof RegExp(\"0\").exec(\"1\") === \"object\"'";
__n17 := [ __n18, __n28, __n29 ];
__n13["arguments"] := __n17;
__n12["expression"] := __n13;
__n1 := [ __n2, __n12 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n30 := [  ];
__n0["variableDeclarations"] := __n30;
__n31 := [  ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}