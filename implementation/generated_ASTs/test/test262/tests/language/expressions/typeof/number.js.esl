function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "typeof";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "number";
__n10["raw"] := "\"number\"";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "+";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "#1: typeof 1 === \"number\". Actual: ";
__n12["raw"] := "'#1: typeof 1 === \"number\". Actual: '";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "typeof";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n11["right"] := __n13;
__n7 := [ __n8, __n10, __n11 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "sameValue";
__n19["raw"] := "\"sameValue\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "typeof";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Number";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "NaN";
__n24["raw"] := "\"NaN\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "number";
__n25["raw"] := "\"number\"";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#2: typeof NaN === \"number\". Actual: ";
__n27["raw"] := "'#2: typeof NaN === \"number\". Actual: '";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "typeof";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "NaN";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n26["right"] := __n28;
__n20 := [ __n21, __n25, __n26 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "assert";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "sameValue";
__n34["raw"] := "\"sameValue\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "typeof";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "POSITIVE_INFINITY";
__n39["raw"] := "\"POSITIVE_INFINITY\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "number";
__n40["raw"] := "\"number\"";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#3: typeof Infinity === \"number\". Actual: ";
__n42["raw"] := "'#3: typeof Infinity === \"number\". Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "typeof";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Infinity";
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n41["right"] := __n43;
__n35 := [ __n36, __n40, __n41 ];
__n31["arguments"] := __n35;
__n30["expression"] := __n31;
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "assert";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "sameValue";
__n49["raw"] := "\"sameValue\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["callee"] := __n47;
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "typeof";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "NEGATIVE_INFINITY";
__n54["raw"] := "\"NEGATIVE_INFINITY\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "number";
__n55["raw"] := "\"number\"";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#4: typeof -Infinity === \"number\". Actual: ";
__n57["raw"] := "'#4: typeof -Infinity === \"number\". Actual: '";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "typeof";
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "-";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Infinity";
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n56["right"] := __n58;
__n50 := [ __n51, __n55, __n56 ];
__n46["arguments"] := __n50;
__n45["expression"] := __n46;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "MemberExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "assert";
__n63["object"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "sameValue";
__n65["raw"] := "\"sameValue\"";
__n63["property"] := __n65;
__n63["computed"] := true;
__n62["callee"] := __n63;
__n67 := {  };
__n67["type"] := "UnaryExpression";
__n67["operator"] := "typeof";
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Math";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "PI";
__n70["raw"] := "\"PI\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n67["argument"] := __n68;
__n67["prefix"] := true;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "number";
__n71["raw"] := "\"number\"";
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#5: typeof Math.PI === \"number\". Actual: ";
__n73["raw"] := "'#5: typeof Math.PI === \"number\". Actual: '";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "typeof";
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "Math";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "PI";
__n77["raw"] := "\"PI\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n72["right"] := __n74;
__n66 := [ __n67, __n71, __n72 ];
__n62["arguments"] := __n66;
__n61["expression"] := __n62;
__n1 := [ __n2, __n15, __n30, __n45, __n61 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n78 := [  ];
__n0["variableDeclarations"] := __n78;
__n79 := [  ];
__n0["functionDeclarations"] := __n79;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}