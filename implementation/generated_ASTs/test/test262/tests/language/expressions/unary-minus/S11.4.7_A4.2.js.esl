function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "AssignmentExpression";
__n8["operator"] := "=";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "-";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n8["right"] := __n10;
__n7["expression"] := __n8;
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "-";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.;
__n16["raw"] := "0";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12["test"] := __n13;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1.1: var x = 0; x = -x; x === 0. Actual: ";
__n24["raw"] := "'#1.1: var x = 0; x = -x; x === 0. Actual: '";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "x";
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n12["consequent"] := __n17;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "/";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n30["right"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Number";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "NEGATIVE_INFINITY";
__n35["raw"] := "\"NEGATIVE_INFINITY\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n29["right"] := __n33;
__n28["test"] := __n29;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#1.2: var x = 0; x = -x; x === - 0. Actual: +0";
__n42["raw"] := "'#1.2: var x = 0; x = -x; x === - 0. Actual: +0'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n28["consequent"] := __n36;
__n28["alternate"] := null;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n12["alternate"] := __n26;
__n43 := {  };
__n43["type"] := "VariableDeclaration";
__n45 := {  };
__n45["type"] := "VariableDeclarator";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "x";
__n45["id"] := __n46;
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 0.;
__n48["raw"] := "0";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n45["init"] := __n47;
__n44 := [ __n45 ];
__n43["declarations"] := __n44;
__n43["kind"] := "var";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "x";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "UnaryExpression";
__n52["operator"] := "-";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n52["argument"] := __n53;
__n52["prefix"] := true;
__n50["right"] := __n52;
__n49["expression"] := __n50;
__n54 := {  };
__n54["type"] := "IfStatement";
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "!==";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 0.;
__n57["raw"] := "0";
__n55["right"] := __n57;
__n54["test"] := __n55;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#2.1: var x = -0; x = -x; x === 0. Actual: ";
__n65["raw"] := "'#2.1: var x = -0; x = -x; x === 0. Actual: '";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n54["consequent"] := __n58;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "/";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "x";
__n71["right"] := __n73;
__n70["left"] := __n71;
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "Number";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "POSITIVE_INFINITY";
__n76["raw"] := "\"POSITIVE_INFINITY\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n70["right"] := __n74;
__n69["test"] := __n70;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "#2.2: var x = -0; x = -x; x === + 0. Actual: -0";
__n83["raw"] := "'#2.2: var x = -0; x = -x; x === + 0. Actual: -0'";
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n69["consequent"] := __n77;
__n69["alternate"] := null;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n54["alternate"] := __n67;
__n1 := [ __n2, __n7, __n12, __n43, __n49, __n54 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n84 := [ "x" ];
__n0["variableDeclarations"] := __n84;
__n85 := [  ];
__n0["functionDeclarations"] := __n85;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}