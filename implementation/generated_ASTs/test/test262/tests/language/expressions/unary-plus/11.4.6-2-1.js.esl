function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "+";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "";
__n9["raw"] := "\"\"";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "+\"\"";
__n11["raw"] := "'+\"\"'";
__n7 := [ __n8, __n10, __n11 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n12 := [  ];
__n0["variableDeclarations"] := __n12;
__n13 := [  ];
__n0["functionDeclarations"] := __n13;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}