function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "+";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 1.;
__n5["raw"] := "1";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: +1 === 1. Actual: ";
__n14["raw"] := "'#1: +1 === 1. Actual: '";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n18["right"] := __n22;
__n17["test"] := __n18;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#2: +(+1) === -1. Actual: ";
__n30["raw"] := "'#2: +(+1) === -1. Actual: '";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n29["right"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n17["consequent"] := __n23;
__n17["alternate"] := null;
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["id"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n36["init"] := __n38;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "x";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["left"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 1.;
__n43["raw"] := "1";
__n40["right"] := __n43;
__n39["test"] := __n40;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#3: var x = +1; -x === 1. Actual: ";
__n51["raw"] := "'#3: var x = +1; -x === 1. Actual: '";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "UnaryExpression";
__n52["operator"] := "-";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x";
__n52["argument"] := __n53;
__n52["prefix"] := true;
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n39["consequent"] := __n44;
__n39["alternate"] := null;
__n54 := {  };
__n54["type"] := "VariableDeclaration";
__n56 := {  };
__n56["type"] := "VariableDeclarator";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "x";
__n56["id"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 1.;
__n58["raw"] := "1";
__n56["init"] := __n58;
__n55 := [ __n56 ];
__n54["declarations"] := __n55;
__n54["kind"] := "var";
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "UnaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "x";
__n62["argument"] := __n63;
__n62["prefix"] := true;
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60["left"] := __n61;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n60["right"] := __n64;
__n59["test"] := __n60;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "+";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#4: var x = 1; +(+x) === 1. Actual: ";
__n72["raw"] := "'#4: var x = 1; +(+x) === 1. Actual: '";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "UnaryExpression";
__n73["operator"] := "+";
__n74 := {  };
__n74["type"] := "UnaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n74["argument"] := __n75;
__n74["prefix"] := true;
__n73["argument"] := __n74;
__n73["prefix"] := true;
__n71["right"] := __n73;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n59["consequent"] := __n65;
__n59["alternate"] := null;
__n76 := {  };
__n76["type"] := "VariableDeclaration";
__n78 := {  };
__n78["type"] := "VariableDeclarator";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "object";
__n78["id"] := __n79;
__n80 := {  };
__n80["type"] := "NewExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "Object";
__n80["callee"] := __n81;
__n82 := [  ];
__n80["arguments"] := __n82;
__n78["init"] := __n80;
__n77 := [ __n78 ];
__n76["declarations"] := __n77;
__n76["kind"] := "var";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "AssignmentExpression";
__n84["operator"] := "=";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "object";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "prop";
__n87["raw"] := "\"prop\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n84["left"] := __n85;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n84["right"] := __n88;
__n83["expression"] := __n84;
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "!==";
__n91 := {  };
__n91["type"] := "UnaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "MemberExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "object";
__n92["object"] := __n93;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "prop";
__n94["raw"] := "\"prop\"";
__n92["property"] := __n94;
__n92["computed"] := true;
__n91["argument"] := __n92;
__n91["prefix"] := true;
__n90["left"] := __n91;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := 1.;
__n95["raw"] := "1";
__n90["right"] := __n95;
__n89["test"] := __n90;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "+";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#5: var object = new Object(); object.prop = 1; +object.prop === 1. Actual: ";
__n103["raw"] := "'#5: var object = new Object(); object.prop = 1; +object.prop === 1. Actual: '";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "UnaryExpression";
__n104["operator"] := "+";
__n105 := {  };
__n105["type"] := "MemberExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "object";
__n105["object"] := __n106;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "prop";
__n107["raw"] := "\"prop\"";
__n105["property"] := __n107;
__n105["computed"] := true;
__n104["argument"] := __n105;
__n104["prefix"] := true;
__n102["right"] := __n104;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n89["consequent"] := __n96;
__n89["alternate"] := null;
__n1 := [ __n2, __n17, __n34, __n39, __n54, __n59, __n76, __n83, __n89 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n108 := [ "x", "object" ];
__n0["variableDeclarations"] := __n108;
__n109 := [  ];
__n0["functionDeclarations"] := __n109;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}