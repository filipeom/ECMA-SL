function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "+";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 0.1;
__n5["raw"] := "0.1";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.1;
__n6["raw"] := "0.1";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: +0.1 === 0.1. Actual: ";
__n14["raw"] := "'#1: +0.1 === 0.1. Actual: '";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.1;
__n16["raw"] := "0.1";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "NewExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Number";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "-";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.1;
__n24["raw"] := "1.1";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["left"] := __n19;
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "-";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.1;
__n26["raw"] := "1.1";
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n18["right"] := __n25;
__n17["test"] := __n18;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2: +new Number(-1.1) === -1.1. Actual: ";
__n34["raw"] := "'#2: +new Number(-1.1) === -1.1. Actual: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Number";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.1;
__n40["raw"] := "1.1";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n17["consequent"] := __n27;
__n17["alternate"] := null;
__n1 := [ __n2, __n17 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n41 := [  ];
__n0["variableDeclarations"] := __n41;
__n42 := [  ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}