function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := ">>>";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "1";
__n5["raw"] := "\"1\"";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "undefined";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: \"1\" >>> undefined === 1. Actual: ";
__n15["raw"] := "'#1: \"1\" >>> undefined === 1. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := ">>>";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "1";
__n17["raw"] := "\"1\"";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "undefined";
__n16["right"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := ">>>";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "undefined";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "1";
__n23["raw"] := "\"1\"";
__n21["right"] := __n23;
__n20["left"] := __n21;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n20["right"] := __n24;
__n19["test"] := __n20;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: undefined >>> \"1\" === 0. Actual: ";
__n32["raw"] := "'#2: undefined >>> \"1\" === 0. Actual: '";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := ">>>";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "undefined";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "1";
__n35["raw"] := "\"1\"";
__n33["right"] := __n35;
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n19["consequent"] := __n25;
__n19["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := ">>>";
__n39 := {  };
__n39["type"] := "NewExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "String";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "1";
__n42["raw"] := "\"1\"";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["left"] := __n39;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "undefined";
__n38["right"] := __n43;
__n37["left"] := __n38;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n37["right"] := __n44;
__n36["test"] := __n37;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#3: new String(\"1\") >>> undefined === 1. Actual: ";
__n52["raw"] := "'#3: new String(\"1\") >>> undefined === 1. Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := ">>>";
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "String";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "1";
__n57["raw"] := "\"1\"";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["left"] := __n54;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n53["right"] := __n58;
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n36["consequent"] := __n45;
__n36["alternate"] := null;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := ">>>";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "undefined";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "NewExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "String";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "1";
__n66["raw"] := "\"1\"";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n61["right"] := __n63;
__n60["left"] := __n61;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n60["right"] := __n67;
__n59["test"] := __n60;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#4: undefined >>> new String(\"1\") === 0. Actual: ";
__n75["raw"] := "'#4: undefined >>> new String(\"1\") === 0. Actual: '";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := ">>>";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "undefined";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "NewExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "String";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "1";
__n81["raw"] := "\"1\"";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n76["right"] := __n78;
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n59["consequent"] := __n68;
__n59["alternate"] := null;
__n1 := [ __n2, __n19, __n36, __n59 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n82 := [  ];
__n0["variableDeclarations"] := __n82;
__n83 := [  ];
__n0["functionDeclarations"] := __n83;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}