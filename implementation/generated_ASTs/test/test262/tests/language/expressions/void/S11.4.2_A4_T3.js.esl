function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "1";
__n6["raw"] := "\"1\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "void";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n8["left"] := __n9;
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "undefined";
__n8["right"] := __n11;
__n7["test"] := __n8;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: var x = \"1\"; void x === undefined. Actual: ";
__n19["raw"] := "'#1: var x = \"1\"; void x === undefined. Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "void";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "x";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n7["consequent"] := __n12;
__n7["alternate"] := null;
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "x";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "x";
__n26["raw"] := "\"x\"";
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "isNaN";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "void";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["left"] := __n29;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n28["right"] := __n34;
__n27["test"] := __n28;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: var x = \"x\"; void x === undefined. Actual: ";
__n42["raw"] := "'#2: var x = \"x\"; void x === undefined. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "void";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "x";
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n27["consequent"] := __n35;
__n27["alternate"] := null;
__n45 := {  };
__n45["type"] := "VariableDeclaration";
__n47 := {  };
__n47["type"] := "VariableDeclarator";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "x";
__n47["id"] := __n48;
__n49 := {  };
__n49["type"] := "NewExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "String";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "-1";
__n52["raw"] := "\"-1\"";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n47["init"] := __n49;
__n46 := [ __n47 ];
__n45["declarations"] := __n46;
__n45["kind"] := "var";
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "UnaryExpression";
__n55["operator"] := "void";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["argument"] := __n56;
__n55["prefix"] := true;
__n54["left"] := __n55;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "undefined";
__n54["right"] := __n57;
__n53["test"] := __n54;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: var x = new String(\"-1\"); void x === undefined. Actual: ";
__n65["raw"] := "'#3: var x = new String(\"-1\"); void x === undefined. Actual: '";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "void";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "x";
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n53["consequent"] := __n58;
__n53["alternate"] := null;
__n1 := [ __n2, __n7, __n22, __n27, __n45, __n53 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n68 := [ "x" ];
__n0["variableDeclarations"] := __n68;
__n69 := [  ];
__n0["functionDeclarations"] := __n69;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}