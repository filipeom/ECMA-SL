function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 3.;
__n6["raw"] := "3";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "assert";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "sameValue";
__n11["raw"] := "\"sameValue\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "ab";
__n15["raw"] := "\"ab\"";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "replace";
__n16["raw"] := "\"replace\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "b";
__n18["raw"] := "\"b\"";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "use strict";
__n25["raw"] := "\"use strict\"";
__n24["expression"] := __n25;
__n24["directive"] := "use strict";
__n26 := {  };
__n26["type"] := "ReturnStatement";
__n27 := {  };
__n27["type"] := "FunctionExpression";
__n27["id"] := null;
__n28 := [  ];
__n27["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := "=";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "ThisExpression";
__n32["right"] := __n34;
__n31["expression"] := __n32;
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "a";
__n36["raw"] := "\"a\"";
__n35["argument"] := __n36;
__n30 := [ __n31, __n35 ];
__n29["body"] := __n30;
__n37 := [  ];
__n29["variableDeclarations"] := __n37;
__n38 := [  ];
__n29["functionDeclarations"] := __n38;
__n29["codeType"] := "function";
__n29["strict"] := false;
__n27["body"] := __n29;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n26["argument"] := __n27;
__n23 := [ __n24, __n26 ];
__n22["body"] := __n23;
__n39 := [  ];
__n22["variableDeclarations"] := __n39;
__n40 := [  ];
__n22["functionDeclarations"] := __n40;
__n22["codeType"] := "function";
__n22["strict"] := true;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["async"] := false;
__n20["expression"] := false;
__n19["callee"] := __n20;
__n41 := [  ];
__n19["arguments"] := __n41;
__n17 := [ __n18, __n19 ];
__n13["arguments"] := __n17;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "aa";
__n42["raw"] := "\"aa\"";
__n12 := [ __n13, __n42 ];
__n8["arguments"] := __n12;
__n7["expression"] := __n8;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "sameValue";
__n47["raw"] := "\"sameValue\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "undefined";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "x";
__n51["raw"] := "'x'";
__n48 := [ __n49, __n50, __n51 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n1 := [ __n2, __n7, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "x" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}