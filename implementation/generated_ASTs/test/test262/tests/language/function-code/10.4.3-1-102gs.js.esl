function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 3.;
__n6["raw"] := "3";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "LogicalExpression";
__n8["operator"] := "||";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "ab";
__n12["raw"] := "\"ab\"";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "replace";
__n13["raw"] := "\"replace\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "b";
__n15["raw"] := "\"b\"";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "FunctionExpression";
__n17["id"] := null;
__n18 := [  ];
__n17["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "use strict";
__n22["raw"] := "\"use strict\"";
__n21["expression"] := __n22;
__n21["directive"] := "use strict";
__n23 := {  };
__n23["type"] := "ReturnStatement";
__n24 := {  };
__n24["type"] := "FunctionExpression";
__n24["id"] := null;
__n25 := [  ];
__n24["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "ThisExpression";
__n29["right"] := __n31;
__n28["expression"] := __n29;
__n32 := {  };
__n32["type"] := "ReturnStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "a";
__n33["raw"] := "\"a\"";
__n32["argument"] := __n33;
__n27 := [ __n28, __n32 ];
__n26["body"] := __n27;
__n34 := [  ];
__n26["variableDeclarations"] := __n34;
__n35 := [  ];
__n26["functionDeclarations"] := __n35;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n24["body"] := __n26;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n23["argument"] := __n24;
__n20 := [ __n21, __n23 ];
__n19["body"] := __n20;
__n36 := [  ];
__n19["variableDeclarations"] := __n36;
__n37 := [  ];
__n19["functionDeclarations"] := __n37;
__n19["codeType"] := "function";
__n19["strict"] := true;
__n17["body"] := __n19;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n16["callee"] := __n17;
__n38 := [  ];
__n16["arguments"] := __n38;
__n14 := [ __n15, __n16 ];
__n10["arguments"] := __n14;
__n9["left"] := __n10;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "aa";
__n39["raw"] := "\"aa\"";
__n9["right"] := __n39;
__n8["left"] := __n9;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "undefined";
__n40["right"] := __n42;
__n8["right"] := __n40;
__n7["test"] := __n8;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ThrowStatement";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "'this' had incorrect value!";
__n46["raw"] := "\"'this' had incorrect value!\"";
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n7["consequent"] := __n43;
__n7["alternate"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [ "x" ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}