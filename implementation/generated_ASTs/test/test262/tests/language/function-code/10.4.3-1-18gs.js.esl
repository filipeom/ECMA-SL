function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "eval";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "\"use strict\";
this";
__n7["raw"] := "\"\\\"use strict\\\";\\nthis\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "ThisExpression";
__n3["right"] := __n8;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ThrowStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "'this' had incorrect value!";
__n12["raw"] := "\"'this' had incorrect value!\"";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n13 := [  ];
__n0["variableDeclarations"] := __n13;
__n14 := [  ];
__n0["functionDeclarations"] := __n14;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}