function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "assert";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "notSameValue";
__n10["raw"] := "\"notSameValue\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["callee"] := __n8;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n15 := {  };
__n15["type"] := "ThisExpression";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "(new f())";
__n16["raw"] := "'(new f())'";
__n11 := [ __n12, __n15, __n16 ];
__n7["arguments"] := __n11;
__n6["expression"] := __n7;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "notSameValue";
__n21["raw"] := "\"notSameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "NewExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "f";
__n24["callee"] := __n25;
__n26 := [  ];
__n24["arguments"] := __n26;
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "undefined";
__n27["raw"] := "\"undefined\"";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "typeof (new f())";
__n28["raw"] := "'typeof (new f())'";
__n22 := [ __n23, __n27, __n28 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n1 := [ __n2, __n4, __n6, __n17 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n29 := [  ];
__n0["variableDeclarations"] := __n29;
__n31 := {  };
__n31["type"] := "FunctionDeclaration";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "f";
__n31["id"] := __n32;
__n33 := [  ];
__n31["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "ThisExpression";
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n38 := [  ];
__n34["variableDeclarations"] := __n38;
__n39 := [  ];
__n34["functionDeclarations"] := __n39;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n31["body"] := __n34;
__n31["generator"] := false;
__n31["expression"] := false;
__n31["async"] := false;
__n30 := [ __n31 ];
__n0["functionDeclarations"] := __n30;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}