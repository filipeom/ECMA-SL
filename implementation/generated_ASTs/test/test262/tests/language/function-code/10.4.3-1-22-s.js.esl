function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "notSameValue";
__n8["raw"] := "\"notSameValue\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "NewExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "f";
__n10["callee"] := __n11;
__n12 := [  ];
__n10["arguments"] := __n12;
__n13 := {  };
__n13["type"] := "ThisExpression";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "(new f())";
__n14["raw"] := "'(new f())'";
__n9 := [ __n10, __n13, __n14 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "notSameValue";
__n19["raw"] := "\"notSameValue\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "typeof";
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "f";
__n22["callee"] := __n23;
__n24 := [  ];
__n22["arguments"] := __n24;
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "undefined";
__n25["raw"] := "\"undefined\"";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "typeof (new f())";
__n26["raw"] := "'typeof (new f())'";
__n20 := [ __n21, __n25, __n26 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n1 := [ __n2, __n4, __n15 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n27 := [  ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [  ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "use strict";
__n35["raw"] := "\"use strict\"";
__n34["expression"] := __n35;
__n34["directive"] := "use strict";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "ThisExpression";
__n36["argument"] := __n37;
__n33 := [ __n34, __n36 ];
__n32["body"] := __n33;
__n38 := [  ];
__n32["variableDeclarations"] := __n38;
__n39 := [  ];
__n32["functionDeclarations"] := __n39;
__n32["codeType"] := "function";
__n32["strict"] := true;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28 := [ __n29 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}