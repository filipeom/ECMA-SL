function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "LogicalExpression";
__n5["operator"] := "||";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "===";
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "ThisExpression";
__n6["right"] := __n10;
__n5["left"] := __n6;
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "===";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "NewExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "f";
__n13["callee"] := __n14;
__n15 := [  ];
__n13["arguments"] := __n15;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "undefined";
__n16["raw"] := "\"undefined\"";
__n11["right"] := __n16;
__n5["right"] := __n11;
__n4["test"] := __n5;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ThrowStatement";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "'this' had incorrect value!";
__n20["raw"] := "\"'this' had incorrect value!\"";
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n4["consequent"] := __n17;
__n4["alternate"] := null;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n21 := [  ];
__n0["variableDeclarations"] := __n21;
__n23 := {  };
__n23["type"] := "FunctionDeclaration";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "f";
__n23["id"] := __n24;
__n25 := [  ];
__n23["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "use strict";
__n29["raw"] := "\"use strict\"";
__n28["expression"] := __n29;
__n28["directive"] := "use strict";
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "ThisExpression";
__n30["argument"] := __n31;
__n27 := [ __n28, __n30 ];
__n26["body"] := __n27;
__n32 := [  ];
__n26["variableDeclarations"] := __n32;
__n33 := [  ];
__n26["functionDeclarations"] := __n33;
__n26["codeType"] := "function";
__n26["strict"] := true;
__n23["body"] := __n26;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n22 := [ __n23 ];
__n0["functionDeclarations"] := __n22;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}