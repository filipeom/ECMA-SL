function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "f";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n8["id"] := null;
__n9 := [  ];
__n8["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ReturnStatement";
__n13 := {  };
__n13["type"] := "ThisExpression";
__n12["argument"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n14 := [  ];
__n10["variableDeclarations"] := __n14;
__n15 := [  ];
__n10["functionDeclarations"] := __n15;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n8["body"] := __n10;
__n8["generator"] := false;
__n8["expression"] := false;
__n8["async"] := false;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "LogicalExpression";
__n17["operator"] := "||";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "===";
__n19 := {  };
__n19["type"] := "NewExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "f";
__n19["callee"] := __n20;
__n21 := [  ];
__n19["arguments"] := __n21;
__n18["left"] := __n19;
__n22 := {  };
__n22["type"] := "ThisExpression";
__n18["right"] := __n22;
__n17["left"] := __n18;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "===";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "typeof";
__n25 := {  };
__n25["type"] := "NewExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "f";
__n25["callee"] := __n26;
__n27 := [  ];
__n25["arguments"] := __n27;
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["left"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "undefined";
__n28["raw"] := "\"undefined\"";
__n23["right"] := __n28;
__n17["right"] := __n23;
__n16["test"] := __n17;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ThrowStatement";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "'this' had incorrect value!";
__n32["raw"] := "\"'this' had incorrect value!\"";
__n31["argument"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n16["consequent"] := __n29;
__n16["alternate"] := null;
__n1 := [ __n2, __n4, __n16 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n33 := [ "f" ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := true;
return __n0
}