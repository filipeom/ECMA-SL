function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "NewExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ReturnStatement";
__n14 := {  };
__n14["type"] := "ThisExpression";
__n13["argument"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n15 := [  ];
__n11["variableDeclarations"] := __n15;
__n16 := [  ];
__n11["functionDeclarations"] := __n16;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["expression"] := false;
__n9["async"] := false;
__n8["callee"] := __n9;
__n17 := [  ];
__n8["arguments"] := __n17;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "notSameValue";
__n22["raw"] := "\"notSameValue\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "obj";
__n25 := {  };
__n25["type"] := "ThisExpression";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "obj";
__n26["raw"] := "'obj'";
__n23 := [ __n24, __n25, __n26 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "assert";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "notSameValue";
__n31["raw"] := "\"notSameValue\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "UnaryExpression";
__n33["operator"] := "typeof";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "obj";
__n33["argument"] := __n34;
__n33["prefix"] := true;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "undefined";
__n35["raw"] := "\"undefined\"";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "(typeof obj)";
__n36["raw"] := "'(typeof obj)'";
__n32 := [ __n33, __n35, __n36 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n1 := [ __n2, __n4, __n18, __n27 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n37 := [ "obj" ];
__n0["variableDeclarations"] := __n37;
__n38 := [  ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := true;
return __n0
}