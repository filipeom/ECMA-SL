function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "NewExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ReturnStatement";
__n14 := {  };
__n14["type"] := "ThisExpression";
__n13["argument"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n15 := [  ];
__n11["variableDeclarations"] := __n15;
__n16 := [  ];
__n11["functionDeclarations"] := __n16;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["expression"] := false;
__n9["async"] := false;
__n8["callee"] := __n9;
__n17 := [  ];
__n8["arguments"] := __n17;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "LogicalExpression";
__n19["operator"] := "||";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "obj";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "ThisExpression";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "===";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "typeof";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "obj";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["left"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "undefined";
__n26["raw"] := "\"undefined\"";
__n23["right"] := __n26;
__n19["right"] := __n23;
__n18["test"] := __n19;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ThrowStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "'this' had incorrect value!";
__n30["raw"] := "\"'this' had incorrect value!\"";
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n18["consequent"] := __n27;
__n18["alternate"] := null;
__n1 := [ __n2, __n4, __n18 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n31 := [ "obj" ];
__n0["variableDeclarations"] := __n31;
__n32 := [  ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}