function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f1";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "assert";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "f1";
__n10["callee"] := __n11;
__n12 := [  ];
__n10["arguments"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "f1() !== true";
__n13["raw"] := "'f1() !== true'";
__n9 := [ __n10, __n13 ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n14 := [  ];
__n0["variableDeclarations"] := __n14;
__n16 := {  };
__n16["type"] := "FunctionDeclaration";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "f1";
__n16["id"] := __n17;
__n18 := [  ];
__n16["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "f";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "typeof";
__n31 := {  };
__n31["type"] := "ThisExpression";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n32 := [  ];
__n27["variableDeclarations"] := __n32;
__n33 := [  ];
__n27["functionDeclarations"] := __n33;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n23["init"] := __n25;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "LogicalExpression";
__n35["operator"] := "&&";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "===";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "f";
__n37["callee"] := __n38;
__n39 := [  ];
__n37["arguments"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "undefined";
__n40["raw"] := "\"undefined\"";
__n36["right"] := __n40;
__n35["left"] := __n36;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "===";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "typeof";
__n43 := {  };
__n43["type"] := "ThisExpression";
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["left"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "undefined";
__n44["raw"] := "\"undefined\"";
__n41["right"] := __n44;
__n35["right"] := __n41;
__n34["argument"] := __n35;
__n20 := [ __n21, __n34 ];
__n19["body"] := __n20;
__n45 := [ "f" ];
__n19["variableDeclarations"] := __n45;
__n46 := [  ];
__n19["functionDeclarations"] := __n46;
__n19["codeType"] := "function";
__n19["strict"] := false;
__n16["body"] := __n19;
__n16["generator"] := false;
__n16["expression"] := false;
__n16["async"] := false;
__n15 := [ __n16 ];
__n0["functionDeclarations"] := __n15;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}