function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f1";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "IfStatement";
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "!";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f1";
__n8["callee"] := __n9;
__n10 := [  ];
__n8["arguments"] := __n10;
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6["test"] := __n7;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ThrowStatement";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "'this' had incorrect value!";
__n14["raw"] := "\"'this' had incorrect value!\"";
__n13["argument"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n6["consequent"] := __n11;
__n6["alternate"] := null;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n15 := [  ];
__n0["variableDeclarations"] := __n15;
__n17 := {  };
__n17["type"] := "FunctionDeclaration";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "f1";
__n17["id"] := __n18;
__n19 := [  ];
__n17["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ReturnStatement";
__n23 := {  };
__n23["type"] := "LogicalExpression";
__n23["operator"] := "&&";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "===";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "FunctionExpression";
__n26["id"] := null;
__n27 := [  ];
__n26["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "typeof";
__n32 := {  };
__n32["type"] := "ThisExpression";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["argument"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n33 := [  ];
__n28["variableDeclarations"] := __n33;
__n34 := [  ];
__n28["functionDeclarations"] := __n34;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n26["body"] := __n28;
__n26["generator"] := false;
__n26["expression"] := false;
__n26["async"] := false;
__n25["callee"] := __n26;
__n35 := [  ];
__n25["arguments"] := __n35;
__n24["left"] := __n25;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "undefined";
__n36["raw"] := "\"undefined\"";
__n24["right"] := __n36;
__n23["left"] := __n24;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "===";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "typeof";
__n39 := {  };
__n39["type"] := "ThisExpression";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["left"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "undefined";
__n40["raw"] := "\"undefined\"";
__n37["right"] := __n40;
__n23["right"] := __n37;
__n22["argument"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n41 := [  ];
__n20["variableDeclarations"] := __n41;
__n42 := [  ];
__n20["functionDeclarations"] := __n42;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n17["body"] := __n20;
__n17["generator"] := false;
__n17["expression"] := false;
__n17["async"] := false;
__n16 := [ __n17 ];
__n0["functionDeclarations"] := __n16;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}