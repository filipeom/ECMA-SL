function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "assert";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "f1";
__n13["callee"] := __n14;
__n15 := [  ];
__n13["arguments"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "f1() !== true";
__n16["raw"] := "'f1() !== true'";
__n12 := [ __n13, __n16 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n1 := [ __n2, __n7, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n17 := [ "global" ];
__n0["variableDeclarations"] := __n17;
__n19 := {  };
__n19["type"] := "FunctionDeclaration";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "f1";
__n19["id"] := __n20;
__n21 := [  ];
__n19["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ReturnStatement";
__n25 := {  };
__n25["type"] := "LogicalExpression";
__n25["operator"] := "&&";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "===";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "FunctionExpression";
__n28["id"] := null;
__n29 := [  ];
__n28["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "use strict";
__n33["raw"] := "\"use strict\"";
__n32["expression"] := __n33;
__n32["directive"] := "use strict";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "typeof";
__n36 := {  };
__n36["type"] := "ThisExpression";
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["argument"] := __n35;
__n31 := [ __n32, __n34 ];
__n30["body"] := __n31;
__n37 := [  ];
__n30["variableDeclarations"] := __n37;
__n38 := [  ];
__n30["functionDeclarations"] := __n38;
__n30["codeType"] := "function";
__n30["strict"] := true;
__n28["body"] := __n30;
__n28["generator"] := false;
__n28["async"] := false;
__n28["expression"] := false;
__n27["callee"] := __n28;
__n39 := [  ];
__n27["arguments"] := __n39;
__n26["left"] := __n27;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "undefined";
__n40["raw"] := "\"undefined\"";
__n26["right"] := __n40;
__n25["left"] := __n26;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "===";
__n42 := {  };
__n42["type"] := "ThisExpression";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "global";
__n41["right"] := __n43;
__n25["right"] := __n41;
__n24["argument"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n44 := [  ];
__n22["variableDeclarations"] := __n44;
__n45 := [  ];
__n22["functionDeclarations"] := __n45;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n19["body"] := __n22;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n18 := [ __n19 ];
__n0["functionDeclarations"] := __n18;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}