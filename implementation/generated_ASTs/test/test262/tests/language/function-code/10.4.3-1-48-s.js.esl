function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "f1";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n11["id"] := null;
__n12 := [  ];
__n11["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "f";
__n15["expression"] := __n16;
__n17 := {  };
__n17["type"] := "ReturnStatement";
__n18 := {  };
__n18["type"] := "LogicalExpression";
__n18["operator"] := "&&";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "===";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n20["callee"] := __n21;
__n22 := [  ];
__n20["arguments"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "undefined";
__n23["raw"] := "\"undefined\"";
__n19["right"] := __n23;
__n18["left"] := __n19;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "===";
__n25 := {  };
__n25["type"] := "ThisExpression";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "global";
__n24["right"] := __n26;
__n18["right"] := __n24;
__n17["argument"] := __n18;
__n14 := [ __n15, __n17 ];
__n13["body"] := __n14;
__n27 := [  ];
__n13["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [  ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "use strict";
__n35["raw"] := "\"use strict\"";
__n34["expression"] := __n35;
__n34["directive"] := "use strict";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "typeof";
__n38 := {  };
__n38["type"] := "ThisExpression";
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n36["argument"] := __n37;
__n33 := [ __n34, __n36 ];
__n32["body"] := __n33;
__n39 := [  ];
__n32["variableDeclarations"] := __n39;
__n40 := [  ];
__n32["functionDeclarations"] := __n40;
__n32["codeType"] := "function";
__n32["strict"] := true;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28 := [ __n29 ];
__n13["functionDeclarations"] := __n28;
__n13["codeType"] := "function";
__n13["strict"] := false;
__n11["body"] := __n13;
__n11["generator"] := false;
__n11["async"] := false;
__n11["expression"] := false;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "assert";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "f1";
__n45["callee"] := __n46;
__n47 := [  ];
__n45["arguments"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "f1() !== true";
__n48["raw"] := "'f1() !== true'";
__n44 := [ __n45, __n48 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n1 := [ __n2, __n7, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n49 := [ "global", "f1" ];
__n0["variableDeclarations"] := __n49;
__n50 := [  ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}