function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "apply";
__n10["raw"] := "\"apply\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["callee"] := __n8;
__n12 := {  };
__n12["type"] := "ThisExpression";
__n11 := [ __n12 ];
__n7["arguments"] := __n11;
__n6["left"] := __n7;
__n13 := {  };
__n13["type"] := "ThisExpression";
__n6["right"] := __n13;
__n5["test"] := __n6;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ThrowStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "'this' had incorrect value!";
__n17["raw"] := "\"'this' had incorrect value!\"";
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n5["consequent"] := __n14;
__n5["alternate"] := null;
__n1 := [ __n2, __n4, __n5 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n18 := [  ];
__n0["variableDeclarations"] := __n18;
__n20 := {  };
__n20["type"] := "FunctionDeclaration";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n20["id"] := __n21;
__n22 := [  ];
__n20["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "use strict";
__n26["raw"] := "\"use strict\"";
__n25["expression"] := __n26;
__n25["directive"] := "use strict";
__n27 := {  };
__n27["type"] := "ReturnStatement";
__n28 := {  };
__n28["type"] := "ThisExpression";
__n27["argument"] := __n28;
__n24 := [ __n25, __n27 ];
__n23["body"] := __n24;
__n29 := [  ];
__n23["variableDeclarations"] := __n29;
__n30 := [  ];
__n23["functionDeclarations"] := __n30;
__n23["codeType"] := "function";
__n23["strict"] := true;
__n20["body"] := __n23;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19 := [ __n20 ];
__n0["functionDeclarations"] := __n19;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}