function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "EmptyStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "assert";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "f";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "call";
__n18["raw"] := "\"call\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "o";
__n19 := [ __n20 ];
__n15["arguments"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "f.call(o) !== true";
__n21["raw"] := "'f.call(o) !== true'";
__n14 := [ __n15, __n21 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n1 := [ __n2, __n8, __n10, __n11 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n22 := [ "o" ];
__n0["variableDeclarations"] := __n22;
__n24 := {  };
__n24["type"] := "FunctionDeclaration";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "f";
__n24["id"] := __n25;
__n26 := [  ];
__n24["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "use strict";
__n30["raw"] := "\"use strict\"";
__n29["expression"] := __n30;
__n29["directive"] := "use strict";
__n31 := {  };
__n31["type"] := "ReturnStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "===";
__n33 := {  };
__n33["type"] := "ThisExpression";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "o";
__n32["right"] := __n34;
__n31["argument"] := __n32;
__n28 := [ __n29, __n31 ];
__n27["body"] := __n28;
__n35 := [  ];
__n27["variableDeclarations"] := __n35;
__n36 := [  ];
__n27["functionDeclarations"] := __n36;
__n27["codeType"] := "function";
__n27["strict"] := true;
__n24["body"] := __n27;
__n24["generator"] := false;
__n24["expression"] := false;
__n24["async"] := false;
__n23 := [ __n24 ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}