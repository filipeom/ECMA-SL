function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "EmptyStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "f";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "bind";
__n17["raw"] := "\"bind\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "o";
__n18 := [ __n19 ];
__n14["arguments"] := __n18;
__n13["callee"] := __n14;
__n20 := [  ];
__n13["arguments"] := __n20;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ThrowStatement";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "'this' had incorrect value!";
__n24["raw"] := "\"'this' had incorrect value!\"";
__n23["argument"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n11["consequent"] := __n21;
__n11["alternate"] := null;
__n1 := [ __n2, __n8, __n10, __n11 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n25 := [ "o" ];
__n0["variableDeclarations"] := __n25;
__n27 := {  };
__n27["type"] := "FunctionDeclaration";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "f";
__n27["id"] := __n28;
__n29 := [  ];
__n27["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "use strict";
__n33["raw"] := "\"use strict\"";
__n32["expression"] := __n33;
__n32["directive"] := "use strict";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "===";
__n36 := {  };
__n36["type"] := "ThisExpression";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "o";
__n35["right"] := __n37;
__n34["argument"] := __n35;
__n31 := [ __n32, __n34 ];
__n30["body"] := __n31;
__n38 := [  ];
__n30["variableDeclarations"] := __n38;
__n39 := [  ];
__n30["functionDeclarations"] := __n39;
__n30["codeType"] := "function";
__n30["strict"] := true;
__n27["body"] := __n30;
__n27["generator"] := false;
__n27["expression"] := false;
__n27["async"] := false;
__n26 := [ __n27 ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}