function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "IfStatement";
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "!==";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["callee"] := __n9;
__n10 := [  ];
__n8["arguments"] := __n10;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "undefined";
__n11["raw"] := "\"undefined\"";
__n7["right"] := __n11;
__n6["test"] := __n7;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ThrowStatement";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "'this' had incorrect value!";
__n15["raw"] := "\"'this' had incorrect value!\"";
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n6["consequent"] := __n12;
__n6["alternate"] := null;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n16 := [  ];
__n0["variableDeclarations"] := __n16;
__n18 := {  };
__n18["type"] := "FunctionDeclaration";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "f";
__n18["id"] := __n19;
__n20 := [  ];
__n18["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ReturnStatement";
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "typeof";
__n25 := {  };
__n25["type"] := "ThisExpression";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23["argument"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n26 := [  ];
__n21["variableDeclarations"] := __n26;
__n27 := [  ];
__n21["functionDeclarations"] := __n27;
__n21["codeType"] := "function";
__n21["strict"] := false;
__n18["body"] := __n21;
__n18["generator"] := false;
__n18["expression"] := false;
__n18["async"] := false;
__n17 := [ __n18 ];
__n0["functionDeclarations"] := __n17;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}