function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "foo";
__n5["expression"] := __n6;
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "assert";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "foo";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "foo() !== true";
__n14["raw"] := "'foo() !== true'";
__n10 := [ __n11, __n14 ];
__n8["arguments"] := __n10;
__n7["expression"] := __n8;
__n1 := [ __n2, __n4, __n5, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n15 := [  ];
__n0["variableDeclarations"] := __n15;
__n17 := {  };
__n17["type"] := "FunctionDeclaration";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "f";
__n17["id"] := __n18;
__n19 := [  ];
__n17["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ReturnStatement";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "ThisExpression";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "undefined";
__n23["right"] := __n25;
__n22["argument"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n26 := [  ];
__n20["variableDeclarations"] := __n26;
__n27 := [  ];
__n20["functionDeclarations"] := __n27;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n17["body"] := __n20;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n28 := {  };
__n28["type"] := "FunctionDeclaration";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "foo";
__n28["id"] := __n29;
__n30 := [  ];
__n28["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "use strict";
__n34["raw"] := "\"use strict\"";
__n33["expression"] := __n34;
__n33["directive"] := "use strict";
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "f";
__n36["callee"] := __n37;
__n38 := [  ];
__n36["arguments"] := __n38;
__n35["argument"] := __n36;
__n32 := [ __n33, __n35 ];
__n31["body"] := __n32;
__n39 := [  ];
__n31["variableDeclarations"] := __n39;
__n40 := [  ];
__n31["functionDeclarations"] := __n40;
__n31["codeType"] := "function";
__n31["strict"] := true;
__n28["body"] := __n31;
__n28["generator"] := false;
__n28["async"] := false;
__n28["expression"] := false;
__n16 := [ __n17, __n28 ];
__n0["functionDeclarations"] := __n16;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}