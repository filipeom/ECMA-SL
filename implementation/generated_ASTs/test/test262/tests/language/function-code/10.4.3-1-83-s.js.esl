function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "ThisExpression";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "f";
__n6["raw"] := "\"f\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ReturnStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "ThisExpression";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "undefined";
__n12["right"] := __n14;
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n15 := [  ];
__n9["variableDeclarations"] := __n15;
__n16 := [  ];
__n9["functionDeclarations"] := __n16;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "assert";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [  ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ReturnStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Function";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "\"use strict\";return f();";
__n31["raw"] := "\"\\\"use strict\\\";return f();\"";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["callee"] := __n28;
__n32 := [  ];
__n27["arguments"] := __n32;
__n26["argument"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n33 := [  ];
__n24["variableDeclarations"] := __n33;
__n34 := [  ];
__n24["functionDeclarations"] := __n34;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["async"] := false;
__n22["expression"] := false;
__n21["callee"] := __n22;
__n35 := [  ];
__n21["arguments"] := __n35;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n1 := [ __n2, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [  ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}