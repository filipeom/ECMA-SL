function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "EmptyStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "!";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "FunctionExpression";
__n14["id"] := null;
__n15 := [  ];
__n14["params"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "use strict";
__n19["raw"] := "\"use strict\"";
__n18["expression"] := __n19;
__n18["directive"] := "use strict";
__n20 := {  };
__n20["type"] := "ReturnStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "f";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "bind";
__n25["raw"] := "\"bind\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "o";
__n26 := [ __n27 ];
__n22["arguments"] := __n26;
__n21["callee"] := __n22;
__n28 := [  ];
__n21["arguments"] := __n28;
__n20["argument"] := __n21;
__n17 := [ __n18, __n20 ];
__n16["body"] := __n17;
__n29 := [  ];
__n16["variableDeclarations"] := __n29;
__n30 := [  ];
__n16["functionDeclarations"] := __n30;
__n16["codeType"] := "function";
__n16["strict"] := true;
__n14["body"] := __n16;
__n14["generator"] := false;
__n14["async"] := false;
__n14["expression"] := false;
__n13["callee"] := __n14;
__n31 := [  ];
__n13["arguments"] := __n31;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["test"] := __n12;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ThrowStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "'this' had incorrect value!";
__n35["raw"] := "\"'this' had incorrect value!\"";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n11["consequent"] := __n32;
__n11["alternate"] := null;
__n1 := [ __n2, __n8, __n10, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [ "o" ];
__n0["variableDeclarations"] := __n36;
__n38 := {  };
__n38["type"] := "FunctionDeclaration";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "f";
__n38["id"] := __n39;
__n40 := [  ];
__n38["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "ThisExpression";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "o";
__n44["right"] := __n46;
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n47 := [  ];
__n41["variableDeclarations"] := __n47;
__n48 := [  ];
__n41["functionDeclarations"] := __n48;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n38["body"] := __n41;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n37 := [ __n38 ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}