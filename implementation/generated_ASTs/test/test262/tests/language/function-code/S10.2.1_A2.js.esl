function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "===";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f1";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 2.;
__n11["raw"] := "2";
__n9 := [ __n10, __n11 ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n6["right"] := __n12;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: f1(1, 2) === 2";
__n19["raw"] := "\"#1: f1(1, 2) === 2\"";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n4["consequent"] := __n13;
__n4["alternate"] := null;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f2";
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "!";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "===";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "f2";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 2.;
__n29["raw"] := "2";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 3.;
__n30["raw"] := "3";
__n27 := [ __n28, __n29, __n30 ];
__n25["arguments"] := __n27;
__n24["left"] := __n25;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 27.;
__n31["raw"] := "27";
__n24["right"] := __n31;
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n22["test"] := __n23;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "f2(1, 2, 3) === 27";
__n38["raw"] := "\"f2(1, 2, 3) === 27\"";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n22["consequent"] := __n32;
__n22["alternate"] := null;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "f3";
__n39["expression"] := __n40;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "UnaryExpression";
__n42["operator"] := "!";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "===";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "f3";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 2.;
__n48["raw"] := "2";
__n46 := [ __n47, __n48 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "a2";
__n49["raw"] := "'a2'";
__n43["right"] := __n49;
__n42["argument"] := __n43;
__n42["prefix"] := true;
__n41["test"] := __n42;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: f3(1, 2) === 'a2'";
__n56["raw"] := "\"#3: f3(1, 2) === 'a2'\"";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n41["consequent"] := __n50;
__n41["alternate"] := null;
__n1 := [ __n2, __n4, __n20, __n22, __n39, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n57 := [  ];
__n0["variableDeclarations"] := __n57;
__n59 := {  };
__n59["type"] := "FunctionDeclaration";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "f1";
__n59["id"] := __n60;
__n61 := [ "x", "x" ];
__n59["params"] := __n61;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ReturnStatement";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["argument"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n66 := [  ];
__n62["variableDeclarations"] := __n66;
__n67 := [  ];
__n62["functionDeclarations"] := __n67;
__n62["codeType"] := "function";
__n62["strict"] := false;
__n59["body"] := __n62;
__n59["generator"] := false;
__n59["async"] := false;
__n59["expression"] := false;
__n68 := {  };
__n68["type"] := "FunctionDeclaration";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "f2";
__n68["id"] := __n69;
__n70 := [ "x", "x", "x" ];
__n68["params"] := __n70;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ReturnStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "*";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "*";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "x";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n75["right"] := __n77;
__n74["left"] := __n75;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "x";
__n74["right"] := __n78;
__n73["argument"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n79 := [  ];
__n71["variableDeclarations"] := __n79;
__n80 := [  ];
__n71["functionDeclarations"] := __n80;
__n71["codeType"] := "function";
__n71["strict"] := false;
__n68["body"] := __n71;
__n68["generator"] := false;
__n68["async"] := false;
__n68["expression"] := false;
__n81 := {  };
__n81["type"] := "FunctionDeclaration";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "f3";
__n81["id"] := __n82;
__n83 := [ "x", "x" ];
__n81["params"] := __n83;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ReturnStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "+";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "a";
__n88["raw"] := "'a'";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "x";
__n87["right"] := __n89;
__n86["argument"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n90 := [  ];
__n84["variableDeclarations"] := __n90;
__n91 := [  ];
__n84["functionDeclarations"] := __n91;
__n84["codeType"] := "function";
__n84["strict"] := false;
__n81["body"] := __n84;
__n81["generator"] := false;
__n81["async"] := false;
__n81["expression"] := false;
__n58 := [ __n59, __n68, __n81 ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}