function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "y";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "f";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "y";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "f";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["right"] := __n11;
__n8["expression"] := __n9;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "!";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "===";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "y";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "undefined";
__n17["right"] := __n19;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["test"] := __n16;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: Recursive function calls shares execution context";
__n26["raw"] := "\"#1: Recursive function calls shares execution context\"";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n15["consequent"] := __n20;
__n15["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n15 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n27 := [ "y" ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [ "a" ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n36["id"] := __n37;
__n36["init"] := null;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "===";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "a";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 1.;
__n41["raw"] := "1";
__n39["right"] := __n41;
__n38["test"] := __n39;
__n42 := {  };
__n42["type"] := "ReturnStatement";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n42["argument"] := __n43;
__n38["consequent"] := __n42;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "===";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "x";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "undefined";
__n47["right"] := __n49;
__n46["test"] := __n47;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "AssignmentExpression";
__n53["operator"] := "=";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "x";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n53["right"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n46["consequent"] := __n50;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "AssignmentExpression";
__n59["operator"] := "=";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "x";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 1.;
__n61["raw"] := "1";
__n59["right"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n46["alternate"] := __n56;
__n62 := {  };
__n62["type"] := "ReturnStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "f";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["argument"] := __n63;
__n45 := [ __n46, __n62 ];
__n44["body"] := __n45;
__n38["alternate"] := __n44;
__n33 := [ __n34, __n38 ];
__n32["body"] := __n33;
__n67 := [ "x" ];
__n32["variableDeclarations"] := __n67;
__n68 := [  ];
__n32["functionDeclarations"] := __n68;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["expression"] := false;
__n29["async"] := false;
__n28 := [ __n29 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}