function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "/1/";
__n5["raw"] := "/1/";
__n5["source"] := "1";
__n6 := {  };
__n6["type"] := "RegExp";
__n7 := {  };
__n7["type"] := "Char";
__n7["value"] := "1";
__n7["kind"] := "simple";
__n7["symbol"] := "1";
__n7["codePoint"] := 49.;
__n6["body"] := __n7;
__n6["flags"] := "";
__n6["nCaps"] := 0.;
__n5["regex"] := __n6;
__n4["object"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "source";
__n8["raw"] := "\"source\"";
__n4["property"] := __n8;
__n4["computed"] := true;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "1";
__n9["raw"] := "\"1\"";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: /1/";
__n16["raw"] := "'#1: /1/'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "/a/";
__n20["raw"] := "/a/";
__n20["source"] := "a";
__n21 := {  };
__n21["type"] := "RegExp";
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "a";
__n22["kind"] := "simple";
__n22["symbol"] := "a";
__n22["codePoint"] := 97.;
__n21["body"] := __n22;
__n21["flags"] := "";
__n21["nCaps"] := 0.;
__n20["regex"] := __n21;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "source";
__n23["raw"] := "\"source\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n18["left"] := __n19;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "a";
__n24["raw"] := "\"a\"";
__n18["right"] := __n24;
__n17["test"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: /a/";
__n31["raw"] := "'#2: /a/'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n17["consequent"] := __n25;
__n17["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "/;/";
__n35["raw"] := "/;/";
__n35["source"] := ";";
__n36 := {  };
__n36["type"] := "RegExp";
__n37 := {  };
__n37["type"] := "Char";
__n37["value"] := ";";
__n37["kind"] := "simple";
__n37["symbol"] := ";";
__n37["codePoint"] := 59.;
__n36["body"] := __n37;
__n36["flags"] := "";
__n36["nCaps"] := 0.;
__n35["regex"] := __n36;
__n34["object"] := __n35;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "source";
__n38["raw"] := "\"source\"";
__n34["property"] := __n38;
__n34["computed"] := true;
__n33["left"] := __n34;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := ";";
__n39["raw"] := "\";\"";
__n33["right"] := __n39;
__n32["test"] := __n33;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#3: /;/";
__n46["raw"] := "'#3: /;/'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n32["consequent"] := __n40;
__n32["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "/ /";
__n50["raw"] := "/ /";
__n50["source"] := " ";
__n51 := {  };
__n51["type"] := "RegExp";
__n52 := {  };
__n52["type"] := "Char";
__n52["value"] := " ";
__n52["kind"] := "simple";
__n52["symbol"] := " ";
__n52["codePoint"] := 32.;
__n51["body"] := __n52;
__n51["flags"] := "";
__n51["nCaps"] := 0.;
__n50["regex"] := __n51;
__n49["object"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "source";
__n53["raw"] := "\"source\"";
__n49["property"] := __n53;
__n49["computed"] := true;
__n48["left"] := __n49;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := " ";
__n54["raw"] := "\" \"";
__n48["right"] := __n54;
__n47["test"] := __n48;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#4: / /";
__n61["raw"] := "'#4: / /'";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n47["consequent"] := __n55;
__n47["alternate"] := null;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "/\\u0041/";
__n65["raw"] := "/\\u0041/";
__n65["source"] := "\\u0041";
__n66 := {  };
__n66["type"] := "RegExp";
__n67 := {  };
__n67["type"] := "Char";
__n67["value"] := "\\u0041";
__n67["kind"] := "unicode";
__n67["symbol"] := "A";
__n67["codePoint"] := 65.;
__n66["body"] := __n67;
__n66["flags"] := "";
__n66["nCaps"] := 0.;
__n65["regex"] := __n66;
__n64["object"] := __n65;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "source";
__n68["raw"] := "\"source\"";
__n64["property"] := __n68;
__n64["computed"] := true;
__n63["left"] := __n64;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "\\u0041";
__n69["raw"] := "\"\\\\u0041\"";
__n63["right"] := __n69;
__n62["test"] := __n63;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#5: /\\u0041/";
__n76["raw"] := "'#5: /\\\\u0041/'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n62["consequent"] := __n70;
__n62["alternate"] := null;
__n1 := [ __n2, __n17, __n32, __n47, __n62 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n77 := [  ];
__n0["variableDeclarations"] := __n77;
__n78 := [  ];
__n0["functionDeclarations"] := __n78;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}