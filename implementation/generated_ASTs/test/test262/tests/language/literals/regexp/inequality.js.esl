function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "makeRegExp";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "notSameValue";
__n8["raw"] := "\"notSameValue\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "makeRegExp";
__n10["callee"] := __n11;
__n12 := [  ];
__n10["arguments"] := __n12;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "makeRegExp";
__n13["callee"] := __n14;
__n15 := [  ];
__n13["arguments"] := __n15;
__n9 := [ __n10, __n13 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "values";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "ArrayExpression";
__n21 := [  ];
__n20["elements"] := __n21;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n22 := {  };
__n22["type"] := "ForStatement";
__n23 := {  };
__n23["type"] := "VariableDeclaration";
__n25 := {  };
__n25["type"] := "VariableDeclarator";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "i";
__n25["id"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n25["init"] := __n27;
__n24 := [ __n25 ];
__n23["declarations"] := __n24;
__n23["kind"] := "var";
__n22["init"] := __n23;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "<";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "i";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 2.;
__n30["raw"] := "2";
__n28["right"] := __n30;
__n22["test"] := __n28;
__n31 := {  };
__n31["type"] := "UpdateExpression";
__n31["operator"] := "++";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "i";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n22["update"] := __n31;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "AssignmentExpression";
__n36["operator"] := "=";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n37["computed"] := true;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "values";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "i";
__n37["property"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "/(?:)/";
__n40["raw"] := "/(?:)/";
__n40["source"] := "(?:)";
__n41 := {  };
__n41["type"] := "RegExp";
__n42 := {  };
__n42["type"] := "Group";
__n42["capturing"] := false;
__n42["expression"] := null;
__n41["body"] := __n42;
__n41["flags"] := "";
__n41["nCaps"] := 0.;
__n40["regex"] := __n41;
__n36["right"] := __n40;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n22["body"] := __n33;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "notSameValue";
__n47["raw"] := "\"notSameValue\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "MemberExpression";
__n49["computed"] := true;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "values";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 0.;
__n51["raw"] := "0";
__n49["property"] := __n51;
__n52 := {  };
__n52["type"] := "MemberExpression";
__n52["computed"] := true;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "values";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1.;
__n54["raw"] := "1";
__n52["property"] := __n54;
__n48 := [ __n49, __n52 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n1 := [ __n2, __n4, __n16, __n22, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n55 := [ "values", "i" ];
__n0["variableDeclarations"] := __n55;
__n57 := {  };
__n57["type"] := "FunctionDeclaration";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "makeRegExp";
__n57["id"] := __n58;
__n59 := [  ];
__n57["params"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ReturnStatement";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "/(?:)/";
__n63["raw"] := "/(?:)/";
__n63["source"] := "(?:)";
__n64 := {  };
__n64["type"] := "RegExp";
__n65 := {  };
__n65["type"] := "Group";
__n65["capturing"] := false;
__n65["expression"] := null;
__n64["body"] := __n65;
__n64["flags"] := "";
__n64["nCaps"] := 0.;
__n63["regex"] := __n64;
__n62["argument"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n66 := [  ];
__n60["variableDeclarations"] := __n66;
__n67 := [  ];
__n60["functionDeclarations"] := __n67;
__n60["codeType"] := "function";
__n60["strict"] := false;
__n57["body"] := __n60;
__n57["generator"] := false;
__n57["async"] := false;
__n57["expression"] := false;
__n56 := [ __n57 ];
__n0["functionDeclarations"] := __n56;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}