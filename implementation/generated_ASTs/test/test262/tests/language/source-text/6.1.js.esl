function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "chars";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "𐒠";
__n6["raw"] := "\"𐒠\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "chars";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "length";
__n11["raw"] := "\"length\"";
__n9["property"] := __n11;
__n9["computed"] := true;
__n8["left"] := __n9;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n8["right"] := __n12;
__n7["test"] := __n8;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "A character outside the BMP (Unicode CodePoint > 0xFFFF) should consume two code units";
__n19["raw"] := "\"A character outside the BMP (Unicode CodePoint > 0xFFFF) should consume two code units\"";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n7["consequent"] := __n13;
__n7["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "chars";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "charCodeAt";
__n25["raw"] := "\"charCodeAt\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n26 := [ __n27 ];
__n22["arguments"] := __n26;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 55297.;
__n28["raw"] := "0xD801";
__n21["right"] := __n28;
__n20["test"] := __n21;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "First code unit of surrogate pair for 0x104A0 should be 0xD801";
__n35["raw"] := "\"First code unit of surrogate pair for 0x104A0 should be 0xD801\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n20["consequent"] := __n29;
__n20["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "chars";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "charCodeAt";
__n41["raw"] := "\"charCodeAt\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 1.;
__n43["raw"] := "1";
__n42 := [ __n43 ];
__n38["arguments"] := __n42;
__n37["left"] := __n38;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 56480.;
__n44["raw"] := "0xDCA0";
__n37["right"] := __n44;
__n36["test"] := __n37;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "Second code unit of surrogate pair for 0x104A0 should be 0xDCA0";
__n51["raw"] := "\"Second code unit of surrogate pair for 0x104A0 should be 0xDCA0\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n36["consequent"] := __n45;
__n36["alternate"] := null;
__n1 := [ __n2, __n7, __n20, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "chars" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}