function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n5["argument"] := __n6;
__n7 := {  };
__n7["type"] := "ThrowStatement";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 2.;
__n8["raw"] := "2";
__n7["argument"] := __n8;
__n9 := {  };
__n9["type"] := "ThrowStatement";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 3.;
__n10["raw"] := "3";
__n9["argument"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "1.1: throw 1 lead to throwing exception";
__n15["raw"] := "'1.1: throw 1 lead to throwing exception'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n4 := [ __n5, __n7, __n9, __n11 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1.2: Exception === 1. Actual:  Exception ===";
__n31["raw"] := "'#1.2: Exception === 1. Actual:  Exception ==='";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "e";
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n2["handler"] := __n16;
__n2["finalizer"] := null;
__n33 := {  };
__n33["type"] := "TryStatement";
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ThrowStatement";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 1.;
__n39["raw"] := "1";
__n38["argument"] := __n39;
__n40 := {  };
__n40["type"] := "ThrowStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 2.;
__n41["raw"] := "2";
__n40["argument"] := __n41;
__n37 := [ __n38, __n40 ];
__n36["body"] := __n37;
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 3.;
__n43["raw"] := "3";
__n42["argument"] := __n43;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2.1: throw 1 lead to throwing exception";
__n48["raw"] := "'#2.1: throw 1 lead to throwing exception'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n35 := [ __n36, __n42, __n44 ];
__n34["body"] := __n35;
__n33["block"] := __n34;
__n49 := {  };
__n49["type"] := "CatchClause";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n49["param"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 1.;
__n56["raw"] := "1";
__n54["right"] := __n56;
__n53["test"] := __n54;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "+";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#2.2: Exception === 1. Actual:  Exception ===";
__n64["raw"] := "'#2.2: Exception === 1. Actual:  Exception ==='";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "e";
__n63["right"] := __n65;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n53["consequent"] := __n57;
__n53["alternate"] := null;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n49["body"] := __n51;
__n33["handler"] := __n49;
__n33["finalizer"] := null;
__n66 := {  };
__n66["type"] := "TryStatement";
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ThrowStatement";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n69["argument"] := __n70;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ThrowStatement";
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 2.;
__n74["raw"] := "2";
__n73["argument"] := __n74;
__n75 := {  };
__n75["type"] := "ThrowStatement";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 3.;
__n76["raw"] := "3";
__n75["argument"] := __n76;
__n72 := [ __n73, __n75 ];
__n71["body"] := __n72;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "$ERROR";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#3.1: throw 1 lead to throwing exception";
__n81["raw"] := "'#3.1: throw 1 lead to throwing exception'";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["expression"] := __n78;
__n68 := [ __n69, __n71, __n77 ];
__n67["body"] := __n68;
__n66["block"] := __n67;
__n82 := {  };
__n82["type"] := "CatchClause";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "e";
__n82["param"] := __n83;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "!==";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "e";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 1.;
__n89["raw"] := "1";
__n87["right"] := __n89;
__n86["test"] := __n87;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#3.2: Exception === 1. Actual:  Exception ===";
__n97["raw"] := "'#3.2: Exception === 1. Actual:  Exception ==='";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "e";
__n96["right"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n86["consequent"] := __n90;
__n86["alternate"] := null;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n82["body"] := __n84;
__n66["handler"] := __n82;
__n66["finalizer"] := null;
__n1 := [ __n2, __n33, __n66 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n99 := [  ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}