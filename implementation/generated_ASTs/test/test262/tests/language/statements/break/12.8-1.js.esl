function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "sum";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ForStatement";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n7["init"] := __n8;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "<=";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "i";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 10.;
__n15["raw"] := "10";
__n13["right"] := __n15;
__n7["test"] := __n13;
__n16 := {  };
__n16["type"] := "UpdateExpression";
__n16["operator"] := "++";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "i";
__n16["argument"] := __n17;
__n16["prefix"] := false;
__n7["update"] := __n16;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "===";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "i";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 6.;
__n23["raw"] := "6";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "BreakStatement";
__n26["label"] := null;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "+=";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "sum";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "i";
__n28["right"] := __n30;
__n27["expression"] := __n28;
__n19 := [ __n20, __n27 ];
__n18["body"] := __n19;
__n7["body"] := __n18;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "assert";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "sameValue";
__n35["raw"] := "\"sameValue\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "sum";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 15.;
__n38["raw"] := "15";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "sum";
__n39["raw"] := "'sum'";
__n36 := [ __n37, __n38, __n39 ];
__n32["arguments"] := __n36;
__n31["expression"] := __n32;
__n1 := [ __n2, __n7, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [ "sum", "i" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}