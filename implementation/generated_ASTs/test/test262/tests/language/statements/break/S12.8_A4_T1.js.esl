function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "LABEL_OUT";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n6["init"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "y";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n9["init"] := __n11;
__n5 := [ __n6, __n9 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n2["body"] := __n4;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "FunctionExpression";
__n14["id"] := null;
__n15 := [  ];
__n14["params"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "LabeledStatement";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "LABEL_DO_LOOP";
__n18["label"] := __n19;
__n20 := {  };
__n20["type"] := "DoWhileStatement";
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "LabeledStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "LABEL_IN";
__n23["label"] := __n24;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "UpdateExpression";
__n26["operator"] := "++";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "x";
__n26["argument"] := __n27;
__n26["prefix"] := false;
__n25["expression"] := __n26;
__n23["body"] := __n25;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "===";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 10.;
__n31["raw"] := "10";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "ReturnStatement";
__n32["argument"] := null;
__n28["consequent"] := __n32;
__n28["alternate"] := null;
__n33 := {  };
__n33["type"] := "BreakStatement";
__n33["label"] := "LABEL_DO_LOOP";
__n34 := {  };
__n34["type"] := "LabeledStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "LABEL_IN_2";
__n34["label"] := __n35;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "UpdateExpression";
__n37["operator"] := "++";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "y";
__n37["argument"] := __n38;
__n37["prefix"] := false;
__n36["expression"] := __n37;
__n34["body"] := __n36;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "IN_DO_FUNC";
__n39["expression"] := __n40;
__n22 := [ __n23, __n28, __n33, __n34, __n39 ];
__n21["body"] := __n22;
__n20["body"] := __n21;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 0.;
__n41["raw"] := "0";
__n20["test"] := __n41;
__n18["body"] := __n20;
__n42 := {  };
__n42["type"] := "LabeledStatement";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "LABEL_ANOTHER_LOOP";
__n42["label"] := __n43;
__n44 := {  };
__n44["type"] := "DoWhileStatement";
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "EmptyStatement";
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n44["body"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 0.;
__n48["raw"] := "0";
__n44["test"] := __n48;
__n42["body"] := __n44;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "OUT_FUNC";
__n49["expression"] := __n50;
__n17 := [ __n18, __n42, __n49 ];
__n16["body"] := __n17;
__n51 := [  ];
__n16["variableDeclarations"] := __n51;
__n53 := {  };
__n53["type"] := "FunctionDeclaration";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "IN_DO_FUNC";
__n53["id"] := __n54;
__n55 := [  ];
__n53["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n57 := [  ];
__n56["body"] := __n57;
__n58 := [  ];
__n56["variableDeclarations"] := __n58;
__n59 := [  ];
__n56["functionDeclarations"] := __n59;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n53["body"] := __n56;
__n53["generator"] := false;
__n53["async"] := false;
__n53["expression"] := false;
__n60 := {  };
__n60["type"] := "FunctionDeclaration";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "OUT_FUNC";
__n60["id"] := __n61;
__n62 := [  ];
__n60["params"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n64 := [  ];
__n63["body"] := __n64;
__n65 := [  ];
__n63["variableDeclarations"] := __n65;
__n66 := [  ];
__n63["functionDeclarations"] := __n66;
__n63["codeType"] := "function";
__n63["strict"] := false;
__n60["body"] := __n63;
__n60["generator"] := false;
__n60["async"] := false;
__n60["expression"] := false;
__n52 := [ __n53, __n60 ];
__n16["functionDeclarations"] := __n52;
__n16["codeType"] := "function";
__n16["strict"] := false;
__n14["body"] := __n16;
__n14["generator"] := false;
__n14["async"] := false;
__n14["expression"] := false;
__n13["callee"] := __n14;
__n67 := [  ];
__n13["arguments"] := __n67;
__n12["expression"] := __n13;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "LogicalExpression";
__n69["operator"] := "&&";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "x";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n70["right"] := __n72;
__n69["left"] := __n70;
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "!==";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "y";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 0.;
__n75["raw"] := "0";
__n73["right"] := __n75;
__n69["right"] := __n73;
__n68["test"] := __n69;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "+";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "+";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "+";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "#1: x === 1 and y === 0. Actual:  x === ";
__n85["raw"] := "'#1: x === 1 and y === 0. Actual:  x === '";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "x";
__n84["right"] := __n86;
__n83["left"] := __n84;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := " and y ===";
__n87["raw"] := "' and y ==='";
__n83["right"] := __n87;
__n82["left"] := __n83;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "y";
__n82["right"] := __n88;
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n68["consequent"] := __n76;
__n68["alternate"] := null;
__n1 := [ __n2, __n12, __n68 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n89 := [ "x", "y" ];
__n0["variableDeclarations"] := __n89;
__n90 := [  ];
__n0["functionDeclarations"] := __n90;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}