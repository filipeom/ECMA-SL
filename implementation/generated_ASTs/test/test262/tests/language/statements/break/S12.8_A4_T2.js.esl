function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "LABEL_OUT";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n6["init"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "y";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n9["init"] := __n11;
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "xx";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n12["init"] := __n14;
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "yy";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.;
__n17["raw"] := "0";
__n15["init"] := __n17;
__n5 := [ __n6, __n9, __n12, __n15 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n2["body"] := __n4;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "LabeledStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "LABEL_DO_LOOP";
__n24["label"] := __n25;
__n26 := {  };
__n26["type"] := "DoWhileStatement";
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "LabeledStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "LABEL_IN";
__n29["label"] := __n30;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "UpdateExpression";
__n32["operator"] := "++";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["argument"] := __n33;
__n32["prefix"] := false;
__n31["expression"] := __n32;
__n29["body"] := __n31;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "===";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 10.;
__n37["raw"] := "10";
__n35["right"] := __n37;
__n34["test"] := __n35;
__n38 := {  };
__n38["type"] := "ReturnStatement";
__n38["argument"] := null;
__n34["consequent"] := __n38;
__n34["alternate"] := null;
__n39 := {  };
__n39["type"] := "LabeledStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "LABEL_NESTED_LOOP";
__n39["label"] := __n40;
__n41 := {  };
__n41["type"] := "DoWhileStatement";
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "LabeledStatement";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "LABEL_IN_NESTED";
__n44["label"] := __n45;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "UpdateExpression";
__n47["operator"] := "++";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "xx";
__n47["argument"] := __n48;
__n47["prefix"] := false;
__n46["expression"] := __n47;
__n44["body"] := __n46;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "===";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "xx";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 10.;
__n52["raw"] := "10";
__n50["right"] := __n52;
__n49["test"] := __n50;
__n53 := {  };
__n53["type"] := "ReturnStatement";
__n53["argument"] := null;
__n49["consequent"] := __n53;
__n49["alternate"] := null;
__n54 := {  };
__n54["type"] := "BreakStatement";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "LABEL_NESTED_LOOP";
__n54["label"] := __n55;
__n56 := {  };
__n56["type"] := "LabeledStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "LABEL_IN_NESTED_2";
__n56["label"] := __n57;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "UpdateExpression";
__n59["operator"] := "++";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "yy";
__n59["argument"] := __n60;
__n59["prefix"] := false;
__n58["expression"] := __n59;
__n56["body"] := __n58;
__n43 := [ __n44, __n49, __n54, __n56 ];
__n42["body"] := __n43;
__n41["body"] := __n42;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 0.;
__n61["raw"] := "0";
__n41["test"] := __n61;
__n39["body"] := __n41;
__n62 := {  };
__n62["type"] := "LabeledStatement";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "LABEL_IN_2";
__n62["label"] := __n63;
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "UpdateExpression";
__n65["operator"] := "++";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "y";
__n65["argument"] := __n66;
__n65["prefix"] := false;
__n64["expression"] := __n65;
__n62["body"] := __n64;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "IN_DO_FUNC";
__n67["expression"] := __n68;
__n28 := [ __n29, __n34, __n39, __n62, __n67 ];
__n27["body"] := __n28;
__n26["body"] := __n27;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 0.;
__n69["raw"] := "0";
__n26["test"] := __n69;
__n24["body"] := __n26;
__n70 := {  };
__n70["type"] := "LabeledStatement";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "LABEL_ANOTHER_LOOP";
__n70["label"] := __n71;
__n72 := {  };
__n72["type"] := "DoWhileStatement";
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "EmptyStatement";
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n72["body"] := __n73;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 0.;
__n76["raw"] := "0";
__n72["test"] := __n76;
__n70["body"] := __n72;
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "OUT_FUNC";
__n77["expression"] := __n78;
__n23 := [ __n24, __n70, __n77 ];
__n22["body"] := __n23;
__n79 := [  ];
__n22["variableDeclarations"] := __n79;
__n81 := {  };
__n81["type"] := "FunctionDeclaration";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "IN_DO_FUNC";
__n81["id"] := __n82;
__n83 := [  ];
__n81["params"] := __n83;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n85 := [  ];
__n84["body"] := __n85;
__n86 := [  ];
__n84["variableDeclarations"] := __n86;
__n87 := [  ];
__n84["functionDeclarations"] := __n87;
__n84["codeType"] := "function";
__n84["strict"] := false;
__n81["body"] := __n84;
__n81["generator"] := false;
__n81["expression"] := false;
__n81["async"] := false;
__n88 := {  };
__n88["type"] := "FunctionDeclaration";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "OUT_FUNC";
__n88["id"] := __n89;
__n90 := [  ];
__n88["params"] := __n90;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n92 := [  ];
__n91["body"] := __n92;
__n93 := [  ];
__n91["variableDeclarations"] := __n93;
__n94 := [  ];
__n91["functionDeclarations"] := __n94;
__n91["codeType"] := "function";
__n91["strict"] := false;
__n88["body"] := __n91;
__n88["generator"] := false;
__n88["expression"] := false;
__n88["async"] := false;
__n80 := [ __n81, __n88 ];
__n22["functionDeclarations"] := __n80;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19["callee"] := __n20;
__n95 := [  ];
__n19["arguments"] := __n95;
__n18["expression"] := __n19;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "LogicalExpression";
__n97["operator"] := "&&";
__n98 := {  };
__n98["type"] := "LogicalExpression";
__n98["operator"] := "&&";
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "!==";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "x";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 1.;
__n101["raw"] := "1";
__n99["right"] := __n101;
__n98["left"] := __n99;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "!==";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "y";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 1.;
__n104["raw"] := "1";
__n102["right"] := __n104;
__n98["right"] := __n102;
__n97["left"] := __n98;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "&";
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "!==";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "xx";
__n106["left"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 1.;
__n108["raw"] := "1";
__n106["right"] := __n108;
__n105["left"] := __n106;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "!==";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "yy";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := 0.;
__n111["raw"] := "0";
__n109["right"] := __n111;
__n105["right"] := __n109;
__n97["right"] := __n105;
__n96["test"] := __n97;
__n112 := {  };
__n112["type"] := "BlockStatement";
__n114 := {  };
__n114["type"] := "ExpressionStatement";
__n115 := {  };
__n115["type"] := "CallExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "$ERROR";
__n115["callee"] := __n116;
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "+";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "+";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "+";
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "+";
__n122 := {  };
__n122["type"] := "BinaryExpression";
__n122["operator"] := "+";
__n123 := {  };
__n123["type"] := "BinaryExpression";
__n123["operator"] := "+";
__n124 := {  };
__n124["type"] := "BinaryExpression";
__n124["operator"] := "+";
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "#1: x === 1 and y === 1 and xx === 1 and yy === 0. Actual:  x===";
__n125["raw"] := "'#1: x === 1 and y === 1 and xx === 1 and yy === 0. Actual:  x==='";
__n124["left"] := __n125;
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "x";
__n124["right"] := __n126;
__n123["left"] := __n124;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := " and y===";
__n127["raw"] := "' and y==='";
__n123["right"] := __n127;
__n122["left"] := __n123;
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "y";
__n122["right"] := __n128;
__n121["left"] := __n122;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := " and xx===";
__n129["raw"] := "' and xx==='";
__n121["right"] := __n129;
__n120["left"] := __n121;
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "xx";
__n120["right"] := __n130;
__n119["left"] := __n120;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := " and yy===";
__n131["raw"] := "' and yy==='";
__n119["right"] := __n131;
__n118["left"] := __n119;
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "yy";
__n118["right"] := __n132;
__n117 := [ __n118 ];
__n115["arguments"] := __n117;
__n114["expression"] := __n115;
__n113 := [ __n114 ];
__n112["body"] := __n113;
__n96["consequent"] := __n112;
__n96["alternate"] := null;
__n1 := [ __n2, __n18, __n96 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n133 := [ "x", "y", "xx", "yy" ];
__n0["variableDeclarations"] := __n133;
__n134 := [  ];
__n0["functionDeclarations"] := __n134;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}