function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FOR1";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "ForStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "i";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n4["init"] := __n5;
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "<";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 2.;
__n12["raw"] := "2";
__n10["right"] := __n12;
__n4["test"] := __n10;
__n13 := {  };
__n13["type"] := "UpdateExpression";
__n13["operator"] := "++";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "i";
__n13["argument"] := __n14;
__n13["prefix"] := false;
__n4["update"] := __n13;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "LabeledStatement";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "LABEL1";
__n17["label"] := __n18;
__n19 := {  };
__n19["type"] := "DoWhileStatement";
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "BreakStatement";
__n22["label"] := null;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "FOR1";
__n23["expression"] := __n24;
__n21 := [ __n22, __n23 ];
__n20["body"] := __n21;
__n19["body"] := __n20;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.;
__n25["raw"] := "0";
__n19["test"] := __n25;
__n17["body"] := __n19;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n4["body"] := __n15;
__n2["body"] := __n4;
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "assert";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "sameValue";
__n30["raw"] := "\"sameValue\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "i";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 2.;
__n33["raw"] := "2";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1: Since LineTerminator(U-000A) between break and Identifier not allowed break evaluates without label";
__n34["raw"] := "'#1: Since LineTerminator(U-000A) between break and Identifier not allowed break evaluates without label'";
__n31 := [ __n32, __n33, __n34 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n35 := {  };
__n35["type"] := "LabeledStatement";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "FOR2";
__n35["label"] := __n36;
__n37 := {  };
__n37["type"] := "ForStatement";
__n38 := {  };
__n38["type"] := "VariableDeclaration";
__n40 := {  };
__n40["type"] := "VariableDeclarator";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "i";
__n40["id"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.;
__n42["raw"] := "1";
__n40["init"] := __n42;
__n39 := [ __n40 ];
__n38["declarations"] := __n39;
__n38["kind"] := "var";
__n37["init"] := __n38;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "<";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "i";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 2.;
__n45["raw"] := "2";
__n43["right"] := __n45;
__n37["test"] := __n43;
__n46 := {  };
__n46["type"] := "UpdateExpression";
__n46["operator"] := "++";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "i";
__n46["argument"] := __n47;
__n46["prefix"] := false;
__n37["update"] := __n46;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "LabeledStatement";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "LABEL2";
__n50["label"] := __n51;
__n52 := {  };
__n52["type"] := "DoWhileStatement";
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "BreakStatement";
__n55["label"] := null;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "FOR2";
__n56["expression"] := __n57;
__n54 := [ __n55, __n56 ];
__n53["body"] := __n54;
__n52["body"] := __n53;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n52["test"] := __n58;
__n50["body"] := __n52;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n37["body"] := __n48;
__n35["body"] := __n37;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "assert";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "sameValue";
__n63["raw"] := "\"sameValue\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "i";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 2.;
__n66["raw"] := "2";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#2: Since LineTerminator(U-000D) between break and Identifier not allowed break evaluates without label";
__n67["raw"] := "'#2: Since LineTerminator(U-000D) between break and Identifier not allowed break evaluates without label'";
__n64 := [ __n65, __n66, __n67 ];
__n60["arguments"] := __n64;
__n59["expression"] := __n60;
__n68 := {  };
__n68["type"] := "LabeledStatement";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "FOR3";
__n68["label"] := __n69;
__n70 := {  };
__n70["type"] := "ForStatement";
__n71 := {  };
__n71["type"] := "VariableDeclaration";
__n73 := {  };
__n73["type"] := "VariableDeclarator";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "i";
__n73["id"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 1.;
__n75["raw"] := "1";
__n73["init"] := __n75;
__n72 := [ __n73 ];
__n71["declarations"] := __n72;
__n71["kind"] := "var";
__n70["init"] := __n71;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "<";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "i";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 2.;
__n78["raw"] := "2";
__n76["right"] := __n78;
__n70["test"] := __n76;
__n79 := {  };
__n79["type"] := "UpdateExpression";
__n79["operator"] := "++";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "i";
__n79["argument"] := __n80;
__n79["prefix"] := false;
__n70["update"] := __n79;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "LabeledStatement";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "LABEL3";
__n83["label"] := __n84;
__n85 := {  };
__n85["type"] := "DoWhileStatement";
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "BreakStatement";
__n88["label"] := null;
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "FOR3";
__n89["expression"] := __n90;
__n87 := [ __n88, __n89 ];
__n86["body"] := __n87;
__n85["body"] := __n86;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := 0.;
__n91["raw"] := "0";
__n85["test"] := __n91;
__n83["body"] := __n85;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n70["body"] := __n81;
__n68["body"] := __n70;
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "MemberExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "assert";
__n94["object"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "sameValue";
__n96["raw"] := "\"sameValue\"";
__n94["property"] := __n96;
__n94["computed"] := true;
__n93["callee"] := __n94;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "i";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 2.;
__n99["raw"] := "2";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#3: Since LineTerminator(U-2028) between break and Identifier not allowed break evaluates without label";
__n100["raw"] := "'#3: Since LineTerminator(U-2028) between break and Identifier not allowed break evaluates without label'";
__n97 := [ __n98, __n99, __n100 ];
__n93["arguments"] := __n97;
__n92["expression"] := __n93;
__n101 := {  };
__n101["type"] := "LabeledStatement";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "FOR4";
__n101["label"] := __n102;
__n103 := {  };
__n103["type"] := "ForStatement";
__n104 := {  };
__n104["type"] := "VariableDeclaration";
__n106 := {  };
__n106["type"] := "VariableDeclarator";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "i";
__n106["id"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 1.;
__n108["raw"] := "1";
__n106["init"] := __n108;
__n105 := [ __n106 ];
__n104["declarations"] := __n105;
__n104["kind"] := "var";
__n103["init"] := __n104;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "<";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "i";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := 2.;
__n111["raw"] := "2";
__n109["right"] := __n111;
__n103["test"] := __n109;
__n112 := {  };
__n112["type"] := "UpdateExpression";
__n112["operator"] := "++";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "i";
__n112["argument"] := __n113;
__n112["prefix"] := false;
__n103["update"] := __n112;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "LabeledStatement";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "LABEL4";
__n116["label"] := __n117;
__n118 := {  };
__n118["type"] := "DoWhileStatement";
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "BreakStatement";
__n121["label"] := null;
__n122 := {  };
__n122["type"] := "ExpressionStatement";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "FOR4";
__n122["expression"] := __n123;
__n120 := [ __n121, __n122 ];
__n119["body"] := __n120;
__n118["body"] := __n119;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 0.;
__n124["raw"] := "0";
__n118["test"] := __n124;
__n116["body"] := __n118;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n103["body"] := __n114;
__n101["body"] := __n103;
__n125 := {  };
__n125["type"] := "ExpressionStatement";
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "assert";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "sameValue";
__n129["raw"] := "\"sameValue\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n126["callee"] := __n127;
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "i";
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 2.;
__n132["raw"] := "2";
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#4: Since LineTerminator(U-2029) between break and Identifier not allowed break evaluates without label";
__n133["raw"] := "'#4: Since LineTerminator(U-2029) between break and Identifier not allowed break evaluates without label'";
__n130 := [ __n131, __n132, __n133 ];
__n126["arguments"] := __n130;
__n125["expression"] := __n126;
__n1 := [ __n2, __n26, __n35, __n59, __n68, __n92, __n101, __n125 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n134 := [ "i" ];
__n0["variableDeclarations"] := __n134;
__n135 := [  ];
__n0["functionDeclarations"] := __n135;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}