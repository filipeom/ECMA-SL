function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "check";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "DoWhileStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "===";
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "typeof";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["left"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "function";
__n14["raw"] := "\"function\"";
__n11["right"] := __n14;
__n10["test"] := __n11;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "check";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "-";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n18["right"] := __n20;
__n17["expression"] := __n18;
__n22 := {  };
__n22["type"] := "BreakStatement";
__n22["label"] := null;
__n16 := [ __n17, __n22 ];
__n15["body"] := __n16;
__n10["consequent"] := __n15;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "check";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n29 := {  };
__n29["type"] := "BreakStatement";
__n29["label"] := null;
__n24 := [ __n25, __n29 ];
__n23["body"] := __n24;
__n10["alternate"] := __n23;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["body"] := __n8;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "f";
__n30["id"] := __n31;
__n32 := [  ];
__n30["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n34 := [  ];
__n33["body"] := __n34;
__n35 := [  ];
__n33["variableDeclarations"] := __n35;
__n36 := [  ];
__n33["functionDeclarations"] := __n36;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n30["body"] := __n33;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n7["test"] := __n30;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "check";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n38["right"] := __n40;
__n37["test"] := __n38;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "#1: FunctionExpression within a \"do-while\" statement is allowed, but no function with the given name will appear in the global context";
__n47["raw"] := "'#1: FunctionExpression within a \"do-while\" statement is allowed, but no function with the given name will appear in the global context'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n37["consequent"] := __n41;
__n37["alternate"] := null;
__n1 := [ __n2, __n7, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n48 := [ "check" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}