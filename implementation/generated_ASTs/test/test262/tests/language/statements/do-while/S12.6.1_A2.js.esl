function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__in__do";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "TryStatement";
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "DoWhileStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__in__do";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "reached";
__n13["raw"] := "\"reached\"";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n9["body"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "abbracadabra";
__n9["test"] := __n14;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: 'do __in__do = \"reached\"; while (abbracadabra)' lead to throwing exception";
__n19["raw"] := "'#1: \\'do __in__do = \"reached\"; while (abbracadabra)\\' lead to throwing exception'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n8 := [ __n9, __n15 ];
__n7["body"] := __n8;
__n6["block"] := __n7;
__n20 := {  };
__n20["type"] := "CatchClause";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["param"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "instanceof";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Test262Error";
__n25["right"] := __n27;
__n24["test"] := __n25;
__n28 := {  };
__n28["type"] := "ThrowStatement";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "e";
__n28["argument"] := __n29;
__n24["consequent"] := __n28;
__n24["alternate"] := null;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n6["handler"] := __n20;
__n6["finalizer"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__in__do";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "reached";
__n33["raw"] := "\"reached\"";
__n31["right"] := __n33;
__n30["test"] := __n31;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.1: __in__do === \"reached\". Actual:  __in__do ===";
__n41["raw"] := "'#1.1: __in__do === \"reached\". Actual:  __in__do ==='";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__in__do";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n30["consequent"] := __n34;
__n30["alternate"] := null;
__n1 := [ __n2, __n6, __n30 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n43 := [ "__in__do" ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}