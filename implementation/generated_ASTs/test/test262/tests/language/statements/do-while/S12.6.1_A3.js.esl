function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__evaluated";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__in__do";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__evaluated";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "eval";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "do __in__do=1; while (false)";
__n14["raw"] := "\"do __in__do=1; while (false)\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["right"] := __n11;
__n8["expression"] := __n9;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__in__do";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 1.;
__n18["raw"] := "1";
__n16["right"] := __n18;
__n15["test"] := __n16;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: __in__do === 1. Actual:  __in__do ===";
__n26["raw"] := "'#1: __in__do === 1. Actual:  __in__do ==='";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__in__do";
__n25["right"] := __n27;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n15["consequent"] := __n19;
__n15["alternate"] := null;
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__evaluated";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.;
__n31["raw"] := "1";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: __evaluated === 1. Actual:  __evaluated ===";
__n39["raw"] := "'#2: __evaluated === 1. Actual:  __evaluated ==='";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__evaluated";
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n28["consequent"] := __n32;
__n28["alternate"] := null;
__n1 := [ __n2, __n8, __n15, __n28 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n41 := [ "__evaluated", "__in__do" ];
__n0["variableDeclarations"] := __n41;
__n42 := [  ];
__n0["functionDeclarations"] := __n42;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}