function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__in__do__before__break";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__in__do__after__break";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "DoWhileStatement";
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__in__do__before__break";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "reached";
__n14["raw"] := "\"reached\"";
__n12["right"] := __n14;
__n11["expression"] := __n12;
__n15 := {  };
__n15["type"] := "BreakStatement";
__n15["label"] := null;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "__in__do__after__break";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "where am i";
__n19["raw"] := "\"where am i\"";
__n17["right"] := __n19;
__n16["expression"] := __n17;
__n10 := [ __n11, __n15, __n16 ];
__n9["body"] := __n10;
__n8["body"] := __n9;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 2.;
__n21["raw"] := "2";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n20["right"] := __n22;
__n8["test"] := __n20;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__in__do__before__break";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "reached";
__n26["raw"] := "\"reached\"";
__n24["right"] := __n26;
__n23["test"] := __n24;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1: __in__do__before__break === \"reached\". Actual:  __in__do__before__break ===";
__n34["raw"] := "'#1: __in__do__before__break === \"reached\". Actual:  __in__do__before__break ==='";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__in__do__before__break";
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n23["consequent"] := __n27;
__n23["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "typeof";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__in__do__after__break";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["left"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "undefined";
__n40["raw"] := "\"undefined\"";
__n37["right"] := __n40;
__n36["test"] := __n37;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2: typeof __in__do__after__break === \"undefined\". Actual:  typeof __in__do__after__break ===";
__n48["raw"] := "'#2: typeof __in__do__after__break === \"undefined\". Actual:  typeof __in__do__after__break ==='";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "typeof";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__in__do__after__break";
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n36["consequent"] := __n41;
__n36["alternate"] := null;
__n1 := [ __n2, __n8, __n23, __n36 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n51 := [ "__in__do__before__break", "__in__do__after__break" ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}