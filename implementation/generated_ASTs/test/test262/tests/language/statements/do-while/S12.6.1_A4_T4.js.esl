function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "do_out";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "DoWhileStatement";
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__in__do__before__break";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "reached";
__n11["raw"] := "\"reached\"";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "LabeledStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "do_in";
__n12["label"] := __n13;
__n14 := {  };
__n14["type"] := "DoWhileStatement";
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__in__do__IN__before__break";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "reached";
__n21["raw"] := "\"reached\"";
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n22 := {  };
__n22["type"] := "BreakStatement";
__n22["label"] := null;
__n23 := {  };
__n23["type"] := "VariableDeclaration";
__n25 := {  };
__n25["type"] := "VariableDeclarator";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__in__do__IN__after__break";
__n25["id"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "where am i";
__n27["raw"] := "\"where am i\"";
__n25["init"] := __n27;
__n24 := [ __n25 ];
__n23["declarations"] := __n24;
__n23["kind"] := "var";
__n16 := [ __n17, __n22, __n23 ];
__n15["body"] := __n16;
__n14["body"] := __n15;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n14["test"] := __n28;
__n12["body"] := __n14;
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__in__do__after__break";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "where am i";
__n33["raw"] := "\"where am i\"";
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n6 := [ __n7, __n12, __n29 ];
__n5["body"] := __n6;
__n4["body"] := __n5;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "===";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 2.;
__n35["raw"] := "2";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n34["right"] := __n36;
__n4["test"] := __n34;
__n2["body"] := __n4;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "!";
__n39 := {  };
__n39["type"] := "LogicalExpression";
__n39["operator"] := "&&";
__n40 := {  };
__n40["type"] := "LogicalExpression";
__n40["operator"] := "&&";
__n41 := {  };
__n41["type"] := "LogicalExpression";
__n41["operator"] := "&&";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__in__do__before__break";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__in__do__IN__before__break";
__n41["right"] := __n43;
__n40["left"] := __n41;
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "!";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__in__do__IN__after__break";
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n40["right"] := __n44;
__n39["left"] := __n40;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__in__do__after__break";
__n39["right"] := __n46;
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["test"] := __n38;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#1: (__in__do__before__break&&__in__do__IN__before__break&&!__in__do__IN__after__break&&__in__do__after__break)===true. Actual:  (__in__do__before__break&&__in__do__IN__before__break&&!__in__do__IN__after__break&&__in__do__after__break)===";
__n54["raw"] := "'#1: (__in__do__before__break&&__in__do__IN__before__break&&!__in__do__IN__after__break&&__in__do__after__break)===true. Actual:  (__in__do__before__break&&__in__do__IN__before__break&&!__in__do__IN__after__break&&__in__do__after__break)==='";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "LogicalExpression";
__n55["operator"] := "&&";
__n56 := {  };
__n56["type"] := "LogicalExpression";
__n56["operator"] := "&&";
__n57 := {  };
__n57["type"] := "LogicalExpression";
__n57["operator"] := "&&";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__in__do__before__break";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__in__do__IN__before__break";
__n57["right"] := __n59;
__n56["left"] := __n57;
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "!";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__in__do__IN__after__break";
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n56["right"] := __n60;
__n55["left"] := __n56;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__in__do__after__break";
__n55["right"] := __n62;
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n37["consequent"] := __n47;
__n37["alternate"] := null;
__n1 := [ __n2, __n37 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n63 := [ "__in__do__before__break", "__in__do__IN__before__break", "__in__do__IN__after__break", "__in__do__after__break" ];
__n0["variableDeclarations"] := __n63;
__n64 := [  ];
__n0["functionDeclarations"] := __n64;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}