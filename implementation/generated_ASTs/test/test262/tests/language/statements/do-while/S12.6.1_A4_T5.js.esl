function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "LabeledStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "woohoo";
__n7["label"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "DoWhileStatement";
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "UpdateExpression";
__n15["operator"] := "++";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "i";
__n15["argument"] := __n16;
__n15["prefix"] := false;
__n14["expression"] := __n15;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "!";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "<";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "i";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 10.;
__n21["raw"] := "10";
__n19["right"] := __n21;
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n17["test"] := __n18;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "BreakStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "woohoo";
__n24["label"] := __n25;
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#1.1: \"break woohoo\" must break loop";
__n30["raw"] := "'#1.1: \"break woohoo\" must break loop'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n23 := [ __n24, __n26 ];
__n22["body"] := __n23;
__n17["consequent"] := __n22;
__n17["alternate"] := null;
__n13 := [ __n14, __n17 ];
__n12["body"] := __n13;
__n11["body"] := __n12;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n11["test"] := __n31;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "i";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 10.;
__n35["raw"] := "10";
__n33["right"] := __n35;
__n32["test"] := __n33;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.2: i===10. Actual:  i===";
__n41["raw"] := "'#1.2: i===10. Actual:  i==='";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "i";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n32["consequent"] := __n36;
__n32["alternate"] := null;
__n10 := [ __n11, __n32 ];
__n9["body"] := __n10;
__n7["body"] := __n9;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n43 := [ "i" ];
__n0["variableDeclarations"] := __n43;
__n44 := [  ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}