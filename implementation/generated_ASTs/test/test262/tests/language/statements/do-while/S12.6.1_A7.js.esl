function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__evaluated";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "VariableDeclaration";
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "__condition";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n8["init"] := __n10;
__n7 := [ __n8 ];
__n6["declarations"] := __n7;
__n6["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__evaluated";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "eval";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "do eval(\"__condition++\"); while (__condition<5)";
__n17["raw"] := "\"do eval(\\\"__condition++\\\"); while (__condition<5)\"";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n12["right"] := __n14;
__n11["expression"] := __n12;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__condition";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 5.;
__n21["raw"] := "5";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: The \"do-while\" statement is evaluted according to the Standard ";
__n28["raw"] := "'#1: The \"do-while\" statement is evaluted according to the Standard '";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__evaluated";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 4.;
__n32["raw"] := "4";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: The \"do-while\" statement returns (normal, V, empty)";
__n39["raw"] := "'#2: The \"do-while\" statement returns (normal, V, empty)'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n1 := [ __n2, __n6, __n11, __n18, __n29 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [ "__evaluated", "__condition" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}