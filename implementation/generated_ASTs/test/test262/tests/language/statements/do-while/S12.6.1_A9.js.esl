function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "DoWhileStatement";
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "abaracadabara";
__n13["expression"] := __n14;
__n7 := [ __n8, __n13 ];
__n6["body"] := __n7;
__n5["body"] := __n6;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n5["test"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: \"abbracadabra\" lead to throwing exception";
__n20["raw"] := "'#1: \"abbracadabra\" lead to throwing exception'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n4 := [ __n5, __n16 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n21 := {  };
__n21["type"] := "CatchClause";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["param"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "instanceof";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Test262Error";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "ThrowStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["argument"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n21["body"] := __n23;
__n2["handler"] := __n21;
__n2["finalizer"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "x";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1.;
__n34["raw"] := "1";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#1.1: x === 1. Actual:  x ===";
__n42["raw"] := "'#1.1: x === 1. Actual:  x ==='";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n1 := [ __n2, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n44 := [ "x" ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}