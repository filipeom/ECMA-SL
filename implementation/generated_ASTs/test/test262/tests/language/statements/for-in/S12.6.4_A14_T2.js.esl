function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ForInStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["id"] := __n10;
__n11 := [  ];
__n9["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ReturnStatement";
__n15 := {  };
__n15["type"] := "ObjectExpression";
__n17 := {  };
__n17["type"] := "Property";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "a";
__n17["key"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n17["value"] := __n19;
__n17["computed"] := false;
__n17["kind"] := "init";
__n17["shorthand"] := false;
__n16 := [ __n17 ];
__n15["properties"] := __n16;
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n20 := [  ];
__n12["variableDeclarations"] := __n20;
__n21 := [  ];
__n12["functionDeclarations"] := __n21;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n9["body"] := __n12;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n8["callee"] := __n9;
__n22 := [  ];
__n8["arguments"] := __n22;
__n6["right"] := __n8;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__reached";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n6["body"] := __n23;
__n6["each"] := false;
__n30 := {  };
__n30["type"] := "EmptyStatement";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__reached";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "a";
__n34["raw"] := "\"a\"";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: function expession inside of for-in expression allowed";
__n41["raw"] := "'#2: function expession inside of for-in expression allowed'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n1 := [ __n2, __n6, __n30, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [ "x", "__reached" ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}