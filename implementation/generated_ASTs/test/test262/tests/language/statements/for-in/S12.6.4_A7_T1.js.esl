function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__accum";
__n6["id"] := __n7;
__n6["init"] := null;
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "__key";
__n8["id"] := __n9;
__n8["init"] := null;
__n3 := [ __n4, __n6, __n8 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__obj";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "aa";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "ba";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 2.;
__n20["raw"] := "2";
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "ca";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 3.;
__n23["raw"] := "3";
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n14 := [ __n15, __n18, __n21 ];
__n13["properties"] := __n14;
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__accum";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "";
__n27["raw"] := "\"\"";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n28 := {  };
__n28["type"] := "ForInStatement";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__key";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__obj";
__n28["right"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "erasator_T_1000";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__obj";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "b";
__n38["raw"] := "\"b\"";
__n36 := [ __n37, __n38 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "+=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__accum";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__key";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n44["computed"] := true;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__obj";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__key";
__n44["property"] := __n46;
__n42["right"] := __n44;
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n32 := [ __n33, __n39 ];
__n31["body"] := __n32;
__n28["body"] := __n31;
__n28["each"] := false;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "LogicalExpression";
__n49["operator"] := "&&";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__accum";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "indexOf";
__n54["raw"] := "\"indexOf\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "aa1";
__n56["raw"] := "\"aa1\"";
__n55 := [ __n56 ];
__n51["arguments"] := __n55;
__n50["left"] := __n51;
__n57 := {  };
__n57["type"] := "UnaryExpression";
__n57["operator"] := "-";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 1.;
__n58["raw"] := "1";
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n50["right"] := __n57;
__n49["left"] := __n50;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__accum";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "indexOf";
__n63["raw"] := "\"indexOf\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "ca3";
__n65["raw"] := "\"ca3\"";
__n64 := [ __n65 ];
__n60["arguments"] := __n64;
__n59["left"] := __n60;
__n66 := {  };
__n66["type"] := "UnaryExpression";
__n66["operator"] := "-";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 1.;
__n67["raw"] := "1";
__n66["argument"] := __n67;
__n66["prefix"] := true;
__n59["right"] := __n66;
__n49["right"] := __n59;
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#1: (__accum.indexOf(\"aa1\")!==-1)&&(__accum.indexOf(\"ca3\")!==-1)";
__n74["raw"] := "'#1: (__accum.indexOf(\"aa1\")!==-1)&&(__accum.indexOf(\"ca3\")!==-1)'";
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n47["consequent"] := __n68;
__n47["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__accum";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "indexOf";
__n80["raw"] := "\"indexOf\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["callee"] := __n78;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "ba2";
__n82["raw"] := "\"ba2\"";
__n81 := [ __n82 ];
__n77["arguments"] := __n81;
__n76["left"] := __n77;
__n83 := {  };
__n83["type"] := "UnaryExpression";
__n83["operator"] := "-";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n83["argument"] := __n84;
__n83["prefix"] := true;
__n76["right"] := __n83;
__n75["test"] := __n76;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#2: __accum.indexOf(\"ba2\") === -1. Actual:  __accum.indexOf(\"ba2\") ===";
__n92["raw"] := "'#2: __accum.indexOf(\"ba2\") === -1. Actual:  __accum.indexOf(\"ba2\") ==='";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "MemberExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "__accum";
__n94["object"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "indexOf";
__n96["raw"] := "\"indexOf\"";
__n94["property"] := __n96;
__n94["computed"] := true;
__n93["callee"] := __n94;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "ba2";
__n98["raw"] := "\"ba2\"";
__n97 := [ __n98 ];
__n93["arguments"] := __n97;
__n91["right"] := __n93;
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n75["consequent"] := __n85;
__n75["alternate"] := null;
__n99 := {  };
__n99["type"] := "ExpressionStatement";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "erasator_T_1000";
__n99["expression"] := __n100;
__n1 := [ __n2, __n10, __n24, __n28, __n47, __n75, __n99 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n101 := [ "__obj", "__accum", "__key" ];
__n0["variableDeclarations"] := __n101;
__n103 := {  };
__n103["type"] := "FunctionDeclaration";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "erasator_T_1000";
__n103["id"] := __n104;
__n105 := [ "hash_map", "charactr" ];
__n103["params"] := __n105;
__n106 := {  };
__n106["type"] := "BlockStatement";
__n108 := {  };
__n108["type"] := "ForInStatement";
__n109 := {  };
__n109["type"] := "VariableDeclaration";
__n111 := {  };
__n111["type"] := "VariableDeclarator";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "key";
__n111["id"] := __n112;
__n111["init"] := null;
__n110 := [ __n111 ];
__n109["declarations"] := __n110;
__n109["kind"] := "var";
__n108["left"] := __n109;
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "hash_map";
__n108["right"] := __n113;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "IfStatement";
__n117 := {  };
__n117["type"] := "BinaryExpression";
__n117["operator"] := "===";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "MemberExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "key";
__n119["object"] := __n120;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "indexOf";
__n121["raw"] := "\"indexOf\"";
__n119["property"] := __n121;
__n119["computed"] := true;
__n118["callee"] := __n119;
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "charactr";
__n122 := [ __n123 ];
__n118["arguments"] := __n122;
__n117["left"] := __n118;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 0.;
__n124["raw"] := "0";
__n117["right"] := __n124;
__n116["test"] := __n117;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "UnaryExpression";
__n128["operator"] := "delete";
__n129 := {  };
__n129["type"] := "MemberExpression";
__n129["computed"] := true;
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "hash_map";
__n129["object"] := __n130;
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "key";
__n129["property"] := __n131;
__n128["argument"] := __n129;
__n128["prefix"] := true;
__n127["expression"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n116["consequent"] := __n125;
__n116["alternate"] := null;
__n132 := {  };
__n132["type"] := "EmptyStatement";
__n115 := [ __n116, __n132 ];
__n114["body"] := __n115;
__n108["body"] := __n114;
__n108["each"] := false;
__n107 := [ __n108 ];
__n106["body"] := __n107;
__n133 := [ "key" ];
__n106["variableDeclarations"] := __n133;
__n134 := [  ];
__n106["functionDeclarations"] := __n134;
__n106["codeType"] := "function";
__n106["strict"] := false;
__n103["body"] := __n106;
__n103["generator"] := false;
__n103["expression"] := false;
__n103["async"] := false;
__n102 := [ __n103 ];
__n0["functionDeclarations"] := __n102;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}