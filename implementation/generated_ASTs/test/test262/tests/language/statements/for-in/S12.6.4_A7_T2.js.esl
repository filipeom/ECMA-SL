function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__accum";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__obj";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "aa";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n16 := {  };
__n16["type"] := "Property";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "ba";
__n16["key"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 2.;
__n18["raw"] := "2";
__n16["value"] := __n18;
__n16["computed"] := false;
__n16["kind"] := "init";
__n16["shorthand"] := false;
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "ca";
__n19["key"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 3.;
__n21["raw"] := "3";
__n19["value"] := __n21;
__n19["computed"] := false;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n12 := [ __n13, __n16, __n19 ];
__n11["properties"] := __n12;
__n9["right"] := __n11;
__n8["expression"] := __n9;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__accum";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "";
__n25["raw"] := "\"\"";
__n23["right"] := __n25;
__n22["expression"] := __n23;
__n26 := {  };
__n26["type"] := "ForInStatement";
__n27 := {  };
__n27["type"] := "VariableDeclaration";
__n29 := {  };
__n29["type"] := "VariableDeclarator";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__key";
__n29["id"] := __n30;
__n29["init"] := null;
__n28 := [ __n29 ];
__n27["declarations"] := __n28;
__n27["kind"] := "var";
__n26["left"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__obj";
__n26["right"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "erasator_T_1000";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__obj";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "b";
__n39["raw"] := "\"b\"";
__n37 := [ __n38, __n39 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "+=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__accum";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__key";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "MemberExpression";
__n45["computed"] := true;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__obj";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__key";
__n45["property"] := __n47;
__n43["right"] := __n45;
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n33 := [ __n34, __n40 ];
__n32["body"] := __n33;
__n26["body"] := __n32;
__n26["each"] := false;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "!";
__n50 := {  };
__n50["type"] := "LogicalExpression";
__n50["operator"] := "&&";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__accum";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "indexOf";
__n55["raw"] := "\"indexOf\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "aa1";
__n57["raw"] := "\"aa1\"";
__n56 := [ __n57 ];
__n52["arguments"] := __n56;
__n51["left"] := __n52;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "-";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.;
__n59["raw"] := "1";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n51["right"] := __n58;
__n50["left"] := __n51;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__accum";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "indexOf";
__n64["raw"] := "\"indexOf\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "ca3";
__n66["raw"] := "\"ca3\"";
__n65 := [ __n66 ];
__n61["arguments"] := __n65;
__n60["left"] := __n61;
__n67 := {  };
__n67["type"] := "UnaryExpression";
__n67["operator"] := "-";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 1.;
__n68["raw"] := "1";
__n67["argument"] := __n68;
__n67["prefix"] := true;
__n60["right"] := __n67;
__n50["right"] := __n60;
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["test"] := __n49;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#1: (__accum.indexOf(\"aa1\")!==-1)&&(__accum.indexOf(\"ca3\")!==-1)";
__n75["raw"] := "'#1: (__accum.indexOf(\"aa1\")!==-1)&&(__accum.indexOf(\"ca3\")!==-1)'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n48["consequent"] := __n69;
__n48["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__accum";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "indexOf";
__n81["raw"] := "\"indexOf\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n78["callee"] := __n79;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "ba2";
__n83["raw"] := "\"ba2\"";
__n82 := [ __n83 ];
__n78["arguments"] := __n82;
__n77["left"] := __n78;
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "-";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 1.;
__n85["raw"] := "1";
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n77["right"] := __n84;
__n76["test"] := __n77;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#2: __accum.indexOf(\"ba2\") === -1. Actual:  __accum.indexOf(\"ba2\") ===";
__n93["raw"] := "'#2: __accum.indexOf(\"ba2\") === -1. Actual:  __accum.indexOf(\"ba2\") ==='";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "CallExpression";
__n95 := {  };
__n95["type"] := "MemberExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "__accum";
__n95["object"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "indexOf";
__n97["raw"] := "\"indexOf\"";
__n95["property"] := __n97;
__n95["computed"] := true;
__n94["callee"] := __n95;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "ba2";
__n99["raw"] := "\"ba2\"";
__n98 := [ __n99 ];
__n94["arguments"] := __n98;
__n92["right"] := __n94;
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n76["consequent"] := __n86;
__n76["alternate"] := null;
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "erasator_T_1000";
__n100["expression"] := __n101;
__n1 := [ __n2, __n8, __n22, __n26, __n48, __n76, __n100 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n102 := [ "__obj", "__accum", "__key" ];
__n0["variableDeclarations"] := __n102;
__n104 := {  };
__n104["type"] := "FunctionDeclaration";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "erasator_T_1000";
__n104["id"] := __n105;
__n106 := [ "hash_map", "charactr" ];
__n104["params"] := __n106;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ForInStatement";
__n110 := {  };
__n110["type"] := "VariableDeclaration";
__n112 := {  };
__n112["type"] := "VariableDeclarator";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "key";
__n112["id"] := __n113;
__n112["init"] := null;
__n111 := [ __n112 ];
__n110["declarations"] := __n111;
__n110["kind"] := "var";
__n109["left"] := __n110;
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "hash_map";
__n109["right"] := __n114;
__n115 := {  };
__n115["type"] := "BlockStatement";
__n117 := {  };
__n117["type"] := "IfStatement";
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "===";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "key";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "indexOf";
__n122["raw"] := "\"indexOf\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n119["callee"] := __n120;
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "charactr";
__n123 := [ __n124 ];
__n119["arguments"] := __n123;
__n118["left"] := __n119;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := 0.;
__n125["raw"] := "0";
__n118["right"] := __n125;
__n117["test"] := __n118;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "UnaryExpression";
__n129["operator"] := "delete";
__n130 := {  };
__n130["type"] := "MemberExpression";
__n130["computed"] := true;
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "hash_map";
__n130["object"] := __n131;
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "key";
__n130["property"] := __n132;
__n129["argument"] := __n130;
__n129["prefix"] := true;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n117["consequent"] := __n126;
__n117["alternate"] := null;
__n133 := {  };
__n133["type"] := "EmptyStatement";
__n116 := [ __n117, __n133 ];
__n115["body"] := __n116;
__n109["body"] := __n115;
__n109["each"] := false;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n134 := [ "key" ];
__n107["variableDeclarations"] := __n134;
__n135 := [  ];
__n107["functionDeclarations"] := __n135;
__n107["codeType"] := "function";
__n107["strict"] := false;
__n104["body"] := __n107;
__n104["generator"] := false;
__n104["expression"] := false;
__n104["async"] := false;
__n103 := [ __n104 ];
__n0["functionDeclarations"] := __n103;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}