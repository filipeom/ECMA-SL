function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "accessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ForStatement";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 0.;
__n12["raw"] := "0";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n7["init"] := __n8;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "null";
__n13["raw"] := "\"null\"";
__n7["test"] := __n13;
__n7["update"] := null;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "accessed";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n17["right"] := __n19;
__n16["expression"] := __n17;
__n20 := {  };
__n20["type"] := "BreakStatement";
__n20["label"] := null;
__n15 := [ __n16, __n20 ];
__n14["body"] := __n15;
__n7["body"] := __n14;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "accessed";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "accessed !== true";
__n26["raw"] := "'accessed !== true'";
__n24 := [ __n25, __n26 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n1 := [ __n2, __n7, __n21 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n27 := [ "accessed", "i" ];
__n0["variableDeclarations"] := __n27;
__n28 := [  ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}