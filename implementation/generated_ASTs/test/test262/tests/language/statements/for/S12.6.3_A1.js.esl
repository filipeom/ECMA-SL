function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__in__for";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ForStatement";
__n10["init"] := null;
__n10["test"] := null;
__n10["update"] := null;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := ">";
__n15 := {  };
__n15["type"] := "UpdateExpression";
__n15["operator"] := "++";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__in__for";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n14["left"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 100.;
__n17["raw"] := "100";
__n14["right"] := __n17;
__n13["test"] := __n14;
__n18 := {  };
__n18["type"] := "ThrowStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n18["argument"] := __n19;
__n13["consequent"] := __n18;
__n13["alternate"] := null;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n10["body"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n20 := {  };
__n20["type"] := "CatchClause";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["param"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n25["right"] := __n27;
__n24["test"] := __n25;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1: for {;;} is admitted and leads to infinite loop";
__n34["raw"] := "'#1: for {;;} is admitted and leads to infinite loop'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n24["consequent"] := __n28;
__n24["alternate"] := null;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n7["handler"] := __n20;
__n7["finalizer"] := null;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__in__for";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 101.;
__n38["raw"] := "101";
__n36["right"] := __n38;
__n35["test"] := __n36;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#2: __in__for === 101. Actual:  __in__for ===";
__n46["raw"] := "'#2: __in__for === 101. Actual:  __in__for ==='";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__in__for";
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n35["consequent"] := __n39;
__n35["alternate"] := null;
__n1 := [ __n2, __n7, __n35 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n48 := [ "__in__for" ];
__n0["variableDeclarations"] := __n48;
__n49 := [  ];
__n0["functionDeclarations"] := __n49;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}