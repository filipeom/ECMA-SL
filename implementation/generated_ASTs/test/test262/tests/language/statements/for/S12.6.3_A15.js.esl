function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ForStatement";
__n3 := {  };
__n3["type"] := "VariableDeclaration";
__n5 := {  };
__n5["type"] := "VariableDeclarator";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "i";
__n5["id"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n5["init"] := __n7;
__n4 := [ __n5 ];
__n3["declarations"] := __n4;
__n3["kind"] := "var";
__n2["init"] := __n3;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "<";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "i";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 10.;
__n10["raw"] := "10";
__n8["right"] := __n10;
__n2["test"] := __n8;
__n11 := {  };
__n11["type"] := "UpdateExpression";
__n11["operator"] := "++";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "i";
__n11["argument"] := __n12;
__n11["prefix"] := false;
__n2["update"] := __n11;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "*=";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "i";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 2.;
__n18["raw"] := "2";
__n16["right"] := __n18;
__n15["expression"] := __n16;
__n19 := {  };
__n19["type"] := "BreakStatement";
__n19["label"] := null;
__n14 := [ __n15, __n19 ];
__n13["body"] := __n14;
__n2["body"] := __n13;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "i";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 0.;
__n23["raw"] := "0";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: i === 0. Actual:  i ===";
__n29["raw"] := "'#1: i === 0. Actual:  i ==='";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "i";
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n31 := {  };
__n31["type"] := "ForStatement";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "i";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 0.;
__n36["raw"] := "0";
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n31["init"] := __n32;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "<";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "i";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 10.;
__n39["raw"] := "10";
__n37["right"] := __n39;
__n31["test"] := __n37;
__n40 := {  };
__n40["type"] := "UpdateExpression";
__n40["operator"] := "++";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "i";
__n40["argument"] := __n41;
__n40["prefix"] := false;
__n31["update"] := __n40;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "AssignmentExpression";
__n45["operator"] := "*=";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "i";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 2.;
__n47["raw"] := "2";
__n45["right"] := __n47;
__n44["expression"] := __n45;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "i";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 3.;
__n51["raw"] := "3";
__n49["right"] := __n51;
__n48["test"] := __n49;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#2: i !== 3";
__n56["raw"] := "'#2: i !== 3'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n48["consequent"] := __n52;
__n48["alternate"] := null;
__n43 := [ __n44, __n48 ];
__n42["body"] := __n43;
__n31["body"] := __n42;
__n1 := [ __n2, __n20, __n31 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n57 := [ "i" ];
__n0["variableDeclarations"] := __n57;
__n58 := [  ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}