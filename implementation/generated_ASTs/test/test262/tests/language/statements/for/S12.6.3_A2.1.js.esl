function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ForStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ThrowStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "NoInExpression";
__n12["raw"] := "\"NoInExpression\"";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["expression"] := false;
__n7["async"] := false;
__n6["callee"] := __n7;
__n15 := [  ];
__n6["arguments"] := __n15;
__n5["init"] := __n6;
__n5["test"] := null;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "FunctionExpression";
__n17["id"] := null;
__n18 := [  ];
__n17["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ThrowStatement";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "SecondExpression";
__n22["raw"] := "\"SecondExpression\"";
__n21["argument"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n23 := [  ];
__n19["variableDeclarations"] := __n23;
__n24 := [  ];
__n19["functionDeclarations"] := __n24;
__n19["codeType"] := "function";
__n19["strict"] := false;
__n17["body"] := __n19;
__n17["generator"] := false;
__n17["expression"] := false;
__n17["async"] := false;
__n16["callee"] := __n17;
__n25 := [  ];
__n16["arguments"] := __n25;
__n5["update"] := __n16;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ThrowStatement";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "Statement";
__n29["raw"] := "\"Statement\"";
__n28["argument"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n5["body"] := __n26;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1: (function(){throw \"NoInExpression\"})() lead to throwing exception";
__n34["raw"] := "'#1: (function(){throw \"NoInExpression\"})() lead to throwing exception'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n4 := [ __n5, __n30 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n35 := {  };
__n35["type"] := "CatchClause";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["param"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "e";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "NoInExpression";
__n42["raw"] := "\"NoInExpression\"";
__n40["right"] := __n42;
__n39["test"] := __n40;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: When for (ExpressionNoIn ;  ; Expression) Statement is evaluated NoInExpression evaluates first";
__n49["raw"] := "'#2: When for (ExpressionNoIn ;  ; Expression) Statement is evaluated NoInExpression evaluates first'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n39["consequent"] := __n43;
__n39["alternate"] := null;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n35["body"] := __n37;
__n2["handler"] := __n35;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [  ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}