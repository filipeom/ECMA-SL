function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ForStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ThrowStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "NoInExpression";
__n12["raw"] := "\"NoInExpression\"";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["expression"] := false;
__n7["async"] := false;
__n6["callee"] := __n7;
__n15 := [  ];
__n6["arguments"] := __n15;
__n5["init"] := __n6;
__n5["test"] := null;
__n5["update"] := null;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ThrowStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "Statement";
__n19["raw"] := "\"Statement\"";
__n18["argument"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n5["body"] := __n16;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: (function(){throw \"NoInExpression\"})() lead to throwing exception";
__n24["raw"] := "'#1: (function(){throw \"NoInExpression\"})() lead to throwing exception'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n4 := [ __n5, __n20 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n25 := {  };
__n25["type"] := "CatchClause";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["param"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "NoInExpression";
__n32["raw"] := "\"NoInExpression\"";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1: When for (ExpressionNoIn ;  ; ) Statement is evaluated NoInExpression evaluates first";
__n39["raw"] := "'#1: When for (ExpressionNoIn ;  ; ) Statement is evaluated NoInExpression evaluates first'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n25["body"] := __n27;
__n2["handler"] := __n25;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [  ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}