function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__in__NotInExpression__";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__in__NotInExpression__2";
__n6["id"] := __n7;
__n6["init"] := null;
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "__in__for";
__n8["id"] := __n9;
__n8["init"] := null;
__n3 := [ __n4, __n6, __n8 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "TryStatement";
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ForStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__in__NotInExpression__";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "checked";
__n22["raw"] := "\"checked\"";
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__in__NotInExpression__2";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "passed";
__n26["raw"] := "\"passed\"";
__n24["right"] := __n26;
__n23["expression"] := __n24;
__n18 := [ __n19, __n23 ];
__n17["body"] := __n18;
__n27 := [  ];
__n17["variableDeclarations"] := __n27;
__n28 := [  ];
__n17["functionDeclarations"] := __n28;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14["callee"] := __n15;
__n29 := [  ];
__n14["arguments"] := __n29;
__n13["init"] := __n14;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [  ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ThrowStatement";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "FirstExpression";
__n36["raw"] := "\"FirstExpression\"";
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n37 := [  ];
__n33["variableDeclarations"] := __n37;
__n38 := [  ];
__n33["functionDeclarations"] := __n38;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n30["callee"] := __n31;
__n39 := [  ];
__n30["arguments"] := __n39;
__n13["test"] := __n30;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "FunctionExpression";
__n41["id"] := null;
__n42 := [  ];
__n41["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ThrowStatement";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "SecondExpression";
__n46["raw"] := "\"SecondExpression\"";
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n47 := [  ];
__n43["variableDeclarations"] := __n47;
__n48 := [  ];
__n43["functionDeclarations"] := __n48;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n41["body"] := __n43;
__n41["generator"] := false;
__n41["async"] := false;
__n41["expression"] := false;
__n40["callee"] := __n41;
__n49 := [  ];
__n40["arguments"] := __n49;
__n13["update"] := __n40;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "AssignmentExpression";
__n53["operator"] := "=";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__in__for";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "reached";
__n55["raw"] := "\"reached\"";
__n53["right"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n13["body"] := __n50;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#1: (function(){throw \"SecondExpression\"} lead to throwing exception";
__n60["raw"] := "'#1: (function(){throw \"SecondExpression\"} lead to throwing exception'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n12 := [ __n13, __n56 ];
__n11["body"] := __n12;
__n10["block"] := __n11;
__n61 := {  };
__n61["type"] := "CatchClause";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "e";
__n61["param"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "e";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "FirstExpression";
__n68["raw"] := "\"FirstExpression\"";
__n66["right"] := __n68;
__n65["test"] := __n66;
__n69 := {  };
__n69["type"] := "BlockStatement";
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#1: When for (ExpressionNoIn ; FirstExpression ; SecondExpression) Statement is evaluated first evaluates ExpressionNoIn then FirstExpression";
__n75["raw"] := "'#1: When for (ExpressionNoIn ; FirstExpression ; SecondExpression) Statement is evaluated first evaluates ExpressionNoIn then FirstExpression'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n70 := [ __n71 ];
__n69["body"] := __n70;
__n65["consequent"] := __n69;
__n65["alternate"] := null;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n61["body"] := __n63;
__n10["handler"] := __n61;
__n10["finalizer"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "&";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__in__NotInExpression__";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "checked";
__n80["raw"] := "\"checked\"";
__n78["right"] := __n80;
__n77["left"] := __n78;
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__in__NotInExpression__2";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "passed";
__n83["raw"] := "\"passed\"";
__n81["right"] := __n83;
__n77["right"] := __n81;
__n76["test"] := __n77;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#2: (__in__NotInExpression__ === \"checked\")&(__in__NotInExpression__2===\"passed\")";
__n90["raw"] := "'#2: (__in__NotInExpression__ === \"checked\")&(__in__NotInExpression__2===\"passed\")'";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n76["consequent"] := __n84;
__n76["alternate"] := null;
__n91 := {  };
__n91["type"] := "IfStatement";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "!==";
__n93 := {  };
__n93["type"] := "UnaryExpression";
__n93["operator"] := "typeof";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "__in__for";
__n93["argument"] := __n94;
__n93["prefix"] := true;
__n92["left"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "undefined";
__n95["raw"] := "\"undefined\"";
__n92["right"] := __n95;
__n91["test"] := __n92;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "+";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#3: typeof __in__for === \"undefined\". Actual:  typeof __in__for ===";
__n103["raw"] := "'#3: typeof __in__for === \"undefined\". Actual:  typeof __in__for ==='";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "UnaryExpression";
__n104["operator"] := "typeof";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "__in__for";
__n104["argument"] := __n105;
__n104["prefix"] := true;
__n102["right"] := __n104;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n91["consequent"] := __n96;
__n91["alternate"] := null;
__n1 := [ __n2, __n10, __n76, __n91 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n106 := [ "__in__NotInExpression__", "__in__NotInExpression__2", "__in__for" ];
__n0["variableDeclarations"] := __n106;
__n107 := [  ];
__n0["functionDeclarations"] := __n107;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}