function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "i";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "arr";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 2.;
__n14["raw"] := "2";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 3.;
__n15["raw"] := "3";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 4.;
__n16["raw"] := "4";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 5.;
__n17["raw"] := "5";
__n12 := [ __n13, __n14, __n15, __n16, __n17 ];
__n11["elements"] := __n12;
__n9["right"] := __n11;
__n8["expression"] := __n9;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "i";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n19["right"] := __n21;
__n18["expression"] := __n19;
__n22 := {  };
__n22["type"] := "TryStatement";
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ForStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "eval";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "i in arr";
__n29["raw"] := "\"i in arr\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["init"] := __n26;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n25["test"] := __n30;
__n25["update"] := null;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "BreakStatement";
__n33["label"] := null;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["body"] := __n31;
__n34 := {  };
__n34["type"] := "EmptyStatement";
__n24 := [ __n25, __n34 ];
__n23["body"] := __n24;
__n22["block"] := __n23;
__n35 := {  };
__n35["type"] := "CatchClause";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["param"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#1.1: for(eval(\"i in arr\");1;) {break;}; does not lead to throwing exception";
__n43["raw"] := "'#1.1: for(eval(\"i in arr\");1;) {break;}; does not lead to throwing exception'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n35["body"] := __n37;
__n22["handler"] := __n35;
__n22["finalizer"] := null;
__n44 := {  };
__n44["type"] := "TryStatement";
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ForStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "eval";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "var i = 1 in arr";
__n51["raw"] := "\"var i = 1 in arr\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["init"] := __n48;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1.;
__n52["raw"] := "1";
__n47["test"] := __n52;
__n47["update"] := null;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "BreakStatement";
__n55["label"] := null;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n47["body"] := __n53;
__n56 := {  };
__n56["type"] := "EmptyStatement";
__n46 := [ __n47, __n56 ];
__n45["body"] := __n46;
__n44["block"] := __n45;
__n57 := {  };
__n57["type"] := "CatchClause";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "e";
__n57["param"] := __n58;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#2.1: for(eval(\"var i = 1 in arr\");1;) {break;}; does not lead to throwing exception";
__n65["raw"] := "'#2.1: for(eval(\"var i = 1 in arr\");1;) {break;}; does not lead to throwing exception'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n57["body"] := __n59;
__n44["handler"] := __n57;
__n44["finalizer"] := null;
__n66 := {  };
__n66["type"] := "TryStatement";
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ForStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "eval";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "1 in arr";
__n73["raw"] := "\"1 in arr\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["init"] := __n70;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 1.;
__n74["raw"] := "1";
__n69["test"] := __n74;
__n69["update"] := null;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "BreakStatement";
__n77["label"] := null;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n69["body"] := __n75;
__n78 := {  };
__n78["type"] := "EmptyStatement";
__n68 := [ __n69, __n78 ];
__n67["body"] := __n68;
__n66["block"] := __n67;
__n79 := {  };
__n79["type"] := "CatchClause";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "e";
__n79["param"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$ERROR";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#3.1: for(eval(\"1 in arr\");1;) {break;}; does not lead to throwing exception";
__n87["raw"] := "'#3.1: for(eval(\"1 in arr\");1;) {break;}; does not lead to throwing exception'";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n79["body"] := __n81;
__n66["handler"] := __n79;
__n66["finalizer"] := null;
__n1 := [ __n2, __n8, __n18, __n22, __n44, __n66 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n88 := [ "arr", "i" ];
__n0["variableDeclarations"] := __n88;
__n89 := [  ];
__n0["functionDeclarations"] := __n89;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}