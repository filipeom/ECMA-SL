function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "foo";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "'use strict';";
__n9["raw"] := "\"'use strict';\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "ForInStatement";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "tempIndex";
__n11["id"] := __n12;
__n11["init"] := null;
__n10["left"] := __n11;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "foo";
__n10["right"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "assert";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "notSameValue";
__n20["raw"] := "\"notSameValue\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "tempIndex";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "arguments";
__n23["raw"] := "\"arguments\"";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "tempIndex";
__n24["raw"] := "'tempIndex'";
__n21 := [ __n22, __n23, __n24 ];
__n17["arguments"] := __n21;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n10["body"] := __n14;
__n10["each"] := false;
__n1 := [ __n2, __n10 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n25 := [ "foo", "tempIndex" ];
__n0["variableDeclarations"] := __n25;
__n26 := [  ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}