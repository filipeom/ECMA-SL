function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "derivative";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := ">=";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Math";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "abs";
__n9["raw"] := "\"abs\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "-";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "derivative";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Math";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "sin";
__n18["raw"] := "\"sin\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.0001;
__n19["raw"] := "0.0001";
__n15 := [ __n16, __n19 ];
__n13["arguments"] := __n15;
__n12["callee"] := __n13;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 0.;
__n21["raw"] := "0";
__n20 := [ __n21 ];
__n12["arguments"] := __n20;
__n11["left"] := __n12;
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "derivative";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Math";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "sin";
__n28["raw"] := "\"sin\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.0001;
__n29["raw"] := "0.0001";
__n25 := [ __n26, __n29 ];
__n23["arguments"] := __n25;
__n22["callee"] := __n23;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "*";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 2.;
__n32["raw"] := "2";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "Math";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "PI";
__n35["raw"] := "\"PI\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n22["arguments"] := __n30;
__n11["right"] := __n22;
__n10 := [ __n11 ];
__n6["arguments"] := __n10;
__n5["left"] := __n6;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "/";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 65536.;
__n38["raw"] := "65536.0";
__n36["right"] := __n38;
__n5["right"] := __n36;
__n4["test"] := __n5;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1: Math.abs(derivative(Math.sin, 0.0001)(0) - derivative(Math.sin, 0.0001)(2*Math.PI)) <= 1/65536.0";
__n45["raw"] := "'#1: Math.abs(derivative(Math.sin, 0.0001)(0) - derivative(Math.sin, 0.0001)(2*Math.PI)) <= 1/65536.0'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n4["consequent"] := __n39;
__n4["alternate"] := null;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [  ];
__n0["variableDeclarations"] := __n46;
__n48 := {  };
__n48["type"] := "FunctionDeclaration";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "derivative";
__n48["id"] := __n49;
__n50 := [ "f", "dx" ];
__n48["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ReturnStatement";
__n54 := {  };
__n54["type"] := "FunctionExpression";
__n54["id"] := null;
__n55 := [ "x" ];
__n54["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ReturnStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "/";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "-";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "f";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "dx";
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["left"] := __n61;
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "f";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "x";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n60["right"] := __n67;
__n59["left"] := __n60;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "dx";
__n59["right"] := __n71;
__n58["argument"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n72 := [  ];
__n56["variableDeclarations"] := __n72;
__n73 := [  ];
__n56["functionDeclarations"] := __n73;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n54["body"] := __n56;
__n54["generator"] := false;
__n54["async"] := false;
__n54["expression"] := false;
__n53["argument"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n74 := [  ];
__n51["variableDeclarations"] := __n74;
__n75 := [  ];
__n51["functionDeclarations"] := __n75;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n48["body"] := __n51;
__n48["generator"] := false;
__n48["async"] := false;
__n48["expression"] := false;
__n47 := [ __n48 ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}