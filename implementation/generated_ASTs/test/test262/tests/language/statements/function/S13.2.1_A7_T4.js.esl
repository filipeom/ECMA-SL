function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "TryStatement";
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "AssignmentExpression";
__n8["operator"] := "=";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "x";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n8["right"] := __n10;
__n7["expression"] := __n8;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#0: \"x=x\" lead to throwing exception";
__n15["raw"] := "'#0: \"x=x\" lead to throwing exception'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n6 := [ __n7, __n11 ];
__n5["body"] := __n6;
__n4["block"] := __n5;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "instanceof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Test262Error";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "ThrowStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["argument"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n4["handler"] := __n16;
__n4["finalizer"] := null;
__n26 := {  };
__n26["type"] := "TryStatement";
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__x";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__func";
__n33["callee"] := __n34;
__n35 := [  ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n26["block"] := __n27;
__n36 := {  };
__n36["type"] := "CatchClause";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "e";
__n36["param"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1: var __x=__func() does not lead to throwing exception. Actual: exception is ";
__n45["raw"] := "'#1: var __x=__func() does not lead to throwing exception. Actual: exception is '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n36["body"] := __n38;
__n26["handler"] := __n36;
__n26["finalizer"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__x";
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "+";
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#2: __x === true. Actual: __x ===";
__n57["raw"] := "'#2: __x === true. Actual: __x ==='";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__x";
__n56["right"] := __n58;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n47["consequent"] := __n50;
__n47["alternate"] := null;
__n59 := {  };
__n59["type"] := "TryStatement";
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "AssignmentExpression";
__n63["operator"] := "=";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "x";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n63["right"] := __n65;
__n62["expression"] := __n63;
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#3: \"x=x\" lead to throwing exception";
__n70["raw"] := "'#3: \"x=x\" lead to throwing exception'";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n61 := [ __n62, __n66 ];
__n60["body"] := __n61;
__n59["block"] := __n60;
__n71 := {  };
__n71["type"] := "CatchClause";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "e";
__n71["param"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "instanceof";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "e";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "Test262Error";
__n76["right"] := __n78;
__n75["test"] := __n76;
__n79 := {  };
__n79["type"] := "ThrowStatement";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "e";
__n79["argument"] := __n80;
__n75["consequent"] := __n79;
__n75["alternate"] := null;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n71["body"] := __n73;
__n59["handler"] := __n71;
__n59["finalizer"] := null;
__n1 := [ __n2, __n4, __n26, __n47, __n59 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n81 := [ "__x" ];
__n0["variableDeclarations"] := __n81;
__n83 := {  };
__n83["type"] := "FunctionDeclaration";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "__func";
__n83["id"] := __n84;
__n85 := [  ];
__n83["params"] := __n85;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "VariableDeclaration";
__n90 := {  };
__n90["type"] := "VariableDeclarator";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "x";
__n90["id"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := true;
__n92["raw"] := "true";
__n90["init"] := __n92;
__n89 := [ __n90 ];
__n88["declarations"] := __n89;
__n88["kind"] := "var";
__n93 := {  };
__n93["type"] := "ReturnStatement";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "x";
__n93["argument"] := __n94;
__n87 := [ __n88, __n93 ];
__n86["body"] := __n87;
__n95 := [ "x" ];
__n86["variableDeclarations"] := __n95;
__n96 := [  ];
__n86["functionDeclarations"] := __n96;
__n86["codeType"] := "function";
__n86["strict"] := false;
__n83["body"] := __n86;
__n83["generator"] := false;
__n83["expression"] := false;
__n83["async"] := false;
__n82 := [ __n83 ];
__n0["functionDeclarations"] := __n82;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}