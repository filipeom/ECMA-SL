function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "CATCH_ME_IF_YOU_CAN";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n11["id"] := null;
__n12 := [ "message" ];
__n11["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n20 := {  };
__n20["type"] := "ThrowStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "message";
__n20["argument"] := __n21;
__n22 := {  };
__n22["type"] := "ReturnStatement";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "x";
__n22["argument"] := __n23;
__n14 := [ __n15, __n20, __n22 ];
__n13["body"] := __n14;
__n24 := [ "x" ];
__n13["variableDeclarations"] := __n24;
__n25 := [  ];
__n13["functionDeclarations"] := __n25;
__n13["codeType"] := "function";
__n13["strict"] := false;
__n11["body"] := __n13;
__n11["generator"] := false;
__n11["expression"] := false;
__n11["async"] := false;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n26 := {  };
__n26["type"] := "TryStatement";
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__func";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "CATCH_ME_IF_YOU_CAN";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#0: var x=__func(CATCH_ME_IF_YOU_CAN) lead to throwing exception";
__n41["raw"] := "'#0: var x=__func(CATCH_ME_IF_YOU_CAN) lead to throwing exception'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n28 := [ __n29, __n37 ];
__n27["body"] := __n28;
__n26["block"] := __n27;
__n42 := {  };
__n42["type"] := "CatchClause";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "e";
__n42["param"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "e";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#1: Exception === true. Actual: exception ===";
__n56["raw"] := "'#1: Exception === true. Actual: exception ==='";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "e";
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n46["consequent"] := __n49;
__n46["alternate"] := null;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n42["body"] := __n44;
__n26["handler"] := __n42;
__n26["finalizer"] := null;
__n1 := [ __n2, __n7, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n58 := [ "CATCH_ME_IF_YOU_CAN", "__func", "x" ];
__n0["variableDeclarations"] := __n58;
__n59 := [  ];
__n0["functionDeclarations"] := __n59;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}