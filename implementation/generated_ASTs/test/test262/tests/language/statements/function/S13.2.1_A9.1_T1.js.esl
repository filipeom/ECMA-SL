function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "__func";
__n10["callee"] := __n11;
__n12 := [  ];
__n10["arguments"] := __n12;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "undefined";
__n9["right"] := __n13;
__n8["test"] := __n9;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "+";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: __func() === undefined. Actual: __func() ===";
__n21["raw"] := "'#1: __func() === undefined. Actual: __func() ==='";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["callee"] := __n23;
__n24 := [  ];
__n22["arguments"] := __n24;
__n20["right"] := __n22;
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n8["consequent"] := __n14;
__n8["alternate"] := null;
__n25 := {  };
__n25["type"] := "EmptyStatement";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "!";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["test"] := __n27;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: x === true. Actual: x === ";
__n36["raw"] := "'#2: x === true. Actual: x === '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n26["consequent"] := __n29;
__n26["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n25, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n38 := [ "x" ];
__n0["variableDeclarations"] := __n38;
__n40 := {  };
__n40["type"] := "FunctionDeclaration";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__func";
__n40["id"] := __n41;
__n42 := [  ];
__n40["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "AssignmentExpression";
__n46["operator"] := "=";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n46["right"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n49 := [  ];
__n43["variableDeclarations"] := __n49;
__n50 := [  ];
__n43["functionDeclarations"] := __n50;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n40["body"] := __n43;
__n40["generator"] := false;
__n40["expression"] := false;
__n40["async"] := false;
__n39 := [ __n40 ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}