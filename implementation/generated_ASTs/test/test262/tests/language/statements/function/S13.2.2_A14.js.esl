function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FACTORY";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "TryStatement";
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "obj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "FACTORY";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n6 := [ __n7 ];
__n5["body"] := __n6;
__n4["block"] := __n5;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: var obj = new FACTORY() does not lead to throwing exception";
__n22["raw"] := "'#1: var obj = new FACTORY() does not lead to throwing exception'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n4["handler"] := __n14;
__n4["finalizer"] := null;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n23 := [ "obj" ];
__n0["variableDeclarations"] := __n23;
__n25 := {  };
__n25["type"] := "FunctionDeclaration";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "FACTORY";
__n25["id"] := __n26;
__n27 := [  ];
__n25["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "ThisExpression";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "id";
__n34["raw"] := "\"id\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n31["right"] := __n35;
__n30["expression"] := __n31;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "eval";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "function func(){return \"id_string\";}";
__n40["raw"] := "\"function func(){return \\\"id_string\\\";}\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "ThisExpression";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "id";
__n45["raw"] := "\"id\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "func";
__n46["callee"] := __n47;
__n48 := [  ];
__n46["arguments"] := __n48;
__n42["right"] := __n46;
__n41["expression"] := __n42;
__n29 := [ __n30, __n36, __n41 ];
__n28["body"] := __n29;
__n49 := [  ];
__n28["variableDeclarations"] := __n49;
__n50 := [  ];
__n28["functionDeclarations"] := __n50;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n25["body"] := __n28;
__n25["generator"] := false;
__n25["async"] := false;
__n25["expression"] := false;
__n24 := [ __n25 ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}