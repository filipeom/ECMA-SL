function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "undefined";
__n6["raw"] := "\"undefined\"";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1: typeof __func === \"undefined\"";
__n13["raw"] := "'#1: typeof __func === \"undefined\"'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__obj";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "NewExpression";
__n19 := {  };
__n19["type"] := "FunctionExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__func";
__n19["id"] := __n20;
__n21 := [ "arg" ];
__n19["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "ThisExpression";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "prop";
__n28["raw"] := "\"prop\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["left"] := __n26;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "arg";
__n25["right"] := __n29;
__n24["expression"] := __n25;
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "ObjectExpression";
__n33 := {  };
__n33["type"] := "Property";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "feat";
__n33["key"] := __n34;
__n35 := {  };
__n35["type"] := "UpdateExpression";
__n35["operator"] := "++";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "arg";
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n33["value"] := __n35;
__n33["computed"] := false;
__n33["kind"] := "init";
__n33["shorthand"] := false;
__n32 := [ __n33 ];
__n31["properties"] := __n32;
__n30["argument"] := __n31;
__n23 := [ __n24, __n30 ];
__n22["body"] := __n23;
__n37 := [  ];
__n22["variableDeclarations"] := __n37;
__n38 := [  ];
__n22["functionDeclarations"] := __n38;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n19["body"] := __n22;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n18["callee"] := __n19;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 5.;
__n40["raw"] := "5";
__n39 := [ __n40 ];
__n18["arguments"] := __n39;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__obj";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "prop";
__n45["raw"] := "\"prop\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "undefined";
__n42["right"] := __n46;
__n41["test"] := __n42;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2: __obj.prop === undefined. Actual: __obj.prop ===";
__n54["raw"] := "'#2: __obj.prop === undefined. Actual: __obj.prop ==='";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__obj";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "prop";
__n57["raw"] := "\"prop\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n41["consequent"] := __n47;
__n41["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__obj";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "feat";
__n62["raw"] := "\"feat\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 6.;
__n63["raw"] := "6";
__n59["right"] := __n63;
__n58["test"] := __n59;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#3: __obj.feat === 6. Actual: __obj.feat ===";
__n71["raw"] := "'#3: __obj.feat === 6. Actual: __obj.feat ==='";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__obj";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "feat";
__n74["raw"] := "\"feat\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n58["consequent"] := __n64;
__n58["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "typeof";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__func";
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["left"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "undefined";
__n79["raw"] := "\"undefined\"";
__n76["right"] := __n79;
__n75["test"] := __n76;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "+";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#4: typeof __func === \"undefined\". Actual: typeof __func ===";
__n87["raw"] := "'#4: typeof __func === \"undefined\". Actual: typeof __func ==='";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "typeof";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "__func";
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n86["right"] := __n88;
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n81 := [ __n82 ];
__n80["body"] := __n81;
__n75["consequent"] := __n80;
__n75["alternate"] := null;
__n1 := [ __n2, __n14, __n41, __n58, __n75 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n90 := [ "__obj" ];
__n0["variableDeclarations"] := __n90;
__n91 := [  ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}