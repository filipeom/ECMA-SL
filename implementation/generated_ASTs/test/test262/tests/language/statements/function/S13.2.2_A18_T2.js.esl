function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "ThisExpression";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "callee";
__n6["raw"] := "\"callee\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "b";
__n10["id"] := __n11;
__n10["init"] := null;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "AssignmentExpression";
__n13["operator"] := "=";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__obj";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "ObjectExpression";
__n17 := {  };
__n17["type"] := "Property";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "callee";
__n17["key"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "a";
__n19["raw"] := "\"a\"";
__n17["value"] := __n19;
__n17["computed"] := false;
__n17["kind"] := "init";
__n17["shorthand"] := false;
__n16 := [ __n17 ];
__n15["properties"] := __n16;
__n13["right"] := __n15;
__n12["expression"] := __n13;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "EmptyStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "result";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "f";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__obj";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n24["right"] := __n26;
__n23["expression"] := __n24;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "callee";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 0.;
__n33["raw"] := "0";
__n31["right"] := __n33;
__n30["test"] := __n31;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1: callee === 0. Actual: callee ===";
__n41["raw"] := "'#1: callee === 0. Actual: callee ==='";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "callee";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n30["consequent"] := __n34;
__n30["alternate"] := null;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__obj";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "callee";
__n47["raw"] := "\"callee\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "a";
__n48["raw"] := "\"a\"";
__n44["right"] := __n48;
__n43["test"] := __n44;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#2: __obj.callee === \"a\". Actual: __obj.callee ===";
__n56["raw"] := "'#2: __obj.callee === \"a\". Actual: __obj.callee ==='";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__obj";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "callee";
__n59["raw"] := "\"callee\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n43["consequent"] := __n49;
__n43["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "result";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "callee";
__n64["raw"] := "\"callee\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["left"] := __n62;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n61["right"] := __n65;
__n60["test"] := __n61;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#3: result.callee === 1. Actual: result.callee ===";
__n73["raw"] := "'#3: result.callee === 1. Actual: result.callee ==='";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "result";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "callee";
__n76["raw"] := "\"callee\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n72["right"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n60["consequent"] := __n66;
__n60["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "UnaryExpression";
__n78["operator"] := "!";
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "ThisExpression";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "b";
__n81["raw"] := "\"b\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n78["argument"] := __n79;
__n78["prefix"] := true;
__n77["test"] := __n78;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "+";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "#4: this.b === true. Actual: this.b ===";
__n89["raw"] := "'#4: this.b === true. Actual: this.b ==='";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "ThisExpression";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "b";
__n92["raw"] := "\"b\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n88["right"] := __n90;
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n77["consequent"] := __n82;
__n77["alternate"] := null;
__n1 := [ __n2, __n8, __n12, __n20, __n22, __n23, __n30, __n43, __n60, __n77 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n93 := [ "b" ];
__n0["variableDeclarations"] := __n93;
__n95 := {  };
__n95["type"] := "FunctionDeclaration";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "f";
__n95["id"] := __n96;
__n97 := [  ];
__n95["params"] := __n97;
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "WithStatement";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "arguments";
__n100["object"] := __n101;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "AssignmentExpression";
__n105["operator"] := "=";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "callee";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := 1.;
__n107["raw"] := "1";
__n105["right"] := __n107;
__n104["expression"] := __n105;
__n108 := {  };
__n108["type"] := "ExpressionStatement";
__n109 := {  };
__n109["type"] := "AssignmentExpression";
__n109["operator"] := "=";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "b";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := true;
__n111["raw"] := "true";
__n109["right"] := __n111;
__n108["expression"] := __n109;
__n112 := {  };
__n112["type"] := "ReturnStatement";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "arguments";
__n112["argument"] := __n113;
__n103 := [ __n104, __n108, __n112 ];
__n102["body"] := __n103;
__n100["body"] := __n102;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n114 := [  ];
__n98["variableDeclarations"] := __n114;
__n115 := [  ];
__n98["functionDeclarations"] := __n115;
__n98["codeType"] := "function";
__n98["strict"] := false;
__n95["body"] := __n98;
__n95["generator"] := false;
__n95["async"] := false;
__n95["expression"] := false;
__n94 := [ __n95 ];
__n0["functionDeclarations"] := __n94;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}