function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "typeof";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "__func";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "prototype";
__n10["raw"] := "\"prototype\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6["left"] := __n7;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "object";
__n11["raw"] := "'object'";
__n6["right"] := __n11;
__n5["test"] := __n6;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: typeof __func.prototype === 'object'. Actual: typeof __gunc.prototype ===";
__n19["raw"] := "'#1: typeof __func.prototype === \\'object\\'. Actual: typeof __gunc.prototype ==='";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "typeof";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__gunc";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "prototype";
__n23["raw"] := "\"prototype\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n5["consequent"] := __n12;
__n5["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__func";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "prototype";
__n29["raw"] := "\"prototype\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["object"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "constructor";
__n30["raw"] := "\"constructor\"";
__n26["property"] := __n30;
__n26["computed"] := true;
__n25["left"] := __n26;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__func";
__n25["right"] := __n31;
__n24["test"] := __n25;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: __func.prototype.constructor === __func. Actual: __gunc.prototype.constructor ===";
__n39["raw"] := "'#2: __func.prototype.constructor === __func. Actual: __gunc.prototype.constructor ==='";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__gunc";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "prototype";
__n43["raw"] := "\"prototype\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["object"] := __n41;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "constructor";
__n44["raw"] := "\"constructor\"";
__n40["property"] := __n44;
__n40["computed"] := true;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n24["consequent"] := __n32;
__n24["alternate"] := null;
__n45 := {  };
__n45["type"] := "VariableDeclaration";
__n47 := {  };
__n47["type"] := "VariableDeclarator";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__constructor_was__enumed";
__n47["id"] := __n48;
__n47["init"] := null;
__n46 := [ __n47 ];
__n45["declarations"] := __n46;
__n45["kind"] := "var";
__n49 := {  };
__n49["type"] := "ForInStatement";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__prop";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__func";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "prototype";
__n53["raw"] := "\"prototype\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n49["right"] := __n51;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "===";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__prop";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "constructor";
__n59["raw"] := "'constructor'";
__n57["right"] := __n59;
__n56["test"] := __n57;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "AssignmentExpression";
__n61["operator"] := "=";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__constructor_was__enumed";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := true;
__n63["raw"] := "true";
__n61["right"] := __n63;
__n60["expression"] := __n61;
__n56["consequent"] := __n60;
__n56["alternate"] := null;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n49["body"] := __n54;
__n49["each"] := false;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__constructor_was__enumed";
__n64["test"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$ERROR";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "+";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#3: __constructor_was__enumed === false. Actual: __constructor_was__enumed ===";
__n73["raw"] := "'#3: __constructor_was__enumed === false. Actual: __constructor_was__enumed ==='";
__n72["left"] := __n73;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "__constructor_was__enumed";
__n72["right"] := __n74;
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n64["consequent"] := __n66;
__n64["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n24, __n45, __n49, __n64 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n75 := [ "__constructor_was__enumed" ];
__n0["variableDeclarations"] := __n75;
__n77 := {  };
__n77["type"] := "FunctionDeclaration";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__func";
__n77["id"] := __n78;
__n79 := [  ];
__n77["params"] := __n79;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n81 := [  ];
__n80["body"] := __n81;
__n82 := [  ];
__n80["variableDeclarations"] := __n82;
__n83 := [  ];
__n80["functionDeclarations"] := __n83;
__n80["codeType"] := "function";
__n80["strict"] := false;
__n77["body"] := __n80;
__n77["generator"] := false;
__n77["expression"] := false;
__n77["async"] := false;
__n76 := [ __n77 ];
__n0["functionDeclarations"] := __n76;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}