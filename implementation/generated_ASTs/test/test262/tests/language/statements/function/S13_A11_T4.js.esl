function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "!";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__func";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "A";
__n10["raw"] := "\"A\"";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "B";
__n11["raw"] := "\"B\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n9 := [ __n10, __n11, __n12, __n13 ];
__n7["arguments"] := __n9;
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n5["test"] := __n6;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Since arguments property has attribute { DontDelete }, but elements of arguments can be deleted";
__n20["raw"] := "'#1: Since arguments property has attribute { DontDelete }, but elements of arguments can be deleted'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n5["consequent"] := __n14;
__n5["alternate"] := null;
__n1 := [ __n2, __n4, __n5 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n21 := [  ];
__n0["variableDeclarations"] := __n21;
__n23 := {  };
__n23["type"] := "FunctionDeclaration";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__func";
__n23["id"] := __n24;
__n25 := [  ];
__n23["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "is_undef";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := true;
__n32["raw"] := "true";
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n33 := {  };
__n33["type"] := "ForStatement";
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "i";
__n36["id"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["init"] := __n38;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n33["init"] := __n34;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "<";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "i";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arguments";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "length";
__n43["raw"] := "\"length\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n39["right"] := __n41;
__n33["test"] := __n39;
__n44 := {  };
__n44["type"] := "UpdateExpression";
__n44["operator"] := "++";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "i";
__n44["argument"] := __n45;
__n44["prefix"] := false;
__n33["update"] := __n44;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "delete";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n50["computed"] := true;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "arguments";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "i";
__n50["property"] := __n52;
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["expression"] := __n49;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "is_undef";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "LogicalExpression";
__n56["operator"] := "&&";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "is_undef";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "===";
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "typeof";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n60["computed"] := true;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "arguments";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "i";
__n60["property"] := __n62;
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n58["left"] := __n59;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "undefined";
__n63["raw"] := "\"undefined\"";
__n58["right"] := __n63;
__n56["right"] := __n58;
__n54["right"] := __n56;
__n53["expression"] := __n54;
__n47 := [ __n48, __n53 ];
__n46["body"] := __n47;
__n33["body"] := __n46;
__n64 := {  };
__n64["type"] := "EmptyStatement";
__n65 := {  };
__n65["type"] := "ReturnStatement";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "is_undef";
__n65["argument"] := __n66;
__n27 := [ __n28, __n33, __n64, __n65 ];
__n26["body"] := __n27;
__n67 := [ "is_undef", "i" ];
__n26["variableDeclarations"] := __n67;
__n68 := [  ];
__n26["functionDeclarations"] := __n68;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n23["body"] := __n26;
__n23["generator"] := false;
__n23["expression"] := false;
__n23["async"] := false;
__n22 := [ __n23 ];
__n0["functionDeclarations"] := __n22;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}