function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "ALIVE";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "Letov is alive";
__n5["raw"] := "\"Letov is alive\"";
__n3["right"] := __n5;
__n2["expression"] := __n3;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "EmptyStatement";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "delete";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "__func";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["test"] := __n10;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: delete __func returning false";
__n18["raw"] := "'#1: delete __func returning false'";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n9["consequent"] := __n12;
__n9["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__func";
__n21["callee"] := __n22;
__n23 := [  ];
__n21["arguments"] := __n23;
__n20["left"] := __n21;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "ALIVE";
__n20["right"] := __n24;
__n19["test"] := __n20;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: __func() === ALIVE. Actual: __func() ===";
__n32["raw"] := "'#2: __func() === ALIVE. Actual: __func() ==='";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__func";
__n33["callee"] := __n34;
__n35 := [  ];
__n33["arguments"] := __n35;
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n19["consequent"] := __n25;
__n19["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n9, __n19 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [  ];
__n0["variableDeclarations"] := __n36;
__n38 := {  };
__n38["type"] := "FunctionDeclaration";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__func";
__n38["id"] := __n39;
__n40 := [  ];
__n38["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "ALIVE";
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n45 := [  ];
__n41["variableDeclarations"] := __n45;
__n46 := [  ];
__n41["functionDeclarations"] := __n46;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n38["body"] := __n41;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n37 := [ __n38 ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}