function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "!==";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["left"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 2.;
__n10["raw"] := "2";
__n5["right"] := __n10;
__n4["test"] := __n5;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1.3: __func(1) === 2. Actual: __func(1) ===";
__n18["raw"] := "'#1.3: __func(1) === 2. Actual: __func(1) ==='";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__func";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n4["consequent"] := __n11;
__n4["alternate"] := null;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n23 := [  ];
__n0["variableDeclarations"] := __n23;
__n25 := {  };
__n25["type"] := "FunctionDeclaration";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__func";
__n25["id"] := __n26;
__n27 := [ "__arg" ];
__n25["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__arg";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 2.;
__n33["raw"] := "2";
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "delete";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n36["computed"] := true;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "arguments";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["property"] := __n38;
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["expression"] := __n35;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n41["computed"] := true;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arguments";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n41["property"] := __n43;
__n40["left"] := __n41;
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "undefined";
__n40["right"] := __n44;
__n39["test"] := __n40;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1.1: arguments[0] === undefined";
__n51["raw"] := "'#1.1: arguments[0] === undefined'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n39["consequent"] := __n45;
__n39["alternate"] := null;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "AssignmentExpression";
__n53["operator"] := "=";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n54["computed"] := true;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arguments";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 0.;
__n56["raw"] := "0";
__n54["property"] := __n56;
__n53["left"] := __n54;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "A";
__n57["raw"] := "\"A\"";
__n53["right"] := __n57;
__n52["expression"] := __n53;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n60["computed"] := true;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "arguments";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 0.;
__n62["raw"] := "0";
__n60["property"] := __n62;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "A";
__n63["raw"] := "\"A\"";
__n59["right"] := __n63;
__n58["test"] := __n59;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#1.2: arguments[0] === \"A\"";
__n70["raw"] := "'#1.2: arguments[0] === \"A\"'";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n58["consequent"] := __n64;
__n58["alternate"] := null;
__n71 := {  };
__n71["type"] := "ReturnStatement";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__arg";
__n71["argument"] := __n72;
__n29 := [ __n30, __n34, __n39, __n52, __n58, __n71 ];
__n28["body"] := __n29;
__n73 := [  ];
__n28["variableDeclarations"] := __n73;
__n74 := [  ];
__n28["functionDeclarations"] := __n74;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n25["body"] := __n28;
__n25["generator"] := false;
__n25["expression"] := false;
__n25["async"] := false;
__n24 := [ __n25 ];
__n0["functionDeclarations"] := __n24;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}