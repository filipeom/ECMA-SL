function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "THE_ANSWER";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "Answer to Life, the Universe, and Everything";
__n5["raw"] := "\"Answer to Life, the Universe, and Everything\"";
__n3["right"] := __n5;
__n2["expression"] := __n3;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "EmptyStatement";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__func";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 42.;
__n14["raw"] := "42";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 42.;
__n15["raw"] := "42";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 42.;
__n16["raw"] := "42";
__n13 := [ __n14, __n15, __n16 ];
__n11["arguments"] := __n13;
__n10["left"] := __n11;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "THE_ANSWER";
__n10["right"] := __n17;
__n9["test"] := __n10;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1:  \"arguments\" variable overrides ActivationObject.arguments";
__n24["raw"] := "'#1:  \"arguments\" variable overrides ActivationObject.arguments'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n9["consequent"] := __n18;
__n9["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n25 := [  ];
__n0["variableDeclarations"] := __n25;
__n27 := {  };
__n27["type"] := "FunctionDeclaration";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__func";
__n27["id"] := __n28;
__n29 := [  ];
__n27["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arguments";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "THE_ANSWER";
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n37 := {  };
__n37["type"] := "ReturnStatement";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "arguments";
__n37["argument"] := __n38;
__n31 := [ __n32, __n37 ];
__n30["body"] := __n31;
__n39 := [ "arguments" ];
__n30["variableDeclarations"] := __n39;
__n40 := [  ];
__n30["functionDeclarations"] := __n40;
__n30["codeType"] := "function";
__n30["strict"] := false;
__n27["body"] := __n30;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n26 := [ __n27 ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}