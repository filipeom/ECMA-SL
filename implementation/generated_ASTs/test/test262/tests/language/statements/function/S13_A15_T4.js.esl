function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "THE_ANSWER";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "Answer to Life, the Universe, and Everything";
__n5["raw"] := "\"Answer to Life, the Universe, and Everything\"";
__n3["right"] := __n5;
__n2["expression"] := __n3;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "EmptyStatement";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__func";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 42.;
__n14["raw"] := "42";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 42.;
__n15["raw"] := "42";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 42.;
__n16["raw"] := "42";
__n13 := [ __n14, __n15, __n16 ];
__n11["arguments"] := __n13;
__n10["left"] := __n11;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "object";
__n17["raw"] := "\"object\"";
__n10["right"] := __n17;
__n9["test"] := __n10;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: __func(42,42,42) === \"object\". Actual: __func(42,42,42)===";
__n25["raw"] := "'#1: __func(42,42,42) === \"object\". Actual: __func(42,42,42)==='";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__func";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 42.;
__n29["raw"] := "42";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 42.;
__n30["raw"] := "42";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 42.;
__n31["raw"] := "42";
__n28 := [ __n29, __n30, __n31 ];
__n26["arguments"] := __n28;
__n24["right"] := __n26;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n9["consequent"] := __n18;
__n9["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [  ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__func";
__n34["id"] := __n35;
__n36 := [  ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "typeof";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "arguments";
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n39["argument"] := __n40;
__n42 := {  };
__n42["type"] := "VariableDeclaration";
__n44 := {  };
__n44["type"] := "VariableDeclarator";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "arguments";
__n44["id"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "THE_ANSWER";
__n44["init"] := __n46;
__n43 := [ __n44 ];
__n42["declarations"] := __n43;
__n42["kind"] := "var";
__n38 := [ __n39, __n42 ];
__n37["body"] := __n38;
__n47 := [ "arguments" ];
__n37["variableDeclarations"] := __n47;
__n48 := [  ];
__n37["functionDeclarations"] := __n48;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}