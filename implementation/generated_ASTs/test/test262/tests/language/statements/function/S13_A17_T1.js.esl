function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__result";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1.1: var __result = __func() lead to throwing exception";
__n16["raw"] := "\"#1.1: var __result = __func() lead to throwing exception\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n4 := [ __n5, __n12 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n17 := {  };
__n17["type"] := "CatchClause";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "e";
__n17["param"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "instanceof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "e";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "TypeError";
__n23["right"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n22["right"] := __n26;
__n21["test"] := __n22;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1.2: func should throw a TypeError  Actual: ";
__n34["raw"] := "'#1.2: func should throw a TypeError  Actual: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n21["consequent"] := __n27;
__n21["alternate"] := null;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n17["body"] := __n19;
__n2["handler"] := __n17;
__n2["finalizer"] := null;
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__func";
__n38["id"] := __n39;
__n40 := {  };
__n40["type"] := "FunctionExpression";
__n40["id"] := null;
__n41 := [  ];
__n40["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "ONE";
__n45["raw"] := "\"ONE\"";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n46 := [  ];
__n42["variableDeclarations"] := __n46;
__n47 := [  ];
__n42["functionDeclarations"] := __n47;
__n42["codeType"] := "function";
__n42["strict"] := false;
__n40["body"] := __n42;
__n40["generator"] := false;
__n40["async"] := false;
__n40["expression"] := false;
__n38["init"] := __n40;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__result";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__func";
__n52["callee"] := __n53;
__n54 := [  ];
__n52["arguments"] := __n54;
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__result";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "ONE";
__n58["raw"] := "\"ONE\"";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#2: __result === \"ONE\". Actual: __result ===";
__n66["raw"] := "'#2: __result === \"ONE\". Actual: __result ==='";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "__result";
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "AssignmentExpression";
__n69["operator"] := "=";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "__func";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "FunctionExpression";
__n71["id"] := null;
__n72 := [  ];
__n71["params"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ReturnStatement";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "TWO";
__n76["raw"] := "\"TWO\"";
__n75["argument"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n77 := [  ];
__n73["variableDeclarations"] := __n77;
__n78 := [  ];
__n73["functionDeclarations"] := __n78;
__n73["codeType"] := "function";
__n73["strict"] := false;
__n71["body"] := __n73;
__n71["generator"] := false;
__n71["async"] := false;
__n71["expression"] := false;
__n69["right"] := __n71;
__n68["expression"] := __n69;
__n79 := {  };
__n79["type"] := "VariableDeclaration";
__n81 := {  };
__n81["type"] := "VariableDeclarator";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__result";
__n81["id"] := __n82;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "__func";
__n83["callee"] := __n84;
__n85 := [  ];
__n83["arguments"] := __n85;
__n81["init"] := __n83;
__n80 := [ __n81 ];
__n79["declarations"] := __n80;
__n79["kind"] := "var";
__n86 := {  };
__n86["type"] := "IfStatement";
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "!==";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "__result";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "TWO";
__n89["raw"] := "\"TWO\"";
__n87["right"] := __n89;
__n86["test"] := __n87;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "#3: __result === \"TWO\". Actual: __result ===";
__n97["raw"] := "'#3: __result === \"TWO\". Actual: __result ==='";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "__result";
__n96["right"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n86["consequent"] := __n90;
__n86["alternate"] := null;
__n1 := [ __n2, __n36, __n48, __n55, __n68, __n79, __n86 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n99 := [ "__result", "__func" ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}