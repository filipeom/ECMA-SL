function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__result";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: var __result = __func() lead to throwing exception";
__n16["raw"] := "\"#1: var __result = __func() lead to throwing exception\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n4 := [ __n5, __n12 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n17 := {  };
__n17["type"] := "CatchClause";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "e";
__n17["param"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "instanceof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "e";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "TypeError";
__n23["right"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n22["right"] := __n26;
__n21["test"] := __n22;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#1.2: func should throw a TypeError  Actual: ";
__n34["raw"] := "'#1.2: func should throw a TypeError  Actual: '";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n21["consequent"] := __n27;
__n21["alternate"] := null;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n17["body"] := __n19;
__n2["handler"] := __n17;
__n2["finalizer"] := null;
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__func";
__n38["id"] := __n39;
__n40 := {  };
__n40["type"] := "FunctionExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__func";
__n40["id"] := __n41;
__n42 := [  ];
__n40["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ReturnStatement";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "ONE";
__n46["raw"] := "\"ONE\"";
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n47 := [  ];
__n43["variableDeclarations"] := __n47;
__n48 := [  ];
__n43["functionDeclarations"] := __n48;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n40["body"] := __n43;
__n40["generator"] := false;
__n40["expression"] := false;
__n40["async"] := false;
__n38["init"] := __n40;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n49 := {  };
__n49["type"] := "VariableDeclaration";
__n51 := {  };
__n51["type"] := "VariableDeclarator";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__result";
__n51["id"] := __n52;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__func";
__n53["callee"] := __n54;
__n55 := [  ];
__n53["arguments"] := __n55;
__n51["init"] := __n53;
__n50 := [ __n51 ];
__n49["declarations"] := __n50;
__n49["kind"] := "var";
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__result";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "ONE";
__n59["raw"] := "\"ONE\"";
__n57["right"] := __n59;
__n56["test"] := __n57;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#2: __result === \"ONE\". Actual: __result ===";
__n67["raw"] := "'#2: __result === \"ONE\". Actual: __result ==='";
__n66["left"] := __n67;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "__result";
__n66["right"] := __n68;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n56["consequent"] := __n60;
__n56["alternate"] := null;
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "AssignmentExpression";
__n70["operator"] := "=";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "__func";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "FunctionExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__func";
__n72["id"] := __n73;
__n74 := [  ];
__n72["params"] := __n74;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ReturnStatement";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "TWO";
__n78["raw"] := "\"TWO\"";
__n77["argument"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n79 := [  ];
__n75["variableDeclarations"] := __n79;
__n80 := [  ];
__n75["functionDeclarations"] := __n80;
__n75["codeType"] := "function";
__n75["strict"] := false;
__n72["body"] := __n75;
__n72["generator"] := false;
__n72["expression"] := false;
__n72["async"] := false;
__n70["right"] := __n72;
__n69["expression"] := __n70;
__n81 := {  };
__n81["type"] := "VariableDeclaration";
__n83 := {  };
__n83["type"] := "VariableDeclarator";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "__result";
__n83["id"] := __n84;
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "__func";
__n85["callee"] := __n86;
__n87 := [  ];
__n85["arguments"] := __n87;
__n83["init"] := __n85;
__n82 := [ __n83 ];
__n81["declarations"] := __n82;
__n81["kind"] := "var";
__n88 := {  };
__n88["type"] := "IfStatement";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "!==";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "__result";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "TWO";
__n91["raw"] := "\"TWO\"";
__n89["right"] := __n91;
__n88["test"] := __n89;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "+";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#3: __result === \"TWO\". Actual: __result ===";
__n99["raw"] := "'#3: __result === \"TWO\". Actual: __result ==='";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "__result";
__n98["right"] := __n100;
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n88["consequent"] := __n92;
__n88["alternate"] := null;
__n1 := [ __n2, __n36, __n49, __n56, __n69, __n81, __n88 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n101 := [ "__result", "__func" ];
__n0["variableDeclarations"] := __n101;
__n102 := [  ];
__n0["functionDeclarations"] := __n102;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}