function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "sinx";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "undefined";
__n6["raw"] := "'undefined'";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: typeof sinx === 'undefined'. Actual: typeof sinx ===";
__n14["raw"] := "'#1: typeof sinx === \\'undefined\\'. Actual: typeof sinx ==='";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "typeof";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "sinx";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__val";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "derivative";
__n23["id"] := __n24;
__n25 := [ "f", "dx" ];
__n23["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ReturnStatement";
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [ "x" ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "/";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "-";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "f";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "x";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "dx";
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["left"] := __n36;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "f";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n35["right"] := __n42;
__n34["left"] := __n35;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "dx";
__n34["right"] := __n46;
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n47 := [  ];
__n31["variableDeclarations"] := __n47;
__n48 := [  ];
__n31["functionDeclarations"] := __n48;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28["argument"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n49 := [  ];
__n26["variableDeclarations"] := __n49;
__n50 := [  ];
__n26["functionDeclarations"] := __n50;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n23["body"] := __n26;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n22["callee"] := __n23;
__n52 := {  };
__n52["type"] := "FunctionExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "sinx";
__n52["id"] := __n53;
__n54 := [ "x" ];
__n52["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ReturnStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Math";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "sin";
__n61["raw"] := "\"sin\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n58["callee"] := __n59;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "x";
__n62 := [ __n63 ];
__n58["arguments"] := __n62;
__n57["argument"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n64 := [  ];
__n55["variableDeclarations"] := __n64;
__n65 := [  ];
__n55["functionDeclarations"] := __n65;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n52["body"] := __n55;
__n52["generator"] := false;
__n52["async"] := false;
__n52["expression"] := false;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 0.0001;
__n66["raw"] := ".0001";
__n51 := [ __n52, __n66 ];
__n22["arguments"] := __n51;
__n21["callee"] := __n22;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 0.5;
__n68["raw"] := "0.5";
__n67 := [ __n68 ];
__n21["arguments"] := __n67;
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "!==";
__n71 := {  };
__n71["type"] := "UnaryExpression";
__n71["operator"] := "typeof";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "sinx";
__n71["argument"] := __n72;
__n71["prefix"] := true;
__n70["left"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "undefined";
__n73["raw"] := "'undefined'";
__n70["right"] := __n73;
__n69["test"] := __n70;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "BinaryExpression";
__n80["operator"] := "+";
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "#2: typeof sinx === 'undefined'. Actual: typeof sinx ===";
__n81["raw"] := "'#2: typeof sinx === \\'undefined\\'. Actual: typeof sinx ==='";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "UnaryExpression";
__n82["operator"] := "typeof";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "sinx";
__n82["argument"] := __n83;
__n82["prefix"] := true;
__n80["right"] := __n82;
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n69["consequent"] := __n74;
__n69["alternate"] := null;
__n1 := [ __n2, __n17, __n69 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n84 := [ "__val" ];
__n0["variableDeclarations"] := __n84;
__n85 := [  ];
__n0["functionDeclarations"] := __n85;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}