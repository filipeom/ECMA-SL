function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__exp__func";
__n6["id"] := __n7;
__n8 := [ "arg" ];
__n6["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "===";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "arg";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n12["right"] := __n14;
__n11["test"] := __n12;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ReturnStatement";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "arg";
__n17["argument"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n11["consequent"] := __n15;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ReturnStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "*";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__exp__func";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "-";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "arg";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["left"] := __n23;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "arg";
__n22["right"] := __n29;
__n21["argument"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n11["alternate"] := __n19;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n30 := [  ];
__n9["variableDeclarations"] := __n30;
__n31 := [  ];
__n9["functionDeclarations"] := __n31;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n6["body"] := __n9;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "fact_of_3";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__func";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 3.;
__n39["raw"] := "3";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "fact_of_3";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 6.;
__n43["raw"] := "6";
__n41["right"] := __n43;
__n40["test"] := __n41;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "+";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: fact_of_3 === 6. Actual: fact_of_3 ===";
__n51["raw"] := "\"#1: fact_of_3 === 6. Actual: fact_of_3 ===\"";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "fact_of_3";
__n50["right"] := __n52;
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n40["consequent"] := __n44;
__n40["alternate"] := null;
__n1 := [ __n2, __n32, __n40 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n53 := [ "__func", "fact_of_3" ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}