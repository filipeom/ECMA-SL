function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [ "arg" ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "===";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "arg";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n11["right"] := __n13;
__n10["test"] := __n11;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ReturnStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "arg";
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n10["consequent"] := __n14;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ReturnStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "*";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "-";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "arg";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n25["right"] := __n27;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "arg";
__n21["right"] := __n28;
__n20["argument"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n10["alternate"] := __n18;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n29 := [  ];
__n8["variableDeclarations"] := __n29;
__n30 := [  ];
__n8["functionDeclarations"] := __n30;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["expression"] := false;
__n6["async"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "fact_of_3";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "__func";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 3.;
__n38["raw"] := "3";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "fact_of_3";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 6.;
__n42["raw"] := "6";
__n40["right"] := __n42;
__n39["test"] := __n40;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "+";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#1: fact_of_3 === 6. Actual: fact_of_3 ===";
__n50["raw"] := "\"#1: fact_of_3 === 6. Actual: fact_of_3 ===\"";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "fact_of_3";
__n49["right"] := __n51;
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n39["consequent"] := __n43;
__n39["alternate"] := null;
__n1 := [ __n2, __n31, __n39 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n52 := [ "__func", "fact_of_3" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}