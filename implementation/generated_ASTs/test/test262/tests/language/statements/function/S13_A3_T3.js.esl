function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "fact_of_3";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 3.;
__n12["raw"] := "3";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "!==";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "fact_of_3";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 6.;
__n16["raw"] := "6";
__n14["right"] := __n16;
__n13["test"] := __n14;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: fact_of_3 === 6. Actual: fact_of_3 ===";
__n24["raw"] := "\"#1: fact_of_3 === 6. Actual: fact_of_3 ===\"";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "fact_of_3";
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n13["consequent"] := __n17;
__n13["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n13 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n26 := [ "fact_of_3" ];
__n0["variableDeclarations"] := __n26;
__n28 := {  };
__n28["type"] := "FunctionDeclaration";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__func";
__n28["id"] := __n29;
__n30 := [ "arg" ];
__n28["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "===";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arg";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n34["right"] := __n36;
__n33["test"] := __n34;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "arg";
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n33["consequent"] := __n37;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ReturnStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "*";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__func";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "-";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "arg";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n48["right"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["left"] := __n45;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "arg";
__n44["right"] := __n51;
__n43["argument"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n33["alternate"] := __n41;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n52 := [  ];
__n31["variableDeclarations"] := __n52;
__n53 := [  ];
__n31["functionDeclarations"] := __n53;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n28["body"] := __n31;
__n28["generator"] := false;
__n28["expression"] := false;
__n28["async"] := false;
__n27 := [ __n28 ];
__n0["functionDeclarations"] := __n27;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}