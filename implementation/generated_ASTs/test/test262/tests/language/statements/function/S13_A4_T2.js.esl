function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "typeof";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__func";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6["left"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "function";
__n9["raw"] := "\"function\"";
__n6["right"] := __n9;
__n5["test"] := __n6;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: typeof __func === \"function\". Actual: typeof __func ===";
__n17["raw"] := "'#1: typeof __func === \"function\". Actual: typeof __func ==='";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "typeof";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "__func";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n5["consequent"] := __n10;
__n5["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.;
__n25["raw"] := "1";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 2.;
__n26["raw"] := "2";
__n21["right"] := __n26;
__n20["test"] := __n21;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "+";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2: __func(1) === 2. Actual: __func(1) ===";
__n34["raw"] := "'#2: __func(1) === 2. Actual: __func(1) ==='";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "__func";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n33["right"] := __n35;
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n20["consequent"] := __n27;
__n20["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n20 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [  ];
__n0["variableDeclarations"] := __n39;
__n41 := {  };
__n41["type"] := "FunctionDeclaration";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__func";
__n41["id"] := __n42;
__n43 := [ "arg" ];
__n41["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "UpdateExpression";
__n47["operator"] := "++";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "arg";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["argument"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n49 := [  ];
__n44["variableDeclarations"] := __n49;
__n50 := [  ];
__n44["functionDeclarations"] := __n50;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n41["body"] := __n44;
__n41["generator"] := false;
__n41["expression"] := false;
__n41["async"] := false;
__n40 := [ __n41 ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}