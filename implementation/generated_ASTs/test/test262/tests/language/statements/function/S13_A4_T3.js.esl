function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "typeof";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__func";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6["left"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "function";
__n9["raw"] := "\"function\"";
__n6["right"] := __n9;
__n5["test"] := __n6;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: typeof __func === \"function\". Actual: typeof __func ===";
__n17["raw"] := "'#1: typeof __func === \"function\". Actual: typeof __func ==='";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "typeof";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "__func";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["right"] := __n18;
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n5["consequent"] := __n10;
__n5["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 10.;
__n25["raw"] := "10";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 20.;
__n26["raw"] := "20";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 30.;
__n27["raw"] := "30";
__n24 := [ __n25, __n26, __n27 ];
__n22["arguments"] := __n24;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 60.;
__n28["raw"] := "60";
__n21["right"] := __n28;
__n20["test"] := __n21;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: __func(10, 20, 30) === 60. Actual: __func(10,20,30) ===";
__n36["raw"] := "'#2: __func(10, 20, 30) === 60. Actual: __func(10,20,30) ==='";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__func";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 10.;
__n40["raw"] := "10";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 20.;
__n41["raw"] := "20";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 30.;
__n42["raw"] := "30";
__n39 := [ __n40, __n41, __n42 ];
__n37["arguments"] := __n39;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n20["consequent"] := __n29;
__n20["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n43 := [  ];
__n0["variableDeclarations"] := __n43;
__n45 := {  };
__n45["type"] := "FunctionDeclaration";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__func";
__n45["id"] := __n46;
__n47 := [ "arg1", "arg2", "arg3" ];
__n45["params"] := __n47;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ReturnStatement";
__n51 := {  };
__n51["type"] := "AssignmentExpression";
__n51["operator"] := "+=";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "arg1";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "AssignmentExpression";
__n53["operator"] := "+=";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "arg2";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arg3";
__n53["right"] := __n55;
__n51["right"] := __n53;
__n50["argument"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n56 := [  ];
__n48["variableDeclarations"] := __n56;
__n57 := [  ];
__n48["functionDeclarations"] := __n57;
__n48["codeType"] := "function";
__n48["strict"] := false;
__n45["body"] := __n48;
__n45["generator"] := false;
__n45["async"] := false;
__n45["expression"] := false;
__n44 := [ __n45 ];
__n0["functionDeclarations"] := __n44;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}