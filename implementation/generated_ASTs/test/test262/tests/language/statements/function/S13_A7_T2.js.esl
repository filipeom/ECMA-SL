function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "eval";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "function __func(){/ ABC}";
__n9["raw"] := "\"function __func(){/ ABC}\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: eval(\"function __func(){/ ABC}\") lead to throwing exception";
__n14["raw"] := "'#1: eval(\"function __func(){/ ABC}\") lead to throwing exception'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n4 := [ __n5, __n10 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n15 := {  };
__n15["type"] := "CatchClause";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "e";
__n15["param"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "!";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "instanceof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "SyntaxError";
__n21["right"] := __n23;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["test"] := __n20;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1.1: eval(\"function __func(){/ ABC}\") lead to throwing exception of SyntaxError. Actual: exception is ";
__n31["raw"] := "'#1.1: eval(\"function __func(){/ ABC}\") lead to throwing exception of SyntaxError. Actual: exception is '";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "e";
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n19["consequent"] := __n24;
__n19["alternate"] := null;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n15["body"] := __n17;
__n2["handler"] := __n15;
__n2["finalizer"] := null;
__n33 := {  };
__n33["type"] := "TryStatement";
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "eval";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "function __func(){&1}";
__n40["raw"] := "\"function __func(){&1}\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#3: eval(\"function __func(){&1}\") lead to throwing exception";
__n45["raw"] := "'#3: eval(\"function __func(){&1}\") lead to throwing exception'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n35 := [ __n36, __n41 ];
__n34["body"] := __n35;
__n33["block"] := __n34;
__n46 := {  };
__n46["type"] := "CatchClause";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "e";
__n46["param"] := __n47;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "!";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "instanceof";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "SyntaxError";
__n52["right"] := __n54;
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n50["test"] := __n51;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#3.1: eval(\"function __func(){&1}\") lead to throwing exception of SyntaxError. Actual: exception is ";
__n62["raw"] := "'#3.1: eval(\"function __func(){&1}\") lead to throwing exception of SyntaxError. Actual: exception is '";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "e";
__n61["right"] := __n63;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n50["consequent"] := __n55;
__n50["alternate"] := null;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n46["body"] := __n48;
__n33["handler"] := __n46;
__n33["finalizer"] := null;
__n64 := {  };
__n64["type"] := "TryStatement";
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "eval";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "function __func(){# ABC}";
__n71["raw"] := "\"function __func(){# ABC}\"";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#4: eval(\"function __func(){# ABC}\") lead to throwing exception";
__n76["raw"] := "'#4: eval(\"function __func(){# ABC}\") lead to throwing exception'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n66 := [ __n67, __n72 ];
__n65["body"] := __n66;
__n64["block"] := __n65;
__n77 := {  };
__n77["type"] := "CatchClause";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "e";
__n77["param"] := __n78;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "UnaryExpression";
__n82["operator"] := "!";
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "instanceof";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "e";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "SyntaxError";
__n83["right"] := __n85;
__n82["argument"] := __n83;
__n82["prefix"] := true;
__n81["test"] := __n82;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "+";
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "#4.1: eval(\"function __func(){# ABC}\") lead to throwing exception of SyntaxError. Actual: exception is ";
__n93["raw"] := "'#4.1: eval(\"function __func(){# ABC}\") lead to throwing exception of SyntaxError. Actual: exception is '";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "e";
__n92["right"] := __n94;
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n81["consequent"] := __n86;
__n81["alternate"] := null;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n77["body"] := __n79;
__n64["handler"] := __n77;
__n64["finalizer"] := null;
__n1 := [ __n2, __n33, __n64 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n95 := [  ];
__n0["variableDeclarations"] := __n95;
__n96 := [  ];
__n0["functionDeclarations"] := __n96;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}