function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func__INC";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "__func__MULT";
__n5["expression"] := __n6;
__n7 := {  };
__n7["type"] := "EmptyStatement";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "__func__MULT";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__func__INC";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 2.;
__n14["raw"] := "2";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 2.;
__n15["raw"] := "2";
__n12 := [ __n13, __n14, __n15 ];
__n10["arguments"] := __n12;
__n9["left"] := __n10;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 6.;
__n16["raw"] := "6";
__n9["right"] := __n16;
__n8["test"] := __n9;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: function  can be passed as argument";
__n23["raw"] := "'#1: function  can be passed as argument'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n8["consequent"] := __n17;
__n8["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n7, __n8 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n24 := [  ];
__n0["variableDeclarations"] := __n24;
__n26 := {  };
__n26["type"] := "FunctionDeclaration";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__func__INC";
__n26["id"] := __n27;
__n28 := [ "arg" ];
__n26["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ReturnStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "arg";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 1.;
__n34["raw"] := "1";
__n32["right"] := __n34;
__n31["argument"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n35 := [  ];
__n29["variableDeclarations"] := __n35;
__n36 := [  ];
__n29["functionDeclarations"] := __n36;
__n29["codeType"] := "function";
__n29["strict"] := false;
__n26["body"] := __n29;
__n26["generator"] := false;
__n26["expression"] := false;
__n26["async"] := false;
__n37 := {  };
__n37["type"] := "FunctionDeclaration";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__func__MULT";
__n37["id"] := __n38;
__n39 := [ "incrementator", "arg", "mult" ];
__n37["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ReturnStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "*";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "incrementator";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "arg";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "mult";
__n43["right"] := __n48;
__n42["argument"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n49 := [  ];
__n40["variableDeclarations"] := __n49;
__n50 := [  ];
__n40["functionDeclarations"] := __n50;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n37["body"] := __n40;
__n37["generator"] := false;
__n37["expression"] := false;
__n37["async"] := false;
__n25 := [ __n26, __n37 ];
__n0["functionDeclarations"] := __n25;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}