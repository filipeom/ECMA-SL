function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "f";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "undefined";
__n6["raw"] := "'undefined'";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: typeof f === 'undefined'. Actual:  typeof f ===";
__n14["raw"] := "'#1: typeof f === \\'undefined\\'. Actual:  typeof f ==='";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "typeof";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "f";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n20["id"] := __n21;
__n22 := [ "arg" ];
__n20["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "===";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "arg";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29["argument"] := __n30;
__n25["consequent"] := __n29;
__n31 := {  };
__n31["type"] := "ReturnStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "*";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "f";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "-";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "arg";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n36["right"] := __n38;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["left"] := __n33;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "arg";
__n32["right"] := __n39;
__n31["argument"] := __n32;
__n25["alternate"] := __n31;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n40 := [  ];
__n23["variableDeclarations"] := __n40;
__n41 := [  ];
__n23["functionDeclarations"] := __n41;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n20["body"] := __n23;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19["callee"] := __n20;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 3.;
__n43["raw"] := "3";
__n42 := [ __n43 ];
__n19["arguments"] := __n42;
__n18["left"] := __n19;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 6.;
__n44["raw"] := "6";
__n18["right"] := __n44;
__n17["test"] := __n18;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#2: FunctionDeclaration cannot be localed inside an Expression";
__n51["raw"] := "'#2: FunctionDeclaration cannot be localed inside an Expression'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n17["consequent"] := __n45;
__n17["alternate"] := null;
__n52 := {  };
__n52["type"] := "EmptyStatement";
__n1 := [ __n2, __n17, __n52 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n53 := [  ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}