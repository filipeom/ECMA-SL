function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["callee"] := __n5;
__n6 := [  ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "both";
__n7["raw"] := "\"both\"";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: __func() === \"both\". Actual:  __func() ===";
__n15["raw"] := "'#1: __func() === \"both\". Actual:  __func() ==='";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__func";
__n16["callee"] := __n17;
__n18 := [  ];
__n16["arguments"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__func";
__n19["expression"] := __n20;
__n21 := {  };
__n21["type"] := "EmptyStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["expression"] := __n23;
__n24 := {  };
__n24["type"] := "EmptyStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__func";
__n25["expression"] := __n26;
__n27 := {  };
__n27["type"] := "EmptyStatement";
__n1 := [ __n2, __n19, __n21, __n22, __n24, __n25, __n27 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n28 := [  ];
__n0["variableDeclarations"] := __n28;
__n30 := {  };
__n30["type"] := "FunctionDeclaration";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__func";
__n30["id"] := __n31;
__n32 := [  ];
__n30["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "ascii";
__n36["raw"] := "\"ascii\"";
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n37 := [  ];
__n33["variableDeclarations"] := __n37;
__n38 := [  ];
__n33["functionDeclarations"] := __n38;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n30["body"] := __n33;
__n30["generator"] := false;
__n30["expression"] := false;
__n30["async"] := false;
__n39 := {  };
__n39["type"] := "FunctionDeclaration";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__func";
__n39["id"] := __n40;
__n41 := [  ];
__n39["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "unicode";
__n45["raw"] := "\"unicode\"";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n46 := [  ];
__n42["variableDeclarations"] := __n46;
__n47 := [  ];
__n42["functionDeclarations"] := __n47;
__n42["codeType"] := "function";
__n42["strict"] := false;
__n39["body"] := __n42;
__n39["generator"] := false;
__n39["expression"] := false;
__n39["async"] := false;
__n48 := {  };
__n48["type"] := "FunctionDeclaration";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__func";
__n48["id"] := __n49;
__n50 := [  ];
__n48["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ReturnStatement";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "both";
__n54["raw"] := "\"both\"";
__n53["argument"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n55 := [  ];
__n51["variableDeclarations"] := __n55;
__n56 := [  ];
__n51["functionDeclarations"] := __n56;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n48["body"] := __n51;
__n48["generator"] := false;
__n48["expression"] := false;
__n48["async"] := false;
__n29 := [ __n30, __n39, __n48 ];
__n0["functionDeclarations"] := __n29;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}