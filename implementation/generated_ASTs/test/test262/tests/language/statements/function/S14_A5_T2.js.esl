function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["callee"] := __n5;
__n6 := [  ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "unicode";
__n7["raw"] := "\"unicode\"";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: __func() === \"unicode\". Actual:  __func() ===";
__n15["raw"] := "'#1: __func() === \"unicode\". Actual:  __func() ==='";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__func";
__n16["callee"] := __n17;
__n18 := [  ];
__n16["arguments"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__func";
__n19["expression"] := __n20;
__n21 := {  };
__n21["type"] := "EmptyStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__func";
__n22["expression"] := __n23;
__n24 := {  };
__n24["type"] := "EmptyStatement";
__n1 := [ __n2, __n19, __n21, __n22, __n24 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n25 := [  ];
__n0["variableDeclarations"] := __n25;
__n27 := {  };
__n27["type"] := "FunctionDeclaration";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__func";
__n27["id"] := __n28;
__n29 := [  ];
__n27["params"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ReturnStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "ascii";
__n33["raw"] := "\"ascii\"";
__n32["argument"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n34 := [  ];
__n30["variableDeclarations"] := __n34;
__n35 := [  ];
__n30["functionDeclarations"] := __n35;
__n30["codeType"] := "function";
__n30["strict"] := false;
__n27["body"] := __n30;
__n27["generator"] := false;
__n27["expression"] := false;
__n27["async"] := false;
__n36 := {  };
__n36["type"] := "FunctionDeclaration";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__func";
__n36["id"] := __n37;
__n38 := [  ];
__n36["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ReturnStatement";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "unicode";
__n42["raw"] := "\"unicode\"";
__n41["argument"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n43 := [  ];
__n39["variableDeclarations"] := __n43;
__n44 := [  ];
__n39["functionDeclarations"] := __n44;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n36["body"] := __n39;
__n36["generator"] := false;
__n36["expression"] := false;
__n36["async"] := false;
__n26 := [ __n27, __n36 ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}