function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "foo";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n5 := [  ];
__n0["variableDeclarations"] := __n5;
__n7 := {  };
__n7["type"] := "FunctionDeclaration";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "foo";
__n7["id"] := __n8;
__n9 := [ "eval" ];
__n7["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n11 := [  ];
__n10["body"] := __n11;
__n12 := [  ];
__n10["variableDeclarations"] := __n12;
__n13 := [  ];
__n10["functionDeclarations"] := __n13;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n7["body"] := __n10;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n6 := [ __n7 ];
__n0["functionDeclarations"] := __n6;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}