function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := 0.;
__n3["raw"] := "0";
__n2["test"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "$ERROR";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "#1: 0 in expression is evaluated to false ";
__n8["raw"] := "'#1: 0 in expression is evaluated to false '";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["expression"] := __n5;
__n2["consequent"] := __n4;
__n2["alternate"] := null;
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := false;
__n10["raw"] := "false";
__n9["test"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#2: false in expression is evaluated to false ";
__n15["raw"] := "'#2: false in expression is evaluated to false '";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n9["consequent"] := __n11;
__n9["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 'null;
__n17["raw"] := "\"'null\"";
__n16["test"] := __n17;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#3: null in expression is evaluated to false ";
__n22["raw"] := "'#3: null in expression is evaluated to false '";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n16["consequent"] := __n18;
__n16["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "undefined";
__n23["test"] := __n24;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#4: undefined in expression is evaluated to false ";
__n29["raw"] := "'#4: undefined in expression is evaluated to false '";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n23["consequent"] := __n25;
__n23["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "";
__n31["raw"] := "\"\"";
__n30["test"] := __n31;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#5: empty string in expression is evaluated to false ";
__n36["raw"] := "'#5: empty string in expression is evaluated to false '";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n30["consequent"] := __n32;
__n30["alternate"] := null;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "NaN";
__n37["test"] := __n38;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#5: NaN in expression is evaluated to false ";
__n43["raw"] := "'#5: NaN in expression is evaluated to false '";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n37["consequent"] := __n39;
__n37["alternate"] := null;
__n1 := [ __n2, __n9, __n16, __n23, __n30, __n37 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n44 := [  ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}