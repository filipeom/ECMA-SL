function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 0.;
__n8["raw"] := "0";
__n7["test"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1.1: 0 in expression is evaluated to false ";
__n13["raw"] := "'#1.1: 0 in expression is evaluated to false '";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n7["consequent"] := __n9;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "UpdateExpression";
__n15["operator"] := "++";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "c";
__n15["argument"] := __n16;
__n15["prefix"] := false;
__n14["expression"] := __n15;
__n7["alternate"] := __n14;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "c";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n18["right"] := __n20;
__n17["test"] := __n18;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1.2: else branch don`t execute";
__n25["raw"] := "'#1.2: else branch don`t execute'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n17["consequent"] := __n21;
__n17["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := false;
__n27["raw"] := "false";
__n26["test"] := __n27;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2.1: false in expression is evaluated to false ";
__n32["raw"] := "'#2.1: false in expression is evaluated to false '";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n26["consequent"] := __n28;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "UpdateExpression";
__n34["operator"] := "++";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "c";
__n34["argument"] := __n35;
__n34["prefix"] := false;
__n33["expression"] := __n34;
__n26["alternate"] := __n33;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!=";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "c";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 2.;
__n39["raw"] := "2";
__n37["right"] := __n39;
__n36["test"] := __n37;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2.2: else branch don`t execute";
__n44["raw"] := "'#2.2: else branch don`t execute'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n36["consequent"] := __n40;
__n36["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 'null;
__n46["raw"] := "\"'null\"";
__n45["test"] := __n46;
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#3.1: null in expression is evaluated to false ";
__n51["raw"] := "'#3.1: null in expression is evaluated to false '";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n45["consequent"] := __n47;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "UpdateExpression";
__n53["operator"] := "++";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "c";
__n53["argument"] := __n54;
__n53["prefix"] := false;
__n52["expression"] := __n53;
__n45["alternate"] := __n52;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!=";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "c";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 3.;
__n58["raw"] := "3";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#3.2: else branch don`t execute";
__n63["raw"] := "'#3.2: else branch don`t execute'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "undefined";
__n64["test"] := __n65;
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#4.1: undefined in expression is evaluated to false ";
__n70["raw"] := "'#4.1: undefined in expression is evaluated to false '";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n64["consequent"] := __n66;
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "UpdateExpression";
__n72["operator"] := "++";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "c";
__n72["argument"] := __n73;
__n72["prefix"] := false;
__n71["expression"] := __n72;
__n64["alternate"] := __n71;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!=";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "c";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 4.;
__n77["raw"] := "4";
__n75["right"] := __n77;
__n74["test"] := __n75;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#4.2: else branch don`t execute";
__n82["raw"] := "'#4.2: else branch don`t execute'";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n74["consequent"] := __n78;
__n74["alternate"] := null;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "";
__n84["raw"] := "\"\"";
__n83["test"] := __n84;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "#5.1: empty string in expression is evaluated to false ";
__n89["raw"] := "'#5.1: empty string in expression is evaluated to false '";
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n83["consequent"] := __n85;
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "UpdateExpression";
__n91["operator"] := "++";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "c";
__n91["argument"] := __n92;
__n91["prefix"] := false;
__n90["expression"] := __n91;
__n83["alternate"] := __n90;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!=";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "c";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 5.;
__n96["raw"] := "5";
__n94["right"] := __n96;
__n93["test"] := __n94;
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "$ERROR";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "#5.2: else branch don`t execute";
__n101["raw"] := "'#5.2: else branch don`t execute'";
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n93["consequent"] := __n97;
__n93["alternate"] := null;
__n102 := {  };
__n102["type"] := "IfStatement";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "NaN";
__n102["test"] := __n103;
__n104 := {  };
__n104["type"] := "ExpressionStatement";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "$ERROR";
__n105["callee"] := __n106;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "#6.1: NaN in expression is evaluated to false ";
__n108["raw"] := "'#6.1: NaN in expression is evaluated to false '";
__n107 := [ __n108 ];
__n105["arguments"] := __n107;
__n104["expression"] := __n105;
__n102["consequent"] := __n104;
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "UpdateExpression";
__n110["operator"] := "++";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "c";
__n110["argument"] := __n111;
__n110["prefix"] := false;
__n109["expression"] := __n110;
__n102["alternate"] := __n109;
__n112 := {  };
__n112["type"] := "IfStatement";
__n113 := {  };
__n113["type"] := "BinaryExpression";
__n113["operator"] := "!=";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "c";
__n113["left"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 6.;
__n115["raw"] := "6";
__n113["right"] := __n115;
__n112["test"] := __n113;
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "$ERROR";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "#6.2: else branch don`t execute";
__n120["raw"] := "'#6.2: else branch don`t execute'";
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["expression"] := __n117;
__n112["consequent"] := __n116;
__n112["alternate"] := null;
__n1 := [ __n2, __n7, __n17, __n26, __n36, __n45, __n55, __n64, __n74, __n83, __n93, __n102, __n112 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n121 := [ "c" ];
__n0["variableDeclarations"] := __n121;
__n122 := [  ];
__n0["functionDeclarations"] := __n122;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}