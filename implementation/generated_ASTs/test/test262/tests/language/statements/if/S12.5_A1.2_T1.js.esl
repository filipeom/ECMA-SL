function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "NewExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "$ERROR";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "#1: new 1 in expression is evaluated to true";
__n12["raw"] := "'#1: new 1 in expression is evaluated to true'";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["expression"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "UnaryExpression";
__n14["operator"] := "!";
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Boolean";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := true;
__n18["raw"] := "true";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["argument"] := __n15;
__n14["prefix"] := true;
__n13["test"] := __n14;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#2: new true in expression is evaluated to true";
__n23["raw"] := "'#2: new true in expression is evaluated to true'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n13["consequent"] := __n19;
__n13["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "!";
__n26 := {  };
__n26["type"] := "NewExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "String";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "1";
__n29["raw"] := "\"1\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["test"] := __n25;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#3: new \"1\" in expression is evaluated to true";
__n34["raw"] := "'#3: new \"1\" in expression is evaluated to true'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n24["consequent"] := __n30;
__n24["alternate"] := null;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "!";
__n37 := {  };
__n37["type"] := "NewExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "String";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "A";
__n40["raw"] := "\"A\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n35["test"] := __n36;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#4: new \"A\" in expression is evaluated to true";
__n45["raw"] := "'#4: new \"A\" in expression is evaluated to true'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n35["consequent"] := __n41;
__n35["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "NewExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "Boolean";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := false;
__n51["raw"] := "false";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#2: new false in expression is evaluated to true ";
__n56["raw"] := "'#2: new false in expression is evaluated to true '";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n46["consequent"] := __n52;
__n46["alternate"] := null;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "!";
__n59 := {  };
__n59["type"] := "NewExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "Number";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "NaN";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n57["test"] := __n58;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#6: new NaN in expression is evaluated to true ";
__n67["raw"] := "'#6: new NaN in expression is evaluated to true '";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n57["consequent"] := __n63;
__n57["alternate"] := null;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "UnaryExpression";
__n69["operator"] := "!";
__n70 := {  };
__n70["type"] := "NewExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "Number";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 'null;
__n73["raw"] := "\"'null\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["argument"] := __n70;
__n69["prefix"] := true;
__n68["test"] := __n69;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#7: new null in expression is evaluated to true ";
__n78["raw"] := "'#7: new null in expression is evaluated to true '";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n68["consequent"] := __n74;
__n68["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "UnaryExpression";
__n80["operator"] := "!";
__n81 := {  };
__n81["type"] := "NewExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "String";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "undefined";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["argument"] := __n81;
__n80["prefix"] := true;
__n79["test"] := __n80;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "#8: new undefined in expression is evaluated to true ";
__n89["raw"] := "'#8: new undefined in expression is evaluated to true '";
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n79["consequent"] := __n85;
__n79["alternate"] := null;
__n90 := {  };
__n90["type"] := "IfStatement";
__n91 := {  };
__n91["type"] := "UnaryExpression";
__n91["operator"] := "!";
__n92 := {  };
__n92["type"] := "NewExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "String";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "";
__n95["raw"] := "\"\"";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["argument"] := __n92;
__n91["prefix"] := true;
__n90["test"] := __n91;
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#9: new empty string in expression is evaluated to true ";
__n100["raw"] := "'#9: new empty string in expression is evaluated to true '";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n90["consequent"] := __n96;
__n90["alternate"] := null;
__n1 := [ __n2, __n13, __n24, __n35, __n46, __n57, __n68, __n79, __n90 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n101 := [  ];
__n0["variableDeclarations"] := __n101;
__n102 := [  ];
__n0["functionDeclarations"] := __n102;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}