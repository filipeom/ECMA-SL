function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "!";
__n9 := {  };
__n9["type"] := "NewExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Number";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["test"] := __n8;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1.1: new 1 in expression is evaluated to true";
__n17["raw"] := "'#1.1: new 1 in expression is evaluated to true'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n7["consequent"] := __n13;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "UpdateExpression";
__n19["operator"] := "++";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "c";
__n19["argument"] := __n20;
__n19["prefix"] := false;
__n18["expression"] := __n19;
__n7["alternate"] := __n18;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!=";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "c";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n22["right"] := __n24;
__n21["test"] := __n22;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1.2: else branch don`t execute";
__n29["raw"] := "'#1.2: else branch don`t execute'";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n21["consequent"] := __n25;
__n21["alternate"] := null;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "!";
__n32 := {  };
__n32["type"] := "NewExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Boolean";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n30["test"] := __n31;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2.1: new true in expression is evaluated to true";
__n40["raw"] := "'#2.1: new true in expression is evaluated to true'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n30["consequent"] := __n36;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "UpdateExpression";
__n42["operator"] := "++";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "c";
__n42["argument"] := __n43;
__n42["prefix"] := false;
__n41["expression"] := __n42;
__n30["alternate"] := __n41;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!=";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "c";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 2.;
__n47["raw"] := "2";
__n45["right"] := __n47;
__n44["test"] := __n45;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2.2: else branch don`t execute";
__n52["raw"] := "'#2.2: else branch don`t execute'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n44["consequent"] := __n48;
__n44["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "UnaryExpression";
__n54["operator"] := "!";
__n55 := {  };
__n55["type"] := "NewExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "String";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "1";
__n58["raw"] := "\"1\"";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["argument"] := __n55;
__n54["prefix"] := true;
__n53["test"] := __n54;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#3.1: new \"1\" in expression is evaluated to true";
__n63["raw"] := "'#3.1: new \"1\" in expression is evaluated to true'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n53["consequent"] := __n59;
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "UpdateExpression";
__n65["operator"] := "++";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "c";
__n65["argument"] := __n66;
__n65["prefix"] := false;
__n64["expression"] := __n65;
__n53["alternate"] := __n64;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!=";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "c";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 3.;
__n70["raw"] := "3";
__n68["right"] := __n70;
__n67["test"] := __n68;
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#3.2: else branch don`t execute";
__n75["raw"] := "'#3.2: else branch don`t execute'";
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n67["consequent"] := __n71;
__n67["alternate"] := null;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "!";
__n78 := {  };
__n78["type"] := "NewExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "String";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "A";
__n81["raw"] := "\"A\"";
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["test"] := __n77;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "#4.1: new \"A\" in expression is evaluated to true";
__n86["raw"] := "'#4.1: new \"A\" in expression is evaluated to true'";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n76["consequent"] := __n82;
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "UpdateExpression";
__n88["operator"] := "++";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "c";
__n88["argument"] := __n89;
__n88["prefix"] := false;
__n87["expression"] := __n88;
__n76["alternate"] := __n87;
__n90 := {  };
__n90["type"] := "IfStatement";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "!=";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "c";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 4.;
__n93["raw"] := "4";
__n91["right"] := __n93;
__n90["test"] := __n91;
__n94 := {  };
__n94["type"] := "ExpressionStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "$ERROR";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "#4.2: else branch don`t execute";
__n98["raw"] := "'#4.2: else branch don`t execute'";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["expression"] := __n95;
__n90["consequent"] := __n94;
__n90["alternate"] := null;
__n99 := {  };
__n99["type"] := "IfStatement";
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "!";
__n101 := {  };
__n101["type"] := "NewExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Boolean";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := false;
__n104["raw"] := "false";
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n99["test"] := __n100;
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "#5.1: new false in expression is evaluated to true ";
__n109["raw"] := "'#5.1: new false in expression is evaluated to true '";
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n99["consequent"] := __n105;
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "UpdateExpression";
__n111["operator"] := "++";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "c";
__n111["argument"] := __n112;
__n111["prefix"] := false;
__n110["expression"] := __n111;
__n99["alternate"] := __n110;
__n113 := {  };
__n113["type"] := "IfStatement";
__n114 := {  };
__n114["type"] := "BinaryExpression";
__n114["operator"] := "!=";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "c";
__n114["left"] := __n115;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := 5.;
__n116["raw"] := "5";
__n114["right"] := __n116;
__n113["test"] := __n114;
__n117 := {  };
__n117["type"] := "ExpressionStatement";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "$ERROR";
__n118["callee"] := __n119;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "#5.2: else branch don`t execute";
__n121["raw"] := "'#5.2: else branch don`t execute'";
__n120 := [ __n121 ];
__n118["arguments"] := __n120;
__n117["expression"] := __n118;
__n113["consequent"] := __n117;
__n113["alternate"] := null;
__n122 := {  };
__n122["type"] := "IfStatement";
__n123 := {  };
__n123["type"] := "UnaryExpression";
__n123["operator"] := "!";
__n124 := {  };
__n124["type"] := "NewExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "Number";
__n124["callee"] := __n125;
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "NaN";
__n126 := [ __n127 ];
__n124["arguments"] := __n126;
__n123["argument"] := __n124;
__n123["prefix"] := true;
__n122["test"] := __n123;
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "#6.1: new NaN in expression is evaluated to true ";
__n132["raw"] := "'#6.1: new NaN in expression is evaluated to true '";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n122["consequent"] := __n128;
__n133 := {  };
__n133["type"] := "ExpressionStatement";
__n134 := {  };
__n134["type"] := "UpdateExpression";
__n134["operator"] := "++";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "c";
__n134["argument"] := __n135;
__n134["prefix"] := false;
__n133["expression"] := __n134;
__n122["alternate"] := __n133;
__n136 := {  };
__n136["type"] := "IfStatement";
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "!=";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "c";
__n137["left"] := __n138;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := 6.;
__n139["raw"] := "6";
__n137["right"] := __n139;
__n136["test"] := __n137;
__n140 := {  };
__n140["type"] := "ExpressionStatement";
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "$ERROR";
__n141["callee"] := __n142;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "#6.2: else branch don`t execute";
__n144["raw"] := "'#6.2: else branch don`t execute'";
__n143 := [ __n144 ];
__n141["arguments"] := __n143;
__n140["expression"] := __n141;
__n136["consequent"] := __n140;
__n136["alternate"] := null;
__n145 := {  };
__n145["type"] := "IfStatement";
__n146 := {  };
__n146["type"] := "UnaryExpression";
__n146["operator"] := "!";
__n147 := {  };
__n147["type"] := "NewExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "Number";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := 'null;
__n150["raw"] := "\"'null\"";
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["argument"] := __n147;
__n146["prefix"] := true;
__n145["test"] := __n146;
__n151 := {  };
__n151["type"] := "ExpressionStatement";
__n152 := {  };
__n152["type"] := "CallExpression";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "$ERROR";
__n152["callee"] := __n153;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := "#7.1: new null in expression is evaluated to true ";
__n155["raw"] := "'#7.1: new null in expression is evaluated to true '";
__n154 := [ __n155 ];
__n152["arguments"] := __n154;
__n151["expression"] := __n152;
__n145["consequent"] := __n151;
__n156 := {  };
__n156["type"] := "ExpressionStatement";
__n157 := {  };
__n157["type"] := "UpdateExpression";
__n157["operator"] := "++";
__n158 := {  };
__n158["type"] := "Identifier";
__n158["name"] := "c";
__n157["argument"] := __n158;
__n157["prefix"] := false;
__n156["expression"] := __n157;
__n145["alternate"] := __n156;
__n159 := {  };
__n159["type"] := "IfStatement";
__n160 := {  };
__n160["type"] := "BinaryExpression";
__n160["operator"] := "!=";
__n161 := {  };
__n161["type"] := "Identifier";
__n161["name"] := "c";
__n160["left"] := __n161;
__n162 := {  };
__n162["type"] := "Literal";
__n162["value"] := 7.;
__n162["raw"] := "7";
__n160["right"] := __n162;
__n159["test"] := __n160;
__n163 := {  };
__n163["type"] := "ExpressionStatement";
__n164 := {  };
__n164["type"] := "CallExpression";
__n165 := {  };
__n165["type"] := "Identifier";
__n165["name"] := "$ERROR";
__n164["callee"] := __n165;
__n167 := {  };
__n167["type"] := "Literal";
__n167["value"] := "#7.2: else branch don`t execute";
__n167["raw"] := "'#7.2: else branch don`t execute'";
__n166 := [ __n167 ];
__n164["arguments"] := __n166;
__n163["expression"] := __n164;
__n159["consequent"] := __n163;
__n159["alternate"] := null;
__n168 := {  };
__n168["type"] := "IfStatement";
__n169 := {  };
__n169["type"] := "UnaryExpression";
__n169["operator"] := "!";
__n170 := {  };
__n170["type"] := "NewExpression";
__n171 := {  };
__n171["type"] := "Identifier";
__n171["name"] := "String";
__n170["callee"] := __n171;
__n173 := {  };
__n173["type"] := "Identifier";
__n173["name"] := "undefined";
__n172 := [ __n173 ];
__n170["arguments"] := __n172;
__n169["argument"] := __n170;
__n169["prefix"] := true;
__n168["test"] := __n169;
__n174 := {  };
__n174["type"] := "ExpressionStatement";
__n175 := {  };
__n175["type"] := "CallExpression";
__n176 := {  };
__n176["type"] := "Identifier";
__n176["name"] := "$ERROR";
__n175["callee"] := __n176;
__n178 := {  };
__n178["type"] := "Literal";
__n178["value"] := "#8.1: new undefined in expression is evaluated to true ";
__n178["raw"] := "'#8.1: new undefined in expression is evaluated to true '";
__n177 := [ __n178 ];
__n175["arguments"] := __n177;
__n174["expression"] := __n175;
__n168["consequent"] := __n174;
__n179 := {  };
__n179["type"] := "ExpressionStatement";
__n180 := {  };
__n180["type"] := "UpdateExpression";
__n180["operator"] := "++";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "c";
__n180["argument"] := __n181;
__n180["prefix"] := false;
__n179["expression"] := __n180;
__n168["alternate"] := __n179;
__n182 := {  };
__n182["type"] := "IfStatement";
__n183 := {  };
__n183["type"] := "BinaryExpression";
__n183["operator"] := "!=";
__n184 := {  };
__n184["type"] := "Identifier";
__n184["name"] := "c";
__n183["left"] := __n184;
__n185 := {  };
__n185["type"] := "Literal";
__n185["value"] := 8.;
__n185["raw"] := "8";
__n183["right"] := __n185;
__n182["test"] := __n183;
__n186 := {  };
__n186["type"] := "ExpressionStatement";
__n187 := {  };
__n187["type"] := "CallExpression";
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "$ERROR";
__n187["callee"] := __n188;
__n190 := {  };
__n190["type"] := "Literal";
__n190["value"] := "#8.2: else branch don`t execute";
__n190["raw"] := "'#8.2: else branch don`t execute'";
__n189 := [ __n190 ];
__n187["arguments"] := __n189;
__n186["expression"] := __n187;
__n182["consequent"] := __n186;
__n182["alternate"] := null;
__n191 := {  };
__n191["type"] := "IfStatement";
__n192 := {  };
__n192["type"] := "UnaryExpression";
__n192["operator"] := "!";
__n193 := {  };
__n193["type"] := "NewExpression";
__n194 := {  };
__n194["type"] := "Identifier";
__n194["name"] := "String";
__n193["callee"] := __n194;
__n196 := {  };
__n196["type"] := "Literal";
__n196["value"] := "";
__n196["raw"] := "\"\"";
__n195 := [ __n196 ];
__n193["arguments"] := __n195;
__n192["argument"] := __n193;
__n192["prefix"] := true;
__n191["test"] := __n192;
__n197 := {  };
__n197["type"] := "ExpressionStatement";
__n198 := {  };
__n198["type"] := "CallExpression";
__n199 := {  };
__n199["type"] := "Identifier";
__n199["name"] := "$ERROR";
__n198["callee"] := __n199;
__n201 := {  };
__n201["type"] := "Literal";
__n201["value"] := "#9.1: new empty string in expression is evaluated to true ";
__n201["raw"] := "'#9.1: new empty string in expression is evaluated to true '";
__n200 := [ __n201 ];
__n198["arguments"] := __n200;
__n197["expression"] := __n198;
__n191["consequent"] := __n197;
__n202 := {  };
__n202["type"] := "ExpressionStatement";
__n203 := {  };
__n203["type"] := "UpdateExpression";
__n203["operator"] := "++";
__n204 := {  };
__n204["type"] := "Identifier";
__n204["name"] := "c";
__n203["argument"] := __n204;
__n203["prefix"] := false;
__n202["expression"] := __n203;
__n191["alternate"] := __n202;
__n205 := {  };
__n205["type"] := "IfStatement";
__n206 := {  };
__n206["type"] := "BinaryExpression";
__n206["operator"] := "!=";
__n207 := {  };
__n207["type"] := "Identifier";
__n207["name"] := "c";
__n206["left"] := __n207;
__n208 := {  };
__n208["type"] := "Literal";
__n208["value"] := 9.;
__n208["raw"] := "9";
__n206["right"] := __n208;
__n205["test"] := __n206;
__n209 := {  };
__n209["type"] := "ExpressionStatement";
__n210 := {  };
__n210["type"] := "CallExpression";
__n211 := {  };
__n211["type"] := "Identifier";
__n211["name"] := "$ERROR";
__n210["callee"] := __n211;
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := "#9.2: else branch don`t execute";
__n213["raw"] := "'#9.2: else branch don`t execute'";
__n212 := [ __n213 ];
__n210["arguments"] := __n212;
__n209["expression"] := __n210;
__n205["consequent"] := __n209;
__n205["alternate"] := null;
__n1 := [ __n2, __n7, __n21, __n30, __n44, __n53, __n67, __n76, __n90, __n99, __n113, __n122, __n136, __n145, __n159, __n168, __n182, __n191, __n205 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n214 := [ "c" ];
__n0["variableDeclarations"] := __n214;
__n215 := [  ];
__n0["functionDeclarations"] := __n215;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}