function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "FunctionExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "__func";
__n3["id"] := __n4;
__n5 := [  ];
__n3["params"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ReturnStatement";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n8["argument"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n10 := [  ];
__n6["variableDeclarations"] := __n10;
__n11 := [  ];
__n6["functionDeclarations"] := __n11;
__n6["codeType"] := "function";
__n6["strict"] := false;
__n3["body"] := __n6;
__n3["generator"] := false;
__n3["expression"] := false;
__n3["async"] := false;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "EmptyStatement";
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "#1: Function expession inside the \"if\" expression is allowed";
__n21["raw"] := "'#1: Function expession inside the \"if\" expression is allowed'";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n2["alternate"] := __n15;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n22 := [  ];
__n0["variableDeclarations"] := __n22;
__n23 := [  ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}