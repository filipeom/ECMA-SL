function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "Literal";
__n4["value"] := 1.;
__n4["raw"] := "1";
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "$ERROR";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "#1: 1 in expression is evaluated to true";
__n9["raw"] := "'#1: 1 in expression is evaluated to true'";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n2["consequent"] := __n5;
__n2["alternate"] := null;
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "!";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10["test"] := __n11;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#2: true in expression is evaluated to true";
__n17["raw"] := "'#2: true in expression is evaluated to true'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n10["consequent"] := __n13;
__n10["alternate"] := null;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "!";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "1";
__n20["raw"] := "\"1\"";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["test"] := __n19;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#3: \"1\" in expression is evaluated to true";
__n25["raw"] := "'#3: \"1\" in expression is evaluated to true'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n18["consequent"] := __n21;
__n18["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "!";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "A";
__n28["raw"] := "\"A\"";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["test"] := __n27;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#4: \"A\" in expression is evaluated to true";
__n33["raw"] := "'#4: \"A\" in expression is evaluated to true'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n26["consequent"] := __n29;
__n26["alternate"] := null;
__n1 := [ __n2, __n10, __n18, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n34 := [  ];
__n0["variableDeclarations"] := __n34;
__n35 := [  ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}