function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "!";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["test"] := __n8;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1.1: 1 in expression is evaluated to true";
__n14["raw"] := "'#1.1: 1 in expression is evaluated to true'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n7["consequent"] := __n10;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "UpdateExpression";
__n16["operator"] := "++";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "c";
__n16["argument"] := __n17;
__n16["prefix"] := false;
__n15["expression"] := __n16;
__n7["alternate"] := __n15;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!=";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "c";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1.2: else branch don`t execute";
__n26["raw"] := "'#1.2: else branch don`t execute'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "!";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := true;
__n29["raw"] := "true";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["test"] := __n28;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2.1: true in expression is evaluated to true";
__n34["raw"] := "'#2.1: true in expression is evaluated to true'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n27["consequent"] := __n30;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "UpdateExpression";
__n36["operator"] := "++";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "c";
__n36["argument"] := __n37;
__n36["prefix"] := false;
__n35["expression"] := __n36;
__n27["alternate"] := __n35;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!=";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "c";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 2.;
__n41["raw"] := "2";
__n39["right"] := __n41;
__n38["test"] := __n39;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#2.2: else branch don`t execute";
__n46["raw"] := "'#2.2: else branch don`t execute'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n38["consequent"] := __n42;
__n38["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "1";
__n49["raw"] := "\"1\"";
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#3.1: \"1\" in expression is evaluated to true";
__n54["raw"] := "'#3.1: \"1\" in expression is evaluated to true'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n47["consequent"] := __n50;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "UpdateExpression";
__n56["operator"] := "++";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "c";
__n56["argument"] := __n57;
__n56["prefix"] := false;
__n55["expression"] := __n56;
__n47["alternate"] := __n55;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!=";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "c";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 3.;
__n61["raw"] := "3";
__n59["right"] := __n61;
__n58["test"] := __n59;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#3.2: else branch don`t execute";
__n66["raw"] := "'#3.2: else branch don`t execute'";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n58["consequent"] := __n62;
__n58["alternate"] := null;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "UnaryExpression";
__n68["operator"] := "!";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "A";
__n69["raw"] := "\"A\"";
__n68["argument"] := __n69;
__n68["prefix"] := true;
__n67["test"] := __n68;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "#4.1: \"A\" in expression is evaluated to true";
__n74["raw"] := "'#4.1: \"A\" in expression is evaluated to true'";
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n67["consequent"] := __n70;
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "UpdateExpression";
__n76["operator"] := "++";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "c";
__n76["argument"] := __n77;
__n76["prefix"] := false;
__n75["expression"] := __n76;
__n67["alternate"] := __n75;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!=";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "c";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 4.;
__n81["raw"] := "4";
__n79["right"] := __n81;
__n78["test"] := __n79;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "#4.2: else branch don`t execute";
__n86["raw"] := "'#4.2: else branch don`t execute'";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n78["consequent"] := __n82;
__n78["alternate"] := null;
__n1 := [ __n2, __n7, __n18, __n27, __n38, __n47, __n58, __n67, __n78 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n87 := [ "c" ];
__n0["variableDeclarations"] := __n87;
__n88 := [  ];
__n0["functionDeclarations"] := __n88;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}