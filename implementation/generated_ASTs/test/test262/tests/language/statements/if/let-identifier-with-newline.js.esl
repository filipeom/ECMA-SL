function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := false;
__n3["raw"] := "false";
__n2["test"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "let";
__n4["expression"] := __n5;
__n2["consequent"] := __n4;
__n2["alternate"] := null;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "AssignmentExpression";
__n7["operator"] := "=";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "x";
__n7["left"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n7["right"] := __n9;
__n6["expression"] := __n7;
__n1 := [ __n2, __n6 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n10 := [  ];
__n0["variableDeclarations"] := __n10;
__n11 := [  ];
__n0["functionDeclarations"] := __n11;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}