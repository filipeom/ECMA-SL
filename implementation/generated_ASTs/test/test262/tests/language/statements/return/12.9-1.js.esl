function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "sum";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "innerTest";
__n9["id"] := __n10;
__n11 := [  ];
__n9["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ForStatement";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "i";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n14["init"] := __n15;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "<=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "i";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 10.;
__n22["raw"] := "10";
__n20["right"] := __n22;
__n14["test"] := __n20;
__n23 := {  };
__n23["type"] := "UpdateExpression";
__n23["operator"] := "++";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "i";
__n23["argument"] := __n24;
__n23["prefix"] := false;
__n14["update"] := __n23;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "===";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "i";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 6.;
__n30["raw"] := "6";
__n28["right"] := __n30;
__n27["test"] := __n28;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n33["argument"] := null;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n27["consequent"] := __n31;
__n27["alternate"] := null;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "+=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "sum";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "i";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n26 := [ __n27, __n34 ];
__n25["body"] := __n26;
__n14["body"] := __n25;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n38 := [ "i" ];
__n12["variableDeclarations"] := __n38;
__n39 := [  ];
__n12["functionDeclarations"] := __n39;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n9["body"] := __n12;
__n9["generator"] := false;
__n9["expression"] := false;
__n9["async"] := false;
__n8["callee"] := __n9;
__n40 := [  ];
__n8["arguments"] := __n40;
__n7["expression"] := __n8;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "assert";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "sameValue";
__n45["raw"] := "\"sameValue\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "sum";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 15.;
__n48["raw"] := "15";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "sum";
__n49["raw"] := "'sum'";
__n46 := [ __n47, __n48, __n49 ];
__n42["arguments"] := __n46;
__n41["expression"] := __n42;
__n1 := [ __n2, __n7, __n41 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "sum" ];
__n0["variableDeclarations"] := __n50;
__n51 := [  ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}