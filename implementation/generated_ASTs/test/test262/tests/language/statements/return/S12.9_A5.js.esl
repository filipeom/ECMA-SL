function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "myfunc1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "myfunc1";
__n10["callee"] := __n11;
__n12 := [  ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "!==";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "x1";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 2.;
__n16["raw"] := "2";
__n14["right"] := __n16;
__n13["test"] := __n14;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: x1 === 2. Actual:  x1 ===";
__n22["raw"] := "'#1: x1 === 2. Actual:  x1 ==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "x1";
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n13["consequent"] := __n17;
__n13["alternate"] := null;
__n24 := {  };
__n24["type"] := "VariableDeclaration";
__n26 := {  };
__n26["type"] := "VariableDeclarator";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "x2";
__n26["id"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 1.;
__n28["raw"] := "1";
__n26["init"] := __n28;
__n25 := [ __n26 ];
__n24["declarations"] := __n25;
__n24["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "myfunc2";
__n29["expression"] := __n30;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "myfunc2";
__n32["callee"] := __n33;
__n34 := [  ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "x2";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 2.;
__n38["raw"] := "2";
__n36["right"] := __n38;
__n35["test"] := __n36;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: x2 === 2. Actual:  x2 ===";
__n44["raw"] := "'#2: x2 === 2. Actual:  x2 ==='";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x2";
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n35["consequent"] := __n39;
__n35["alternate"] := null;
__n46 := {  };
__n46["type"] := "VariableDeclaration";
__n48 := {  };
__n48["type"] := "VariableDeclarator";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x3";
__n48["id"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n48["init"] := __n50;
__n47 := [ __n48 ];
__n46["declarations"] := __n47;
__n46["kind"] := "var";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "myfunc3";
__n51["expression"] := __n52;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "myfunc3";
__n55["callee"] := __n56;
__n57 := [  ];
__n55["arguments"] := __n57;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n54["right"] := __n58;
__n53["test"] := __n54;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "+";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "#3: myfunc3() === undefined. Actual:  myfunc3() ===";
__n64["raw"] := "'#3: myfunc3() === undefined. Actual:  myfunc3() ==='";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "myfunc3";
__n65["callee"] := __n66;
__n67 := [  ];
__n65["arguments"] := __n67;
__n63["right"] := __n65;
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n53["consequent"] := __n59;
__n53["alternate"] := null;
__n1 := [ __n2, __n7, __n9, __n13, __n24, __n29, __n31, __n35, __n46, __n51, __n53 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n68 := [ "x1", "x2", "x3" ];
__n0["variableDeclarations"] := __n68;
__n70 := {  };
__n70["type"] := "FunctionDeclaration";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "myfunc1";
__n70["id"] := __n71;
__n72 := [  ];
__n70["params"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "UpdateExpression";
__n76["operator"] := "++";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x1";
__n76["argument"] := __n77;
__n76["prefix"] := false;
__n75["expression"] := __n76;
__n78 := {  };
__n78["type"] := "ReturnStatement";
__n78["argument"] := null;
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "AssignmentExpression";
__n80["operator"] := "*=";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "x1";
__n80["left"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := 2.;
__n82["raw"] := "2";
__n80["right"] := __n82;
__n79["expression"] := __n80;
__n74 := [ __n75, __n78, __n79 ];
__n73["body"] := __n74;
__n83 := [  ];
__n73["variableDeclarations"] := __n83;
__n84 := [  ];
__n73["functionDeclarations"] := __n84;
__n73["codeType"] := "function";
__n73["strict"] := false;
__n70["body"] := __n73;
__n70["generator"] := false;
__n70["expression"] := false;
__n70["async"] := false;
__n85 := {  };
__n85["type"] := "FunctionDeclaration";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "myfunc2";
__n85["id"] := __n86;
__n87 := [  ];
__n85["params"] := __n87;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "UpdateExpression";
__n91["operator"] := "++";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "x2";
__n91["argument"] := __n92;
__n91["prefix"] := false;
__n90["expression"] := __n91;
__n93 := {  };
__n93["type"] := "ReturnStatement";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "x2";
__n93["argument"] := __n94;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "AssignmentExpression";
__n96["operator"] := "*=";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x2";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 2.;
__n98["raw"] := "2";
__n96["right"] := __n98;
__n95["expression"] := __n96;
__n89 := [ __n90, __n93, __n95 ];
__n88["body"] := __n89;
__n99 := [  ];
__n88["variableDeclarations"] := __n99;
__n100 := [  ];
__n88["functionDeclarations"] := __n100;
__n88["codeType"] := "function";
__n88["strict"] := false;
__n85["body"] := __n88;
__n85["generator"] := false;
__n85["expression"] := false;
__n85["async"] := false;
__n101 := {  };
__n101["type"] := "FunctionDeclaration";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "myfunc3";
__n101["id"] := __n102;
__n103 := [  ];
__n101["params"] := __n103;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "UpdateExpression";
__n107["operator"] := "++";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "x3";
__n107["argument"] := __n108;
__n107["prefix"] := false;
__n106["expression"] := __n107;
__n109 := {  };
__n109["type"] := "ReturnStatement";
__n109["argument"] := null;
__n110 := {  };
__n110["type"] := "ReturnStatement";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "x3";
__n110["argument"] := __n111;
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "AssignmentExpression";
__n113["operator"] := "*=";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "x3";
__n113["left"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 2.;
__n115["raw"] := "2";
__n113["right"] := __n115;
__n112["expression"] := __n113;
__n105 := [ __n106, __n109, __n110, __n112 ];
__n104["body"] := __n105;
__n116 := [  ];
__n104["variableDeclarations"] := __n116;
__n117 := [  ];
__n104["functionDeclarations"] := __n117;
__n104["codeType"] := "function";
__n104["strict"] := false;
__n101["body"] := __n104;
__n101["generator"] := false;
__n101["expression"] := false;
__n101["async"] := false;
__n69 := [ __n70, __n85, __n101 ];
__n0["functionDeclarations"] := __n69;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}