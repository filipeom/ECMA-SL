function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "SwitchTest";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "===";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "SwitchTest";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "eval";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "Number(false)";
__n13["raw"] := "'Number(false)'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 6.;
__n14["raw"] := "6";
__n6["right"] := __n14;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: SwitchTest(0) === 6. Actual:  SwitchTest(0) ===";
__n22["raw"] := "\"#1: SwitchTest(0) === 6. Actual:  SwitchTest(0) ===\"";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "SwitchTest";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n4["consequent"] := __n15;
__n4["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "!";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "===";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "SwitchTest";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "parseInt";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["left"] := __n30;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 32.;
__n34["raw"] := "32";
__n29["right"] := __n34;
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["test"] := __n28;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: SwitchTest(parseInt) === 32. Actual:  SwitchTest(parseInt) ===";
__n42["raw"] := "\"#2: SwitchTest(parseInt) === 32. Actual:  SwitchTest(parseInt) ===\"";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "SwitchTest";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "parseInt";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n27["consequent"] := __n35;
__n27["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "SwitchTest";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "isNaN";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["left"] := __n50;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 128.;
__n54["raw"] := "128";
__n49["right"] := __n54;
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#3: SwitchTest(isNaN) === 128. Actual:  SwitchTest(isNaN) ===";
__n62["raw"] := "\"#3: SwitchTest(isNaN) === 128. Actual:  SwitchTest(isNaN) ===\"";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "SwitchTest";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "isNaN";
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n61["right"] := __n63;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n47["consequent"] := __n55;
__n47["alternate"] := null;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "UnaryExpression";
__n68["operator"] := "!";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "===";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "SwitchTest";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := true;
__n73["raw"] := "true";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["left"] := __n70;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 32.;
__n74["raw"] := "32";
__n69["right"] := __n74;
__n68["argument"] := __n69;
__n68["prefix"] := true;
__n67["test"] := __n68;
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "CallExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "$ERROR";
__n78["callee"] := __n79;
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "+";
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "#6: SwitchTest(true) === 32. Actual:  SwitchTest(true) ===";
__n82["raw"] := "\"#6: SwitchTest(true) === 32. Actual:  SwitchTest(true) ===\"";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "SwitchTest";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := true;
__n86["raw"] := "true";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n81["right"] := __n83;
__n80 := [ __n81 ];
__n78["arguments"] := __n80;
__n77["expression"] := __n78;
__n76 := [ __n77 ];
__n75["body"] := __n76;
__n67["consequent"] := __n75;
__n67["alternate"] := null;
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "!";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "===";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "SwitchTest";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := false;
__n93["raw"] := "false";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["left"] := __n90;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 48.;
__n94["raw"] := "48";
__n89["right"] := __n94;
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n87["test"] := __n88;
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "$ERROR";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "+";
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "#7: SwitchTest(false) === 48. Actual:  SwitchTest(false) ===";
__n102["raw"] := "\"#7: SwitchTest(false) === 48. Actual:  SwitchTest(false) ===\"";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "SwitchTest";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := false;
__n106["raw"] := "false";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n101["right"] := __n103;
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n96 := [ __n97 ];
__n95["body"] := __n96;
__n87["consequent"] := __n95;
__n87["alternate"] := null;
__n107 := {  };
__n107["type"] := "IfStatement";
__n108 := {  };
__n108["type"] := "UnaryExpression";
__n108["operator"] := "!";
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "===";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "SwitchTest";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 'null;
__n113["raw"] := "\"'null\"";
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["left"] := __n110;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 192.;
__n114["raw"] := "192";
__n109["right"] := __n114;
__n108["argument"] := __n109;
__n108["prefix"] := true;
__n107["test"] := __n108;
__n115 := {  };
__n115["type"] := "BlockStatement";
__n117 := {  };
__n117["type"] := "ExpressionStatement";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "$ERROR";
__n118["callee"] := __n119;
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "+";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#8: SwitchTest(null) === 192. Actual:  SwitchTest(null) ===";
__n122["raw"] := "\"#8: SwitchTest(null) === 192. Actual:  SwitchTest(null) ===\"";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "SwitchTest";
__n123["callee"] := __n124;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 'null;
__n126["raw"] := "\"'null\"";
__n125 := [ __n126 ];
__n123["arguments"] := __n125;
__n121["right"] := __n123;
__n120 := [ __n121 ];
__n118["arguments"] := __n120;
__n117["expression"] := __n118;
__n116 := [ __n117 ];
__n115["body"] := __n116;
__n107["consequent"] := __n115;
__n107["alternate"] := null;
__n127 := {  };
__n127["type"] := "IfStatement";
__n128 := {  };
__n128["type"] := "UnaryExpression";
__n128["operator"] := "!";
__n129 := {  };
__n129["type"] := "BinaryExpression";
__n129["operator"] := "===";
__n130 := {  };
__n130["type"] := "CallExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "SwitchTest";
__n130["callee"] := __n131;
__n133 := {  };
__n133["type"] := "UnaryExpression";
__n133["operator"] := "void";
__n134 := {  };
__n134["type"] := "Literal";
__n134["value"] := 0.;
__n134["raw"] := "0";
__n133["argument"] := __n134;
__n133["prefix"] := true;
__n132 := [ __n133 ];
__n130["arguments"] := __n132;
__n129["left"] := __n130;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 1024.;
__n135["raw"] := "1024";
__n129["right"] := __n135;
__n128["argument"] := __n129;
__n128["prefix"] := true;
__n127["test"] := __n128;
__n136 := {  };
__n136["type"] := "BlockStatement";
__n138 := {  };
__n138["type"] := "ExpressionStatement";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "$ERROR";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "BinaryExpression";
__n142["operator"] := "+";
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "#9: SwitchTest(void 0) === 1024. Actual:  SwitchTest(void 0) ===";
__n143["raw"] := "\"#9: SwitchTest(void 0) === 1024. Actual:  SwitchTest(void 0) ===\"";
__n142["left"] := __n143;
__n144 := {  };
__n144["type"] := "CallExpression";
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "SwitchTest";
__n144["callee"] := __n145;
__n147 := {  };
__n147["type"] := "UnaryExpression";
__n147["operator"] := "void";
__n148 := {  };
__n148["type"] := "Literal";
__n148["value"] := 0.;
__n148["raw"] := "0";
__n147["argument"] := __n148;
__n147["prefix"] := true;
__n146 := [ __n147 ];
__n144["arguments"] := __n146;
__n142["right"] := __n144;
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["expression"] := __n139;
__n137 := [ __n138 ];
__n136["body"] := __n137;
__n127["consequent"] := __n136;
__n127["alternate"] := null;
__n149 := {  };
__n149["type"] := "IfStatement";
__n150 := {  };
__n150["type"] := "UnaryExpression";
__n150["operator"] := "!";
__n151 := {  };
__n151["type"] := "BinaryExpression";
__n151["operator"] := "===";
__n152 := {  };
__n152["type"] := "CallExpression";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "SwitchTest";
__n152["callee"] := __n153;
__n155 := {  };
__n155["type"] := "Identifier";
__n155["name"] := "NaN";
__n154 := [ __n155 ];
__n152["arguments"] := __n154;
__n151["left"] := __n152;
__n156 := {  };
__n156["type"] := "Literal";
__n156["value"] := 32.;
__n156["raw"] := "32";
__n151["right"] := __n156;
__n150["argument"] := __n151;
__n150["prefix"] := true;
__n149["test"] := __n150;
__n157 := {  };
__n157["type"] := "BlockStatement";
__n159 := {  };
__n159["type"] := "ExpressionStatement";
__n160 := {  };
__n160["type"] := "CallExpression";
__n161 := {  };
__n161["type"] := "Identifier";
__n161["name"] := "$ERROR";
__n160["callee"] := __n161;
__n163 := {  };
__n163["type"] := "BinaryExpression";
__n163["operator"] := "+";
__n164 := {  };
__n164["type"] := "Literal";
__n164["value"] := "#10: SwitchTest(NaN) === 32. Actual:  SwitchTest(NaN) ===";
__n164["raw"] := "\"#10: SwitchTest(NaN) === 32. Actual:  SwitchTest(NaN) ===\"";
__n163["left"] := __n164;
__n165 := {  };
__n165["type"] := "CallExpression";
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "SwitchTest";
__n165["callee"] := __n166;
__n168 := {  };
__n168["type"] := "Identifier";
__n168["name"] := "NaN";
__n167 := [ __n168 ];
__n165["arguments"] := __n167;
__n163["right"] := __n165;
__n162 := [ __n163 ];
__n160["arguments"] := __n162;
__n159["expression"] := __n160;
__n158 := [ __n159 ];
__n157["body"] := __n158;
__n149["consequent"] := __n157;
__n149["alternate"] := null;
__n169 := {  };
__n169["type"] := "IfStatement";
__n170 := {  };
__n170["type"] := "UnaryExpression";
__n170["operator"] := "!";
__n171 := {  };
__n171["type"] := "BinaryExpression";
__n171["operator"] := "===";
__n172 := {  };
__n172["type"] := "CallExpression";
__n173 := {  };
__n173["type"] := "Identifier";
__n173["name"] := "SwitchTest";
__n172["callee"] := __n173;
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "Infinity";
__n174 := [ __n175 ];
__n172["arguments"] := __n174;
__n171["left"] := __n172;
__n176 := {  };
__n176["type"] := "Literal";
__n176["value"] := 768.;
__n176["raw"] := "768";
__n171["right"] := __n176;
__n170["argument"] := __n171;
__n170["prefix"] := true;
__n169["test"] := __n170;
__n177 := {  };
__n177["type"] := "BlockStatement";
__n179 := {  };
__n179["type"] := "ExpressionStatement";
__n180 := {  };
__n180["type"] := "CallExpression";
__n181 := {  };
__n181["type"] := "Identifier";
__n181["name"] := "$ERROR";
__n180["callee"] := __n181;
__n183 := {  };
__n183["type"] := "BinaryExpression";
__n183["operator"] := "+";
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := "#10: SwitchTest(NaN) === 768. Actual:  SwitchTest(NaN) ===";
__n184["raw"] := "\"#10: SwitchTest(NaN) === 768. Actual:  SwitchTest(NaN) ===\"";
__n183["left"] := __n184;
__n185 := {  };
__n185["type"] := "CallExpression";
__n186 := {  };
__n186["type"] := "Identifier";
__n186["name"] := "SwitchTest";
__n185["callee"] := __n186;
__n188 := {  };
__n188["type"] := "Identifier";
__n188["name"] := "NaN";
__n187 := [ __n188 ];
__n185["arguments"] := __n187;
__n183["right"] := __n185;
__n182 := [ __n183 ];
__n180["arguments"] := __n182;
__n179["expression"] := __n180;
__n178 := [ __n179 ];
__n177["body"] := __n178;
__n169["consequent"] := __n177;
__n169["alternate"] := null;
__n1 := [ __n2, __n4, __n27, __n47, __n67, __n87, __n107, __n127, __n149, __n169 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n189 := [  ];
__n0["variableDeclarations"] := __n189;
__n191 := {  };
__n191["type"] := "FunctionDeclaration";
__n192 := {  };
__n192["type"] := "Identifier";
__n192["name"] := "SwitchTest";
__n191["id"] := __n192;
__n193 := [ "value" ];
__n191["params"] := __n193;
__n194 := {  };
__n194["type"] := "BlockStatement";
__n196 := {  };
__n196["type"] := "VariableDeclaration";
__n198 := {  };
__n198["type"] := "VariableDeclarator";
__n199 := {  };
__n199["type"] := "Identifier";
__n199["name"] := "result";
__n198["id"] := __n199;
__n200 := {  };
__n200["type"] := "Literal";
__n200["value"] := 0.;
__n200["raw"] := "0";
__n198["init"] := __n200;
__n197 := [ __n198 ];
__n196["declarations"] := __n197;
__n196["kind"] := "var";
__n201 := {  };
__n201["type"] := "SwitchStatement";
__n202 := {  };
__n202["type"] := "Identifier";
__n202["name"] := "value";
__n201["discriminant"] := __n202;
__n205 := {  };
__n205["type"] := "SwitchCase";
__n206 := {  };
__n206["type"] := "Literal";
__n206["value"] := 0.;
__n206["raw"] := "0";
__n205["test"] := __n206;
__n208 := {  };
__n208["type"] := "ExpressionStatement";
__n209 := {  };
__n209["type"] := "AssignmentExpression";
__n209["operator"] := "+=";
__n210 := {  };
__n210["type"] := "Identifier";
__n210["name"] := "result";
__n209["left"] := __n210;
__n211 := {  };
__n211["type"] := "Literal";
__n211["value"] := 2.;
__n211["raw"] := "2";
__n209["right"] := __n211;
__n208["expression"] := __n209;
__n207 := [ __n208 ];
__n205["consequent"] := __n207;
__n212 := {  };
__n212["type"] := "SwitchCase";
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := 1.;
__n213["raw"] := "1";
__n212["test"] := __n213;
__n215 := {  };
__n215["type"] := "ExpressionStatement";
__n216 := {  };
__n216["type"] := "AssignmentExpression";
__n216["operator"] := "+=";
__n217 := {  };
__n217["type"] := "Identifier";
__n217["name"] := "result";
__n216["left"] := __n217;
__n218 := {  };
__n218["type"] := "Literal";
__n218["value"] := 4.;
__n218["raw"] := "4";
__n216["right"] := __n218;
__n215["expression"] := __n216;
__n219 := {  };
__n219["type"] := "BreakStatement";
__n219["label"] := null;
__n214 := [ __n215, __n219 ];
__n212["consequent"] := __n214;
__n220 := {  };
__n220["type"] := "SwitchCase";
__n221 := {  };
__n221["type"] := "Literal";
__n221["value"] := 2.;
__n221["raw"] := "2";
__n220["test"] := __n221;
__n223 := {  };
__n223["type"] := "ExpressionStatement";
__n224 := {  };
__n224["type"] := "AssignmentExpression";
__n224["operator"] := "+=";
__n225 := {  };
__n225["type"] := "Identifier";
__n225["name"] := "result";
__n224["left"] := __n225;
__n226 := {  };
__n226["type"] := "Literal";
__n226["value"] := 8.;
__n226["raw"] := "8";
__n224["right"] := __n226;
__n223["expression"] := __n224;
__n222 := [ __n223 ];
__n220["consequent"] := __n222;
__n227 := {  };
__n227["type"] := "SwitchCase";
__n228 := {  };
__n228["type"] := "CallExpression";
__n229 := {  };
__n229["type"] := "Identifier";
__n229["name"] := "isNaN";
__n228["callee"] := __n229;
__n231 := {  };
__n231["type"] := "Identifier";
__n231["name"] := "value";
__n230 := [ __n231 ];
__n228["arguments"] := __n230;
__n227["test"] := __n228;
__n233 := {  };
__n233["type"] := "ExpressionStatement";
__n234 := {  };
__n234["type"] := "AssignmentExpression";
__n234["operator"] := "+=";
__n235 := {  };
__n235["type"] := "Identifier";
__n235["name"] := "result";
__n234["left"] := __n235;
__n236 := {  };
__n236["type"] := "Literal";
__n236["value"] := 16.;
__n236["raw"] := "16";
__n234["right"] := __n236;
__n233["expression"] := __n234;
__n232 := [ __n233 ];
__n227["consequent"] := __n232;
__n204 := [ __n205, __n212, __n220, __n227 ];
__n237 := {  };
__n237["type"] := "SwitchCase";
__n237["test"] := null;
__n239 := {  };
__n239["type"] := "ExpressionStatement";
__n240 := {  };
__n240["type"] := "AssignmentExpression";
__n240["operator"] := "+=";
__n241 := {  };
__n241["type"] := "Identifier";
__n241["name"] := "result";
__n240["left"] := __n241;
__n242 := {  };
__n242["type"] := "Literal";
__n242["value"] := 32.;
__n242["raw"] := "32";
__n240["right"] := __n242;
__n239["expression"] := __n240;
__n243 := {  };
__n243["type"] := "BreakStatement";
__n243["label"] := null;
__n238 := [ __n239, __n243 ];
__n237["consequent"] := __n238;
__n245 := {  };
__n245["type"] := "SwitchCase";
__n246 := {  };
__n246["type"] := "Literal";
__n246["value"] := 'null;
__n246["raw"] := "\"'null\"";
__n245["test"] := __n246;
__n248 := {  };
__n248["type"] := "ExpressionStatement";
__n249 := {  };
__n249["type"] := "AssignmentExpression";
__n249["operator"] := "+=";
__n250 := {  };
__n250["type"] := "Identifier";
__n250["name"] := "result";
__n249["left"] := __n250;
__n251 := {  };
__n251["type"] := "Literal";
__n251["value"] := 64.;
__n251["raw"] := "64";
__n249["right"] := __n251;
__n248["expression"] := __n249;
__n247 := [ __n248 ];
__n245["consequent"] := __n247;
__n252 := {  };
__n252["type"] := "SwitchCase";
__n253 := {  };
__n253["type"] := "Identifier";
__n253["name"] := "isNaN";
__n252["test"] := __n253;
__n255 := {  };
__n255["type"] := "ExpressionStatement";
__n256 := {  };
__n256["type"] := "AssignmentExpression";
__n256["operator"] := "+=";
__n257 := {  };
__n257["type"] := "Identifier";
__n257["name"] := "result";
__n256["left"] := __n257;
__n258 := {  };
__n258["type"] := "Literal";
__n258["value"] := 128.;
__n258["raw"] := "128";
__n256["right"] := __n258;
__n255["expression"] := __n256;
__n259 := {  };
__n259["type"] := "BreakStatement";
__n259["label"] := null;
__n254 := [ __n255, __n259 ];
__n252["consequent"] := __n254;
__n260 := {  };
__n260["type"] := "SwitchCase";
__n261 := {  };
__n261["type"] := "Identifier";
__n261["name"] := "Infinity";
__n260["test"] := __n261;
__n263 := {  };
__n263["type"] := "ExpressionStatement";
__n264 := {  };
__n264["type"] := "AssignmentExpression";
__n264["operator"] := "+=";
__n265 := {  };
__n265["type"] := "Identifier";
__n265["name"] := "result";
__n264["left"] := __n265;
__n266 := {  };
__n266["type"] := "Literal";
__n266["value"] := 256.;
__n266["raw"] := "256";
__n264["right"] := __n266;
__n263["expression"] := __n264;
__n262 := [ __n263 ];
__n260["consequent"] := __n262;
__n267 := {  };
__n267["type"] := "SwitchCase";
__n268 := {  };
__n268["type"] := "BinaryExpression";
__n268["operator"] := "+";
__n269 := {  };
__n269["type"] := "Literal";
__n269["value"] := 2.;
__n269["raw"] := "2";
__n268["left"] := __n269;
__n270 := {  };
__n270["type"] := "Literal";
__n270["value"] := 3.;
__n270["raw"] := "3";
__n268["right"] := __n270;
__n267["test"] := __n268;
__n272 := {  };
__n272["type"] := "ExpressionStatement";
__n273 := {  };
__n273["type"] := "AssignmentExpression";
__n273["operator"] := "+=";
__n274 := {  };
__n274["type"] := "Identifier";
__n274["name"] := "result";
__n273["left"] := __n274;
__n275 := {  };
__n275["type"] := "Literal";
__n275["value"] := 512.;
__n275["raw"] := "512";
__n273["right"] := __n275;
__n272["expression"] := __n273;
__n276 := {  };
__n276["type"] := "BreakStatement";
__n276["label"] := null;
__n271 := [ __n272, __n276 ];
__n267["consequent"] := __n271;
__n277 := {  };
__n277["type"] := "SwitchCase";
__n278 := {  };
__n278["type"] := "Identifier";
__n278["name"] := "undefined";
__n277["test"] := __n278;
__n280 := {  };
__n280["type"] := "ExpressionStatement";
__n281 := {  };
__n281["type"] := "AssignmentExpression";
__n281["operator"] := "+=";
__n282 := {  };
__n282["type"] := "Identifier";
__n282["name"] := "result";
__n281["left"] := __n282;
__n283 := {  };
__n283["type"] := "Literal";
__n283["value"] := 1024.;
__n283["raw"] := "1024";
__n281["right"] := __n283;
__n280["expression"] := __n281;
__n279 := [ __n280 ];
__n277["consequent"] := __n279;
__n244 := [ __n245, __n252, __n260, __n267, __n277 ];
__n203 := [ __n204, __n237, __n244 ];
__n201["cases"] := __n203;
__n284 := {  };
__n284["type"] := "ReturnStatement";
__n285 := {  };
__n285["type"] := "Identifier";
__n285["name"] := "result";
__n284["argument"] := __n285;
__n195 := [ __n196, __n201, __n284 ];
__n194["body"] := __n195;
__n286 := [ "result" ];
__n194["variableDeclarations"] := __n286;
__n287 := [  ];
__n194["functionDeclarations"] := __n287;
__n194["codeType"] := "function";
__n194["strict"] := false;
__n191["body"] := __n194;
__n191["generator"] := false;
__n191["expression"] := false;
__n191["async"] := false;
__n190 := [ __n191 ];
__n0["functionDeclarations"] := __n190;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}