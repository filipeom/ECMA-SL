function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "probeExpr";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "probeSelector";
__n6["id"] := __n7;
__n6["init"] := null;
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "probeStmt";
__n8["id"] := __n9;
__n8["init"] := null;
__n3 := [ __n4, __n6, __n8 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "probeBefore";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "FunctionExpression";
__n14["id"] := null;
__n15 := [  ];
__n14["params"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ReturnStatement";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "x";
__n18["argument"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n20 := [  ];
__n16["variableDeclarations"] := __n20;
__n21 := [  ];
__n16["functionDeclarations"] := __n21;
__n16["codeType"] := "function";
__n16["strict"] := false;
__n14["body"] := __n16;
__n14["generator"] := false;
__n14["async"] := false;
__n14["expression"] := false;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n22 := {  };
__n22["type"] := "SwitchStatement";
__n23 := {  };
__n23["type"] := "SequenceExpression";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "eval";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "var x = 1;";
__n28["raw"] := "'var x = 1;'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "probeExpr";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [  ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n37 := [  ];
__n33["variableDeclarations"] := __n37;
__n38 := [  ];
__n33["functionDeclarations"] := __n38;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n29["right"] := __n31;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 'null;
__n39["raw"] := "\"'null\"";
__n24 := [ __n25, __n29, __n39 ];
__n23["expressions"] := __n24;
__n22["discriminant"] := __n23;
__n42 := {  };
__n42["type"] := "SwitchCase";
__n43 := {  };
__n43["type"] := "SequenceExpression";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "eval";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "var x = 2;";
__n48["raw"] := "'var x = 2;'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n49 := {  };
__n49["type"] := "AssignmentExpression";
__n49["operator"] := "=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "probeSelector";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "FunctionExpression";
__n51["id"] := null;
__n52 := [  ];
__n51["params"] := __n52;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ReturnStatement";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "x";
__n55["argument"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n57 := [  ];
__n53["variableDeclarations"] := __n57;
__n58 := [  ];
__n53["functionDeclarations"] := __n58;
__n53["codeType"] := "function";
__n53["strict"] := false;
__n51["body"] := __n53;
__n51["generator"] := false;
__n51["async"] := false;
__n51["expression"] := false;
__n49["right"] := __n51;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 'null;
__n59["raw"] := "\"'null\"";
__n44 := [ __n45, __n49, __n59 ];
__n43["expressions"] := __n44;
__n42["test"] := __n43;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "AssignmentExpression";
__n62["operator"] := "=";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "probeStmt";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "FunctionExpression";
__n64["id"] := null;
__n65 := [  ];
__n64["params"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ReturnStatement";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "x";
__n68["argument"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n70 := [  ];
__n66["variableDeclarations"] := __n70;
__n71 := [  ];
__n66["functionDeclarations"] := __n71;
__n66["codeType"] := "function";
__n66["strict"] := false;
__n64["body"] := __n66;
__n64["generator"] := false;
__n64["async"] := false;
__n64["expression"] := false;
__n62["right"] := __n64;
__n61["expression"] := __n62;
__n72 := {  };
__n72["type"] := "VariableDeclaration";
__n74 := {  };
__n74["type"] := "VariableDeclarator";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "x";
__n74["id"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 3.;
__n76["raw"] := "3";
__n74["init"] := __n76;
__n73 := [ __n74 ];
__n72["declarations"] := __n73;
__n72["kind"] := "var";
__n60 := [ __n61, __n72 ];
__n42["consequent"] := __n60;
__n41 := [ __n42 ];
__n77 := [  ];
__n40 := [ __n41, null, __n77 ];
__n22["cases"] := __n40;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "assert";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "sameValue";
__n82["raw"] := "\"sameValue\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n79["callee"] := __n80;
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "probeBefore";
__n84["callee"] := __n85;
__n86 := [  ];
__n84["arguments"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 3.;
__n87["raw"] := "3";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "reference preceding statement";
__n88["raw"] := "'reference preceding statement'";
__n83 := [ __n84, __n87, __n88 ];
__n79["arguments"] := __n83;
__n78["expression"] := __n79;
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "MemberExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "assert";
__n91["object"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "sameValue";
__n93["raw"] := "\"sameValue\"";
__n91["property"] := __n93;
__n91["computed"] := true;
__n90["callee"] := __n91;
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "probeExpr";
__n95["callee"] := __n96;
__n97 := [  ];
__n95["arguments"] := __n97;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 3.;
__n98["raw"] := "3";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "reference from first Expression";
__n99["raw"] := "'reference from first Expression'";
__n94 := [ __n95, __n98, __n99 ];
__n90["arguments"] := __n94;
__n89["expression"] := __n90;
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "MemberExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "assert";
__n102["object"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "sameValue";
__n104["raw"] := "\"sameValue\"";
__n102["property"] := __n104;
__n102["computed"] := true;
__n101["callee"] := __n102;
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "probeSelector";
__n106["callee"] := __n107;
__n108 := [  ];
__n106["arguments"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := 3.;
__n109["raw"] := "3";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "reference from \"selector\" Expression";
__n110["raw"] := "'reference from \"selector\" Expression'";
__n105 := [ __n106, __n109, __n110 ];
__n101["arguments"] := __n105;
__n100["expression"] := __n101;
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "MemberExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "assert";
__n113["object"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "sameValue";
__n115["raw"] := "\"sameValue\"";
__n113["property"] := __n115;
__n113["computed"] := true;
__n112["callee"] := __n113;
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "probeStmt";
__n117["callee"] := __n118;
__n119 := [  ];
__n117["arguments"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 3.;
__n120["raw"] := "3";
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "reference from Statement position";
__n121["raw"] := "'reference from Statement position'";
__n116 := [ __n117, __n120, __n121 ];
__n112["arguments"] := __n116;
__n111["expression"] := __n112;
__n122 := {  };
__n122["type"] := "ExpressionStatement";
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "MemberExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "assert";
__n124["object"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "sameValue";
__n126["raw"] := "\"sameValue\"";
__n124["property"] := __n126;
__n124["computed"] := true;
__n123["callee"] := __n124;
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "x";
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := 3.;
__n129["raw"] := "3";
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "reference following statement";
__n130["raw"] := "'reference following statement'";
__n127 := [ __n128, __n129, __n130 ];
__n123["arguments"] := __n127;
__n122["expression"] := __n123;
__n1 := [ __n2, __n10, __n22, __n78, __n89, __n100, __n111, __n122 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n131 := [ "probeExpr", "probeSelector", "probeStmt", "probeBefore", "x" ];
__n0["variableDeclarations"] := __n131;
__n132 := [  ];
__n0["functionDeclarations"] := __n132;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}