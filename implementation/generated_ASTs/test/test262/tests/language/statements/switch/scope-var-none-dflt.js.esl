function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "probeExpr";
__n4["id"] := __n5;
__n4["init"] := null;
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "probeStmt";
__n6["id"] := __n7;
__n6["init"] := null;
__n3 := [ __n4, __n6 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "probeBefore";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "FunctionExpression";
__n12["id"] := null;
__n13 := [  ];
__n12["params"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ReturnStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "x";
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n18 := [  ];
__n14["variableDeclarations"] := __n18;
__n19 := [  ];
__n14["functionDeclarations"] := __n19;
__n14["codeType"] := "function";
__n14["strict"] := false;
__n12["body"] := __n14;
__n12["generator"] := false;
__n12["async"] := false;
__n12["expression"] := false;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n20 := {  };
__n20["type"] := "SwitchStatement";
__n21 := {  };
__n21["type"] := "SequenceExpression";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "eval";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "var x = 1;";
__n26["raw"] := "'var x = 1;'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n27 := {  };
__n27["type"] := "AssignmentExpression";
__n27["operator"] := "=";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "probeExpr";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "x";
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n35 := [  ];
__n31["variableDeclarations"] := __n35;
__n36 := [  ];
__n31["functionDeclarations"] := __n36;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n27["right"] := __n29;
__n22 := [ __n23, __n27 ];
__n21["expressions"] := __n22;
__n20["discriminant"] := __n21;
__n38 := [  ];
__n39 := {  };
__n39["type"] := "SwitchCase";
__n39["test"] := null;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "=";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "probeStmt";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "FunctionExpression";
__n44["id"] := null;
__n45 := [  ];
__n44["params"] := __n45;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ReturnStatement";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "x";
__n48["argument"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n50 := [  ];
__n46["variableDeclarations"] := __n50;
__n51 := [  ];
__n46["functionDeclarations"] := __n51;
__n46["codeType"] := "function";
__n46["strict"] := false;
__n44["body"] := __n46;
__n44["generator"] := false;
__n44["async"] := false;
__n44["expression"] := false;
__n42["right"] := __n44;
__n41["expression"] := __n42;
__n52 := {  };
__n52["type"] := "VariableDeclaration";
__n54 := {  };
__n54["type"] := "VariableDeclarator";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "x";
__n54["id"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 2.;
__n56["raw"] := "2";
__n54["init"] := __n56;
__n53 := [ __n54 ];
__n52["declarations"] := __n53;
__n52["kind"] := "var";
__n40 := [ __n41, __n52 ];
__n39["consequent"] := __n40;
__n57 := [  ];
__n37 := [ __n38, __n39, __n57 ];
__n20["cases"] := __n37;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "assert";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "sameValue";
__n62["raw"] := "\"sameValue\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "probeBefore";
__n64["callee"] := __n65;
__n66 := [  ];
__n64["arguments"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 2.;
__n67["raw"] := "2";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "reference preceding statment";
__n68["raw"] := "'reference preceding statment'";
__n63 := [ __n64, __n67, __n68 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "assert";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "sameValue";
__n73["raw"] := "\"sameValue\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n70["callee"] := __n71;
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "probeExpr";
__n75["callee"] := __n76;
__n77 := [  ];
__n75["arguments"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 2.;
__n78["raw"] := "2";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "reference from Expression position";
__n79["raw"] := "'reference from Expression position'";
__n74 := [ __n75, __n78, __n79 ];
__n70["arguments"] := __n74;
__n69["expression"] := __n70;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "assert";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "sameValue";
__n84["raw"] := "\"sameValue\"";
__n82["property"] := __n84;
__n82["computed"] := true;
__n81["callee"] := __n82;
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "probeStmt";
__n86["callee"] := __n87;
__n88 := [  ];
__n86["arguments"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 2.;
__n89["raw"] := "2";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "reference from Statement position";
__n90["raw"] := "'reference from Statement position'";
__n85 := [ __n86, __n89, __n90 ];
__n81["arguments"] := __n85;
__n80["expression"] := __n81;
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "MemberExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "assert";
__n93["object"] := __n94;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "sameValue";
__n95["raw"] := "\"sameValue\"";
__n93["property"] := __n95;
__n93["computed"] := true;
__n92["callee"] := __n93;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 2.;
__n98["raw"] := "2";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "reference following statement";
__n99["raw"] := "'reference following statement'";
__n96 := [ __n97, __n98, __n99 ];
__n92["arguments"] := __n96;
__n91["expression"] := __n92;
__n1 := [ __n2, __n8, __n20, __n58, __n69, __n80, __n91 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n100 := [ "probeExpr", "probeStmt", "probeBefore", "x" ];
__n0["variableDeclarations"] := __n100;
__n101 := [  ];
__n0["functionDeclarations"] := __n101;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}