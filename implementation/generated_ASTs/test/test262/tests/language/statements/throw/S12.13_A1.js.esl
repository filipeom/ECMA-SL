function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "inCatch";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ThrowStatement";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "expected_message";
__n11["raw"] := "\"expected_message\"";
__n10["argument"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n12 := {  };
__n12["type"] := "CatchClause";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "err";
__n12["param"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "assert";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "sameValue";
__n20["raw"] := "\"sameValue\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "err";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "expected_message";
__n23["raw"] := "\"expected_message\"";
__n21 := [ __n22, __n23 ];
__n17["arguments"] := __n21;
__n16["expression"] := __n17;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "inCatch";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := true;
__n27["raw"] := "true";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n15 := [ __n16, __n24 ];
__n14["body"] := __n15;
__n12["body"] := __n14;
__n7["handler"] := __n12;
__n7["finalizer"] := null;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "assert";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "sameValue";
__n32["raw"] := "\"sameValue\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "inCatch";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := true;
__n35["raw"] := "true";
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n1 := [ __n2, __n7, __n28 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [ "inCatch" ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}