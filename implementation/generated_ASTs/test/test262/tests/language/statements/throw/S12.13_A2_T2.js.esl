function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 'null;
__n6["raw"] := "\"'null\"";
__n5["argument"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n7 := {  };
__n7["type"] := "CatchClause";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "e";
__n7["param"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "e";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 'null;
__n14["raw"] := "\"'null\"";
__n12["right"] := __n14;
__n11["test"] := __n12;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Exception === null. Actual:  Exception ===";
__n20["raw"] := "'#1: Exception === null. Actual:  Exception ==='";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n11["consequent"] := __n15;
__n11["alternate"] := null;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n7["body"] := __n9;
__n2["handler"] := __n7;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n22 := [  ];
__n0["variableDeclarations"] := __n22;
__n23 := [  ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}