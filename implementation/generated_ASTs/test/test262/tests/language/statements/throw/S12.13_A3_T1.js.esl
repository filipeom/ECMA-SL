function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "b";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ThrowStatement";
__n11 := {  };
__n11["type"] := "LogicalExpression";
__n11["operator"] := "&&";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "b";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := false;
__n13["raw"] := "false";
__n11["right"] := __n13;
__n10["argument"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := false;
__n21["raw"] := "false";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: Exception === false(operaton &&). Actual:  Exception ===";
__n27["raw"] := "'#1: Exception === false(operaton &&). Actual:  Exception ==='";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "e";
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n7["handler"] := __n14;
__n7["finalizer"] := null;
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "b";
__n31["id"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n31["init"] := __n33;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n34 := {  };
__n34["type"] := "TryStatement";
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ThrowStatement";
__n38 := {  };
__n38["type"] := "LogicalExpression";
__n38["operator"] := "||";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "b";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := false;
__n40["raw"] := "false";
__n38["right"] := __n40;
__n37["argument"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n34["block"] := __n35;
__n41 := {  };
__n41["type"] := "CatchClause";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n41["param"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "e";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n46["right"] := __n48;
__n45["test"] := __n46;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2: Exception === true(operaton ||). Actual:  Exception ===";
__n54["raw"] := "'#2: Exception === true(operaton ||). Actual:  Exception ==='";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "e";
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n45["consequent"] := __n49;
__n45["alternate"] := null;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n41["body"] := __n43;
__n34["handler"] := __n41;
__n34["finalizer"] := null;
__n56 := {  };
__n56["type"] := "TryStatement";
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ThrowStatement";
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "!";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := false;
__n61["raw"] := "false";
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n59["argument"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n56["block"] := __n57;
__n62 := {  };
__n62["type"] := "CatchClause";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "e";
__n62["param"] := __n63;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "!==";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "e";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := true;
__n69["raw"] := "true";
__n67["right"] := __n69;
__n66["test"] := __n67;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#3: Exception === true(operaton !). Actual:  Exception ===";
__n75["raw"] := "'#3: Exception === true(operaton !). Actual:  Exception ==='";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "e";
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n66["consequent"] := __n70;
__n66["alternate"] := null;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n62["body"] := __n64;
__n56["handler"] := __n62;
__n56["finalizer"] := null;
__n77 := {  };
__n77["type"] := "VariableDeclaration";
__n79 := {  };
__n79["type"] := "VariableDeclarator";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "b";
__n79["id"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := true;
__n81["raw"] := "true";
__n79["init"] := __n81;
__n78 := [ __n79 ];
__n77["declarations"] := __n78;
__n77["kind"] := "var";
__n82 := {  };
__n82["type"] := "TryStatement";
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ThrowStatement";
__n86 := {  };
__n86["type"] := "UnaryExpression";
__n86["operator"] := "!";
__n87 := {  };
__n87["type"] := "LogicalExpression";
__n87["operator"] := "&&";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "b";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := false;
__n89["raw"] := "false";
__n87["right"] := __n89;
__n86["argument"] := __n87;
__n86["prefix"] := true;
__n85["argument"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n82["block"] := __n83;
__n90 := {  };
__n90["type"] := "CatchClause";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "e";
__n90["param"] := __n91;
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "!==";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "e";
__n95["left"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := true;
__n97["raw"] := "true";
__n95["right"] := __n97;
__n94["test"] := __n95;
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "+";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#4: Exception === true(operaton &&). Actual:  Exception ===";
__n103["raw"] := "'#4: Exception === true(operaton &&). Actual:  Exception ==='";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "e";
__n102["right"] := __n104;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n94["consequent"] := __n98;
__n94["alternate"] := null;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n90["body"] := __n92;
__n82["handler"] := __n90;
__n82["finalizer"] := null;
__n1 := [ __n2, __n7, __n29, __n34, __n56, __n77, __n82 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n105 := [ "b" ];
__n0["variableDeclarations"] := __n105;
__n106 := [  ];
__n0["functionDeclarations"] := __n106;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}