function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "adding1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "TryStatement";
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ThrowStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "adding1";
__n13["callee"] := __n14;
__n15 := [  ];
__n13["arguments"] := __n15;
__n12["argument"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n9["block"] := __n10;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "+";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: Exception ===1. Actual:  Exception ===";
__n29["raw"] := "'#1: Exception ===1. Actual:  Exception ==='";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n28["right"] := __n30;
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n9["handler"] := __n16;
__n9["finalizer"] := null;
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "i";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 0.;
__n35["raw"] := "0";
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "adding2";
__n36["expression"] := __n37;
__n38 := {  };
__n38["type"] := "TryStatement";
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ThrowStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "adding2";
__n42["callee"] := __n43;
__n44 := [  ];
__n42["arguments"] := __n44;
__n41["argument"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n38["block"] := __n39;
__n45 := {  };
__n45["type"] := "CatchClause";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "e";
__n45["param"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n48 := [  ];
__n47["body"] := __n48;
__n45["body"] := __n47;
__n38["handler"] := __n45;
__n38["finalizer"] := null;
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "BinaryExpression";
__n50["operator"] := "!==";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "i";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1.;
__n52["raw"] := "1";
__n50["right"] := __n52;
__n49["test"] := __n50;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#2: i===1. Actual: i===";
__n58["raw"] := "'#2: i===1. Actual: i==='";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "i";
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n49["consequent"] := __n53;
__n49["alternate"] := null;
__n60 := {  };
__n60["type"] := "VariableDeclaration";
__n62 := {  };
__n62["type"] := "VariableDeclarator";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "i";
__n62["id"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n62["init"] := __n64;
__n61 := [ __n62 ];
__n60["declarations"] := __n61;
__n60["kind"] := "var";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "adding3";
__n65["expression"] := __n66;
__n67 := {  };
__n67["type"] := "TryStatement";
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ThrowStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "adding3";
__n71["callee"] := __n72;
__n73 := [  ];
__n71["arguments"] := __n73;
__n70["argument"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n67["block"] := __n68;
__n74 := {  };
__n74["type"] := "CatchClause";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "e";
__n74["param"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n77 := [  ];
__n76["body"] := __n77;
__n74["body"] := __n76;
__n67["handler"] := __n74;
__n67["finalizer"] := null;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!==";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "i";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 1.;
__n81["raw"] := "1";
__n79["right"] := __n81;
__n78["test"] := __n79;
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "+";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#3: i===1. Actual: i===";
__n87["raw"] := "'#3: i===1. Actual: i==='";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "i";
__n86["right"] := __n88;
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n78["consequent"] := __n82;
__n78["alternate"] := null;
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "adding4";
__n89["expression"] := __n90;
__n91 := {  };
__n91["type"] := "TryStatement";
__n92 := {  };
__n92["type"] := "BlockStatement";
__n94 := {  };
__n94["type"] := "ThrowStatement";
__n95 := {  };
__n95["type"] := "CallExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "adding4";
__n95["callee"] := __n96;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 1.;
__n98["raw"] := "1";
__n97 := [ __n98 ];
__n95["arguments"] := __n97;
__n94["argument"] := __n95;
__n93 := [ __n94 ];
__n92["body"] := __n93;
__n91["block"] := __n92;
__n99 := {  };
__n99["type"] := "CatchClause";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "e";
__n99["param"] := __n100;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "IfStatement";
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "!==";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "e";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 2.;
__n106["raw"] := "2";
__n104["right"] := __n106;
__n103["test"] := __n104;
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "$ERROR";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "+";
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "#4: Exception ===2. Actual:  Exception ===";
__n112["raw"] := "'#4: Exception ===2. Actual:  Exception ==='";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "e";
__n111["right"] := __n113;
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n107["expression"] := __n108;
__n103["consequent"] := __n107;
__n103["alternate"] := null;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n99["body"] := __n101;
__n91["handler"] := __n99;
__n91["finalizer"] := null;
__n1 := [ __n2, __n7, __n9, __n31, __n36, __n38, __n49, __n60, __n65, __n67, __n78, __n89, __n91 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n114 := [ "i" ];
__n0["variableDeclarations"] := __n114;
__n116 := {  };
__n116["type"] := "FunctionDeclaration";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "adding1";
__n116["id"] := __n117;
__n118 := [  ];
__n116["params"] := __n118;
__n119 := {  };
__n119["type"] := "BlockStatement";
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "UpdateExpression";
__n122["operator"] := "++";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "i";
__n122["argument"] := __n123;
__n122["prefix"] := false;
__n121["expression"] := __n122;
__n124 := {  };
__n124["type"] := "ReturnStatement";
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := 1.;
__n125["raw"] := "1";
__n124["argument"] := __n125;
__n120 := [ __n121, __n124 ];
__n119["body"] := __n120;
__n126 := [  ];
__n119["variableDeclarations"] := __n126;
__n127 := [  ];
__n119["functionDeclarations"] := __n127;
__n119["codeType"] := "function";
__n119["strict"] := false;
__n116["body"] := __n119;
__n116["generator"] := false;
__n116["async"] := false;
__n116["expression"] := false;
__n128 := {  };
__n128["type"] := "FunctionDeclaration";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "adding2";
__n128["id"] := __n129;
__n130 := [  ];
__n128["params"] := __n130;
__n131 := {  };
__n131["type"] := "BlockStatement";
__n133 := {  };
__n133["type"] := "ExpressionStatement";
__n134 := {  };
__n134["type"] := "UpdateExpression";
__n134["operator"] := "++";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "i";
__n134["argument"] := __n135;
__n134["prefix"] := false;
__n133["expression"] := __n134;
__n136 := {  };
__n136["type"] := "ReturnStatement";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "i";
__n136["argument"] := __n137;
__n132 := [ __n133, __n136 ];
__n131["body"] := __n132;
__n138 := [  ];
__n131["variableDeclarations"] := __n138;
__n139 := [  ];
__n131["functionDeclarations"] := __n139;
__n131["codeType"] := "function";
__n131["strict"] := false;
__n128["body"] := __n131;
__n128["generator"] := false;
__n128["async"] := false;
__n128["expression"] := false;
__n140 := {  };
__n140["type"] := "FunctionDeclaration";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "adding3";
__n140["id"] := __n141;
__n142 := [  ];
__n140["params"] := __n142;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "ExpressionStatement";
__n146 := {  };
__n146["type"] := "UpdateExpression";
__n146["operator"] := "++";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "i";
__n146["argument"] := __n147;
__n146["prefix"] := false;
__n145["expression"] := __n146;
__n144 := [ __n145 ];
__n143["body"] := __n144;
__n148 := [  ];
__n143["variableDeclarations"] := __n148;
__n149 := [  ];
__n143["functionDeclarations"] := __n149;
__n143["codeType"] := "function";
__n143["strict"] := false;
__n140["body"] := __n143;
__n140["generator"] := false;
__n140["async"] := false;
__n140["expression"] := false;
__n150 := {  };
__n150["type"] := "FunctionDeclaration";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "adding4";
__n150["id"] := __n151;
__n152 := [ "i" ];
__n150["params"] := __n152;
__n153 := {  };
__n153["type"] := "BlockStatement";
__n155 := {  };
__n155["type"] := "ExpressionStatement";
__n156 := {  };
__n156["type"] := "UpdateExpression";
__n156["operator"] := "++";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "i";
__n156["argument"] := __n157;
__n156["prefix"] := false;
__n155["expression"] := __n156;
__n158 := {  };
__n158["type"] := "ReturnStatement";
__n159 := {  };
__n159["type"] := "Identifier";
__n159["name"] := "i";
__n158["argument"] := __n159;
__n154 := [ __n155, __n158 ];
__n153["body"] := __n154;
__n160 := [  ];
__n153["variableDeclarations"] := __n160;
__n161 := [  ];
__n153["functionDeclarations"] := __n161;
__n153["codeType"] := "function";
__n153["strict"] := false;
__n150["body"] := __n153;
__n150["generator"] := false;
__n150["async"] := false;
__n150["expression"] := false;
__n115 := [ __n116, __n128, __n140, __n150 ];
__n0["functionDeclarations"] := __n115;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}