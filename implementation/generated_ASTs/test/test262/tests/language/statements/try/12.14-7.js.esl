function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "foo";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "catchAccessed";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := false;
__n15["raw"] := "false";
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n16 := {  };
__n16["type"] := "TryStatement";
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ThrowStatement";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "o";
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n16["block"] := __n17;
__n21 := {  };
__n21["type"] := "CatchClause";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "expObj";
__n21["param"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "catchAccessed";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "==";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "expObj";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "foo";
__n31["raw"] := "\"foo\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["left"] := __n29;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 1.;
__n32["raw"] := "1";
__n28["right"] := __n32;
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n21["body"] := __n23;
__n16["handler"] := __n21;
__n16["finalizer"] := null;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "catchAccessed";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "(expObj.foo == 1)";
__n38["raw"] := "'(expObj.foo == 1)'";
__n36 := [ __n37, __n38 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "catchAccessed";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := false;
__n42["raw"] := "false";
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n43 := {  };
__n43["type"] := "TryStatement";
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "expObj";
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n43["block"] := __n44;
__n48 := {  };
__n48["type"] := "CatchClause";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "e";
__n48["param"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "AssignmentExpression";
__n53["operator"] := "=";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "catchAccessed";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "instanceof";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "e";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "ReferenceError";
__n55["right"] := __n57;
__n53["right"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n48["body"] := __n50;
__n43["handler"] := __n48;
__n43["finalizer"] := null;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "assert";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "catchAccessed";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "e instanceof ReferenceError";
__n63["raw"] := "'e instanceof ReferenceError'";
__n61 := [ __n62, __n63 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n1 := [ __n2, __n11, __n16, __n33, __n39, __n43, __n58 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n64 := [ "o", "catchAccessed" ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}