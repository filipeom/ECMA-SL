function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "assert";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "sameValue";
__n8["raw"] := "\"sameValue\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "f";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n14 := [  ];
__n13["properties"] := __n14;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 42.;
__n15["raw"] := "42";
__n9 := [ __n10, __n15 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n16 := [  ];
__n0["variableDeclarations"] := __n16;
__n18 := {  };
__n18["type"] := "FunctionDeclaration";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "f";
__n18["id"] := __n19;
__n20 := [ "o" ];
__n18["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "VariableDeclaration";
__n25 := {  };
__n25["type"] := "VariableDeclarator";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n25["id"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 42.;
__n27["raw"] := "42";
__n25["init"] := __n27;
__n24 := [ __n25 ];
__n23["declarations"] := __n24;
__n23["kind"] := "var";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "innerf";
__n28["expression"] := __n29;
__n30 := {  };
__n30["type"] := "ReturnStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "innerf";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "o";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["argument"] := __n31;
__n22 := [ __n23, __n28, __n30 ];
__n21["body"] := __n22;
__n35 := [ "x" ];
__n21["variableDeclarations"] := __n35;
__n37 := {  };
__n37["type"] := "FunctionDeclaration";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "innerf";
__n37["id"] := __n38;
__n39 := [ "o" ];
__n37["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "TryStatement";
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ThrowStatement";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "o";
__n45["argument"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n42["block"] := __n43;
__n47 := {  };
__n47["type"] := "CatchClause";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "e";
__n47["param"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ReturnStatement";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n51["argument"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n47["body"] := __n49;
__n42["handler"] := __n47;
__n42["finalizer"] := null;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n53 := [  ];
__n40["variableDeclarations"] := __n53;
__n54 := [  ];
__n40["functionDeclarations"] := __n54;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n37["body"] := __n40;
__n37["generator"] := false;
__n37["expression"] := false;
__n37["async"] := false;
__n36 := [ __n37 ];
__n21["functionDeclarations"] := __n36;
__n21["codeType"] := "function";
__n21["strict"] := false;
__n18["body"] := __n21;
__n18["generator"] := false;
__n18["expression"] := false;
__n18["async"] := false;
__n17 := [ __n18 ];
__n0["functionDeclarations"] := __n17;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}