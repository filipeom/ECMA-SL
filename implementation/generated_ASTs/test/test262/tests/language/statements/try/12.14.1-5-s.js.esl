function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isInstance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ThrowStatement";
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Error";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "...";
__n14["raw"] := "\"...\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["argument"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n15 := {  };
__n15["type"] := "CatchClause";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Arguments";
__n15["param"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "isInstance";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "instanceof";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Arguments";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Error";
__n22["right"] := __n24;
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n15["body"] := __n17;
__n7["handler"] := __n15;
__n7["finalizer"] := null;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "assert";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "isInstance";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n1 := [ __n2, __n7, __n25 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n30 := [ "isInstance" ];
__n0["variableDeclarations"] := __n30;
__n31 := [  ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}