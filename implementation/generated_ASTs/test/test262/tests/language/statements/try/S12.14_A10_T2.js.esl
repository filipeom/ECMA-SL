function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "fin";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n7["init"] := __n9;
__n3 := [ __n4, __n7 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "WhileStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "<";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "c1";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n11["right"] := __n13;
__n10["test"] := __n11;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "TryStatement";
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "+=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "c1";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n23 := {  };
__n23["type"] := "ContinueStatement";
__n23["label"] := null;
__n18 := [ __n19, __n23 ];
__n17["body"] := __n18;
__n16["block"] := __n17;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "er1";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n27 := [  ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n16["handler"] := __n24;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "fin";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n16["finalizer"] := __n28;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "fin";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "-";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n15 := [ __n16, __n34 ];
__n14["body"] := __n15;
__n10["body"] := __n14;
__n39 := {  };
__n39["type"] := "EmptyStatement";
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "fin";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 1.;
__n43["raw"] := "1";
__n41["right"] := __n43;
__n40["test"] := __n41;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#1: \"finally\" block must be evaluated at \"try{continue} catch finally\" construction";
__n50["raw"] := "'#1: \"finally\" block must be evaluated at \"try{continue} catch finally\" construction'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n40["consequent"] := __n44;
__n40["alternate"] := null;
__n51 := {  };
__n51["type"] := "VariableDeclaration";
__n53 := {  };
__n53["type"] := "VariableDeclarator";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "c2";
__n53["id"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 0.;
__n55["raw"] := "0";
__n53["init"] := __n55;
__n56 := {  };
__n56["type"] := "VariableDeclarator";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "fin2";
__n56["id"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n56["init"] := __n58;
__n52 := [ __n53, __n56 ];
__n51["declarations"] := __n52;
__n51["kind"] := "var";
__n59 := {  };
__n59["type"] := "WhileStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "<";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "c2";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 2.;
__n62["raw"] := "2";
__n60["right"] := __n62;
__n59["test"] := __n60;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "TryStatement";
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ThrowStatement";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "ex1";
__n69["raw"] := "\"ex1\"";
__n68["argument"] := __n69;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n65["block"] := __n66;
__n70 := {  };
__n70["type"] := "CatchClause";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "er1";
__n70["param"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "AssignmentExpression";
__n75["operator"] := "+=";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "c2";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n75["right"] := __n77;
__n74["expression"] := __n75;
__n78 := {  };
__n78["type"] := "ContinueStatement";
__n78["label"] := null;
__n73 := [ __n74, __n78 ];
__n72["body"] := __n73;
__n70["body"] := __n72;
__n65["handler"] := __n70;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "AssignmentExpression";
__n82["operator"] := "=";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "fin2";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n82["right"] := __n84;
__n81["expression"] := __n82;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n65["finalizer"] := __n79;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "AssignmentExpression";
__n86["operator"] := "=";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "fin2";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "-";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 1.;
__n89["raw"] := "1";
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n86["right"] := __n88;
__n85["expression"] := __n86;
__n64 := [ __n65, __n85 ];
__n63["body"] := __n64;
__n59["body"] := __n63;
__n90 := {  };
__n90["type"] := "IfStatement";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "!==";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "fin2";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 1.;
__n93["raw"] := "1";
__n91["right"] := __n93;
__n90["test"] := __n91;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "$ERROR";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#2: \"finally\" block must be evaluated at \"try catch{continue} finally\" construction";
__n100["raw"] := "'#2: \"finally\" block must be evaluated at \"try catch{continue} finally\" construction'";
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["expression"] := __n97;
__n95 := [ __n96 ];
__n94["body"] := __n95;
__n90["consequent"] := __n94;
__n90["alternate"] := null;
__n101 := {  };
__n101["type"] := "VariableDeclaration";
__n103 := {  };
__n103["type"] := "VariableDeclarator";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "c3";
__n103["id"] := __n104;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := 0.;
__n105["raw"] := "0";
__n103["init"] := __n105;
__n106 := {  };
__n106["type"] := "VariableDeclarator";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "fin3";
__n106["id"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := 0.;
__n108["raw"] := "0";
__n106["init"] := __n108;
__n102 := [ __n103, __n106 ];
__n101["declarations"] := __n102;
__n101["kind"] := "var";
__n109 := {  };
__n109["type"] := "WhileStatement";
__n110 := {  };
__n110["type"] := "BinaryExpression";
__n110["operator"] := "<";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "c3";
__n110["left"] := __n111;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 2.;
__n112["raw"] := "2";
__n110["right"] := __n112;
__n109["test"] := __n110;
__n113 := {  };
__n113["type"] := "BlockStatement";
__n115 := {  };
__n115["type"] := "TryStatement";
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "ThrowStatement";
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "ex1";
__n119["raw"] := "\"ex1\"";
__n118["argument"] := __n119;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n115["block"] := __n116;
__n120 := {  };
__n120["type"] := "CatchClause";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "er1";
__n120["param"] := __n121;
__n122 := {  };
__n122["type"] := "BlockStatement";
__n124 := {  };
__n124["type"] := "ExpressionStatement";
__n125 := {  };
__n125["type"] := "AssignmentExpression";
__n125["operator"] := "+=";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "c3";
__n125["left"] := __n126;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := 1.;
__n127["raw"] := "1";
__n125["right"] := __n127;
__n124["expression"] := __n125;
__n123 := [ __n124 ];
__n122["body"] := __n123;
__n120["body"] := __n122;
__n115["handler"] := __n120;
__n128 := {  };
__n128["type"] := "BlockStatement";
__n130 := {  };
__n130["type"] := "ExpressionStatement";
__n131 := {  };
__n131["type"] := "AssignmentExpression";
__n131["operator"] := "=";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "fin3";
__n131["left"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := 1.;
__n133["raw"] := "1";
__n131["right"] := __n133;
__n130["expression"] := __n131;
__n134 := {  };
__n134["type"] := "ContinueStatement";
__n134["label"] := null;
__n129 := [ __n130, __n134 ];
__n128["body"] := __n129;
__n115["finalizer"] := __n128;
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "AssignmentExpression";
__n136["operator"] := "=";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "fin3";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := 0.;
__n138["raw"] := "0";
__n136["right"] := __n138;
__n135["expression"] := __n136;
__n114 := [ __n115, __n135 ];
__n113["body"] := __n114;
__n109["body"] := __n113;
__n139 := {  };
__n139["type"] := "IfStatement";
__n140 := {  };
__n140["type"] := "BinaryExpression";
__n140["operator"] := "!==";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "fin3";
__n140["left"] := __n141;
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := 1.;
__n142["raw"] := "1";
__n140["right"] := __n142;
__n139["test"] := __n140;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "ExpressionStatement";
__n146 := {  };
__n146["type"] := "CallExpression";
__n147 := {  };
__n147["type"] := "Identifier";
__n147["name"] := "$ERROR";
__n146["callee"] := __n147;
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "#3: \"finally\" block must be evaluated at \"try catch finally{continue}\" construction";
__n149["raw"] := "'#3: \"finally\" block must be evaluated at \"try catch finally{continue}\" construction'";
__n148 := [ __n149 ];
__n146["arguments"] := __n148;
__n145["expression"] := __n146;
__n144 := [ __n145 ];
__n143["body"] := __n144;
__n139["consequent"] := __n143;
__n139["alternate"] := null;
__n150 := {  };
__n150["type"] := "VariableDeclaration";
__n152 := {  };
__n152["type"] := "VariableDeclarator";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "c4";
__n152["id"] := __n153;
__n154 := {  };
__n154["type"] := "Literal";
__n154["value"] := 0.;
__n154["raw"] := "0";
__n152["init"] := __n154;
__n155 := {  };
__n155["type"] := "VariableDeclarator";
__n156 := {  };
__n156["type"] := "Identifier";
__n156["name"] := "fin4";
__n155["id"] := __n156;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := 0.;
__n157["raw"] := "0";
__n155["init"] := __n157;
__n151 := [ __n152, __n155 ];
__n150["declarations"] := __n151;
__n150["kind"] := "var";
__n158 := {  };
__n158["type"] := "WhileStatement";
__n159 := {  };
__n159["type"] := "BinaryExpression";
__n159["operator"] := "<";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "c4";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := 2.;
__n161["raw"] := "2";
__n159["right"] := __n161;
__n158["test"] := __n159;
__n162 := {  };
__n162["type"] := "BlockStatement";
__n164 := {  };
__n164["type"] := "TryStatement";
__n165 := {  };
__n165["type"] := "BlockStatement";
__n167 := {  };
__n167["type"] := "ExpressionStatement";
__n168 := {  };
__n168["type"] := "AssignmentExpression";
__n168["operator"] := "+=";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "c4";
__n168["left"] := __n169;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := 1.;
__n170["raw"] := "1";
__n168["right"] := __n170;
__n167["expression"] := __n168;
__n171 := {  };
__n171["type"] := "ContinueStatement";
__n171["label"] := null;
__n166 := [ __n167, __n171 ];
__n165["body"] := __n166;
__n164["block"] := __n165;
__n164["handler"] := null;
__n172 := {  };
__n172["type"] := "BlockStatement";
__n174 := {  };
__n174["type"] := "ExpressionStatement";
__n175 := {  };
__n175["type"] := "AssignmentExpression";
__n175["operator"] := "=";
__n176 := {  };
__n176["type"] := "Identifier";
__n176["name"] := "fin4";
__n175["left"] := __n176;
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := 1.;
__n177["raw"] := "1";
__n175["right"] := __n177;
__n174["expression"] := __n175;
__n173 := [ __n174 ];
__n172["body"] := __n173;
__n164["finalizer"] := __n172;
__n178 := {  };
__n178["type"] := "ExpressionStatement";
__n179 := {  };
__n179["type"] := "AssignmentExpression";
__n179["operator"] := "=";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "fin4";
__n179["left"] := __n180;
__n181 := {  };
__n181["type"] := "UnaryExpression";
__n181["operator"] := "-";
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := 1.;
__n182["raw"] := "1";
__n181["argument"] := __n182;
__n181["prefix"] := true;
__n179["right"] := __n181;
__n178["expression"] := __n179;
__n163 := [ __n164, __n178 ];
__n162["body"] := __n163;
__n158["body"] := __n162;
__n183 := {  };
__n183["type"] := "EmptyStatement";
__n184 := {  };
__n184["type"] := "IfStatement";
__n185 := {  };
__n185["type"] := "BinaryExpression";
__n185["operator"] := "!==";
__n186 := {  };
__n186["type"] := "Identifier";
__n186["name"] := "fin4";
__n185["left"] := __n186;
__n187 := {  };
__n187["type"] := "Literal";
__n187["value"] := 1.;
__n187["raw"] := "1";
__n185["right"] := __n187;
__n184["test"] := __n185;
__n188 := {  };
__n188["type"] := "BlockStatement";
__n190 := {  };
__n190["type"] := "ExpressionStatement";
__n191 := {  };
__n191["type"] := "CallExpression";
__n192 := {  };
__n192["type"] := "Identifier";
__n192["name"] := "$ERROR";
__n191["callee"] := __n192;
__n194 := {  };
__n194["type"] := "Literal";
__n194["value"] := "#4: \"finally\" block must be evaluated at \"try{continue} finally\" construction";
__n194["raw"] := "'#4: \"finally\" block must be evaluated at \"try{continue} finally\" construction'";
__n193 := [ __n194 ];
__n191["arguments"] := __n193;
__n190["expression"] := __n191;
__n189 := [ __n190 ];
__n188["body"] := __n189;
__n184["consequent"] := __n188;
__n184["alternate"] := null;
__n195 := {  };
__n195["type"] := "VariableDeclaration";
__n197 := {  };
__n197["type"] := "VariableDeclarator";
__n198 := {  };
__n198["type"] := "Identifier";
__n198["name"] := "c5";
__n197["id"] := __n198;
__n199 := {  };
__n199["type"] := "Literal";
__n199["value"] := 0.;
__n199["raw"] := "0";
__n197["init"] := __n199;
__n196 := [ __n197 ];
__n195["declarations"] := __n196;
__n195["kind"] := "var";
__n200 := {  };
__n200["type"] := "WhileStatement";
__n201 := {  };
__n201["type"] := "BinaryExpression";
__n201["operator"] := "<";
__n202 := {  };
__n202["type"] := "Identifier";
__n202["name"] := "c5";
__n201["left"] := __n202;
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := 2.;
__n203["raw"] := "2";
__n201["right"] := __n203;
__n200["test"] := __n201;
__n204 := {  };
__n204["type"] := "BlockStatement";
__n206 := {  };
__n206["type"] := "TryStatement";
__n207 := {  };
__n207["type"] := "BlockStatement";
__n209 := {  };
__n209["type"] := "ThrowStatement";
__n210 := {  };
__n210["type"] := "Literal";
__n210["value"] := "ex1";
__n210["raw"] := "\"ex1\"";
__n209["argument"] := __n210;
__n208 := [ __n209 ];
__n207["body"] := __n208;
__n206["block"] := __n207;
__n211 := {  };
__n211["type"] := "CatchClause";
__n212 := {  };
__n212["type"] := "Identifier";
__n212["name"] := "er1";
__n211["param"] := __n212;
__n213 := {  };
__n213["type"] := "BlockStatement";
__n215 := {  };
__n215["type"] := "ExpressionStatement";
__n216 := {  };
__n216["type"] := "AssignmentExpression";
__n216["operator"] := "+=";
__n217 := {  };
__n217["type"] := "Identifier";
__n217["name"] := "c5";
__n216["left"] := __n217;
__n218 := {  };
__n218["type"] := "Literal";
__n218["value"] := 1.;
__n218["raw"] := "1";
__n216["right"] := __n218;
__n215["expression"] := __n216;
__n219 := {  };
__n219["type"] := "ContinueStatement";
__n219["label"] := null;
__n214 := [ __n215, __n219 ];
__n213["body"] := __n214;
__n211["body"] := __n213;
__n206["handler"] := __n211;
__n206["finalizer"] := null;
__n205 := [ __n206 ];
__n204["body"] := __n205;
__n200["body"] := __n204;
__n220 := {  };
__n220["type"] := "IfStatement";
__n221 := {  };
__n221["type"] := "BinaryExpression";
__n221["operator"] := "!==";
__n222 := {  };
__n222["type"] := "Identifier";
__n222["name"] := "c5";
__n221["left"] := __n222;
__n223 := {  };
__n223["type"] := "Literal";
__n223["value"] := 2.;
__n223["raw"] := "2";
__n221["right"] := __n223;
__n220["test"] := __n221;
__n224 := {  };
__n224["type"] := "BlockStatement";
__n226 := {  };
__n226["type"] := "ExpressionStatement";
__n227 := {  };
__n227["type"] := "CallExpression";
__n228 := {  };
__n228["type"] := "Identifier";
__n228["name"] := "$ERROR";
__n227["callee"] := __n228;
__n230 := {  };
__n230["type"] := "Literal";
__n230["value"] := "#5: \"try catch{continue}\" must work correctly";
__n230["raw"] := "'#5: \"try catch{continue}\" must work correctly'";
__n229 := [ __n230 ];
__n227["arguments"] := __n229;
__n226["expression"] := __n227;
__n225 := [ __n226 ];
__n224["body"] := __n225;
__n220["consequent"] := __n224;
__n220["alternate"] := null;
__n231 := {  };
__n231["type"] := "VariableDeclaration";
__n233 := {  };
__n233["type"] := "VariableDeclarator";
__n234 := {  };
__n234["type"] := "Identifier";
__n234["name"] := "c6";
__n233["id"] := __n234;
__n235 := {  };
__n235["type"] := "Literal";
__n235["value"] := 0.;
__n235["raw"] := "0";
__n233["init"] := __n235;
__n236 := {  };
__n236["type"] := "VariableDeclarator";
__n237 := {  };
__n237["type"] := "Identifier";
__n237["name"] := "fin6";
__n236["id"] := __n237;
__n238 := {  };
__n238["type"] := "Literal";
__n238["value"] := 0.;
__n238["raw"] := "0";
__n236["init"] := __n238;
__n232 := [ __n233, __n236 ];
__n231["declarations"] := __n232;
__n231["kind"] := "var";
__n239 := {  };
__n239["type"] := "WhileStatement";
__n240 := {  };
__n240["type"] := "BinaryExpression";
__n240["operator"] := "<";
__n241 := {  };
__n241["type"] := "Identifier";
__n241["name"] := "c6";
__n240["left"] := __n241;
__n242 := {  };
__n242["type"] := "Literal";
__n242["value"] := 2.;
__n242["raw"] := "2";
__n240["right"] := __n242;
__n239["test"] := __n240;
__n243 := {  };
__n243["type"] := "BlockStatement";
__n245 := {  };
__n245["type"] := "TryStatement";
__n246 := {  };
__n246["type"] := "BlockStatement";
__n248 := {  };
__n248["type"] := "ExpressionStatement";
__n249 := {  };
__n249["type"] := "AssignmentExpression";
__n249["operator"] := "+=";
__n250 := {  };
__n250["type"] := "Identifier";
__n250["name"] := "c6";
__n249["left"] := __n250;
__n251 := {  };
__n251["type"] := "Literal";
__n251["value"] := 1.;
__n251["raw"] := "1";
__n249["right"] := __n251;
__n248["expression"] := __n249;
__n252 := {  };
__n252["type"] := "ThrowStatement";
__n253 := {  };
__n253["type"] := "Literal";
__n253["value"] := "ex1";
__n253["raw"] := "\"ex1\"";
__n252["argument"] := __n253;
__n247 := [ __n248, __n252 ];
__n246["body"] := __n247;
__n245["block"] := __n246;
__n245["handler"] := null;
__n254 := {  };
__n254["type"] := "BlockStatement";
__n256 := {  };
__n256["type"] := "ExpressionStatement";
__n257 := {  };
__n257["type"] := "AssignmentExpression";
__n257["operator"] := "=";
__n258 := {  };
__n258["type"] := "Identifier";
__n258["name"] := "fin6";
__n257["left"] := __n258;
__n259 := {  };
__n259["type"] := "Literal";
__n259["value"] := 1.;
__n259["raw"] := "1";
__n257["right"] := __n259;
__n256["expression"] := __n257;
__n260 := {  };
__n260["type"] := "ContinueStatement";
__n260["label"] := null;
__n255 := [ __n256, __n260 ];
__n254["body"] := __n255;
__n245["finalizer"] := __n254;
__n261 := {  };
__n261["type"] := "ExpressionStatement";
__n262 := {  };
__n262["type"] := "AssignmentExpression";
__n262["operator"] := "=";
__n263 := {  };
__n263["type"] := "Identifier";
__n263["name"] := "fin6";
__n262["left"] := __n263;
__n264 := {  };
__n264["type"] := "UnaryExpression";
__n264["operator"] := "-";
__n265 := {  };
__n265["type"] := "Literal";
__n265["value"] := 1.;
__n265["raw"] := "1";
__n264["argument"] := __n265;
__n264["prefix"] := true;
__n262["right"] := __n264;
__n261["expression"] := __n262;
__n244 := [ __n245, __n261 ];
__n243["body"] := __n244;
__n239["body"] := __n243;
__n266 := {  };
__n266["type"] := "IfStatement";
__n267 := {  };
__n267["type"] := "BinaryExpression";
__n267["operator"] := "!==";
__n268 := {  };
__n268["type"] := "Identifier";
__n268["name"] := "fin6";
__n267["left"] := __n268;
__n269 := {  };
__n269["type"] := "Literal";
__n269["value"] := 1.;
__n269["raw"] := "1";
__n267["right"] := __n269;
__n266["test"] := __n267;
__n270 := {  };
__n270["type"] := "BlockStatement";
__n272 := {  };
__n272["type"] := "ExpressionStatement";
__n273 := {  };
__n273["type"] := "CallExpression";
__n274 := {  };
__n274["type"] := "Identifier";
__n274["name"] := "$ERROR";
__n273["callee"] := __n274;
__n276 := {  };
__n276["type"] := "Literal";
__n276["value"] := "#6.1: \"finally\" block must be evaluated";
__n276["raw"] := "'#6.1: \"finally\" block must be evaluated'";
__n275 := [ __n276 ];
__n273["arguments"] := __n275;
__n272["expression"] := __n273;
__n271 := [ __n272 ];
__n270["body"] := __n271;
__n266["consequent"] := __n270;
__n266["alternate"] := null;
__n277 := {  };
__n277["type"] := "IfStatement";
__n278 := {  };
__n278["type"] := "BinaryExpression";
__n278["operator"] := "!==";
__n279 := {  };
__n279["type"] := "Identifier";
__n279["name"] := "c6";
__n278["left"] := __n279;
__n280 := {  };
__n280["type"] := "Literal";
__n280["value"] := 2.;
__n280["raw"] := "2";
__n278["right"] := __n280;
__n277["test"] := __n278;
__n281 := {  };
__n281["type"] := "BlockStatement";
__n283 := {  };
__n283["type"] := "ExpressionStatement";
__n284 := {  };
__n284["type"] := "CallExpression";
__n285 := {  };
__n285["type"] := "Identifier";
__n285["name"] := "$ERROR";
__n284["callee"] := __n285;
__n287 := {  };
__n287["type"] := "Literal";
__n287["value"] := "#6.2: \"try finally{continue}\" must work correctly";
__n287["raw"] := "'#6.2: \"try finally{continue}\" must work correctly'";
__n286 := [ __n287 ];
__n284["arguments"] := __n286;
__n283["expression"] := __n284;
__n282 := [ __n283 ];
__n281["body"] := __n282;
__n277["consequent"] := __n281;
__n277["alternate"] := null;
__n1 := [ __n2, __n10, __n39, __n40, __n51, __n59, __n90, __n101, __n109, __n139, __n150, __n158, __n183, __n184, __n195, __n200, __n220, __n231, __n239, __n266, __n277 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n288 := [ "c1", "fin", "c2", "fin2", "c3", "fin3", "c4", "fin4", "c5", "c6", "fin6" ];
__n0["variableDeclarations"] := __n288;
__n289 := [  ];
__n0["functionDeclarations"] := __n289;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}