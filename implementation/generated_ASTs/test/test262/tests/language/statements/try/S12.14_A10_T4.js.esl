function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "fin";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n7["init"] := __n9;
__n3 := [ __n4, __n7 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "WhileStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "<";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "c1";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 2.;
__n13["raw"] := "2";
__n11["right"] := __n13;
__n10["test"] := __n11;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "TryStatement";
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "AssignmentExpression";
__n20["operator"] := "+=";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "c1";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 1.;
__n22["raw"] := "1";
__n20["right"] := __n22;
__n19["expression"] := __n20;
__n23 := {  };
__n23["type"] := "BreakStatement";
__n23["label"] := null;
__n18 := [ __n19, __n23 ];
__n17["body"] := __n18;
__n16["block"] := __n17;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "er1";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n27 := [  ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n16["handler"] := __n24;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "AssignmentExpression";
__n31["operator"] := "=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "fin";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n31["right"] := __n33;
__n30["expression"] := __n31;
__n34 := {  };
__n34["type"] := "ContinueStatement";
__n34["label"] := null;
__n29 := [ __n30, __n34 ];
__n28["body"] := __n29;
__n16["finalizer"] := __n28;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "AssignmentExpression";
__n36["operator"] := "=";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "fin";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "-";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 1.;
__n39["raw"] := "1";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n36["right"] := __n38;
__n35["expression"] := __n36;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "+=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "c1";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 2.;
__n43["raw"] := "2";
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n15 := [ __n16, __n35, __n40 ];
__n14["body"] := __n15;
__n10["body"] := __n14;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "fin";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n45["right"] := __n47;
__n44["test"] := __n45;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#1.1: \"finally\" block must be evaluated";
__n54["raw"] := "'#1.1: \"finally\" block must be evaluated'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n44["consequent"] := __n48;
__n44["alternate"] := null;
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "c1";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 2.;
__n58["raw"] := "2";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#1.2: \"try{break} catch finally{continue}\" must work correctly";
__n65["raw"] := "'#1.2: \"try{break} catch finally{continue}\" must work correctly'";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n66 := {  };
__n66["type"] := "VariableDeclaration";
__n68 := {  };
__n68["type"] := "VariableDeclarator";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "c2";
__n68["id"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 0.;
__n70["raw"] := "0";
__n68["init"] := __n70;
__n71 := {  };
__n71["type"] := "VariableDeclarator";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "fin2";
__n71["id"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n71["init"] := __n73;
__n67 := [ __n68, __n71 ];
__n66["declarations"] := __n67;
__n66["kind"] := "var";
__n74 := {  };
__n74["type"] := "WhileStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "<";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "c2";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 2.;
__n77["raw"] := "2";
__n75["right"] := __n77;
__n74["test"] := __n75;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "TryStatement";
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ThrowStatement";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "ex1";
__n84["raw"] := "\"ex1\"";
__n83["argument"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n80["block"] := __n81;
__n85 := {  };
__n85["type"] := "CatchClause";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "er1";
__n85["param"] := __n86;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "AssignmentExpression";
__n90["operator"] := "+=";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "c2";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := 1.;
__n92["raw"] := "1";
__n90["right"] := __n92;
__n89["expression"] := __n90;
__n93 := {  };
__n93["type"] := "BreakStatement";
__n93["label"] := null;
__n88 := [ __n89, __n93 ];
__n87["body"] := __n88;
__n85["body"] := __n87;
__n80["handler"] := __n85;
__n94 := {  };
__n94["type"] := "BlockStatement";
__n96 := {  };
__n96["type"] := "ExpressionStatement";
__n97 := {  };
__n97["type"] := "AssignmentExpression";
__n97["operator"] := "=";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "fin2";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 1.;
__n99["raw"] := "1";
__n97["right"] := __n99;
__n96["expression"] := __n97;
__n100 := {  };
__n100["type"] := "ContinueStatement";
__n100["label"] := null;
__n95 := [ __n96, __n100 ];
__n94["body"] := __n95;
__n80["finalizer"] := __n94;
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "AssignmentExpression";
__n102["operator"] := "+=";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "c2";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := 2.;
__n104["raw"] := "2";
__n102["right"] := __n104;
__n101["expression"] := __n102;
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "AssignmentExpression";
__n106["operator"] := "=";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "fin2";
__n106["left"] := __n107;
__n108 := {  };
__n108["type"] := "UnaryExpression";
__n108["operator"] := "-";
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := 1.;
__n109["raw"] := "1";
__n108["argument"] := __n109;
__n108["prefix"] := true;
__n106["right"] := __n108;
__n105["expression"] := __n106;
__n79 := [ __n80, __n101, __n105 ];
__n78["body"] := __n79;
__n74["body"] := __n78;
__n110 := {  };
__n110["type"] := "IfStatement";
__n111 := {  };
__n111["type"] := "BinaryExpression";
__n111["operator"] := "!==";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "fin2";
__n111["left"] := __n112;
__n113 := {  };
__n113["type"] := "Literal";
__n113["value"] := 1.;
__n113["raw"] := "1";
__n111["right"] := __n113;
__n110["test"] := __n111;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "$ERROR";
__n117["callee"] := __n118;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "#2.1: \"finally\" block must be evaluated";
__n120["raw"] := "'#2.1: \"finally\" block must be evaluated'";
__n119 := [ __n120 ];
__n117["arguments"] := __n119;
__n116["expression"] := __n117;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n110["consequent"] := __n114;
__n110["alternate"] := null;
__n121 := {  };
__n121["type"] := "IfStatement";
__n122 := {  };
__n122["type"] := "BinaryExpression";
__n122["operator"] := "!==";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "c2";
__n122["left"] := __n123;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 2.;
__n124["raw"] := "2";
__n122["right"] := __n124;
__n121["test"] := __n122;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ExpressionStatement";
__n128 := {  };
__n128["type"] := "CallExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "$ERROR";
__n128["callee"] := __n129;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "#2.2: \"try catch{break} finally{continue} must work correctly";
__n131["raw"] := "'#2.2: \"try catch{break} finally{continue} must work correctly'";
__n130 := [ __n131 ];
__n128["arguments"] := __n130;
__n127["expression"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n121["consequent"] := __n125;
__n121["alternate"] := null;
__n1 := [ __n2, __n10, __n44, __n55, __n66, __n74, __n110, __n121 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n132 := [ "c1", "fin", "c2", "fin2" ];
__n0["variableDeclarations"] := __n132;
__n133 := [  ];
__n0["functionDeclarations"] := __n133;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}