function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "i";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n7["init"] := __n9;
__n3 := [ __n4, __n7 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "fin";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n15 := {  };
__n15["type"] := "WhileStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "<";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "i";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 10.;
__n18["raw"] := "10";
__n16["right"] := __n18;
__n15["test"] := __n16;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "AssignmentExpression";
__n22["operator"] := "+=";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n22["right"] := __n24;
__n21["expression"] := __n22;
__n25 := {  };
__n25["type"] := "TryStatement";
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "===";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "c";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 0.;
__n31["raw"] := "0";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ThrowStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "ex1";
__n35["raw"] := "\"ex1\"";
__n34["argument"] := __n35;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#1.1: throw \"ex1\" lead to throwing exception";
__n40["raw"] := "'#1.1: throw \"ex1\" lead to throwing exception'";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n33 := [ __n34, __n36 ];
__n32["body"] := __n33;
__n28["consequent"] := __n32;
__n28["alternate"] := null;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "AssignmentExpression";
__n42["operator"] := "+=";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "c";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 2.;
__n44["raw"] := "2";
__n42["right"] := __n44;
__n41["expression"] := __n42;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "===";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "c";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 1.;
__n48["raw"] := "1";
__n46["right"] := __n48;
__n45["test"] := __n46;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ThrowStatement";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "ex2";
__n52["raw"] := "\"ex2\"";
__n51["argument"] := __n52;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#1.2: throw \"ex2\" lead to throwing exception";
__n57["raw"] := "'#1.2: throw \"ex2\" lead to throwing exception'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n50 := [ __n51, __n53 ];
__n49["body"] := __n50;
__n45["consequent"] := __n49;
__n45["alternate"] := null;
__n27 := [ __n28, __n41, __n45 ];
__n26["body"] := __n27;
__n25["block"] := __n26;
__n58 := {  };
__n58["type"] := "CatchClause";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "er1";
__n58["param"] := __n59;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "AssignmentExpression";
__n63["operator"] := "-=";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "c";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n63["right"] := __n65;
__n62["expression"] := __n63;
__n66 := {  };
__n66["type"] := "ContinueStatement";
__n66["label"] := null;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#1.3: \"try catch{continue} finally\" must work correctly";
__n71["raw"] := "'#1.3: \"try catch{continue} finally\" must work correctly'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n61 := [ __n62, __n66, __n67 ];
__n60["body"] := __n61;
__n58["body"] := __n60;
__n25["handler"] := __n58;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "AssignmentExpression";
__n75["operator"] := "+=";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "fin";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n75["right"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n25["finalizer"] := __n72;
__n20 := [ __n21, __n25 ];
__n19["body"] := __n20;
__n15["body"] := __n19;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!==";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "fin";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 10.;
__n81["raw"] := "10";
__n79["right"] := __n81;
__n78["test"] := __n79;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#1.4: \"finally\" block must be evaluated";
__n88["raw"] := "'#1.4: \"finally\" block must be evaluated'";
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n78["consequent"] := __n82;
__n78["alternate"] := null;
__n1 := [ __n2, __n10, __n15, __n78 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n89 := [ "c", "i", "fin" ];
__n0["variableDeclarations"] := __n89;
__n90 := [  ];
__n0["functionDeclarations"] := __n90;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}