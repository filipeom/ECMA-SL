function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ForStatement";
__n6 := {  };
__n6["type"] := "VariableDeclaration";
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "i";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n8["init"] := __n10;
__n7 := [ __n8 ];
__n6["declarations"] := __n7;
__n6["kind"] := "var";
__n5["init"] := __n6;
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "<";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "i";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 10.;
__n13["raw"] := "10";
__n11["right"] := __n13;
__n5["test"] := __n11;
__n14 := {  };
__n14["type"] := "UpdateExpression";
__n14["operator"] := "++";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "i";
__n14["argument"] := __n15;
__n14["prefix"] := false;
__n5["update"] := __n14;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "===";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "i";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 5.;
__n21["raw"] := "5";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "ThrowStatement";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["argument"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n5["body"] := __n16;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 5.;
__n31["raw"] := "5";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1: Exception === 5. Actual:  Exception ===";
__n37["raw"] := "'#1: Exception === 5. Actual:  Exception ==='";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "e";
__n36["right"] := __n38;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n28["consequent"] := __n32;
__n28["alternate"] := null;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n2["handler"] := __n24;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [ "i" ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}