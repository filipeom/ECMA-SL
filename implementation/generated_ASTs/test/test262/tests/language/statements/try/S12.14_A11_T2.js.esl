function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "fin";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ForStatement";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 0.;
__n12["raw"] := "0";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n7["init"] := __n8;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "<";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "i";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 5.;
__n15["raw"] := "5";
__n13["right"] := __n15;
__n7["test"] := __n13;
__n16 := {  };
__n16["type"] := "UpdateExpression";
__n16["operator"] := "++";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "i";
__n16["argument"] := __n17;
__n16["prefix"] := false;
__n7["update"] := __n16;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "TryStatement";
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "+=";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "i";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n24["right"] := __n26;
__n23["expression"] := __n24;
__n27 := {  };
__n27["type"] := "ContinueStatement";
__n27["label"] := null;
__n22 := [ __n23, __n27 ];
__n21["body"] := __n22;
__n20["block"] := __n21;
__n28 := {  };
__n28["type"] := "CatchClause";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "er1";
__n28["param"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n31 := [  ];
__n30["body"] := __n31;
__n28["body"] := __n30;
__n20["handler"] := __n28;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "fin";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n20["finalizer"] := __n32;
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "AssignmentExpression";
__n39["operator"] := "=";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "fin";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "-";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 1.;
__n42["raw"] := "1";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n39["right"] := __n41;
__n38["expression"] := __n39;
__n19 := [ __n20, __n38 ];
__n18["body"] := __n19;
__n7["body"] := __n18;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "fin";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 1.;
__n46["raw"] := "1";
__n44["right"] := __n46;
__n43["test"] := __n44;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#1: \"finally\" block must be evaluated at \"try{continue} catch finally\" construction";
__n53["raw"] := "'#1: \"finally\" block must be evaluated at \"try{continue} catch finally\" construction'";
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n43["consequent"] := __n47;
__n43["alternate"] := null;
__n54 := {  };
__n54["type"] := "VariableDeclaration";
__n56 := {  };
__n56["type"] := "VariableDeclarator";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "c2";
__n56["id"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n56["init"] := __n58;
__n59 := {  };
__n59["type"] := "VariableDeclarator";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "fin2";
__n59["id"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 0.;
__n61["raw"] := "0";
__n59["init"] := __n61;
__n55 := [ __n56, __n59 ];
__n54["declarations"] := __n55;
__n54["kind"] := "var";
__n62 := {  };
__n62["type"] := "ForStatement";
__n63 := {  };
__n63["type"] := "VariableDeclaration";
__n65 := {  };
__n65["type"] := "VariableDeclarator";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "i";
__n65["id"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n65["init"] := __n67;
__n64 := [ __n65 ];
__n63["declarations"] := __n64;
__n63["kind"] := "var";
__n62["init"] := __n63;
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "<";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "i";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 5.;
__n70["raw"] := "5";
__n68["right"] := __n70;
__n62["test"] := __n68;
__n71 := {  };
__n71["type"] := "UpdateExpression";
__n71["operator"] := "++";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "i";
__n71["argument"] := __n72;
__n71["prefix"] := false;
__n62["update"] := __n71;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "TryStatement";
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ThrowStatement";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "ex1";
__n79["raw"] := "\"ex1\"";
__n78["argument"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n75["block"] := __n76;
__n80 := {  };
__n80["type"] := "CatchClause";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "er1";
__n80["param"] := __n81;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "AssignmentExpression";
__n85["operator"] := "+=";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "c2";
__n85["left"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 1.;
__n87["raw"] := "1";
__n85["right"] := __n87;
__n84["expression"] := __n85;
__n88 := {  };
__n88["type"] := "ContinueStatement";
__n88["label"] := null;
__n83 := [ __n84, __n88 ];
__n82["body"] := __n83;
__n80["body"] := __n82;
__n75["handler"] := __n80;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "AssignmentExpression";
__n92["operator"] := "=";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "fin2";
__n92["left"] := __n93;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 1.;
__n94["raw"] := "1";
__n92["right"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n75["finalizer"] := __n89;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "AssignmentExpression";
__n96["operator"] := "=";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "fin2";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "UnaryExpression";
__n98["operator"] := "-";
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 1.;
__n99["raw"] := "1";
__n98["argument"] := __n99;
__n98["prefix"] := true;
__n96["right"] := __n98;
__n95["expression"] := __n96;
__n74 := [ __n75, __n95 ];
__n73["body"] := __n74;
__n62["body"] := __n73;
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "!==";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "fin2";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := 1.;
__n103["raw"] := "1";
__n101["right"] := __n103;
__n100["test"] := __n101;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "$ERROR";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#2.1: \"finally\" block must be evaluated";
__n110["raw"] := "'#2.1: \"finally\" block must be evaluated'";
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n100["consequent"] := __n104;
__n100["alternate"] := null;
__n111 := {  };
__n111["type"] := "IfStatement";
__n112 := {  };
__n112["type"] := "BinaryExpression";
__n112["operator"] := "!==";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "c2";
__n112["left"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := 5.;
__n114["raw"] := "5";
__n112["right"] := __n114;
__n111["test"] := __n112;
__n115 := {  };
__n115["type"] := "BlockStatement";
__n117 := {  };
__n117["type"] := "ExpressionStatement";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "$ERROR";
__n118["callee"] := __n119;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "#2.1: \"try catch{continue} finally\" must work correctly";
__n121["raw"] := "'#2.1: \"try catch{continue} finally\" must work correctly'";
__n120 := [ __n121 ];
__n118["arguments"] := __n120;
__n117["expression"] := __n118;
__n116 := [ __n117 ];
__n115["body"] := __n116;
__n111["consequent"] := __n115;
__n111["alternate"] := null;
__n122 := {  };
__n122["type"] := "VariableDeclaration";
__n124 := {  };
__n124["type"] := "VariableDeclarator";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "c3";
__n124["id"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 0.;
__n126["raw"] := "0";
__n124["init"] := __n126;
__n127 := {  };
__n127["type"] := "VariableDeclarator";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "fin3";
__n127["id"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := 0.;
__n129["raw"] := "0";
__n127["init"] := __n129;
__n123 := [ __n124, __n127 ];
__n122["declarations"] := __n123;
__n122["kind"] := "var";
__n130 := {  };
__n130["type"] := "ForStatement";
__n131 := {  };
__n131["type"] := "VariableDeclaration";
__n133 := {  };
__n133["type"] := "VariableDeclarator";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "i";
__n133["id"] := __n134;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 0.;
__n135["raw"] := "0";
__n133["init"] := __n135;
__n132 := [ __n133 ];
__n131["declarations"] := __n132;
__n131["kind"] := "var";
__n130["init"] := __n131;
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "<";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "i";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := 5.;
__n138["raw"] := "5";
__n136["right"] := __n138;
__n130["test"] := __n136;
__n139 := {  };
__n139["type"] := "UpdateExpression";
__n139["operator"] := "++";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "i";
__n139["argument"] := __n140;
__n139["prefix"] := false;
__n130["update"] := __n139;
__n141 := {  };
__n141["type"] := "BlockStatement";
__n143 := {  };
__n143["type"] := "TryStatement";
__n144 := {  };
__n144["type"] := "BlockStatement";
__n146 := {  };
__n146["type"] := "ThrowStatement";
__n147 := {  };
__n147["type"] := "Literal";
__n147["value"] := "ex1";
__n147["raw"] := "\"ex1\"";
__n146["argument"] := __n147;
__n145 := [ __n146 ];
__n144["body"] := __n145;
__n143["block"] := __n144;
__n148 := {  };
__n148["type"] := "CatchClause";
__n149 := {  };
__n149["type"] := "Identifier";
__n149["name"] := "er1";
__n148["param"] := __n149;
__n150 := {  };
__n150["type"] := "BlockStatement";
__n152 := {  };
__n152["type"] := "ExpressionStatement";
__n153 := {  };
__n153["type"] := "AssignmentExpression";
__n153["operator"] := "+=";
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "c3";
__n153["left"] := __n154;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := 1.;
__n155["raw"] := "1";
__n153["right"] := __n155;
__n152["expression"] := __n153;
__n151 := [ __n152 ];
__n150["body"] := __n151;
__n148["body"] := __n150;
__n143["handler"] := __n148;
__n156 := {  };
__n156["type"] := "BlockStatement";
__n158 := {  };
__n158["type"] := "ExpressionStatement";
__n159 := {  };
__n159["type"] := "AssignmentExpression";
__n159["operator"] := "=";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "fin3";
__n159["left"] := __n160;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := 1.;
__n161["raw"] := "1";
__n159["right"] := __n161;
__n158["expression"] := __n159;
__n162 := {  };
__n162["type"] := "ContinueStatement";
__n162["label"] := null;
__n157 := [ __n158, __n162 ];
__n156["body"] := __n157;
__n143["finalizer"] := __n156;
__n163 := {  };
__n163["type"] := "ExpressionStatement";
__n164 := {  };
__n164["type"] := "AssignmentExpression";
__n164["operator"] := "=";
__n165 := {  };
__n165["type"] := "Identifier";
__n165["name"] := "fin3";
__n164["left"] := __n165;
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := 0.;
__n166["raw"] := "0";
__n164["right"] := __n166;
__n163["expression"] := __n164;
__n142 := [ __n143, __n163 ];
__n141["body"] := __n142;
__n130["body"] := __n141;
__n167 := {  };
__n167["type"] := "IfStatement";
__n168 := {  };
__n168["type"] := "BinaryExpression";
__n168["operator"] := "!==";
__n169 := {  };
__n169["type"] := "Identifier";
__n169["name"] := "fin3";
__n168["left"] := __n169;
__n170 := {  };
__n170["type"] := "Literal";
__n170["value"] := 1.;
__n170["raw"] := "1";
__n168["right"] := __n170;
__n167["test"] := __n168;
__n171 := {  };
__n171["type"] := "BlockStatement";
__n173 := {  };
__n173["type"] := "ExpressionStatement";
__n174 := {  };
__n174["type"] := "CallExpression";
__n175 := {  };
__n175["type"] := "Identifier";
__n175["name"] := "$ERROR";
__n174["callee"] := __n175;
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := "#3.1: \"finally\" block must be evaluated";
__n177["raw"] := "'#3.1: \"finally\" block must be evaluated'";
__n176 := [ __n177 ];
__n174["arguments"] := __n176;
__n173["expression"] := __n174;
__n172 := [ __n173 ];
__n171["body"] := __n172;
__n167["consequent"] := __n171;
__n167["alternate"] := null;
__n178 := {  };
__n178["type"] := "IfStatement";
__n179 := {  };
__n179["type"] := "BinaryExpression";
__n179["operator"] := "!==";
__n180 := {  };
__n180["type"] := "Identifier";
__n180["name"] := "c3";
__n179["left"] := __n180;
__n181 := {  };
__n181["type"] := "Literal";
__n181["value"] := 5.;
__n181["raw"] := "5";
__n179["right"] := __n181;
__n178["test"] := __n179;
__n182 := {  };
__n182["type"] := "BlockStatement";
__n184 := {  };
__n184["type"] := "ExpressionStatement";
__n185 := {  };
__n185["type"] := "CallExpression";
__n186 := {  };
__n186["type"] := "Identifier";
__n186["name"] := "$ERROR";
__n185["callee"] := __n186;
__n188 := {  };
__n188["type"] := "Literal";
__n188["value"] := "#3.2: \"try catch finally{continue}\" must work correctly";
__n188["raw"] := "'#3.2: \"try catch finally{continue}\" must work correctly'";
__n187 := [ __n188 ];
__n185["arguments"] := __n187;
__n184["expression"] := __n185;
__n183 := [ __n184 ];
__n182["body"] := __n183;
__n178["consequent"] := __n182;
__n178["alternate"] := null;
__n189 := {  };
__n189["type"] := "VariableDeclaration";
__n191 := {  };
__n191["type"] := "VariableDeclarator";
__n192 := {  };
__n192["type"] := "Identifier";
__n192["name"] := "fin";
__n191["id"] := __n192;
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := 0.;
__n193["raw"] := "0";
__n191["init"] := __n193;
__n190 := [ __n191 ];
__n189["declarations"] := __n190;
__n189["kind"] := "var";
__n194 := {  };
__n194["type"] := "ForStatement";
__n195 := {  };
__n195["type"] := "VariableDeclaration";
__n197 := {  };
__n197["type"] := "VariableDeclarator";
__n198 := {  };
__n198["type"] := "Identifier";
__n198["name"] := "i";
__n197["id"] := __n198;
__n199 := {  };
__n199["type"] := "Literal";
__n199["value"] := 0.;
__n199["raw"] := "0";
__n197["init"] := __n199;
__n196 := [ __n197 ];
__n195["declarations"] := __n196;
__n195["kind"] := "var";
__n194["init"] := __n195;
__n200 := {  };
__n200["type"] := "BinaryExpression";
__n200["operator"] := "<";
__n201 := {  };
__n201["type"] := "Identifier";
__n201["name"] := "i";
__n200["left"] := __n201;
__n202 := {  };
__n202["type"] := "Literal";
__n202["value"] := 5.;
__n202["raw"] := "5";
__n200["right"] := __n202;
__n194["test"] := __n200;
__n203 := {  };
__n203["type"] := "UpdateExpression";
__n203["operator"] := "++";
__n204 := {  };
__n204["type"] := "Identifier";
__n204["name"] := "i";
__n203["argument"] := __n204;
__n203["prefix"] := false;
__n194["update"] := __n203;
__n205 := {  };
__n205["type"] := "BlockStatement";
__n207 := {  };
__n207["type"] := "TryStatement";
__n208 := {  };
__n208["type"] := "BlockStatement";
__n210 := {  };
__n210["type"] := "ExpressionStatement";
__n211 := {  };
__n211["type"] := "AssignmentExpression";
__n211["operator"] := "+=";
__n212 := {  };
__n212["type"] := "Identifier";
__n212["name"] := "i";
__n211["left"] := __n212;
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := 1.;
__n213["raw"] := "1";
__n211["right"] := __n213;
__n210["expression"] := __n211;
__n214 := {  };
__n214["type"] := "ContinueStatement";
__n214["label"] := null;
__n209 := [ __n210, __n214 ];
__n208["body"] := __n209;
__n207["block"] := __n208;
__n207["handler"] := null;
__n215 := {  };
__n215["type"] := "BlockStatement";
__n217 := {  };
__n217["type"] := "ExpressionStatement";
__n218 := {  };
__n218["type"] := "AssignmentExpression";
__n218["operator"] := "=";
__n219 := {  };
__n219["type"] := "Identifier";
__n219["name"] := "fin";
__n218["left"] := __n219;
__n220 := {  };
__n220["type"] := "Literal";
__n220["value"] := 1.;
__n220["raw"] := "1";
__n218["right"] := __n220;
__n217["expression"] := __n218;
__n216 := [ __n217 ];
__n215["body"] := __n216;
__n207["finalizer"] := __n215;
__n221 := {  };
__n221["type"] := "ExpressionStatement";
__n222 := {  };
__n222["type"] := "AssignmentExpression";
__n222["operator"] := "=";
__n223 := {  };
__n223["type"] := "Identifier";
__n223["name"] := "fin";
__n222["left"] := __n223;
__n224 := {  };
__n224["type"] := "UnaryExpression";
__n224["operator"] := "-";
__n225 := {  };
__n225["type"] := "Literal";
__n225["value"] := 1.;
__n225["raw"] := "1";
__n224["argument"] := __n225;
__n224["prefix"] := true;
__n222["right"] := __n224;
__n221["expression"] := __n222;
__n206 := [ __n207, __n221 ];
__n205["body"] := __n206;
__n194["body"] := __n205;
__n226 := {  };
__n226["type"] := "EmptyStatement";
__n227 := {  };
__n227["type"] := "IfStatement";
__n228 := {  };
__n228["type"] := "BinaryExpression";
__n228["operator"] := "!==";
__n229 := {  };
__n229["type"] := "Identifier";
__n229["name"] := "fin";
__n228["left"] := __n229;
__n230 := {  };
__n230["type"] := "Literal";
__n230["value"] := 1.;
__n230["raw"] := "1";
__n228["right"] := __n230;
__n227["test"] := __n228;
__n231 := {  };
__n231["type"] := "BlockStatement";
__n233 := {  };
__n233["type"] := "ExpressionStatement";
__n234 := {  };
__n234["type"] := "CallExpression";
__n235 := {  };
__n235["type"] := "Identifier";
__n235["name"] := "$ERROR";
__n234["callee"] := __n235;
__n237 := {  };
__n237["type"] := "Literal";
__n237["value"] := "#4: \"finally\" block must be evaluated at \"try{continue} finally\" construction";
__n237["raw"] := "'#4: \"finally\" block must be evaluated at \"try{continue} finally\" construction'";
__n236 := [ __n237 ];
__n234["arguments"] := __n236;
__n233["expression"] := __n234;
__n232 := [ __n233 ];
__n231["body"] := __n232;
__n227["consequent"] := __n231;
__n227["alternate"] := null;
__n238 := {  };
__n238["type"] := "VariableDeclaration";
__n240 := {  };
__n240["type"] := "VariableDeclarator";
__n241 := {  };
__n241["type"] := "Identifier";
__n241["name"] := "c5";
__n240["id"] := __n241;
__n242 := {  };
__n242["type"] := "Literal";
__n242["value"] := 0.;
__n242["raw"] := "0";
__n240["init"] := __n242;
__n239 := [ __n240 ];
__n238["declarations"] := __n239;
__n238["kind"] := "var";
__n243 := {  };
__n243["type"] := "ForStatement";
__n244 := {  };
__n244["type"] := "VariableDeclaration";
__n246 := {  };
__n246["type"] := "VariableDeclarator";
__n247 := {  };
__n247["type"] := "Identifier";
__n247["name"] := "c5";
__n246["id"] := __n247;
__n248 := {  };
__n248["type"] := "Literal";
__n248["value"] := 0.;
__n248["raw"] := "0";
__n246["init"] := __n248;
__n245 := [ __n246 ];
__n244["declarations"] := __n245;
__n244["kind"] := "var";
__n243["init"] := __n244;
__n249 := {  };
__n249["type"] := "BinaryExpression";
__n249["operator"] := "<";
__n250 := {  };
__n250["type"] := "Identifier";
__n250["name"] := "c5";
__n249["left"] := __n250;
__n251 := {  };
__n251["type"] := "Literal";
__n251["value"] := 10.;
__n251["raw"] := "10";
__n249["right"] := __n251;
__n243["test"] := __n249;
__n243["update"] := null;
__n252 := {  };
__n252["type"] := "BlockStatement";
__n254 := {  };
__n254["type"] := "TryStatement";
__n255 := {  };
__n255["type"] := "BlockStatement";
__n257 := {  };
__n257["type"] := "ThrowStatement";
__n258 := {  };
__n258["type"] := "Literal";
__n258["value"] := "ex1";
__n258["raw"] := "\"ex1\"";
__n257["argument"] := __n258;
__n256 := [ __n257 ];
__n255["body"] := __n256;
__n254["block"] := __n255;
__n259 := {  };
__n259["type"] := "CatchClause";
__n260 := {  };
__n260["type"] := "Identifier";
__n260["name"] := "er1";
__n259["param"] := __n260;
__n261 := {  };
__n261["type"] := "BlockStatement";
__n263 := {  };
__n263["type"] := "ExpressionStatement";
__n264 := {  };
__n264["type"] := "AssignmentExpression";
__n264["operator"] := "+=";
__n265 := {  };
__n265["type"] := "Identifier";
__n265["name"] := "c5";
__n264["left"] := __n265;
__n266 := {  };
__n266["type"] := "Literal";
__n266["value"] := 1.;
__n266["raw"] := "1";
__n264["right"] := __n266;
__n263["expression"] := __n264;
__n267 := {  };
__n267["type"] := "ContinueStatement";
__n267["label"] := null;
__n262 := [ __n263, __n267 ];
__n261["body"] := __n262;
__n259["body"] := __n261;
__n254["handler"] := __n259;
__n254["finalizer"] := null;
__n268 := {  };
__n268["type"] := "ExpressionStatement";
__n269 := {  };
__n269["type"] := "AssignmentExpression";
__n269["operator"] := "+=";
__n270 := {  };
__n270["type"] := "Identifier";
__n270["name"] := "c5";
__n269["left"] := __n270;
__n271 := {  };
__n271["type"] := "Literal";
__n271["value"] := 12.;
__n271["raw"] := "12";
__n269["right"] := __n271;
__n268["expression"] := __n269;
__n253 := [ __n254, __n268 ];
__n252["body"] := __n253;
__n243["body"] := __n252;
__n272 := {  };
__n272["type"] := "EmptyStatement";
__n273 := {  };
__n273["type"] := "IfStatement";
__n274 := {  };
__n274["type"] := "BinaryExpression";
__n274["operator"] := "!==";
__n275 := {  };
__n275["type"] := "Identifier";
__n275["name"] := "c5";
__n274["left"] := __n275;
__n276 := {  };
__n276["type"] := "Literal";
__n276["value"] := 10.;
__n276["raw"] := "10";
__n274["right"] := __n276;
__n273["test"] := __n274;
__n277 := {  };
__n277["type"] := "BlockStatement";
__n279 := {  };
__n279["type"] := "ExpressionStatement";
__n280 := {  };
__n280["type"] := "CallExpression";
__n281 := {  };
__n281["type"] := "Identifier";
__n281["name"] := "$ERROR";
__n280["callee"] := __n281;
__n283 := {  };
__n283["type"] := "Literal";
__n283["value"] := "#5: \"try catch{continue} must work correctly";
__n283["raw"] := "'#5: \"try catch{continue} must work correctly'";
__n282 := [ __n283 ];
__n280["arguments"] := __n282;
__n279["expression"] := __n280;
__n278 := [ __n279 ];
__n277["body"] := __n278;
__n273["consequent"] := __n277;
__n273["alternate"] := null;
__n284 := {  };
__n284["type"] := "VariableDeclaration";
__n286 := {  };
__n286["type"] := "VariableDeclarator";
__n287 := {  };
__n287["type"] := "Identifier";
__n287["name"] := "c6";
__n286["id"] := __n287;
__n288 := {  };
__n288["type"] := "Literal";
__n288["value"] := 0.;
__n288["raw"] := "0";
__n286["init"] := __n288;
__n289 := {  };
__n289["type"] := "VariableDeclarator";
__n290 := {  };
__n290["type"] := "Identifier";
__n290["name"] := "fin6";
__n289["id"] := __n290;
__n291 := {  };
__n291["type"] := "Literal";
__n291["value"] := 0.;
__n291["raw"] := "0";
__n289["init"] := __n291;
__n285 := [ __n286, __n289 ];
__n284["declarations"] := __n285;
__n284["kind"] := "var";
__n292 := {  };
__n292["type"] := "ForStatement";
__n293 := {  };
__n293["type"] := "VariableDeclaration";
__n295 := {  };
__n295["type"] := "VariableDeclarator";
__n296 := {  };
__n296["type"] := "Identifier";
__n296["name"] := "c6";
__n295["id"] := __n296;
__n297 := {  };
__n297["type"] := "Literal";
__n297["value"] := 0.;
__n297["raw"] := "0";
__n295["init"] := __n297;
__n294 := [ __n295 ];
__n293["declarations"] := __n294;
__n293["kind"] := "var";
__n292["init"] := __n293;
__n298 := {  };
__n298["type"] := "BinaryExpression";
__n298["operator"] := "<";
__n299 := {  };
__n299["type"] := "Identifier";
__n299["name"] := "c6";
__n298["left"] := __n299;
__n300 := {  };
__n300["type"] := "Literal";
__n300["value"] := 10.;
__n300["raw"] := "10";
__n298["right"] := __n300;
__n292["test"] := __n298;
__n292["update"] := null;
__n301 := {  };
__n301["type"] := "BlockStatement";
__n303 := {  };
__n303["type"] := "TryStatement";
__n304 := {  };
__n304["type"] := "BlockStatement";
__n306 := {  };
__n306["type"] := "ExpressionStatement";
__n307 := {  };
__n307["type"] := "AssignmentExpression";
__n307["operator"] := "+=";
__n308 := {  };
__n308["type"] := "Identifier";
__n308["name"] := "c6";
__n307["left"] := __n308;
__n309 := {  };
__n309["type"] := "Literal";
__n309["value"] := 1.;
__n309["raw"] := "1";
__n307["right"] := __n309;
__n306["expression"] := __n307;
__n310 := {  };
__n310["type"] := "ThrowStatement";
__n311 := {  };
__n311["type"] := "Literal";
__n311["value"] := "ex1";
__n311["raw"] := "\"ex1\"";
__n310["argument"] := __n311;
__n305 := [ __n306, __n310 ];
__n304["body"] := __n305;
__n303["block"] := __n304;
__n303["handler"] := null;
__n312 := {  };
__n312["type"] := "BlockStatement";
__n314 := {  };
__n314["type"] := "ExpressionStatement";
__n315 := {  };
__n315["type"] := "AssignmentExpression";
__n315["operator"] := "=";
__n316 := {  };
__n316["type"] := "Identifier";
__n316["name"] := "fin6";
__n315["left"] := __n316;
__n317 := {  };
__n317["type"] := "Literal";
__n317["value"] := 1.;
__n317["raw"] := "1";
__n315["right"] := __n317;
__n314["expression"] := __n315;
__n318 := {  };
__n318["type"] := "ContinueStatement";
__n318["label"] := null;
__n313 := [ __n314, __n318 ];
__n312["body"] := __n313;
__n303["finalizer"] := __n312;
__n319 := {  };
__n319["type"] := "ExpressionStatement";
__n320 := {  };
__n320["type"] := "AssignmentExpression";
__n320["operator"] := "=";
__n321 := {  };
__n321["type"] := "Identifier";
__n321["name"] := "fin6";
__n320["left"] := __n321;
__n322 := {  };
__n322["type"] := "UnaryExpression";
__n322["operator"] := "-";
__n323 := {  };
__n323["type"] := "Literal";
__n323["value"] := 1.;
__n323["raw"] := "1";
__n322["argument"] := __n323;
__n322["prefix"] := true;
__n320["right"] := __n322;
__n319["expression"] := __n320;
__n302 := [ __n303, __n319 ];
__n301["body"] := __n302;
__n292["body"] := __n301;
__n324 := {  };
__n324["type"] := "EmptyStatement";
__n325 := {  };
__n325["type"] := "IfStatement";
__n326 := {  };
__n326["type"] := "BinaryExpression";
__n326["operator"] := "!==";
__n327 := {  };
__n327["type"] := "Identifier";
__n327["name"] := "fin6";
__n326["left"] := __n327;
__n328 := {  };
__n328["type"] := "Literal";
__n328["value"] := 1.;
__n328["raw"] := "1";
__n326["right"] := __n328;
__n325["test"] := __n326;
__n329 := {  };
__n329["type"] := "BlockStatement";
__n331 := {  };
__n331["type"] := "ExpressionStatement";
__n332 := {  };
__n332["type"] := "CallExpression";
__n333 := {  };
__n333["type"] := "Identifier";
__n333["name"] := "$ERROR";
__n332["callee"] := __n333;
__n335 := {  };
__n335["type"] := "Literal";
__n335["value"] := "#6.1: \"finally\" block must be evaluated";
__n335["raw"] := "'#6.1: \"finally\" block must be evaluated'";
__n334 := [ __n335 ];
__n332["arguments"] := __n334;
__n331["expression"] := __n332;
__n330 := [ __n331 ];
__n329["body"] := __n330;
__n325["consequent"] := __n329;
__n325["alternate"] := null;
__n336 := {  };
__n336["type"] := "IfStatement";
__n337 := {  };
__n337["type"] := "BinaryExpression";
__n337["operator"] := "!==";
__n338 := {  };
__n338["type"] := "Identifier";
__n338["name"] := "c6";
__n337["left"] := __n338;
__n339 := {  };
__n339["type"] := "Literal";
__n339["value"] := 10.;
__n339["raw"] := "10";
__n337["right"] := __n339;
__n336["test"] := __n337;
__n340 := {  };
__n340["type"] := "BlockStatement";
__n342 := {  };
__n342["type"] := "ExpressionStatement";
__n343 := {  };
__n343["type"] := "CallExpression";
__n344 := {  };
__n344["type"] := "Identifier";
__n344["name"] := "$ERROR";
__n343["callee"] := __n344;
__n346 := {  };
__n346["type"] := "Literal";
__n346["value"] := "#6.2: \"try finally{continue}\" must work correctly";
__n346["raw"] := "'#6.2: \"try finally{continue}\" must work correctly'";
__n345 := [ __n346 ];
__n343["arguments"] := __n345;
__n342["expression"] := __n343;
__n341 := [ __n342 ];
__n340["body"] := __n341;
__n336["consequent"] := __n340;
__n336["alternate"] := null;
__n1 := [ __n2, __n7, __n43, __n54, __n62, __n100, __n111, __n122, __n130, __n167, __n178, __n189, __n194, __n226, __n227, __n238, __n243, __n272, __n273, __n284, __n292, __n324, __n325, __n336 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n347 := [ "fin", "i", "c2", "fin2", "c3", "fin3", "c5", "c6", "fin6" ];
__n0["variableDeclarations"] := __n347;
__n348 := [  ];
__n0["functionDeclarations"] := __n348;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}