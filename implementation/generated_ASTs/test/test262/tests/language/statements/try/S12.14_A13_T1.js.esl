function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "myFunction1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x1";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "myFunction1";
__n8["callee"] := __n9;
__n10 := [  ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "x1";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n12["right"] := __n14;
__n11["test"] := __n12;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "$ERROR";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1.2: x1===1. Actual: x1===";
__n22["raw"] := "'#1.2: x1===1. Actual: x1==='";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "x1";
__n21["right"] := __n23;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n11["consequent"] := __n15;
__n11["alternate"] := null;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "myFunction2";
__n24["expression"] := __n25;
__n26 := {  };
__n26["type"] := "VariableDeclaration";
__n28 := {  };
__n28["type"] := "VariableDeclarator";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x2";
__n28["id"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "myFunction2";
__n30["callee"] := __n31;
__n32 := [  ];
__n30["arguments"] := __n32;
__n28["init"] := __n30;
__n27 := [ __n28 ];
__n26["declarations"] := __n27;
__n26["kind"] := "var";
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "!==";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "x2";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 2.;
__n36["raw"] := "2";
__n34["right"] := __n36;
__n33["test"] := __n34;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#2: x2===2. Actual: x2===";
__n44["raw"] := "'#2: x2===2. Actual: x2==='";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x2";
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n33["consequent"] := __n37;
__n33["alternate"] := null;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "myFunction3";
__n46["expression"] := __n47;
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "x3";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "myFunction3";
__n52["callee"] := __n53;
__n54 := [  ];
__n52["arguments"] := __n54;
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n55 := {  };
__n55["type"] := "IfStatement";
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "x3";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 1.;
__n58["raw"] := "1";
__n56["right"] := __n58;
__n55["test"] := __n56;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#3: x3===1. Actual: x3===";
__n66["raw"] := "'#3: x3===1. Actual: x3==='";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "x3";
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n55["consequent"] := __n59;
__n55["alternate"] := null;
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "myFunction4";
__n68["expression"] := __n69;
__n70 := {  };
__n70["type"] := "TryStatement";
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "VariableDeclaration";
__n75 := {  };
__n75["type"] := "VariableDeclarator";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "x4";
__n75["id"] := __n76;
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "myFunction4";
__n77["callee"] := __n78;
__n79 := [  ];
__n77["arguments"] := __n79;
__n75["init"] := __n77;
__n74 := [ __n75 ];
__n73["declarations"] := __n74;
__n73["kind"] := "var";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#4.1: Throwing exception inside function lead to throwing exception outside this function";
__n84["raw"] := "'#4.1: Throwing exception inside function lead to throwing exception outside this function'";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n72 := [ __n73, __n80 ];
__n71["body"] := __n72;
__n70["block"] := __n71;
__n85 := {  };
__n85["type"] := "CatchClause";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "e";
__n85["param"] := __n86;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "IfStatement";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "===";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "e";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "ex1";
__n92["raw"] := "\"ex1\"";
__n90["right"] := __n92;
__n89["test"] := __n90;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#4.2: Exception !==\"ex1\". Actual: catch previous exception";
__n99["raw"] := "'#4.2: Exception !==\"ex1\". Actual: catch previous exception'";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n89["consequent"] := __n93;
__n89["alternate"] := null;
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "!==";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "e";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "ex2";
__n103["raw"] := "\"ex2\"";
__n101["right"] := __n103;
__n100["test"] := __n101;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "$ERROR";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "BinaryExpression";
__n110["operator"] := "+";
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "#4.3: Exception ===\"ex2\". Actual:  Exception ===";
__n111["raw"] := "'#4.3: Exception ===\"ex2\". Actual:  Exception ==='";
__n110["left"] := __n111;
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "e";
__n110["right"] := __n112;
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n100["consequent"] := __n104;
__n100["alternate"] := null;
__n88 := [ __n89, __n100 ];
__n87["body"] := __n88;
__n85["body"] := __n87;
__n70["handler"] := __n85;
__n70["finalizer"] := null;
__n1 := [ __n2, __n4, __n11, __n24, __n26, __n33, __n46, __n48, __n55, __n68, __n70 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n113 := [ "x1", "x2", "x3", "x4" ];
__n0["variableDeclarations"] := __n113;
__n115 := {  };
__n115["type"] := "FunctionDeclaration";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "myFunction1";
__n115["id"] := __n116;
__n117 := [  ];
__n115["params"] := __n117;
__n118 := {  };
__n118["type"] := "BlockStatement";
__n120 := {  };
__n120["type"] := "TryStatement";
__n121 := {  };
__n121["type"] := "BlockStatement";
__n123 := {  };
__n123["type"] := "ReturnStatement";
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 1.;
__n124["raw"] := "1";
__n123["argument"] := __n124;
__n122 := [ __n123 ];
__n121["body"] := __n122;
__n120["block"] := __n121;
__n125 := {  };
__n125["type"] := "CatchClause";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "err";
__n125["param"] := __n126;
__n127 := {  };
__n127["type"] := "BlockStatement";
__n129 := {  };
__n129["type"] := "ExpressionStatement";
__n130 := {  };
__n130["type"] := "CallExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "$ERROR";
__n130["callee"] := __n131;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#1.1: \"return 1\" inside function does not lead to throwing exception";
__n133["raw"] := "'#1.1: \"return 1\" inside function does not lead to throwing exception'";
__n132 := [ __n133 ];
__n130["arguments"] := __n132;
__n129["expression"] := __n130;
__n134 := {  };
__n134["type"] := "ReturnStatement";
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := 0.;
__n135["raw"] := "0";
__n134["argument"] := __n135;
__n128 := [ __n129, __n134 ];
__n127["body"] := __n128;
__n125["body"] := __n127;
__n120["handler"] := __n125;
__n120["finalizer"] := null;
__n136 := {  };
__n136["type"] := "ReturnStatement";
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := 2.;
__n137["raw"] := "2";
__n136["argument"] := __n137;
__n119 := [ __n120, __n136 ];
__n118["body"] := __n119;
__n138 := [  ];
__n118["variableDeclarations"] := __n138;
__n139 := [  ];
__n118["functionDeclarations"] := __n139;
__n118["codeType"] := "function";
__n118["strict"] := false;
__n115["body"] := __n118;
__n115["generator"] := false;
__n115["expression"] := false;
__n115["async"] := false;
__n140 := {  };
__n140["type"] := "FunctionDeclaration";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "myFunction2";
__n140["id"] := __n141;
__n142 := [  ];
__n140["params"] := __n142;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "TryStatement";
__n146 := {  };
__n146["type"] := "BlockStatement";
__n148 := {  };
__n148["type"] := "ThrowStatement";
__n149 := {  };
__n149["type"] := "Literal";
__n149["value"] := "exc";
__n149["raw"] := "\"exc\"";
__n148["argument"] := __n149;
__n150 := {  };
__n150["type"] := "ReturnStatement";
__n151 := {  };
__n151["type"] := "Literal";
__n151["value"] := 1.;
__n151["raw"] := "1";
__n150["argument"] := __n151;
__n147 := [ __n148, __n150 ];
__n146["body"] := __n147;
__n145["block"] := __n146;
__n152 := {  };
__n152["type"] := "CatchClause";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "err";
__n152["param"] := __n153;
__n154 := {  };
__n154["type"] := "BlockStatement";
__n156 := {  };
__n156["type"] := "ReturnStatement";
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := 2.;
__n157["raw"] := "2";
__n156["argument"] := __n157;
__n155 := [ __n156 ];
__n154["body"] := __n155;
__n152["body"] := __n154;
__n145["handler"] := __n152;
__n145["finalizer"] := null;
__n158 := {  };
__n158["type"] := "ReturnStatement";
__n159 := {  };
__n159["type"] := "Literal";
__n159["value"] := 3.;
__n159["raw"] := "3";
__n158["argument"] := __n159;
__n144 := [ __n145, __n158 ];
__n143["body"] := __n144;
__n160 := [  ];
__n143["variableDeclarations"] := __n160;
__n161 := [  ];
__n143["functionDeclarations"] := __n161;
__n143["codeType"] := "function";
__n143["strict"] := false;
__n140["body"] := __n143;
__n140["generator"] := false;
__n140["expression"] := false;
__n140["async"] := false;
__n162 := {  };
__n162["type"] := "FunctionDeclaration";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "myFunction3";
__n162["id"] := __n163;
__n164 := [  ];
__n162["params"] := __n164;
__n165 := {  };
__n165["type"] := "BlockStatement";
__n167 := {  };
__n167["type"] := "TryStatement";
__n168 := {  };
__n168["type"] := "BlockStatement";
__n170 := {  };
__n170["type"] := "ReturnStatement";
__n171 := {  };
__n171["type"] := "Identifier";
__n171["name"] := "someValue";
__n170["argument"] := __n171;
__n169 := [ __n170 ];
__n168["body"] := __n169;
__n167["block"] := __n168;
__n172 := {  };
__n172["type"] := "CatchClause";
__n173 := {  };
__n173["type"] := "Identifier";
__n173["name"] := "err";
__n172["param"] := __n173;
__n174 := {  };
__n174["type"] := "BlockStatement";
__n176 := {  };
__n176["type"] := "ReturnStatement";
__n177 := {  };
__n177["type"] := "Literal";
__n177["value"] := 1.;
__n177["raw"] := "1";
__n176["argument"] := __n177;
__n175 := [ __n176 ];
__n174["body"] := __n175;
__n172["body"] := __n174;
__n167["handler"] := __n172;
__n167["finalizer"] := null;
__n178 := {  };
__n178["type"] := "ReturnStatement";
__n179 := {  };
__n179["type"] := "Literal";
__n179["value"] := 2.;
__n179["raw"] := "2";
__n178["argument"] := __n179;
__n166 := [ __n167, __n178 ];
__n165["body"] := __n166;
__n180 := [  ];
__n165["variableDeclarations"] := __n180;
__n181 := [  ];
__n165["functionDeclarations"] := __n181;
__n165["codeType"] := "function";
__n165["strict"] := false;
__n162["body"] := __n165;
__n162["generator"] := false;
__n162["expression"] := false;
__n162["async"] := false;
__n182 := {  };
__n182["type"] := "FunctionDeclaration";
__n183 := {  };
__n183["type"] := "Identifier";
__n183["name"] := "myFunction4";
__n182["id"] := __n183;
__n184 := [  ];
__n182["params"] := __n184;
__n185 := {  };
__n185["type"] := "BlockStatement";
__n187 := {  };
__n187["type"] := "TryStatement";
__n188 := {  };
__n188["type"] := "BlockStatement";
__n190 := {  };
__n190["type"] := "ThrowStatement";
__n191 := {  };
__n191["type"] := "Literal";
__n191["value"] := "ex1";
__n191["raw"] := "\"ex1\"";
__n190["argument"] := __n191;
__n192 := {  };
__n192["type"] := "ReturnStatement";
__n193 := {  };
__n193["type"] := "Literal";
__n193["value"] := 1.;
__n193["raw"] := "1";
__n192["argument"] := __n193;
__n189 := [ __n190, __n192 ];
__n188["body"] := __n189;
__n187["block"] := __n188;
__n194 := {  };
__n194["type"] := "CatchClause";
__n195 := {  };
__n195["type"] := "Identifier";
__n195["name"] := "err";
__n194["param"] := __n195;
__n196 := {  };
__n196["type"] := "BlockStatement";
__n198 := {  };
__n198["type"] := "ThrowStatement";
__n199 := {  };
__n199["type"] := "Literal";
__n199["value"] := "ex2";
__n199["raw"] := "\"ex2\"";
__n198["argument"] := __n199;
__n200 := {  };
__n200["type"] := "ReturnStatement";
__n201 := {  };
__n201["type"] := "Literal";
__n201["value"] := 0.;
__n201["raw"] := "0";
__n200["argument"] := __n201;
__n197 := [ __n198, __n200 ];
__n196["body"] := __n197;
__n194["body"] := __n196;
__n187["handler"] := __n194;
__n187["finalizer"] := null;
__n202 := {  };
__n202["type"] := "ReturnStatement";
__n203 := {  };
__n203["type"] := "Literal";
__n203["value"] := 2.;
__n203["raw"] := "2";
__n202["argument"] := __n203;
__n186 := [ __n187, __n202 ];
__n185["body"] := __n186;
__n204 := [  ];
__n185["variableDeclarations"] := __n204;
__n205 := [  ];
__n185["functionDeclarations"] := __n205;
__n185["codeType"] := "function";
__n185["strict"] := false;
__n182["body"] := __n185;
__n182["generator"] := false;
__n182["expression"] := false;
__n182["async"] := false;
__n114 := [ __n115, __n140, __n162, __n182 ];
__n0["functionDeclarations"] := __n114;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}