function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Integer";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "checkValue";
__n9["expression"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Integer";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 13.;
__n15["raw"] := "13";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := false;
__n16["raw"] := "false";
__n14 := [ __n15, __n16 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "NewExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Integer";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "NaN";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := true;
__n22["raw"] := "true";
__n20 := [ __n21, __n22 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "NewExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Integer";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 0.;
__n27["raw"] := "0";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := false;
__n28["raw"] := "false";
__n26 := [ __n27, __n28 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "NewExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Integer";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Infinity";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := false;
__n34["raw"] := "false";
__n32 := [ __n33, __n34 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Integer";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "-";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.23;
__n40["raw"] := "1.23";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := true;
__n41["raw"] := "true";
__n38 := [ __n39, __n41 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "NewExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Integer";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Math";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "LN2";
__n48["raw"] := "\"LN2\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := true;
__n49["raw"] := "true";
__n45 := [ __n46, __n49 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n1 := [ __n2, __n7, __n9, __n11, __n17, __n23, __n29, __n35, __n42 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n50 := [ "i" ];
__n0["variableDeclarations"] := __n50;
__n52 := {  };
__n52["type"] := "FunctionDeclaration";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Integer";
__n52["id"] := __n53;
__n54 := [ "value", "exception" ];
__n52["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "TryStatement";
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "AssignmentExpression";
__n61["operator"] := "=";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "ThisExpression";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "value";
__n64["raw"] := "\"value\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["left"] := __n62;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "checkValue";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "value";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n61["right"] := __n65;
__n60["expression"] := __n61;
__n69 := {  };
__n69["type"] := "IfStatement";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "exception";
__n69["test"] := __n70;
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$ERROR";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "+";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#";
__n77["raw"] := "'#'";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "i";
__n76["right"] := __n78;
__n75["left"] := __n76;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := ".1: Must be exception";
__n79["raw"] := "'.1: Must be exception'";
__n75["right"] := __n79;
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n69["consequent"] := __n71;
__n69["alternate"] := null;
__n59 := [ __n60, __n69 ];
__n58["body"] := __n59;
__n57["block"] := __n58;
__n80 := {  };
__n80["type"] := "CatchClause";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "e";
__n80["param"] := __n81;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "AssignmentExpression";
__n85["operator"] := "=";
__n86 := {  };
__n86["type"] := "MemberExpression";
__n87 := {  };
__n87["type"] := "ThisExpression";
__n86["object"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "value";
__n88["raw"] := "\"value\"";
__n86["property"] := __n88;
__n86["computed"] := true;
__n85["left"] := __n86;
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "MemberExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "e";
__n90["object"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "toString";
__n92["raw"] := "\"toString\"";
__n90["property"] := __n92;
__n90["computed"] := true;
__n89["callee"] := __n90;
__n93 := [  ];
__n89["arguments"] := __n93;
__n85["right"] := __n89;
__n84["expression"] := __n85;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "UnaryExpression";
__n95["operator"] := "!";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "exception";
__n95["argument"] := __n96;
__n95["prefix"] := true;
__n94["test"] := __n95;
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "$ERROR";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "+";
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "+";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#";
__n103["raw"] := "'#'";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "i";
__n102["right"] := __n104;
__n101["left"] := __n102;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := ".2: Don`t must be exception";
__n105["raw"] := "'.2: Don`t must be exception'";
__n101["right"] := __n105;
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n94["consequent"] := __n97;
__n94["alternate"] := null;
__n83 := [ __n84, __n94 ];
__n82["body"] := __n83;
__n80["body"] := __n82;
__n57["handler"] := __n80;
__n57["finalizer"] := null;
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "UpdateExpression";
__n107["operator"] := "++";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "i";
__n107["argument"] := __n108;
__n107["prefix"] := false;
__n106["expression"] := __n107;
__n56 := [ __n57, __n106 ];
__n55["body"] := __n56;
__n109 := [  ];
__n55["variableDeclarations"] := __n109;
__n110 := [  ];
__n55["functionDeclarations"] := __n110;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n52["body"] := __n55;
__n52["generator"] := false;
__n52["expression"] := false;
__n52["async"] := false;
__n111 := {  };
__n111["type"] := "FunctionDeclaration";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "checkValue";
__n111["id"] := __n112;
__n113 := [ "value" ];
__n111["params"] := __n113;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "IfStatement";
__n117 := {  };
__n117["type"] := "LogicalExpression";
__n117["operator"] := "||";
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "!=";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "Math";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "floor";
__n122["raw"] := "\"floor\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n119["callee"] := __n120;
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "value";
__n123 := [ __n124 ];
__n119["arguments"] := __n123;
__n118["left"] := __n119;
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "value";
__n118["right"] := __n125;
__n117["left"] := __n118;
__n126 := {  };
__n126["type"] := "CallExpression";
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "isNaN";
__n126["callee"] := __n127;
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "value";
__n128 := [ __n129 ];
__n126["arguments"] := __n128;
__n117["right"] := __n126;
__n116["test"] := __n117;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ThrowStatement";
__n133 := {  };
__n133["type"] := "BinaryExpression";
__n133["operator"] := "+";
__n134 := {  };
__n134["type"] := "BinaryExpression";
__n134["operator"] := "+";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "INVALID_INTEGER_VALUE";
__n134["left"] := __n135;
__n136 := {  };
__n136["type"] := "Literal";
__n136["value"] := ": ";
__n136["raw"] := "\": \"";
__n134["right"] := __n136;
__n133["left"] := __n134;
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "value";
__n133["right"] := __n137;
__n132["argument"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n116["consequent"] := __n130;
__n138 := {  };
__n138["type"] := "BlockStatement";
__n140 := {  };
__n140["type"] := "ReturnStatement";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "value";
__n140["argument"] := __n141;
__n139 := [ __n140 ];
__n138["body"] := __n139;
__n116["alternate"] := __n138;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n142 := [  ];
__n114["variableDeclarations"] := __n142;
__n143 := [  ];
__n114["functionDeclarations"] := __n143;
__n114["codeType"] := "function";
__n114["strict"] := false;
__n111["body"] := __n114;
__n111["generator"] := false;
__n111["expression"] := false;
__n111["async"] := false;
__n51 := [ __n52, __n111 ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}