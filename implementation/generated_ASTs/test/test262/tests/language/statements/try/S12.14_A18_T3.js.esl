function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n5["argument"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n7 := {  };
__n7["type"] := "CatchClause";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "e";
__n7["param"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "e";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n12["right"] := __n14;
__n11["test"] := __n12;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Exception ===true. Actual:  Exception ===";
__n20["raw"] := "'#1: Exception ===true. Actual:  Exception ==='";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n11["consequent"] := __n15;
__n11["alternate"] := null;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n7["body"] := __n9;
__n2["handler"] := __n7;
__n2["finalizer"] := null;
__n22 := {  };
__n22["type"] := "TryStatement";
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ThrowStatement";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := false;
__n26["raw"] := "false";
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n22["block"] := __n23;
__n27 := {  };
__n27["type"] := "CatchClause";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "e";
__n27["param"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := false;
__n34["raw"] := "false";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: Exception ===false. Actual:  Exception ===";
__n40["raw"] := "'#2: Exception ===false. Actual:  Exception ==='";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "e";
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n27["body"] := __n29;
__n22["handler"] := __n27;
__n22["finalizer"] := null;
__n42 := {  };
__n42["type"] := "VariableDeclaration";
__n44 := {  };
__n44["type"] := "VariableDeclarator";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "b";
__n44["id"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := false;
__n46["raw"] := "false";
__n44["init"] := __n46;
__n43 := [ __n44 ];
__n42["declarations"] := __n43;
__n42["kind"] := "var";
__n47 := {  };
__n47["type"] := "TryStatement";
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ThrowStatement";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "b";
__n50["argument"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n47["block"] := __n48;
__n52 := {  };
__n52["type"] := "CatchClause";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n52["param"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "e";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := false;
__n59["raw"] := "false";
__n57["right"] := __n59;
__n56["test"] := __n57;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: Exception ===false. Actual:  Exception ===";
__n65["raw"] := "'#3: Exception ===false. Actual:  Exception ==='";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "e";
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n56["consequent"] := __n60;
__n56["alternate"] := null;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n52["body"] := __n54;
__n47["handler"] := __n52;
__n47["finalizer"] := null;
__n67 := {  };
__n67["type"] := "VariableDeclaration";
__n69 := {  };
__n69["type"] := "VariableDeclarator";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "b";
__n69["id"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := true;
__n71["raw"] := "true";
__n69["init"] := __n71;
__n68 := [ __n69 ];
__n67["declarations"] := __n68;
__n67["kind"] := "var";
__n72 := {  };
__n72["type"] := "TryStatement";
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ThrowStatement";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "b";
__n75["argument"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n72["block"] := __n73;
__n77 := {  };
__n77["type"] := "CatchClause";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "e";
__n77["param"] := __n78;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "IfStatement";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "!==";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "e";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := true;
__n84["raw"] := "true";
__n82["right"] := __n84;
__n81["test"] := __n82;
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#4: Exception ===true. Actual:  Exception ===";
__n90["raw"] := "'#4: Exception ===true. Actual:  Exception ==='";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "e";
__n89["right"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n81["consequent"] := __n85;
__n81["alternate"] := null;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n77["body"] := __n79;
__n72["handler"] := __n77;
__n72["finalizer"] := null;
__n92 := {  };
__n92["type"] := "VariableDeclaration";
__n94 := {  };
__n94["type"] := "VariableDeclarator";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "b";
__n94["id"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := true;
__n96["raw"] := "true";
__n94["init"] := __n96;
__n93 := [ __n94 ];
__n92["declarations"] := __n93;
__n92["kind"] := "var";
__n97 := {  };
__n97["type"] := "TryStatement";
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "ThrowStatement";
__n101 := {  };
__n101["type"] := "LogicalExpression";
__n101["operator"] := "&&";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "b";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := false;
__n103["raw"] := "false";
__n101["right"] := __n103;
__n100["argument"] := __n101;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n97["block"] := __n98;
__n104 := {  };
__n104["type"] := "CatchClause";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "e";
__n104["param"] := __n105;
__n106 := {  };
__n106["type"] := "BlockStatement";
__n108 := {  };
__n108["type"] := "IfStatement";
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "!==";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "e";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := false;
__n111["raw"] := "false";
__n109["right"] := __n111;
__n108["test"] := __n109;
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "$ERROR";
__n113["callee"] := __n114;
__n116 := {  };
__n116["type"] := "BinaryExpression";
__n116["operator"] := "+";
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#5: Exception ===false. Actual:  Exception ===";
__n117["raw"] := "'#5: Exception ===false. Actual:  Exception ==='";
__n116["left"] := __n117;
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "e";
__n116["right"] := __n118;
__n115 := [ __n116 ];
__n113["arguments"] := __n115;
__n112["expression"] := __n113;
__n108["consequent"] := __n112;
__n108["alternate"] := null;
__n107 := [ __n108 ];
__n106["body"] := __n107;
__n104["body"] := __n106;
__n97["handler"] := __n104;
__n97["finalizer"] := null;
__n119 := {  };
__n119["type"] := "VariableDeclaration";
__n121 := {  };
__n121["type"] := "VariableDeclarator";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "b";
__n121["id"] := __n122;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := true;
__n123["raw"] := "true";
__n121["init"] := __n123;
__n120 := [ __n121 ];
__n119["declarations"] := __n120;
__n119["kind"] := "var";
__n124 := {  };
__n124["type"] := "TryStatement";
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "ThrowStatement";
__n128 := {  };
__n128["type"] := "LogicalExpression";
__n128["operator"] := "||";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "b";
__n128["left"] := __n129;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := false;
__n130["raw"] := "false";
__n128["right"] := __n130;
__n127["argument"] := __n128;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n124["block"] := __n125;
__n131 := {  };
__n131["type"] := "CatchClause";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "e";
__n131["param"] := __n132;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "IfStatement";
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "!==";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "e";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := true;
__n138["raw"] := "true";
__n136["right"] := __n138;
__n135["test"] := __n136;
__n139 := {  };
__n139["type"] := "ExpressionStatement";
__n140 := {  };
__n140["type"] := "CallExpression";
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "$ERROR";
__n140["callee"] := __n141;
__n143 := {  };
__n143["type"] := "BinaryExpression";
__n143["operator"] := "+";
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "#6: Exception ===true. Actual:  Exception ===";
__n144["raw"] := "'#6: Exception ===true. Actual:  Exception ==='";
__n143["left"] := __n144;
__n145 := {  };
__n145["type"] := "Identifier";
__n145["name"] := "e";
__n143["right"] := __n145;
__n142 := [ __n143 ];
__n140["arguments"] := __n142;
__n139["expression"] := __n140;
__n135["consequent"] := __n139;
__n135["alternate"] := null;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n131["body"] := __n133;
__n124["handler"] := __n131;
__n124["finalizer"] := null;
__n1 := [ __n2, __n22, __n42, __n47, __n67, __n72, __n92, __n97, __n119, __n124 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n146 := [ "b" ];
__n0["variableDeclarations"] := __n146;
__n147 := [  ];
__n0["functionDeclarations"] := __n147;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}