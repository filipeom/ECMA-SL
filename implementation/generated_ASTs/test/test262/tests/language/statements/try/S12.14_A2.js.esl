function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "catchme";
__n6["raw"] := "\"catchme\"";
__n5["argument"] := __n6;
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "$ERROR";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "#1: throw \"catchme\" lead to throwing exception";
__n11["raw"] := "'#1: throw \"catchme\" lead to throwing exception'";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n7["expression"] := __n8;
__n4 := [ __n5, __n7 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n12 := {  };
__n12["type"] := "CatchClause";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "e";
__n12["param"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n15 := [  ];
__n14["body"] := __n15;
__n12["body"] := __n14;
__n2["handler"] := __n12;
__n2["finalizer"] := null;
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "c2";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n21 := {  };
__n21["type"] := "TryStatement";
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "TryStatement";
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ThrowStatement";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "exc";
__n28["raw"] := "\"exc\"";
__n27["argument"] := __n28;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#2.1: throw \"exc\" lead to throwing exception";
__n33["raw"] := "'#2.1: throw \"exc\" lead to throwing exception'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n26 := [ __n27, __n29 ];
__n25["body"] := __n26;
__n24["block"] := __n25;
__n24["handler"] := null;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "AssignmentExpression";
__n37["operator"] := "=";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "c2";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 1.;
__n39["raw"] := "1";
__n37["right"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n24["finalizer"] := __n34;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n21["block"] := __n22;
__n40 := {  };
__n40["type"] := "CatchClause";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "e";
__n40["param"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "c2";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n45["right"] := __n47;
__n44["test"] := __n45;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2.2: \"finally\" block must be evaluated";
__n54["raw"] := "'#2.2: \"finally\" block must be evaluated'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n44["consequent"] := __n48;
__n44["alternate"] := null;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n40["body"] := __n42;
__n21["handler"] := __n40;
__n21["finalizer"] := null;
__n55 := {  };
__n55["type"] := "VariableDeclaration";
__n57 := {  };
__n57["type"] := "VariableDeclarator";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "c3";
__n57["id"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n57["init"] := __n59;
__n56 := [ __n57 ];
__n55["declarations"] := __n56;
__n55["kind"] := "var";
__n60 := {  };
__n60["type"] := "TryStatement";
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ThrowStatement";
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "exc";
__n64["raw"] := "\"exc\"";
__n63["argument"] := __n64;
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#3.1: throw \"exc\" lead to throwing exception";
__n69["raw"] := "'#3.1: throw \"exc\" lead to throwing exception'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n62 := [ __n63, __n65 ];
__n61["body"] := __n62;
__n60["block"] := __n61;
__n70 := {  };
__n70["type"] := "CatchClause";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "err";
__n70["param"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "VariableDeclaration";
__n76 := {  };
__n76["type"] := "VariableDeclarator";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x3";
__n76["id"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 1.;
__n78["raw"] := "1";
__n76["init"] := __n78;
__n75 := [ __n76 ];
__n74["declarations"] := __n75;
__n74["kind"] := "var";
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n70["body"] := __n72;
__n60["handler"] := __n70;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "AssignmentExpression";
__n82["operator"] := "=";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "c3";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := 1.;
__n84["raw"] := "1";
__n82["right"] := __n84;
__n81["expression"] := __n82;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n60["finalizer"] := __n79;
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "!==";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "x3";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n86["right"] := __n88;
__n85["test"] := __n86;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#3.2: \"catch\" block must be evaluated";
__n95["raw"] := "'#3.2: \"catch\" block must be evaluated'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n85["consequent"] := __n89;
__n85["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "c3";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 1.;
__n99["raw"] := "1";
__n97["right"] := __n99;
__n96["test"] := __n97;
__n100 := {  };
__n100["type"] := "BlockStatement";
__n102 := {  };
__n102["type"] := "ExpressionStatement";
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "$ERROR";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#3.3: \"finally\" block must be evaluated";
__n106["raw"] := "'#3.3: \"finally\" block must be evaluated'";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n102["expression"] := __n103;
__n101 := [ __n102 ];
__n100["body"] := __n101;
__n96["consequent"] := __n100;
__n96["alternate"] := null;
__n1 := [ __n2, __n16, __n21, __n55, __n60, __n85, __n96 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n107 := [ "c2", "c3", "x3" ];
__n0["variableDeclarations"] := __n107;
__n108 := [  ];
__n0["functionDeclarations"] := __n108;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}