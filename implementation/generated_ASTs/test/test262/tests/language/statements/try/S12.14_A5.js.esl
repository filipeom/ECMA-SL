function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "catchme";
__n6["raw"] := "\"catchme\"";
__n5["argument"] := __n6;
__n7 := {  };
__n7["type"] := "ThrowStatement";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "dontcatchme";
__n8["raw"] := "\"dontcatchme\"";
__n7["argument"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "#1.1: throw \"catchme\" lead to throwing exception";
__n13["raw"] := "'#1.1: throw \"catchme\" lead to throwing exception'";
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n4 := [ __n5, __n7, __n9 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "===";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "dontcatchme";
__n21["raw"] := "\"dontcatchme\"";
__n19["right"] := __n21;
__n18["test"] := __n19;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1.2: Exception !== \"dontcatchme\"";
__n28["raw"] := "'#1.2: Exception !== \"dontcatchme\"'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n18["consequent"] := __n22;
__n18["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "catchme";
__n32["raw"] := "\"catchme\"";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#1.3: Exception === \"catchme\". Actual:  Exception ===";
__n40["raw"] := "'#1.3: Exception === \"catchme\". Actual:  Exception ==='";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "e";
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n17 := [ __n18, __n29 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n2["handler"] := __n14;
__n2["finalizer"] := null;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "SwitchTest1";
__n42["expression"] := __n43;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "SwitchTest1";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["left"] := __n46;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 4.;
__n50["raw"] := "4";
__n45["right"] := __n50;
__n44["test"] := __n45;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#2.3: \"finally\" block must be evaluated";
__n55["raw"] := "'#2.3: \"finally\" block must be evaluated'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n44["consequent"] := __n51;
__n44["alternate"] := null;
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "SwitchTest1";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 4.;
__n61["raw"] := "4";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["left"] := __n58;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 64.;
__n62["raw"] := "64";
__n57["right"] := __n62;
__n56["test"] := __n57;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$ERROR";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "#2.4: \"finally\" block must be evaluated";
__n67["raw"] := "'#2.4: \"finally\" block must be evaluated'";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n56["consequent"] := __n63;
__n56["alternate"] := null;
__n1 := [ __n2, __n42, __n44, __n56 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n68 := [  ];
__n0["variableDeclarations"] := __n68;
__n70 := {  };
__n70["type"] := "FunctionDeclaration";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "SwitchTest1";
__n70["id"] := __n71;
__n72 := [ "value" ];
__n70["params"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "VariableDeclaration";
__n77 := {  };
__n77["type"] := "VariableDeclarator";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "result";
__n77["id"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 0.;
__n79["raw"] := "0";
__n77["init"] := __n79;
__n76 := [ __n77 ];
__n75["declarations"] := __n76;
__n75["kind"] := "var";
__n80 := {  };
__n80["type"] := "TryStatement";
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "SwitchStatement";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "value";
__n83["discriminant"] := __n84;
__n87 := {  };
__n87["type"] := "SwitchCase";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 1.;
__n88["raw"] := "1";
__n87["test"] := __n88;
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "AssignmentExpression";
__n91["operator"] := "+=";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "result";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 4.;
__n93["raw"] := "4";
__n91["right"] := __n93;
__n90["expression"] := __n91;
__n94 := {  };
__n94["type"] := "ThrowStatement";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "result";
__n94["argument"] := __n95;
__n96 := {  };
__n96["type"] := "BreakStatement";
__n96["label"] := null;
__n89 := [ __n90, __n94, __n96 ];
__n87["consequent"] := __n89;
__n97 := {  };
__n97["type"] := "SwitchCase";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 4.;
__n98["raw"] := "4";
__n97["test"] := __n98;
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "AssignmentExpression";
__n101["operator"] := "+=";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "result";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := 64.;
__n103["raw"] := "64";
__n101["right"] := __n103;
__n100["expression"] := __n101;
__n104 := {  };
__n104["type"] := "ThrowStatement";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "ex";
__n105["raw"] := "\"ex\"";
__n104["argument"] := __n105;
__n99 := [ __n100, __n104 ];
__n97["consequent"] := __n99;
__n86 := [ __n87, __n97 ];
__n106 := [  ];
__n85 := [ __n86, null, __n106 ];
__n83["cases"] := __n85;
__n107 := {  };
__n107["type"] := "ReturnStatement";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "result";
__n107["argument"] := __n108;
__n82 := [ __n83, __n107 ];
__n81["body"] := __n82;
__n80["block"] := __n81;
__n109 := {  };
__n109["type"] := "CatchClause";
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "e";
__n109["param"] := __n110;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "IfStatement";
__n114 := {  };
__n114["type"] := "LogicalExpression";
__n114["operator"] := "&&";
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "===";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "value";
__n115["left"] := __n116;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 1.;
__n117["raw"] := "1";
__n115["right"] := __n117;
__n114["left"] := __n115;
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "!==";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "e";
__n118["left"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := 4.;
__n120["raw"] := "4";
__n118["right"] := __n120;
__n114["right"] := __n118;
__n113["test"] := __n114;
__n121 := {  };
__n121["type"] := "ExpressionStatement";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "$ERROR";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "BinaryExpression";
__n125["operator"] := "+";
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "#2.1: Exception === 4. Actual: ";
__n126["raw"] := "'#2.1: Exception === 4. Actual: '";
__n125["left"] := __n126;
__n127 := {  };
__n127["type"] := "Identifier";
__n127["name"] := "e";
__n125["right"] := __n127;
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n121["expression"] := __n122;
__n113["consequent"] := __n121;
__n113["alternate"] := null;
__n128 := {  };
__n128["type"] := "IfStatement";
__n129 := {  };
__n129["type"] := "LogicalExpression";
__n129["operator"] := "&&";
__n130 := {  };
__n130["type"] := "BinaryExpression";
__n130["operator"] := "===";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "value";
__n130["left"] := __n131;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := 4.;
__n132["raw"] := "4";
__n130["right"] := __n132;
__n129["left"] := __n130;
__n133 := {  };
__n133["type"] := "BinaryExpression";
__n133["operator"] := "!==";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "e";
__n133["left"] := __n134;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := "ex";
__n135["raw"] := "\"ex\"";
__n133["right"] := __n135;
__n129["right"] := __n133;
__n128["test"] := __n129;
__n136 := {  };
__n136["type"] := "ExpressionStatement";
__n137 := {  };
__n137["type"] := "CallExpression";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "$ERROR";
__n137["callee"] := __n138;
__n140 := {  };
__n140["type"] := "BinaryExpression";
__n140["operator"] := "+";
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "#2.2: Exception === \"ex\". Actual: ";
__n141["raw"] := "'#2.2: Exception === \"ex\". Actual: '";
__n140["left"] := __n141;
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "e";
__n140["right"] := __n142;
__n139 := [ __n140 ];
__n137["arguments"] := __n139;
__n136["expression"] := __n137;
__n128["consequent"] := __n136;
__n128["alternate"] := null;
__n112 := [ __n113, __n128 ];
__n111["body"] := __n112;
__n109["body"] := __n111;
__n80["handler"] := __n109;
__n143 := {  };
__n143["type"] := "BlockStatement";
__n145 := {  };
__n145["type"] := "ReturnStatement";
__n146 := {  };
__n146["type"] := "Identifier";
__n146["name"] := "result";
__n145["argument"] := __n146;
__n144 := [ __n145 ];
__n143["body"] := __n144;
__n80["finalizer"] := __n143;
__n74 := [ __n75, __n80 ];
__n73["body"] := __n74;
__n147 := [ "result" ];
__n73["variableDeclarations"] := __n147;
__n148 := [  ];
__n73["functionDeclarations"] := __n148;
__n73["codeType"] := "function";
__n73["strict"] := false;
__n70["body"] := __n73;
__n70["generator"] := false;
__n70["expression"] := false;
__n70["async"] := false;
__n69 := [ __n70 ];
__n0["functionDeclarations"] := __n69;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}