function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "+=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "c1";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n11["right"] := __n13;
__n10["expression"] := __n11;
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "y";
__n14["expression"] := __n15;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1.1: \"y\" lead to throwing exception";
__n20["raw"] := "'#1.1: \"y\" lead to throwing exception'";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n9 := [ __n10, __n14, __n16 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n21 := {  };
__n21["type"] := "CatchClause";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["param"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "*=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "c1";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 2.;
__n28["raw"] := "2";
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n21["body"] := __n23;
__n7["handler"] := __n21;
__n7["finalizer"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "c1";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 2.;
__n32["raw"] := "2";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1.2: Sequence evaluation of commands try/catch is 1. try, 2. catch";
__n39["raw"] := "'#1.2: Sequence evaluation of commands try/catch is 1. try, 2. catch'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n40 := {  };
__n40["type"] := "VariableDeclaration";
__n42 := {  };
__n42["type"] := "VariableDeclarator";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "c2";
__n42["id"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 0.;
__n44["raw"] := "0";
__n42["init"] := __n44;
__n41 := [ __n42 ];
__n40["declarations"] := __n41;
__n40["kind"] := "var";
__n45 := {  };
__n45["type"] := "TryStatement";
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "AssignmentExpression";
__n49["operator"] := "+=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "c2";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 1.;
__n51["raw"] := "1";
__n49["right"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n45["block"] := __n46;
__n45["handler"] := null;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "*=";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "c2";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 2.;
__n57["raw"] := "2";
__n55["right"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n45["finalizer"] := __n52;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "c2";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 2.;
__n61["raw"] := "2";
__n59["right"] := __n61;
__n58["test"] := __n59;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "$ERROR";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#2: Sequence evaluation of commands try/finally is 1. try, 2. finally";
__n68["raw"] := "'#2: Sequence evaluation of commands try/finally is 1. try, 2. finally'";
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n58["consequent"] := __n62;
__n58["alternate"] := null;
__n69 := {  };
__n69["type"] := "VariableDeclaration";
__n71 := {  };
__n71["type"] := "VariableDeclarator";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "c3";
__n71["id"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n71["init"] := __n73;
__n70 := [ __n71 ];
__n69["declarations"] := __n70;
__n69["kind"] := "var";
__n74 := {  };
__n74["type"] := "TryStatement";
__n75 := {  };
__n75["type"] := "BlockStatement";
__n77 := {  };
__n77["type"] := "ExpressionStatement";
__n78 := {  };
__n78["type"] := "AssignmentExpression";
__n78["operator"] := "=";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "c3";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := 1.;
__n80["raw"] := "1";
__n78["right"] := __n80;
__n77["expression"] := __n78;
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "z";
__n81["expression"] := __n82;
__n76 := [ __n77, __n81 ];
__n75["body"] := __n76;
__n74["block"] := __n75;
__n83 := {  };
__n83["type"] := "CatchClause";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "err";
__n83["param"] := __n84;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "AssignmentExpression";
__n88["operator"] := "*=";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "c3";
__n88["left"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := 2.;
__n90["raw"] := "2";
__n88["right"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n83["body"] := __n85;
__n74["handler"] := __n83;
__n91 := {  };
__n91["type"] := "BlockStatement";
__n93 := {  };
__n93["type"] := "ExpressionStatement";
__n94 := {  };
__n94["type"] := "AssignmentExpression";
__n94["operator"] := "+=";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "c3";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 1.;
__n96["raw"] := "1";
__n94["right"] := __n96;
__n93["expression"] := __n94;
__n92 := [ __n93 ];
__n91["body"] := __n92;
__n74["finalizer"] := __n91;
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "BinaryExpression";
__n98["operator"] := "!==";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "c3";
__n98["left"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := 3.;
__n100["raw"] := "3";
__n98["right"] := __n100;
__n97["test"] := __n98;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "ExpressionStatement";
__n104 := {  };
__n104["type"] := "CallExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "$ERROR";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "#3: Sequence evaluation of commands try/catch/finally(with exception) is 1. try, 2. catch, 3. finally";
__n107["raw"] := "'#3: Sequence evaluation of commands try/catch/finally(with exception) is 1. try, 2. catch, 3. finally'";
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["expression"] := __n104;
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n97["consequent"] := __n101;
__n97["alternate"] := null;
__n108 := {  };
__n108["type"] := "VariableDeclaration";
__n110 := {  };
__n110["type"] := "VariableDeclarator";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "c4";
__n110["id"] := __n111;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := 0.;
__n112["raw"] := "0";
__n110["init"] := __n112;
__n109 := [ __n110 ];
__n108["declarations"] := __n109;
__n108["kind"] := "var";
__n113 := {  };
__n113["type"] := "TryStatement";
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "AssignmentExpression";
__n117["operator"] := "=";
__n118 := {  };
__n118["type"] := "Identifier";
__n118["name"] := "c4";
__n117["left"] := __n118;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := 1.;
__n119["raw"] := "1";
__n117["right"] := __n119;
__n116["expression"] := __n117;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n113["block"] := __n114;
__n120 := {  };
__n120["type"] := "CatchClause";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "err";
__n120["param"] := __n121;
__n122 := {  };
__n122["type"] := "BlockStatement";
__n124 := {  };
__n124["type"] := "ExpressionStatement";
__n125 := {  };
__n125["type"] := "AssignmentExpression";
__n125["operator"] := "*=";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "c4";
__n125["left"] := __n126;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := 3.;
__n127["raw"] := "3";
__n125["right"] := __n127;
__n124["expression"] := __n125;
__n123 := [ __n124 ];
__n122["body"] := __n123;
__n120["body"] := __n122;
__n113["handler"] := __n120;
__n128 := {  };
__n128["type"] := "BlockStatement";
__n130 := {  };
__n130["type"] := "ExpressionStatement";
__n131 := {  };
__n131["type"] := "AssignmentExpression";
__n131["operator"] := "+=";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "c4";
__n131["left"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := 1.;
__n133["raw"] := "1";
__n131["right"] := __n133;
__n130["expression"] := __n131;
__n129 := [ __n130 ];
__n128["body"] := __n129;
__n113["finalizer"] := __n128;
__n134 := {  };
__n134["type"] := "IfStatement";
__n135 := {  };
__n135["type"] := "BinaryExpression";
__n135["operator"] := "!==";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "c4";
__n135["left"] := __n136;
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := 2.;
__n137["raw"] := "2";
__n135["right"] := __n137;
__n134["test"] := __n135;
__n138 := {  };
__n138["type"] := "BlockStatement";
__n140 := {  };
__n140["type"] := "ExpressionStatement";
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "$ERROR";
__n141["callee"] := __n142;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "#4: Sequence evaluation of commands try/catch/finally(without exception) is 1. try, 2. finally";
__n144["raw"] := "'#4: Sequence evaluation of commands try/catch/finally(without exception) is 1. try, 2. finally'";
__n143 := [ __n144 ];
__n141["arguments"] := __n143;
__n140["expression"] := __n141;
__n139 := [ __n140 ];
__n138["body"] := __n139;
__n134["consequent"] := __n138;
__n134["alternate"] := null;
__n1 := [ __n2, __n7, __n29, __n40, __n45, __n58, __n69, __n74, __n97, __n108, __n113, __n134 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n145 := [ "c1", "c2", "c3", "c4" ];
__n0["variableDeclarations"] := __n145;
__n146 := [  ];
__n0["functionDeclarations"] := __n146;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}