function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "c1";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "===";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "c1";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 1.;
__n13["raw"] := "1";
__n11["right"] := __n13;
__n10["test"] := __n11;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ThrowStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "ex1";
__n17["raw"] := "\"ex1\"";
__n16["argument"] := __n17;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1.1: throw \"ex1\" lead to throwing exception";
__n22["raw"] := "'#1.1: throw \"ex1\" lead to throwing exception'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n15 := [ __n16, __n18 ];
__n14["body"] := __n15;
__n10["consequent"] := __n14;
__n10["alternate"] := null;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1.2: throw \"ex1\" inside the \"if\" statement lead to throwing exception";
__n27["raw"] := "'#1.2: throw \"ex1\" inside the \"if\" statement lead to throwing exception'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n9 := [ __n10, __n23 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n28 := {  };
__n28["type"] := "CatchClause";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "er1";
__n28["param"] := __n29;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "er1";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "ex1";
__n35["raw"] := "\"ex1\"";
__n33["right"] := __n35;
__n32["test"] := __n33;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1.3: Exception ===\"ex1\". Actual:  Exception ===";
__n41["raw"] := "'#1.3: Exception ===\"ex1\". Actual:  Exception ==='";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "er1";
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n32["consequent"] := __n36;
__n32["alternate"] := null;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n28["body"] := __n30;
__n7["handler"] := __n28;
__n7["finalizer"] := null;
__n43 := {  };
__n43["type"] := "VariableDeclaration";
__n45 := {  };
__n45["type"] := "VariableDeclarator";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "c2";
__n45["id"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n45["init"] := __n47;
__n44 := [ __n45 ];
__n43["declarations"] := __n44;
__n43["kind"] := "var";
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "c2";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 1.;
__n51["raw"] := "1";
__n49["right"] := __n51;
__n48["test"] := __n49;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "TryStatement";
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ThrowStatement";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "ex1";
__n58["raw"] := "\"ex1\"";
__n57["argument"] := __n58;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2.1: throw \"ex1\" lead to throwing exception";
__n63["raw"] := "'#2.1: throw \"ex1\" lead to throwing exception'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n56 := [ __n57, __n59 ];
__n55["body"] := __n56;
__n54["block"] := __n55;
__n64 := {  };
__n64["type"] := "CatchClause";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "er1";
__n64["param"] := __n65;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!=";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "er1";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "ex1";
__n71["raw"] := "\"ex1\"";
__n69["right"] := __n71;
__n68["test"] := __n69;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "+";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#2.2: Exception ===\"ex1\". Actual:  Exception ===";
__n77["raw"] := "'#2.2: Exception ===\"ex1\". Actual:  Exception ==='";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "er1";
__n76["right"] := __n78;
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n68["consequent"] := __n72;
__n68["alternate"] := null;
__n67 := [ __n68 ];
__n66["body"] := __n67;
__n64["body"] := __n66;
__n54["handler"] := __n64;
__n54["finalizer"] := null;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n48["consequent"] := __n52;
__n48["alternate"] := null;
__n1 := [ __n2, __n7, __n43, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n79 := [ "c1", "c2" ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}