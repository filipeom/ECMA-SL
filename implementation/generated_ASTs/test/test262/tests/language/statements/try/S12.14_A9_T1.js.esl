function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "i";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "DoWhileStatement";
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "===";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "i";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 5.;
__n16["raw"] := "5";
__n14["right"] := __n16;
__n13["test"] := __n14;
__n17 := {  };
__n17["type"] := "ThrowStatement";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "i";
__n17["argument"] := __n18;
__n13["consequent"] := __n17;
__n13["alternate"] := null;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "UpdateExpression";
__n20["operator"] := "++";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "i";
__n20["argument"] := __n21;
__n20["prefix"] := false;
__n19["expression"] := __n20;
__n12 := [ __n13, __n19 ];
__n11["body"] := __n12;
__n10["body"] := __n11;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "<";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "i";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 10.;
__n24["raw"] := "10";
__n22["right"] := __n24;
__n10["test"] := __n22;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n25 := {  };
__n25["type"] := "CatchClause";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["param"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 5.;
__n32["raw"] := "5";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: Exception ===5. Actual:  Exception ===";
__n38["raw"] := "'#1: Exception ===5. Actual:  Exception ==='";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "e";
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n25["body"] := __n27;
__n7["handler"] := __n25;
__n7["finalizer"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [ "i" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}