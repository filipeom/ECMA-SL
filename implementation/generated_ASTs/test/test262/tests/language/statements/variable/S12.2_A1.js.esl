function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__x";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__x";
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "__y";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "ConditionalExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__x";
__n12["test"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "good fellow";
__n14["raw"] := "\"good fellow\"";
__n12["consequent"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "liar";
__n15["raw"] := "\"liar\"";
__n12["alternate"] := __n15;
__n10["right"] := __n12;
__n9["expression"] := __n10;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "__z";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "ConditionalExpression";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__z";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__x";
__n20["right"] := __n22;
__n19["test"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n19["consequent"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n19["alternate"] := __n24;
__n17["right"] := __n19;
__n16["expression"] := __n17;
__n4 := [ __n5, __n9, __n16 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n25 := {  };
__n25["type"] := "CatchClause";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["param"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: Using declarated variable before it declaration is admitted";
__n33["raw"] := "'#1: Using declarated variable before it declaration is admitted'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n25["body"] := __n27;
__n2["handler"] := __n25;
__n2["finalizer"] := null;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "throws";
__n38["raw"] := "\"throws\"";
__n36["property"] := __n38;
__n36["computed"] := true;
__n35["callee"] := __n36;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "ReferenceError";
__n41 := {  };
__n41["type"] := "FunctionExpression";
__n41["id"] := null;
__n42 := [  ];
__n41["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "AssignmentExpression";
__n46["operator"] := "=";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__something__undefined";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__something__undefined";
__n46["right"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n49 := [  ];
__n43["variableDeclarations"] := __n49;
__n50 := [  ];
__n43["functionDeclarations"] := __n50;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n41["body"] := __n43;
__n41["generator"] := false;
__n41["expression"] := false;
__n41["async"] := false;
__n39 := [ __n40, __n41 ];
__n35["arguments"] := __n39;
__n34["expression"] := __n35;
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "&";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "!==";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__y";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "liar";
__n55["raw"] := "\"liar\"";
__n53["right"] := __n55;
__n52["left"] := __n53;
__n56 := {  };
__n56["type"] := "BinaryExpression";
__n56["operator"] := "!==";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__z";
__n56["left"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 1.;
__n58["raw"] := "1";
__n56["right"] := __n58;
__n52["right"] := __n56;
__n51["test"] := __n52;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "#3: (__y === \"liar\") and (__z === 1). Actual:  __y ===";
__n68["raw"] := "'#3: (__y === \"liar\") and (__z === 1). Actual:  __y ==='";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "__y";
__n67["right"] := __n69;
__n66["left"] := __n67;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := " and __z ===";
__n70["raw"] := "' and __z ==='";
__n66["right"] := __n70;
__n65["left"] := __n66;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "__z";
__n65["right"] := __n71;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n51["consequent"] := __n59;
__n51["alternate"] := null;
__n72 := {  };
__n72["type"] := "VariableDeclaration";
__n74 := {  };
__n74["type"] := "VariableDeclarator";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "__x";
__n74["id"] := __n75;
__n74["init"] := null;
__n76 := {  };
__n76["type"] := "VariableDeclarator";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "__y";
__n76["id"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := true;
__n78["raw"] := "true";
__n76["init"] := __n78;
__n79 := {  };
__n79["type"] := "VariableDeclarator";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__z";
__n79["id"] := __n80;
__n81 := {  };
__n81["type"] := "ConditionalExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__y";
__n81["test"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "smeagol";
__n83["raw"] := "\"smeagol\"";
__n81["consequent"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "golum";
__n84["raw"] := "\"golum\"";
__n81["alternate"] := __n84;
__n79["init"] := __n81;
__n73 := [ __n74, __n76, __n79 ];
__n72["declarations"] := __n73;
__n72["kind"] := "var";
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "&";
__n87 := {  };
__n87["type"] := "UnaryExpression";
__n87["operator"] := "!";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "__y";
__n87["argument"] := __n88;
__n87["prefix"] := true;
__n86["left"] := __n87;
__n89 := {  };
__n89["type"] := "UnaryExpression";
__n89["operator"] := "!";
__n90 := {  };
__n90["type"] := "AssignmentExpression";
__n90["operator"] := "=";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "__z";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "smeagol";
__n92["raw"] := "\"smeagol\"";
__n90["right"] := __n92;
__n89["argument"] := __n90;
__n89["prefix"] := true;
__n86["right"] := __n89;
__n85["test"] := __n86;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "#4: A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed";
__n99["raw"] := "'#4: A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed'";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n85["consequent"] := __n93;
__n85["alternate"] := null;
__n1 := [ __n2, __n34, __n51, __n72, __n85 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n100 := [ "__x", "__y", "__z" ];
__n0["variableDeclarations"] := __n100;
__n101 := [  ];
__n0["functionDeclarations"] := __n101;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}