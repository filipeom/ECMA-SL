function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__ind";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__ind";
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n9 := {  };
__n9["type"] := "CatchClause";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "e";
__n9["param"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: var inside \"for\" is admitted ";
__n18["raw"] := "'#1: var inside \"for\" is admitted '";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "e";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "message";
__n21["raw"] := "\"message\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n9["body"] := __n11;
__n2["handler"] := __n9;
__n2["finalizer"] := null;
__n22 := {  };
__n22["type"] := "ForStatement";
__n23 := {  };
__n23["type"] := "VariableDeclaration";
__n25 := {  };
__n25["type"] := "VariableDeclarator";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__ind";
__n25["id"] := __n26;
__n25["init"] := null;
__n24 := [ __n25 ];
__n23["declarations"] := __n24;
__n23["kind"] := "var";
__n22["init"] := __n23;
__n22["test"] := null;
__n22["update"] := null;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "BreakStatement";
__n29["label"] := null;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n22["body"] := __n27;
__n1 := [ __n2, __n22 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n30 := [ "__ind" ];
__n0["variableDeclarations"] := __n30;
__n31 := [  ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}