function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__var";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "OUT";
__n6["raw"] := "\"OUT\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__var";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "IN";
__n17["raw"] := "\"IN\"";
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__var";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "INNER_SPACE";
__n27["raw"] := "\"INNER_SPACE\"";
__n25["right"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n28 := [  ];
__n22["variableDeclarations"] := __n28;
__n29 := [  ];
__n22["functionDeclarations"] := __n29;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["expression"] := false;
__n20["async"] := false;
__n19["callee"] := __n20;
__n30 := [  ];
__n19["arguments"] := __n30;
__n18["expression"] := __n19;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [  ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "VariableDeclaration";
__n39 := {  };
__n39["type"] := "VariableDeclarator";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__var";
__n39["id"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "INNER_SUN";
__n41["raw"] := "\"INNER_SUN\"";
__n39["init"] := __n41;
__n38 := [ __n39 ];
__n37["declarations"] := __n38;
__n37["kind"] := "var";
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n42 := [ "__var" ];
__n35["variableDeclarations"] := __n42;
__n43 := [  ];
__n35["functionDeclarations"] := __n43;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["expression"] := false;
__n33["async"] := false;
__n32["callee"] := __n33;
__n44 := [  ];
__n32["arguments"] := __n44;
__n31["expression"] := __n32;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__var";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "INNER_SPACE";
__n48["raw"] := "\"INNER_SPACE\"";
__n46["right"] := __n48;
__n45["test"] := __n46;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#1: __var === \"INNER_SPACE\". Actual:  __var ===";
__n56["raw"] := "'#1: __var === \"INNER_SPACE\". Actual:  __var ==='";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__var";
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n45["consequent"] := __n49;
__n45["alternate"] := null;
__n12 := [ __n13, __n18, __n31, __n45 ];
__n11["body"] := __n12;
__n58 := [ "__var" ];
__n11["variableDeclarations"] := __n58;
__n59 := [  ];
__n11["functionDeclarations"] := __n59;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["expression"] := false;
__n9["async"] := false;
__n8["callee"] := __n9;
__n60 := [  ];
__n8["arguments"] := __n60;
__n7["expression"] := __n8;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "!==";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__var";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "OUT";
__n64["raw"] := "\"OUT\"";
__n62["right"] := __n64;
__n61["test"] := __n62;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "+";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "#2: __var === \"OUT\". Actual:  __var ===";
__n72["raw"] := "'#2: __var === \"OUT\". Actual:  __var ==='";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__var";
__n71["right"] := __n73;
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n61["consequent"] := __n65;
__n61["alternate"] := null;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "FunctionExpression";
__n76["id"] := null;
__n77 := [  ];
__n76["params"] := __n77;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "AssignmentExpression";
__n81["operator"] := "=";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__var";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "IN";
__n83["raw"] := "\"IN\"";
__n81["right"] := __n83;
__n80["expression"] := __n81;
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "FunctionExpression";
__n86["id"] := null;
__n87 := [  ];
__n86["params"] := __n87;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "AssignmentExpression";
__n91["operator"] := "=";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "__var";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "INNERED";
__n93["raw"] := "\"INNERED\"";
__n91["right"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n94 := [  ];
__n88["variableDeclarations"] := __n94;
__n95 := [  ];
__n88["functionDeclarations"] := __n95;
__n88["codeType"] := "function";
__n88["strict"] := false;
__n86["body"] := __n88;
__n86["generator"] := false;
__n86["expression"] := false;
__n86["async"] := false;
__n85["callee"] := __n86;
__n96 := [  ];
__n85["arguments"] := __n96;
__n84["expression"] := __n85;
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "FunctionExpression";
__n99["id"] := null;
__n100 := [  ];
__n99["params"] := __n100;
__n101 := {  };
__n101["type"] := "BlockStatement";
__n103 := {  };
__n103["type"] := "VariableDeclaration";
__n105 := {  };
__n105["type"] := "VariableDeclarator";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "__var";
__n105["id"] := __n106;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "INNAGER";
__n107["raw"] := "\"INNAGER\"";
__n105["init"] := __n107;
__n104 := [ __n105 ];
__n103["declarations"] := __n104;
__n103["kind"] := "var";
__n102 := [ __n103 ];
__n101["body"] := __n102;
__n108 := [ "__var" ];
__n101["variableDeclarations"] := __n108;
__n109 := [  ];
__n101["functionDeclarations"] := __n109;
__n101["codeType"] := "function";
__n101["strict"] := false;
__n99["body"] := __n101;
__n99["generator"] := false;
__n99["expression"] := false;
__n99["async"] := false;
__n98["callee"] := __n99;
__n110 := [  ];
__n98["arguments"] := __n110;
__n97["expression"] := __n98;
__n111 := {  };
__n111["type"] := "IfStatement";
__n112 := {  };
__n112["type"] := "BinaryExpression";
__n112["operator"] := "!==";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "__var";
__n112["left"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "INNERED";
__n114["raw"] := "\"INNERED\"";
__n112["right"] := __n114;
__n111["test"] := __n112;
__n115 := {  };
__n115["type"] := "BlockStatement";
__n117 := {  };
__n117["type"] := "ExpressionStatement";
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "$ERROR";
__n118["callee"] := __n119;
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "+";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#3: __var===\"INNERED\". Actual:  __var===";
__n122["raw"] := "'#3: __var===\"INNERED\". Actual:  __var==='";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "__var";
__n121["right"] := __n123;
__n120 := [ __n121 ];
__n118["arguments"] := __n120;
__n117["expression"] := __n118;
__n116 := [ __n117 ];
__n115["body"] := __n116;
__n111["consequent"] := __n115;
__n111["alternate"] := null;
__n79 := [ __n80, __n84, __n97, __n111 ];
__n78["body"] := __n79;
__n124 := [  ];
__n78["variableDeclarations"] := __n124;
__n125 := [  ];
__n78["functionDeclarations"] := __n125;
__n78["codeType"] := "function";
__n78["strict"] := false;
__n76["body"] := __n78;
__n76["generator"] := false;
__n76["expression"] := false;
__n76["async"] := false;
__n75["callee"] := __n76;
__n126 := [  ];
__n75["arguments"] := __n126;
__n74["expression"] := __n75;
__n127 := {  };
__n127["type"] := "IfStatement";
__n128 := {  };
__n128["type"] := "BinaryExpression";
__n128["operator"] := "!==";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "__var";
__n128["left"] := __n129;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "INNERED";
__n130["raw"] := "\"INNERED\"";
__n128["right"] := __n130;
__n127["test"] := __n128;
__n131 := {  };
__n131["type"] := "BlockStatement";
__n133 := {  };
__n133["type"] := "ExpressionStatement";
__n134 := {  };
__n134["type"] := "CallExpression";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "$ERROR";
__n134["callee"] := __n135;
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "+";
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := "#4: __var===\"INNERED\". Actual:  __var===";
__n138["raw"] := "'#4: __var===\"INNERED\". Actual:  __var==='";
__n137["left"] := __n138;
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "__var";
__n137["right"] := __n139;
__n136 := [ __n137 ];
__n134["arguments"] := __n136;
__n133["expression"] := __n134;
__n132 := [ __n133 ];
__n131["body"] := __n132;
__n127["consequent"] := __n131;
__n127["alternate"] := null;
__n1 := [ __n2, __n7, __n61, __n74, __n127 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n140 := [ "__var" ];
__n0["variableDeclarations"] := __n140;
__n141 := [  ];
__n0["functionDeclarations"] := __n141;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}