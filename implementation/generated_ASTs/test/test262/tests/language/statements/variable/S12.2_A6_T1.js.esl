function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "intry__var";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "intry__var";
__n6["right"] := __n8;
__n5["expression"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n9 := {  };
__n9["type"] := "CatchClause";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "e";
__n9["param"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: Variable declaration inside \"try\" block is admitted";
__n17["raw"] := "'#1: Variable declaration inside \"try\" block is admitted'";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n9["body"] := __n11;
__n2["handler"] := __n9;
__n2["finalizer"] := null;
__n18 := {  };
__n18["type"] := "EmptyStatement";
__n19 := {  };
__n19["type"] := "TryStatement";
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "incatch__var";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "incatch__var";
__n23["right"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n19["block"] := __n20;
__n26 := {  };
__n26["type"] := "CatchClause";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["param"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "#2: Variable declaration inside \"catch\" block is admitted";
__n34["raw"] := "'#2: Variable declaration inside \"catch\" block is admitted'";
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n26["body"] := __n28;
__n19["handler"] := __n26;
__n19["finalizer"] := null;
__n35 := {  };
__n35["type"] := "EmptyStatement";
__n36 := {  };
__n36["type"] := "TryStatement";
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "VariableDeclaration";
__n41 := {  };
__n41["type"] := "VariableDeclarator";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "intry__var";
__n41["id"] := __n42;
__n41["init"] := null;
__n40 := [ __n41 ];
__n39["declarations"] := __n40;
__n39["kind"] := "var";
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n36["block"] := __n37;
__n43 := {  };
__n43["type"] := "CatchClause";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "e";
__n43["param"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "VariableDeclaration";
__n49 := {  };
__n49["type"] := "VariableDeclarator";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "incatch__var";
__n49["id"] := __n50;
__n49["init"] := null;
__n48 := [ __n49 ];
__n47["declarations"] := __n48;
__n47["kind"] := "var";
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n43["body"] := __n45;
__n36["handler"] := __n43;
__n36["finalizer"] := null;
__n51 := {  };
__n51["type"] := "EmptyStatement";
__n1 := [ __n2, __n18, __n19, __n35, __n36, __n51 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n52 := [ "intry__var", "incatch__var" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}