function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "enumed";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ForInStatement";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__prop";
__n9["id"] := __n10;
__n9["init"] := null;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n6["left"] := __n7;
__n11 := {  };
__n11["type"] := "ThisExpression";
__n6["right"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "===";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__prop";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "__declared__var";
__n17["raw"] := "\"__declared__var\"";
__n15["right"] := __n17;
__n14["test"] := __n15;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "enumed";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := true;
__n21["raw"] := "true";
__n19["right"] := __n21;
__n18["expression"] := __n19;
__n14["consequent"] := __n18;
__n14["alternate"] := null;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n6["body"] := __n12;
__n6["each"] := false;
__n22 := {  };
__n22["type"] := "IfStatement";
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "!";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "enumed";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n22["test"] := __n23;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: When using property attributes, {DontEnum} not used";
__n31["raw"] := "'#1: When using property attributes, {DontEnum} not used'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n22["consequent"] := __n25;
__n22["alternate"] := null;
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__declared__var";
__n34["id"] := __n35;
__n34["init"] := null;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n1 := [ __n2, __n6, __n22, __n32 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n36 := [ "enumed", "__prop", "__declared__var" ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}