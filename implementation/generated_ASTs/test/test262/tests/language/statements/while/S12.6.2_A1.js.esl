function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__in__do";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "WhileStatement";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := false;
__n7["raw"] := "false";
__n6["test"] := __n7;
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "AssignmentExpression";
__n9["operator"] := "=";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__in__do";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n9["right"] := __n11;
__n8["expression"] := __n9;
__n6["body"] := __n8;
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "!==";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__in__do";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "undefined";
__n13["right"] := __n15;
__n12["test"] := __n13;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: false evaluates to false";
__n22["raw"] := "'#1: false evaluates to false'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n12["consequent"] := __n16;
__n12["alternate"] := null;
__n23 := {  };
__n23["type"] := "WhileStatement";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 0.;
__n24["raw"] := "0";
__n23["test"] := __n24;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "AssignmentExpression";
__n26["operator"] := "=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__in__do";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 2.;
__n28["raw"] := "2";
__n26["right"] := __n28;
__n25["expression"] := __n26;
__n23["body"] := __n25;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__in__do";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "undefined";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: 0 evaluates to false";
__n39["raw"] := "'#2: 0 evaluates to false'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n40 := {  };
__n40["type"] := "WhileStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "";
__n41["raw"] := "\"\"";
__n40["test"] := __n41;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__in__do";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 3.;
__n45["raw"] := "3";
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n40["body"] := __n42;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__in__do";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "undefined";
__n47["right"] := __n49;
__n46["test"] := __n47;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: empty string evaluates to false";
__n56["raw"] := "'#3: empty string evaluates to false'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n46["consequent"] := __n50;
__n46["alternate"] := null;
__n57 := {  };
__n57["type"] := "WhileStatement";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 'null;
__n58["raw"] := "\"'null\"";
__n57["test"] := __n58;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "AssignmentExpression";
__n60["operator"] := "=";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__in__do";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 4.;
__n62["raw"] := "4";
__n60["right"] := __n62;
__n59["expression"] := __n60;
__n57["body"] := __n59;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "!==";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__in__do";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "undefined";
__n64["right"] := __n66;
__n63["test"] := __n64;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#4: null evaluates to false";
__n73["raw"] := "'#4: null evaluates to false'";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n63["consequent"] := __n67;
__n63["alternate"] := null;
__n74 := {  };
__n74["type"] := "WhileStatement";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "undefined";
__n74["test"] := __n75;
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "AssignmentExpression";
__n77["operator"] := "=";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__in__do";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 35.;
__n79["raw"] := "35";
__n77["right"] := __n79;
__n76["expression"] := __n77;
__n74["body"] := __n76;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__in__do";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "undefined";
__n81["right"] := __n83;
__n80["test"] := __n81;
__n84 := {  };
__n84["type"] := "BlockStatement";
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "$ERROR";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#5: undefined evaluates to false";
__n90["raw"] := "'#5: undefined evaluates to false'";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n85 := [ __n86 ];
__n84["body"] := __n85;
__n80["consequent"] := __n84;
__n80["alternate"] := null;
__n1 := [ __n2, __n6, __n12, __n23, __n29, __n40, __n46, __n57, __n63, __n74, __n80 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n91 := [ "__in__do" ];
__n0["variableDeclarations"] := __n91;
__n92 := [  ];
__n0["functionDeclarations"] := __n92;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}