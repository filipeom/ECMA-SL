function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "WhileStatement";
__n3 := {  };
__n3["type"] := "FunctionExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "__func";
__n3["id"] := __n4;
__n5 := [  ];
__n3["params"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ReturnStatement";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n8["argument"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n10 := [  ];
__n6["variableDeclarations"] := __n10;
__n11 := [  ];
__n6["functionDeclarations"] := __n11;
__n6["codeType"] := "function";
__n6["strict"] := false;
__n3["body"] := __n6;
__n3["generator"] := false;
__n3["expression"] := false;
__n3["async"] := false;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__reached";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 1.;
__n18["raw"] := "1";
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n19 := {  };
__n19["type"] := "BreakStatement";
__n19["label"] := null;
__n13 := [ __n14, __n19 ];
__n12["body"] := __n13;
__n2["body"] := __n12;
__n20 := {  };
__n20["type"] := "EmptyStatement";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__reached";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := 1.;
__n24["raw"] := "1";
__n22["right"] := __n24;
__n21["test"] := __n22;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: function expression inside of while expression is allowed";
__n31["raw"] := "'#2: function expression inside of while expression is allowed'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n21["consequent"] := __n25;
__n21["alternate"] := null;
__n1 := [ __n2, __n20, __n21 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n32 := [ "__reached" ];
__n0["variableDeclarations"] := __n32;
__n33 := [  ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}