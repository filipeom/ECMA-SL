function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "do_out";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "WhileStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "===";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n5["left"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n5["right"] := __n7;
__n4["test"] := __n5;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "__in__do__before__break";
__n10["test"] := __n11;
__n12 := {  };
__n12["type"] := "BreakStatement";
__n12["label"] := null;
__n10["consequent"] := __n12;
__n10["alternate"] := null;
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__in__do__before__break";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "black";
__n17["raw"] := "\"black\"";
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n18 := {  };
__n18["type"] := "LabeledStatement";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "do_in";
__n18["label"] := __n19;
__n20 := {  };
__n20["type"] := "WhileStatement";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["test"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "VariableDeclaration";
__n26 := {  };
__n26["type"] := "VariableDeclarator";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "__in__do__IN__before__break";
__n26["id"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "hole";
__n28["raw"] := "\"hole\"";
__n26["init"] := __n28;
__n25 := [ __n26 ];
__n24["declarations"] := __n25;
__n24["kind"] := "var";
__n29 := {  };
__n29["type"] := "BreakStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "do_in";
__n29["label"] := __n30;
__n31 := {  };
__n31["type"] := "VariableDeclaration";
__n33 := {  };
__n33["type"] := "VariableDeclarator";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__in__do__IN__after__break";
__n33["id"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "sun";
__n35["raw"] := "\"sun\"";
__n33["init"] := __n35;
__n32 := [ __n33 ];
__n31["declarations"] := __n32;
__n31["kind"] := "var";
__n23 := [ __n24, __n29, __n31 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n18["body"] := __n20;
__n36 := {  };
__n36["type"] := "EmptyStatement";
__n37 := {  };
__n37["type"] := "VariableDeclaration";
__n39 := {  };
__n39["type"] := "VariableDeclarator";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__in__do__after__break";
__n39["id"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "won't you come";
__n41["raw"] := "\"won't you come\"";
__n39["init"] := __n41;
__n38 := [ __n39 ];
__n37["declarations"] := __n38;
__n37["kind"] := "var";
__n9 := [ __n10, __n13, __n18, __n36, __n37 ];
__n8["body"] := __n9;
__n4["body"] := __n8;
__n2["body"] := __n4;
__n42 := {  };
__n42["type"] := "EmptyStatement";
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "UnaryExpression";
__n44["operator"] := "!";
__n45 := {  };
__n45["type"] := "LogicalExpression";
__n45["operator"] := "&&";
__n46 := {  };
__n46["type"] := "LogicalExpression";
__n46["operator"] := "&&";
__n47 := {  };
__n47["type"] := "LogicalExpression";
__n47["operator"] := "&&";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__in__do__before__break";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__in__do__IN__before__break";
__n47["right"] := __n49;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "!";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__in__do__IN__after__break";
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n46["right"] := __n50;
__n45["left"] := __n46;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__in__do__after__break";
__n45["right"] := __n52;
__n44["argument"] := __n45;
__n44["prefix"] := true;
__n43["test"] := __n44;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#1: Break inside do-while is allowed as its described at standard";
__n59["raw"] := "'#1: Break inside do-while is allowed as its described at standard'";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n43["consequent"] := __n53;
__n43["alternate"] := null;
__n1 := [ __n2, __n42, __n43 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n60 := [ "__in__do__before__break", "__in__do__IN__before__break", "__in__do__IN__after__break", "__in__do__after__break" ];
__n0["variableDeclarations"] := __n60;
__n61 := [  ];
__n0["functionDeclarations"] := __n61;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}