function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "ThisExpression";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "p1";
__n6["raw"] := "\"p1\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "result";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "result";
__n12["raw"] := "\"result\"";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "value";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "value";
__n17["raw"] := "\"value\"";
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n18 := {  };
__n18["type"] := "VariableDeclaration";
__n20 := {  };
__n20["type"] := "VariableDeclarator";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "myObj";
__n20["id"] := __n21;
__n22 := {  };
__n22["type"] := "ObjectExpression";
__n24 := {  };
__n24["type"] := "Property";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "p1";
__n24["key"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "a";
__n26["raw"] := "'a'";
__n24["value"] := __n26;
__n24["computed"] := false;
__n24["kind"] := "init";
__n24["shorthand"] := false;
__n27 := {  };
__n27["type"] := "Property";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "value";
__n27["key"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "myObj_value";
__n29["raw"] := "'myObj_value'";
__n27["value"] := __n29;
__n27["computed"] := false;
__n27["kind"] := "init";
__n27["shorthand"] := false;
__n30 := {  };
__n30["type"] := "Property";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "valueOf";
__n30["key"] := __n31;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [  ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ReturnStatement";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "obj_valueOf";
__n37["raw"] := "'obj_valueOf'";
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n38 := [  ];
__n34["variableDeclarations"] := __n38;
__n39 := [  ];
__n34["functionDeclarations"] := __n39;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n30["value"] := __n32;
__n30["computed"] := false;
__n30["kind"] := "init";
__n30["shorthand"] := false;
__n23 := [ __n24, __n27, __n30 ];
__n22["properties"] := __n23;
__n20["init"] := __n22;
__n19 := [ __n20 ];
__n18["declarations"] := __n19;
__n18["kind"] := "var";
__n40 := {  };
__n40["type"] := "WithStatement";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "myObj";
__n40["object"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "VariableDeclaration";
__n46 := {  };
__n46["type"] := "VariableDeclarator";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "f";
__n46["id"] := __n47;
__n48 := {  };
__n48["type"] := "FunctionExpression";
__n48["id"] := null;
__n49 := [  ];
__n48["params"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ReturnStatement";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "value";
__n52["argument"] := __n53;
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "=";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "p1";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "x1";
__n57["raw"] := "'x1'";
__n55["right"] := __n57;
__n54["expression"] := __n55;
__n51 := [ __n52, __n54 ];
__n50["body"] := __n51;
__n58 := [  ];
__n50["variableDeclarations"] := __n58;
__n59 := [  ];
__n50["functionDeclarations"] := __n59;
__n50["codeType"] := "function";
__n50["strict"] := false;
__n48["body"] := __n50;
__n48["generator"] := false;
__n48["async"] := false;
__n48["expression"] := false;
__n46["init"] := __n48;
__n45 := [ __n46 ];
__n44["declarations"] := __n45;
__n44["kind"] := "var";
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n40["body"] := __n42;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "AssignmentExpression";
__n61["operator"] := "=";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "result";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "f";
__n63["callee"] := __n64;
__n65 := [  ];
__n63["arguments"] := __n65;
__n61["right"] := __n63;
__n60["expression"] := __n61;
__n66 := {  };
__n66["type"] := "IfStatement";
__n67 := {  };
__n67["type"] := "UnaryExpression";
__n67["operator"] := "!";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "===";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "p1";
__n68["left"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n68["right"] := __n70;
__n67["argument"] := __n68;
__n67["prefix"] := true;
__n66["test"] := __n67;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "+";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#1: p1 === 1. Actual:  p1 ===";
__n78["raw"] := "'#1: p1 === 1. Actual:  p1 ==='";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "p1";
__n77["right"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n66["consequent"] := __n71;
__n66["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "UnaryExpression";
__n81["operator"] := "!";
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "===";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "myObj";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "p1";
__n85["raw"] := "\"p1\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82["left"] := __n83;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "a";
__n86["raw"] := "\"a\"";
__n82["right"] := __n86;
__n81["argument"] := __n82;
__n81["prefix"] := true;
__n80["test"] := __n81;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#2: myObj.p1 === \"a\". Actual:  myObj.p1 ===";
__n94["raw"] := "'#2: myObj.p1 === \"a\". Actual:  myObj.p1 ==='";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "MemberExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "myObj";
__n95["object"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "p1";
__n97["raw"] := "\"p1\"";
__n95["property"] := __n97;
__n95["computed"] := true;
__n93["right"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n80["consequent"] := __n87;
__n80["alternate"] := null;
__n98 := {  };
__n98["type"] := "IfStatement";
__n99 := {  };
__n99["type"] := "UnaryExpression";
__n99["operator"] := "!";
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "===";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "result";
__n100["left"] := __n101;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "myObj_value";
__n102["raw"] := "\"myObj_value\"";
__n100["right"] := __n102;
__n99["argument"] := __n100;
__n99["prefix"] := true;
__n98["test"] := __n99;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#3: result === \"myObj_value\". Actual:  result ===";
__n110["raw"] := "'#3: result === \"myObj_value\". Actual:  result ==='";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "result";
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n98["consequent"] := __n103;
__n98["alternate"] := null;
__n1 := [ __n2, __n8, __n13, __n18, __n40, __n60, __n66, __n80, __n98 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n112 := [ "result", "value", "myObj", "f" ];
__n0["variableDeclarations"] := __n112;
__n113 := [  ];
__n0["functionDeclarations"] := __n113;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}