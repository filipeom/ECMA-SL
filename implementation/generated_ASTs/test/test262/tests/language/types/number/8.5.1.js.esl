function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "value";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "floatValues";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Array";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1076.;
__n14["raw"] := "1076";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n15 := {  };
__n15["type"] := "ForStatement";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "power";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0";
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n15["init"] := __n16;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "<=";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "power";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1075.;
__n23["raw"] := "1075";
__n21["right"] := __n23;
__n15["test"] := __n21;
__n24 := {  };
__n24["type"] := "UpdateExpression";
__n24["operator"] := "++";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "power";
__n24["argument"] := __n25;
__n24["prefix"] := false;
__n15["update"] := __n24;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n30["computed"] := true;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "floatValues";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "power";
__n30["property"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "value";
__n29["right"] := __n33;
__n28["expression"] := __n29;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "AssignmentExpression";
__n35["operator"] := "=";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "value";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "*";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "value";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.5;
__n39["raw"] := "0.5";
__n37["right"] := __n39;
__n35["right"] := __n37;
__n34["expression"] := __n35;
__n27 := [ __n28, __n34 ];
__n26["body"] := __n27;
__n15["body"] := __n26;
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "floatValues";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1075.;
__n44["raw"] := "1075";
__n42["property"] := __n44;
__n41["left"] := __n42;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 0.;
__n45["raw"] := "0";
__n41["right"] := __n45;
__n40["test"] := __n41;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "Value after min denorm should round to 0";
__n52["raw"] := "\"Value after min denorm should round to 0\"";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n40["consequent"] := __n46;
__n40["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n55["computed"] := true;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "floatValues";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1074.;
__n57["raw"] := "1074";
__n55["property"] := __n57;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 5e-324;
__n58["raw"] := "4.9406564584124654417656879286822e-324";
__n54["right"] := __n58;
__n53["test"] := __n54;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "Min denorm value is incorrect: ";
__n66["raw"] := "\"Min denorm value is incorrect: \"";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "MemberExpression";
__n67["computed"] := true;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "floatValues";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 1074.;
__n69["raw"] := "1074";
__n67["property"] := __n69;
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n53["consequent"] := __n59;
__n53["alternate"] := null;
__n70 := {  };
__n70["type"] := "ForStatement";
__n71 := {  };
__n71["type"] := "VariableDeclaration";
__n73 := {  };
__n73["type"] := "VariableDeclarator";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "index";
__n73["id"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 1074.;
__n75["raw"] := "1074";
__n73["init"] := __n75;
__n72 := [ __n73 ];
__n71["declarations"] := __n72;
__n71["kind"] := "var";
__n70["init"] := __n71;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := ">";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "index";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 0.;
__n78["raw"] := "0";
__n76["right"] := __n78;
__n70["test"] := __n76;
__n79 := {  };
__n79["type"] := "UpdateExpression";
__n79["operator"] := "--";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "index";
__n79["argument"] := __n80;
__n79["prefix"] := false;
__n70["update"] := __n79;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "===";
__n85 := {  };
__n85["type"] := "MemberExpression";
__n85["computed"] := true;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "floatValues";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "index";
__n85["property"] := __n87;
__n84["left"] := __n85;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 0.;
__n88["raw"] := "0";
__n84["right"] := __n88;
__n83["test"] := __n84;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "+";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "+";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "2**-";
__n97["raw"] := "\"2**-\"";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "index";
__n96["right"] := __n98;
__n95["left"] := __n96;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := " should not be 0";
__n99["raw"] := "\" should not be 0\"";
__n95["right"] := __n99;
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n83["consequent"] := __n89;
__n83["alternate"] := null;
__n100 := {  };
__n100["type"] := "IfStatement";
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "!==";
__n102 := {  };
__n102["type"] := "MemberExpression";
__n102["computed"] := true;
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "floatValues";
__n102["object"] := __n103;
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "-";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "index";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := 1.;
__n106["raw"] := "1";
__n104["right"] := __n106;
__n102["property"] := __n104;
__n101["left"] := __n102;
__n107 := {  };
__n107["type"] := "BinaryExpression";
__n107["operator"] := "*";
__n108 := {  };
__n108["type"] := "MemberExpression";
__n108["computed"] := true;
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "floatValues";
__n108["object"] := __n109;
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "index";
__n108["property"] := __n110;
__n107["left"] := __n108;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := 2.;
__n111["raw"] := "2";
__n107["right"] := __n111;
__n101["right"] := __n107;
__n100["test"] := __n101;
__n112 := {  };
__n112["type"] := "BlockStatement";
__n114 := {  };
__n114["type"] := "ExpressionStatement";
__n115 := {  };
__n115["type"] := "CallExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "$ERROR";
__n115["callee"] := __n116;
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "+";
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "Value should be double adjacent value at index ";
__n119["raw"] := "\"Value should be double adjacent value at index \"";
__n118["left"] := __n119;
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "index";
__n118["right"] := __n120;
__n117 := [ __n118 ];
__n115["arguments"] := __n117;
__n114["expression"] := __n115;
__n113 := [ __n114 ];
__n112["body"] := __n113;
__n100["consequent"] := __n112;
__n100["alternate"] := null;
__n82 := [ __n83, __n100 ];
__n81["body"] := __n82;
__n70["body"] := __n81;
__n121 := {  };
__n121["type"] := "IfStatement";
__n122 := {  };
__n122["type"] := "UnaryExpression";
__n122["operator"] := "!";
__n123 := {  };
__n123["type"] := "BinaryExpression";
__n123["operator"] := "<";
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := 1.7976931348623157e+308;
__n124["raw"] := "1.797693134862315708145274237317e+308";
__n123["left"] := __n124;
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "Infinity";
__n123["right"] := __n125;
__n122["argument"] := __n123;
__n122["prefix"] := true;
__n121["test"] := __n122;
__n126 := {  };
__n126["type"] := "BlockStatement";
__n128 := {  };
__n128["type"] := "ExpressionStatement";
__n129 := {  };
__n129["type"] := "CallExpression";
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "$ERROR";
__n129["callee"] := __n130;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "Max Number value 1.797693134862315708145274237317e+308 should not overflow to infinity";
__n132["raw"] := "\"Max Number value 1.797693134862315708145274237317e+308 should not overflow to infinity\"";
__n131 := [ __n132 ];
__n129["arguments"] := __n131;
__n128["expression"] := __n129;
__n127 := [ __n128 ];
__n126["body"] := __n127;
__n121["consequent"] := __n126;
__n121["alternate"] := null;
__n133 := {  };
__n133["type"] := "IfStatement";
__n134 := {  };
__n134["type"] := "UnaryExpression";
__n134["operator"] := "!";
__n135 := {  };
__n135["type"] := "BinaryExpression";
__n135["operator"] := "===";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "Infinity";
__n135["left"] := __n136;
__n137 := {  };
__n137["type"] := "UnaryExpression";
__n137["operator"] := "+";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "Infinity";
__n137["argument"] := __n138;
__n137["prefix"] := true;
__n135["right"] := __n137;
__n134["argument"] := __n135;
__n134["prefix"] := true;
__n133["test"] := __n134;
__n139 := {  };
__n139["type"] := "BlockStatement";
__n141 := {  };
__n141["type"] := "ExpressionStatement";
__n142 := {  };
__n142["type"] := "CallExpression";
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "$ERROR";
__n142["callee"] := __n143;
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "1.797693134862315808e+308 did not resolve to Infinity";
__n145["raw"] := "\"1.797693134862315808e+308 did not resolve to Infinity\"";
__n144 := [ __n145 ];
__n142["arguments"] := __n144;
__n141["expression"] := __n142;
__n140 := [ __n141 ];
__n139["body"] := __n140;
__n133["consequent"] := __n139;
__n133["alternate"] := null;
__n1 := [ __n2, __n7, __n15, __n40, __n53, __n70, __n121, __n133 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n146 := [ "value", "floatValues", "power", "index" ];
__n0["variableDeclarations"] := __n146;
__n147 := [  ];
__n0["functionDeclarations"] := __n147;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}