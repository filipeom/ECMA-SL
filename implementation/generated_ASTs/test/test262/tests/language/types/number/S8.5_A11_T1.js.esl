function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p_zero";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 0.;
__n7["raw"] := "0";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "n_zero";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "UnaryExpression";
__n12["operator"] := "-";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0";
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "===";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "/";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1.0";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "p_zero";
__n16["right"] := __n18;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "/";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1.0";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "n_zero";
__n19["right"] := __n21;
__n15["right"] := __n19;
__n14["test"] := __n15;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: var p_zero=+0; var n_zero=-0; 1.0/p_zero !== 1.0/n_zero";
__n28["raw"] := "'#1: var p_zero=+0; var n_zero=-0; 1.0/p_zero !== 1.0/n_zero'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n14["consequent"] := __n22;
__n14["alternate"] := null;
__n1 := [ __n2, __n8, __n14 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n29 := [ "p_zero", "n_zero" ];
__n0["variableDeclarations"] := __n29;
__n30 := [  ];
__n0["functionDeclarations"] := __n30;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}