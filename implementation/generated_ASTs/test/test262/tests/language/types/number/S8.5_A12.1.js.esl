function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p_inf";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Infinity";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "inf";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Infinity";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "!==";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "p_inf";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Number";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "POSITIVE_INFINITY";
__n18["raw"] := "\"POSITIVE_INFINITY\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n14["right"] := __n16;
__n13["test"] := __n14;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: +Infinity is the same as Number.POSITIVE_INFINITY";
__n25["raw"] := "'#1: +Infinity is the same as Number.POSITIVE_INFINITY'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n13["consequent"] := __n19;
__n13["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "inf";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Number";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "POSITIVE_INFINITY";
__n31["raw"] := "\"POSITIVE_INFINITY\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n27["right"] := __n29;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: Infinity is the same as Number.POSITIVE_INFINITY";
__n38["raw"] := "'#2: Infinity is the same as Number.POSITIVE_INFINITY'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n1 := [ __n2, __n8, __n13, __n26 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n39 := [ "p_inf", "inf" ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}