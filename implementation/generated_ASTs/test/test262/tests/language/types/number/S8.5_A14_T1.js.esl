function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "*";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := 1e+308;
__n5["raw"] := "1e+308";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 2.;
__n6["raw"] := "2";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Infinity";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "+";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: 1e+308*2 === Infinity. Actual: ";
__n15["raw"] := "'#1: 1e+308*2 === Infinity. Actual: '";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "*";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1e+308;
__n17["raw"] := "1e+308";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 2.;
__n18["raw"] := "2";
__n16["right"] := __n18;
__n14["right"] := __n16;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "*";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "*";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Math";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "pow";
__n27["raw"] := "\"pow\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 2.;
__n29["raw"] := "2";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 53.;
__n30["raw"] := "53";
__n28 := [ __n29, __n30 ];
__n24["arguments"] := __n28;
__n22["right"] := __n24;
__n21["left"] := __n22;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Math";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "pow";
__n34["raw"] := "\"pow\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 2.;
__n36["raw"] := "2";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 971.;
__n37["raw"] := "971";
__n35 := [ __n36, __n37 ];
__n31["arguments"] := __n35;
__n21["right"] := __n31;
__n20["left"] := __n21;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Infinity";
__n20["right"] := __n38;
__n19["test"] := __n20;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#2: (1*(Math.pow(2,53))*(Math.pow(2,971))) === Infinity. Actual: ";
__n46["raw"] := "'#2: (1*(Math.pow(2,53))*(Math.pow(2,971))) === Infinity. Actual: '";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "*";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "*";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Math";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "pow";
__n53["raw"] := "\"pow\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["callee"] := __n51;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 2.;
__n55["raw"] := "2";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 53.;
__n56["raw"] := "53";
__n54 := [ __n55, __n56 ];
__n50["arguments"] := __n54;
__n48["right"] := __n50;
__n47["left"] := __n48;
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Math";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "pow";
__n60["raw"] := "\"pow\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["callee"] := __n58;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 2.;
__n62["raw"] := "2";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 971.;
__n63["raw"] := "971";
__n61 := [ __n62, __n63 ];
__n57["arguments"] := __n61;
__n47["right"] := __n57;
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n19["consequent"] := __n39;
__n19["alternate"] := null;
__n1 := [ __n2, __n19 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n64 := [  ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}