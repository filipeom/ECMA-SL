function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "NaN";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x_geq_0";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := ">=";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "x";
__n11["left"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 0.;
__n13["raw"] := "0.0";
__n11["right"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "x_leq_0";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "<=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "x";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 0.;
__n20["raw"] := "0.0";
__n18["right"] := __n20;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n21 := {  };
__n21["type"] := "VariableDeclaration";
__n23 := {  };
__n23["type"] := "VariableDeclarator";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "x_leq_0_OR_geq_0";
__n23["id"] := __n24;
__n25 := {  };
__n25["type"] := "LogicalExpression";
__n25["operator"] := "||";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "<=";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "x";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0.0";
__n26["right"] := __n28;
__n25["left"] := __n26;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := ">=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 0.;
__n31["raw"] := "0.0";
__n29["right"] := __n31;
__n25["right"] := __n29;
__n23["init"] := __n25;
__n22 := [ __n23 ];
__n21["declarations"] := __n22;
__n21["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "x_geq_0_ADD_leq_0";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := ">=";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := 0.;
__n39["raw"] := "0.0";
__n37["right"] := __n39;
__n36["left"] := __n37;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "<=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.;
__n42["raw"] := "0.0";
__n40["right"] := __n42;
__n36["right"] := __n40;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "x_geq_0";
__n43["test"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: NaN not greater or equal zero";
__n51["raw"] := "'#1: NaN not greater or equal zero'";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n43["consequent"] := __n45;
__n43["alternate"] := null;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "x_leq_0";
__n52["test"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#2: NaN not less or equal zero";
__n60["raw"] := "'#2: NaN not less or equal zero'";
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n52["consequent"] := __n54;
__n52["alternate"] := null;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "x_leq_0_OR_geq_0";
__n61["test"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#3: NaN not less or equal zero OR greater or equal zero";
__n69["raw"] := "'#3: NaN not less or equal zero OR greater or equal zero'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n61["consequent"] := __n63;
__n61["alternate"] := null;
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "x_geq_0_ADD_leq_0";
__n70["test"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#4: NaN not less or equal zero ADD greater or equal zero";
__n78["raw"] := "'#4: NaN not less or equal zero ADD greater or equal zero'";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n70["consequent"] := __n72;
__n70["alternate"] := null;
__n1 := [ __n2, __n7, __n14, __n21, __n32, __n43, __n52, __n61, __n70 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n79 := [ "x", "x_geq_0", "x_leq_0", "x_leq_0_OR_geq_0", "x_geq_0_ADD_leq_0" ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}