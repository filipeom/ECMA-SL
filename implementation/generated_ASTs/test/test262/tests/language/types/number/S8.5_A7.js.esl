function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Infinity";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "typeof";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["left"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "number";
__n12["raw"] := "\"number\"";
__n9["right"] := __n12;
__n8["test"] := __n9;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: var x=+Infinity; typeof(x) === \"number\". Actual: ";
__n20["raw"] := "'#1: var x=+Infinity; typeof(x) === \"number\". Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "typeof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "x";
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n8["consequent"] := __n13;
__n8["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "typeof";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Infinity";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "number";
__n28["raw"] := "\"number\"";
__n24["right"] := __n28;
__n23["test"] := __n24;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: typeof(+Infinity) === \"number\". Actual: ";
__n36["raw"] := "'#2: typeof(+Infinity) === \"number\". Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "UnaryExpression";
__n37["operator"] := "typeof";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "Infinity";
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["argument"] := __n38;
__n37["prefix"] := true;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n23["consequent"] := __n29;
__n23["alternate"] := null;
__n1 := [ __n2, __n8, __n23 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n40 := [ "x" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}