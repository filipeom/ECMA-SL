function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FooObj";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "AssignmentExpression";
__n6["operator"] := "=";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "FooObj";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "prototype";
__n10["raw"] := "\"prototype\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["object"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "prop";
__n11["raw"] := "\"prop\"";
__n7["property"] := __n11;
__n7["computed"] := true;
__n6["left"] := __n7;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "some";
__n12["raw"] := "\"some\"";
__n6["right"] := __n12;
__n5["expression"] := __n6;
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "foo";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "NewExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "FooObj";
__n17["callee"] := __n18;
__n19 := [  ];
__n17["arguments"] := __n19;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "foo";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "prop";
__n24["raw"] := "\"prop\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["left"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "some";
__n25["raw"] := "\"some\"";
__n21["right"] := __n25;
__n20["test"] := __n21;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: function FooObj(){}; FooObj.prototype.prop=\"some\"; var foo= new FooObj; foo.prop === \"some\". Actual: ";
__n33["raw"] := "'#1: function FooObj(){}; FooObj.prototype.prop=\"some\"; var foo= new FooObj; foo.prop === \"some\". Actual: '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "foo";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "prop";
__n36["raw"] := "\"prop\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n20["consequent"] := __n26;
__n20["alternate"] := null;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "AssignmentExpression";
__n38["operator"] := "=";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "foo";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "prop";
__n41["raw"] := "\"prop\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["left"] := __n39;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := true;
__n42["raw"] := "true";
__n38["right"] := __n42;
__n37["expression"] := __n38;
__n43 := {  };
__n43["type"] := "VariableDeclaration";
__n45 := {  };
__n45["type"] := "VariableDeclarator";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "foo__";
__n45["id"] := __n46;
__n47 := {  };
__n47["type"] := "NewExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "FooObj";
__n47["callee"] := __n48;
__n49 := [  ];
__n47["arguments"] := __n49;
__n45["init"] := __n47;
__n44 := [ __n45 ];
__n43["declarations"] := __n44;
__n43["kind"] := "var";
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "foo__";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "prop";
__n54["raw"] := "\"prop\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["left"] := __n52;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "some";
__n55["raw"] := "\"some\"";
__n51["right"] := __n55;
__n50["test"] := __n51;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2: function FooObj(){}; FooObj.prototype.prop=\"some\"; var foo= new FooObj; foo.prop=true; var foo__ = new FooObj; foo__.prop === \"some\". Actual: ";
__n63["raw"] := "'#2: function FooObj(){}; FooObj.prototype.prop=\"some\"; var foo= new FooObj; foo.prop=true; var foo__ = new FooObj; foo__.prop === \"some\". Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "foo__";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "prop";
__n66["raw"] := "\"prop\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n50["consequent"] := __n56;
__n50["alternate"] := null;
__n1 := [ __n2, __n4, __n5, __n13, __n20, __n37, __n43, __n50 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n67 := [ "foo", "foo__" ];
__n0["variableDeclarations"] := __n67;
__n69 := {  };
__n69["type"] := "FunctionDeclaration";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "FooObj";
__n69["id"] := __n70;
__n71 := [  ];
__n69["params"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n73 := [  ];
__n72["body"] := __n73;
__n74 := [  ];
__n72["variableDeclarations"] := __n74;
__n75 := [  ];
__n72["functionDeclarations"] := __n75;
__n72["codeType"] := "function";
__n72["strict"] := false;
__n69["body"] := __n72;
__n69["generator"] := false;
__n69["expression"] := false;
__n69["async"] := false;
__n68 := [ __n69 ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}