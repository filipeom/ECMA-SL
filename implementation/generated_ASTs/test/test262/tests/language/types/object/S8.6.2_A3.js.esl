function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "!==";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__obj";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "toString";
__n13["raw"] := "\"toString\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n14 := [  ];
__n10["arguments"] := __n14;
__n9["left"] := __n10;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "+";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "[object ";
__n17["raw"] := "\"[object \"";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "Object";
__n18["raw"] := "'Object'";
__n16["right"] := __n18;
__n15["left"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "]";
__n19["raw"] := "\"]\"";
__n15["right"] := __n19;
__n9["right"] := __n15;
__n8["test"] := __n9;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: var __obj={}; __obj.toString() === \"[object \" + 'Object' + \"]\". Actual: ";
__n27["raw"] := "'#1: var __obj={}; __obj.toString() === \"[object \" + \\'Object\\' + \"]\". Actual: '";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__obj";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "toString";
__n31["raw"] := "\"toString\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n32 := [  ];
__n28["arguments"] := __n32;
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n8["consequent"] := __n20;
__n8["alternate"] := null;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [ "__obj" ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}