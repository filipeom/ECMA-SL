function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__map";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "foo";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "bar";
__n10["raw"] := "'bar'";
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "UpdateExpression";
__n12["operator"] := "++";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__map";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "foo";
__n15["raw"] := "\"foo\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["argument"] := __n13;
__n12["prefix"] := true;
__n11["expression"] := __n12;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "!";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "isNaN";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__map";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "foo";
__n23["raw"] := "\"foo\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["test"] := __n17;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1:  var __map={foo:\"bar\"}; ++__map.foo; __map.foo === Not-a-Number. Actual: ";
__n31["raw"] := "'#1:  var __map={foo:\"bar\"}; ++__map.foo; __map.foo === Not-a-Number. Actual: '";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__map";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "foo";
__n34["raw"] := "\"foo\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n16["consequent"] := __n24;
__n16["alternate"] := null;
__n1 := [ __n2, __n11, __n16 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n35 := [ "__map" ];
__n0["variableDeclarations"] := __n35;
__n36 := [  ];
__n0["functionDeclarations"] := __n36;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}