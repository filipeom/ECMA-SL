function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "items";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Array";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "one";
__n9["raw"] := "\"one\"";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "two";
__n10["raw"] := "\"two\"";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "three";
__n11["raw"] := "\"three\"";
__n8 := [ __n9, __n10, __n11 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "itemsRef";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "items";
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "items";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "NewExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Array";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "new";
__n23["raw"] := "\"new\"";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "array";
__n24["raw"] := "\"array\"";
__n22 := [ __n23, __n24 ];
__n20["arguments"] := __n22;
__n18["right"] := __n20;
__n17["expression"] := __n18;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "==";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "items";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "itemsRef";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1: var items = new Array( \"one\", \"two\", \"three\" ); var itemsRef = items; items = new Array( \"new\", \"array\" ); items != itemsRef";
__n35["raw"] := "'#1: var items = new Array( \"one\", \"two\", \"three\" ); var itemsRef = items; items = new Array( \"new\", \"array\" ); items != itemsRef'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n36 := {  };
__n36["type"] := "EmptyStatement";
__n1 := [ __n2, __n12, __n17, __n25, __n36 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n37 := [ "items", "itemsRef" ];
__n0["variableDeclarations"] := __n37;
__n38 := [  ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}