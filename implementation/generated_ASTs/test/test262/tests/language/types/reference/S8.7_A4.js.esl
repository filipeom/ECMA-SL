function buildAST (ignored_arg) {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "item";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "test";
__n9["raw"] := "\"test\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "itemRef";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "item";
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "+=";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "item";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "ing";
__n18["raw"] := "\"ing\"";
__n16["right"] := __n18;
__n15["expression"] := __n16;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "==";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "item";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "itemRef";
__n20["right"] := __n22;
__n19["test"] := __n20;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: var item = new String(\"test\"); var itemRef = item; item += \"ing\"; item != itemRef";
__n29["raw"] := "'#1: var item = new String(\"test\"); var itemRef = item; item += \"ing\"; item != itemRef'";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n19["consequent"] := __n23;
__n19["alternate"] := null;
__n30 := {  };
__n30["type"] := "EmptyStatement";
__n1 := [ __n2, __n10, __n15, __n19, __n30 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n31 := [ "item", "itemRef" ];
__n0["variableDeclarations"] := __n31;
__n32 := [  ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}