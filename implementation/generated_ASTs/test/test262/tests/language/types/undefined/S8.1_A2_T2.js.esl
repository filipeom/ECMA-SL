function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "test1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "===";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "test1";
__n7["callee"] := __n8;
__n9 := [  ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "void";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 0.;
__n11["raw"] := "0";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n6["right"] := __n10;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: function test1(x){return x} test1() === void 0. Actual: ";
__n19["raw"] := "'#1: function test1(x){return x} test1() === void 0. Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "test1";
__n20["callee"] := __n21;
__n22 := [  ];
__n20["arguments"] := __n22;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n4["consequent"] := __n12;
__n4["alternate"] := null;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "test2";
__n23["expression"] := __n24;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "!";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "===";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "test2";
__n28["callee"] := __n29;
__n30 := [  ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "UnaryExpression";
__n31["operator"] := "void";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 0.;
__n32["raw"] := "0";
__n31["argument"] := __n32;
__n31["prefix"] := true;
__n27["right"] := __n31;
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["test"] := __n26;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#2: function test2(){} test2() === void 0. Actual: ";
__n40["raw"] := "'#2: function test2(){} test2() === void 0. Actual: '";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "test2";
__n41["callee"] := __n42;
__n43 := [  ];
__n41["arguments"] := __n43;
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n25["consequent"] := __n33;
__n25["alternate"] := null;
__n1 := [ __n2, __n4, __n23, __n25 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n44 := [  ];
__n0["variableDeclarations"] := __n44;
__n46 := {  };
__n46["type"] := "FunctionDeclaration";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "test1";
__n46["id"] := __n47;
__n48 := [ "x" ];
__n46["params"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ReturnStatement";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "x";
__n51["argument"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n53 := [  ];
__n49["variableDeclarations"] := __n53;
__n54 := [  ];
__n49["functionDeclarations"] := __n54;
__n49["codeType"] := "function";
__n49["strict"] := false;
__n46["body"] := __n49;
__n46["generator"] := false;
__n46["expression"] := false;
__n46["async"] := false;
__n55 := {  };
__n55["type"] := "FunctionDeclaration";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "test2";
__n55["id"] := __n56;
__n57 := [  ];
__n55["params"] := __n57;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n59 := [  ];
__n58["body"] := __n59;
__n60 := [  ];
__n58["variableDeclarations"] := __n60;
__n61 := [  ];
__n58["functionDeclarations"] := __n61;
__n58["codeType"] := "function";
__n58["strict"] := false;
__n55["body"] := __n58;
__n55["generator"] := false;
__n55["expression"] := false;
__n55["async"] := false;
__n45 := [ __n46, __n55 ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}