import "test/section_7.8.esl";
import "test/section_8.7.esl";
import "test/section_8.9.esl";
import "test/section_8.10.esl";
import "test/section_8.12.esl";
import "test/section_9.esl";
import "test/section_9.12.esl";
import "test/section_10.2.esl";
import "test/section_10.3.esl";
import "test/section_10.4.esl";
import "test/section_10.5.esl";
import "test/section_10.6.esl";
import "test/section_11.8.esl";
import "test/section_12.6.esl";
import "test/section_12.11.esl";
import "test/section_13.esl";
import "test/section_15.5.esl";
import "test/section_15.6.esl";
import "test/section_15.7.esl";

function ToPrimitive(input, PreferredType) {
  if (Type(input) = "Object") {
    return DefaultValue(input, PreferredType)
  };

  return input
};

function Type(V) {
  v_type := typeof V;
  if (v_type = __$Int) { return "Number" };
  if (v_type = __$Flt) { return "Number" };
  if (v_type = __$Bool) { return "Boolean" };
  if (v_type = __$Str) { return "String" };
  if (v_type = __$Obj) { return "Object" };
  if (v_type = __$List) { return "List" };
  if (v_type = __$Null) { return "Null" };
  if (v_type = __$Symbol) {
    if (V = 'undefined) { return "Undefined" };
    if (V = 'NaN) { return "Number" };
    if ((V = '+0) || (V = '-0)) { return "Number" };
    if ((V = '+Infinity) || (V = 'Infinity) || (V = '-Infinity)) { return "Number" }
  };
  if (v_type = __$Tuple) {
    ft := fst V;
    if (ft = "R") { return "Reference" };
    if (ft = "C") { return "Completion" }
  };

  throw SyntaxErrorException()
};

function StrictEqualityOperator(x, y) {
  print "StrictEqualityOperator";
  if (!(Type(x) = Type(y))) {
    return false
  };
  if (Type(x) = "Undefined") {
    return true
  };
  if (Type(x) = "Null") {
    return true
  };
  if (Type(x) = "Number") {
    if (x = 'NaN) {
      return false
    };
    if (y = 'NaN) {
      return false
    };
    if (x = y) {
      return true
    };
    if ((x = '+0) && (y = '-0)) {
      return true
    };
    if ((x = '-0) && (y = '+0)) {
      return true
    };

    return false
  };
  if (Type(x) = "String") {
    /* TODO */
    return x = y
  };
  if (Type(x) = "Boolean") {
    /* TODO */
    return x = y
  };

  return x = y
}
