
/* main array constructor length
function main() {
  arr := internalNewArrayLen('null, 5.);
  return arr
}

/* main isArray
function main() {
  return isArray('null, 'null, [internalNewArray('null, [2., 3.])])
}

/* main arrayToString TODO 
function main() {
  return arrayToString('null, internalNewArray('null, [2., 3.]), 'null)
}*/

/* main arrayToLocaleString TODO
function main() {
  return arrayToLocaleString('null, internalNewArray('null, [2., 3.]), 'null)
}*/

/* main arrayConcat
function main() {
  arr1 := internalNewArray('null, [2., 3.]);
  arr2 := internalNewArray('null, [4., 5.]);
  arr := arrayConcat('null, arr1, [arr2]);
  return arr
}*/

/* main arrayJoin
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5.]);
  return arrayJoin ('null, arr, ["_"])
}*/

/* main arrayPop
function main() {
  arr := internalNewArray('null, [2., 3., 4.]);
  lastEl := arrayPop('null, arr, 'null);

  obj := {
    arr: arr,
    lastEl: lastEl
  };

  return obj
}*/

/* main arrayPush 
function main() {
  arr := internalNewArray('null, [2., 3., 4.]);
  newLen := arrayPush('null, arr, [5., 6.]);

  obj := {
    arr: arr,
    newLen: newLen
  };

  return obj
}*/

/* main arrayReverse
function main() {
  return arrayReverse('null, internalNewArray('null, [2., 3., 6., 9.]), 'null)
}*/

/* main arrayShift
function main() {
  arr := internalNewArray('null, [2., 3., 4.]);
  firstEl := arrayShift('null, arr, 'null);

  obj := {
    arr: arr,
    firstEl: firstEl
  };

  return obj
}*/

/* main arraySlice
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 6., 7.]);
  return arraySlice('null, arr, [2., 4.])
}*/

/* main arraySort 
function comparefn(scope, this, args) {
  x := l_nth (args, 0);
  y := l_nth (args, 1);
  if (x > y) {
    return -1.
  };
  if (x < y) {
    return 1.
  };
  return 0.
};*/

/*function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  return arraySort('null, arr, ['undefined])*/

  /*arr := internalNewArray('null, [6., 5., 4., 3., 2., 1.]);
  return arraySort('null, arr, ['undefined])*/

  /*arr := internalNewArray('null, ["Banana", "Orange", "Apple", "Mango"]);
  return arraySort('null, arr, ['undefined])*/

  /*arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  funcObj := CreateFunctionObject('null, ["x", "y"], "comparefn", 'null, false);
  return arraySort('null, arr, [funcObj])*/
/*}*/

/* main arraySplice
function main() {
  arr := internalNewArray('null, ["Banana", "Orange", "Apple", "Mango"]);
  items := ["Lemon", "Kiwi"];
  removedEls := arraySplice('null, arr, [2., 2., items]);

  obj := {
    arr: arr,
    removedEls: removedEls
  };

  return obj
}*/

/* main arrayUnshift
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 6., 7.]);
  newLen := arrayUnshift('null, arr, [22., 44.]);

  obj := {
    arr: arr,
    newLen: newLen
  };

  return obj
}*/

/* main arrayIndexOf
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 6., 7.]);
  return arrayIndexOf('null, arr, [5., 'undefined])
}*/

/* main arrayLastIndexOf 
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  return arrayLastIndexOf('null, arr, [2., 'undefined])
}*/

/* main arrayEvery 
function callbackfn(scope, this, args) {
  x := l_nth (args, 0);
  return x > 1.
};
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  funcObj := CreateFunctionObject(["x"], "callbackfn", 'null, false);
  return arrayEvery('null, arr, [funcObj, 'undefined])
}*/

/* main arraySome
function callbackfn(scope, this, args) {
  x := l_nth (args, 0);
  return x > 9.
};
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  funcObj := CreateFunctionObject(["x"], "callbackfn", 'null, false);
  return arraySome('null, arr, [funcObj, 'undefined])
}*/

/* main arrayForEach 
function callbackfn(scope, this, args) {
  x := l_nth (args, 0);
  print s_concat(["forEach: ", x]);
  return x
};
function main() {
  arr := internalNewArray('null, [1., 2., 3.]);
  funcObj := CreateFunctionObject(["x"], "callbackfn", 'null, false);
  arrayForEach('null, arr, [funcObj, 'undefined]);
  return arr
}*/

/* main arrayMap 
function callbackfn(scope, this, args) {
  x := l_nth (args, 0);
  return x * 2.
};
function main() {
  arr := internalNewArray('null, [1., 2., 3.]);
  funcObj := CreateFunctionObject(["x"], "callbackfn", 'null, false);
  return arrayMap('null, arr, [funcObj, 'undefined])
}*/

/* main arrayFilter
function callbackfn(scope, this, args) {
  x := l_nth (args, 0);
  return x > 2.
};
function main() {
  arr := internalNewArray('null, [2., 3., 4., 5., 2., 7.]);
  funcObj := CreateFunctionObject(["x"], "callbackfn", 'null, false);
  return arrayFilter('null, arr, [funcObj, 'undefined])
}*/

/* main arrayReduce
function callbackfn(scope, this, args) {
  total := l_nth (args, 0);
  x := l_nth (args, 1);
  return total - x
};
function main() {
  arr := internalNewArray('null, [175., 50., 25.]);
  funcObj := CreateFunctionObject(["total", "x"], "callbackfn", 'null, false);
  return arrayReduce('null, arr, [funcObj, 'undefined])
}*/

/* main arrayReduceRight 
function callbackfn(scope, this, args) {
  total := l_nth (args, 0);
  x := l_nth (args, 1);
  return total - x
};
function main() {
  arr := internalNewArray('null, [175., 50., 25.]);
  funcObj := CreateFunctionObject(["total", "x"], "callbackfn", 'null, false);
  return arrayReduceRight('null, arr, [funcObj, 'undefined])
}
*/