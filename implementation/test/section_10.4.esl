/* 10.4 Establishing an Execution Context */

/* Evaluation of global code or code using the eval function (15.1.2.1) establishes and enters a new execution
   context. Every invocation of an ECMAScript code function (13.2.1) also establishes and enters a new
   execution context, even if a function is calling itself recursively. Every return exits an execution context.
   A thrown exception may also exit one or more execution contexts. */

/* When control enters an execution context, the execution context‘s ThisBinding is set, its VariableEnvironment
   and initial LexicalEnvironment are defined, and declaration binding instantiation (10.5) is performed. The exact
   manner in which these actions occur depend on the type of code being entered. */

function EnteringFunctionCode(F, thisArg, argumentsList, strict) {
  /* 10.4.3 Entering Function Code */

  functionExecCtx := createExecutionContext();

  /* The following steps are performed when control enters the execution context for function code contained in
     function object F, a caller provided thisArg, and a caller provided argumentsList: */

  /* 1. If the function code is strict code, set the ThisBinding to thisArg. */
  /* TODO */
  if (strict) {
    setThisBinding(functionExecCtx, thisArg)
  };
  /* 2. Else if thisArg is null or undefined, set the ThisBinding to the global object. */
  if ((thisArg = null) || (thisArg = 'undefined)) {
    setThisBinding(functionExecCtx, getGlobalObject(F.Scope))
  }
  /* 3. Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg). */
  else {
    if (!(Type(thisArg) = "Object")) {
      setThisBinding(functionExecCtx, ToObject(thisArg))
    }
    /* 4. Else set the ThisBinding to thisArg. */
    else {
      setThisBinding(functionExecCtx, thisArg)
    }
  };
  /* 5. Let localEnv be the result of calling NewDeclarativeEnvironment passing the value of the [[Scope]] internal
        property of F as the argument. */
  localEnv := NewDeclarativeEnvironment(F.Scope);
  /* 6. Set the LexicalEnvironment to localEnv. */
  setLexicalEnvironment(functionExecCtx, localEnv);
  /* 7. Set the VariableEnvironment to localEnv. */
  setVariableEnvironment(functionExecCtx, localEnv);
  /* 8. Let code be the value of F‘s [[Code]] internal property. */
  code := F.Code;
  /* 9. Perform Declaration Binding Instantiation using the function code code and argumentsList as described in 10.5. */
  DeclarationBindingInstantiation(functionExecCtx, code, argumentsList, F);

  return functionExecCtx
}
