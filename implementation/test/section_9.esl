/* 9.8 ToString */
function ToString(V) {
  v_type := Type(V);
  if (v_type = "Undefined") {
    return "undefined"
  };
  if (v_type = "Null") {
    return "null"
  };
  if (v_type = "Boolean") {
    if (V = true) {
      return "true"
    };
    return "false"
  };
  if (v_type = "Number") {
    return float_to_string V
  };
  if (v_type = "String") {
    return V
  };
  if (v_type = "Object") {
    /* Apply the following steps: */
    /* 1. Let primValue be ToPrimitive(input argument, hint String). */
    primValue := ToPrimitive(V, 'String);
    /* 2. Return ToString(primValue). */
    return ToString(primValue)
  }
};

/* 9.10 CheckObjectCoercible */
/* The abstract operation CheckObjectCoercible throws an error if its argument is a value that cannot be
   converted to an Object using ToObject. It is defined by Table 15: */
function CheckObjectCoercible(V) {
  v_type := Type(V);
  if ((v_type = "Undefined") || (v_type = "Null")) {
    throw TypeErrorException()
  };

  return
}
