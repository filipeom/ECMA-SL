/* 9.3 ToNumber */
function ToNumber(argument) {
/* The abstract operation ToNumber converts its argument to a value of type Number according to Table 12: */

  argument_type := Type(argument);
  if (argument_type = "Undefined") {
    return 'NaN
  };
  if (argument_type = "Null") {
    return '+0
  };
  if (argument_type = "Boolean") {
    /* The result is 1 if the argument is true. The result is +0 if the argument is false. */
    if (argument = true) {
      return int_to_float 1 /* TODO check this!! */
    };
    return '+0
  };
  if (argument_type = "Number") {
    return argument
  };
  if (argument_type = "String") {
    throw NotImplemented() /* TODO */
  };
  if (argument_type = "Object") {
    /* Apply the following steps: */

    /* 1. Let primValue be ToPrimitive(input argument, hint Number). */
    primValue := ToPrimitive(argument, 'Number);
    /* 2. Return ToNumber(primValue). */
    return ToNumber(primValue)
  }
};

/* 9.8 ToString */
function ToString(V) {
  v_type := Type(V);
  if (v_type = "Undefined") {
    return "undefined"
  };
  if (v_type = "Null") {
    return "null"
  };
  if (v_type = "Boolean") {
    if (V = true) {
      return "true"
    };
    return "false"
  };
  if (v_type = "Number") {
    return float_to_string V
  };
  if (v_type = "String") {
    return V
  };
  if (v_type = "Object") {
    /* Apply the following steps: */
    /* 1. Let primValue be ToPrimitive(input argument, hint String). */
    primValue := ToPrimitive(V, 'String);
    /* 2. Return ToString(primValue). */
    return ToString(primValue)
  }
};

/* 9.9 ToObject */
/* The abstract operation ToObject converts its argument to a value of type Object according to Table 14: */
function ToObject(V) {
  v_type := Type(V);
  if ((v_type = "Undefined") || (v_type = "Null")) {
    throw TypeErrorException()
  };
  if (v_type = "Boolean") {
    return newBoolean(V)
  };
  if (v_type = "Number") {
    return newNumber(V)
  };
  if (v_type = "String") {
    return newString(V)
  };
  if (v_type = "Object") {
    return V
  }
};

/* 9.10 CheckObjectCoercible */
/* The abstract operation CheckObjectCoercible throws an error if its argument is a value that cannot be
   converted to an Object using ToObject. It is defined by Table 15: */
function CheckObjectCoercible(V) {
  v_type := Type(V);
  if ((v_type = "Undefined") || (v_type = "Null")) {
    throw TypeErrorException()
  };

  return
};

function IsCallable(V) {
  /* 9.11 IsCallable */

  /* The abstract operation IsCallable determines if its argument, which must be an ECMAScript language value,
     is a callable function Object according to Table 16: */
  v_type := Type(V);
  if (v_type = "Object") {
    if ("Call" in_obj V) {
      return true
    };
    return false
  };

  return false
}
