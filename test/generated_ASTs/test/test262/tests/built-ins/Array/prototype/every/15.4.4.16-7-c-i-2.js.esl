function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "called";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "assert";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "ArrayExpression";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 11.;
__n17["raw"] := "11";
__n16 := [ __n17 ];
__n15["elements"] := __n16;
__n14["object"] := __n15;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "every";
__n18["raw"] := "\"every\"";
__n14["property"] := __n18;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "callbackfn";
__n19 := [ __n20 ];
__n13["arguments"] := __n19;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "[11].every(callbackfn) !== true";
__n21["raw"] := "'[11].every(callbackfn) !== true'";
__n12 := [ __n13, __n21 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "sameValue";
__n26["raw"] := "\"sameValue\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "called";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1.;
__n29["raw"] := "1";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "called";
__n30["raw"] := "'called'";
__n27 := [ __n28, __n29, __n30 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n1 := [ __n2, __n7, __n9, __n22 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n31 := [ "called" ];
__n0["variableDeclarations"] := __n31;
__n33 := {  };
__n33["type"] := "FunctionDeclaration";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "callbackfn";
__n33["id"] := __n34;
__n35 := [ "val", "idx", "obj" ];
__n33["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "UpdateExpression";
__n39["operator"] := "++";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "called";
__n39["argument"] := __n40;
__n39["prefix"] := false;
__n38["expression"] := __n39;
__n41 := {  };
__n41["type"] := "ReturnStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "val";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 11.;
__n44["raw"] := "11";
__n42["right"] := __n44;
__n41["argument"] := __n42;
__n37 := [ __n38, __n41 ];
__n36["body"] := __n37;
__n45 := [  ];
__n36["variableDeclarations"] := __n45;
__n46 := [  ];
__n36["functionDeclarations"] := __n46;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n33["body"] := __n36;
__n33["generator"] := false;
__n33["async"] := false;
__n33["expression"] := false;
__n32 := [ __n33 ];
__n0["functionDeclarations"] := __n32;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}