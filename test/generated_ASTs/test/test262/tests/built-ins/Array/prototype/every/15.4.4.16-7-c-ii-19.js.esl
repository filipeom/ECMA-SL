function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "called";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "callbackfn";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "obj";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "ObjectExpression";
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 0.;
__n16["raw"] := "0";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 11.;
__n17["raw"] := "11";
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 10.;
__n19["raw"] := "10";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 12.;
__n20["raw"] := "12";
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "non_index_property";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 8.;
__n23["raw"] := "8";
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n24 := {  };
__n24["type"] := "Property";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "length";
__n24["key"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 20.;
__n26["raw"] := "20";
__n24["value"] := __n26;
__n24["computed"] := false;
__n24["kind"] := "init";
__n24["shorthand"] := false;
__n14 := [ __n15, __n18, __n21, __n24 ];
__n13["properties"] := __n14;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "assert";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Array";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "prototype";
__n36["raw"] := "\"prototype\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["object"] := __n34;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "every";
__n37["raw"] := "\"every\"";
__n33["property"] := __n37;
__n33["computed"] := true;
__n32["object"] := __n33;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "call";
__n38["raw"] := "\"call\"";
__n32["property"] := __n38;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "obj";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "callbackfn";
__n39 := [ __n40, __n41 ];
__n31["arguments"] := __n39;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "Array.prototype.every.call(obj, callbackfn) !== true";
__n42["raw"] := "'Array.prototype.every.call(obj, callbackfn) !== true'";
__n30 := [ __n31, __n42 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "assert";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "sameValue";
__n47["raw"] := "\"sameValue\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "called";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 2.;
__n50["raw"] := "2";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "called";
__n51["raw"] := "'called'";
__n48 := [ __n49, __n50, __n51 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n1 := [ __n2, __n7, __n9, __n27, __n43 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "called", "obj" ];
__n0["variableDeclarations"] := __n52;
__n54 := {  };
__n54["type"] := "FunctionDeclaration";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "callbackfn";
__n54["id"] := __n55;
__n56 := [ "val", "idx", "obj" ];
__n54["params"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "UpdateExpression";
__n60["operator"] := "++";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "called";
__n60["argument"] := __n61;
__n60["prefix"] := false;
__n59["expression"] := __n60;
__n62 := {  };
__n62["type"] := "ReturnStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "val";
__n63["left"] := __n64;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 8.;
__n65["raw"] := "8";
__n63["right"] := __n65;
__n62["argument"] := __n63;
__n58 := [ __n59, __n62 ];
__n57["body"] := __n58;
__n66 := [  ];
__n57["variableDeclarations"] := __n66;
__n67 := [  ];
__n57["functionDeclarations"] := __n67;
__n57["codeType"] := "function";
__n57["strict"] := false;
__n54["body"] := __n57;
__n54["generator"] := false;
__n54["async"] := false;
__n54["expression"] := false;
__n53 := [ __n54 ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}