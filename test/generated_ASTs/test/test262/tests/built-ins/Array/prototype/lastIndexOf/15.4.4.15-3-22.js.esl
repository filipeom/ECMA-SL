function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "toStringAccessed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := false;
__n6["raw"] := "false";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "valueOfAccessed";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := false;
__n11["raw"] := "false";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "obj";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "ObjectExpression";
__n18 := {  };
__n18["type"] := "Property";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n18["key"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := true;
__n20["raw"] := "true";
__n18["value"] := __n20;
__n18["computed"] := false;
__n18["kind"] := "init";
__n18["shorthand"] := false;
__n21 := {  };
__n21["type"] := "Property";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "length";
__n21["key"] := __n22;
__n23 := {  };
__n23["type"] := "ObjectExpression";
__n25 := {  };
__n25["type"] := "Property";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "toString";
__n25["key"] := __n26;
__n27 := {  };
__n27["type"] := "FunctionExpression";
__n27["id"] := null;
__n28 := [  ];
__n27["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "AssignmentExpression";
__n32["operator"] := "=";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "toStringAccessed";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n32["right"] := __n34;
__n31["expression"] := __n32;
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "ObjectExpression";
__n37 := [  ];
__n36["properties"] := __n37;
__n35["argument"] := __n36;
__n30 := [ __n31, __n35 ];
__n29["body"] := __n30;
__n38 := [  ];
__n29["variableDeclarations"] := __n38;
__n39 := [  ];
__n29["functionDeclarations"] := __n39;
__n29["codeType"] := "function";
__n29["strict"] := false;
__n27["body"] := __n29;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n25["value"] := __n27;
__n25["computed"] := false;
__n25["kind"] := "init";
__n25["shorthand"] := false;
__n40 := {  };
__n40["type"] := "Property";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "valueOf";
__n40["key"] := __n41;
__n42 := {  };
__n42["type"] := "FunctionExpression";
__n42["id"] := null;
__n43 := [  ];
__n42["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "AssignmentExpression";
__n47["operator"] := "=";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "valueOfAccessed";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := true;
__n49["raw"] := "true";
__n47["right"] := __n49;
__n46["expression"] := __n47;
__n50 := {  };
__n50["type"] := "ReturnStatement";
__n51 := {  };
__n51["type"] := "ObjectExpression";
__n52 := [  ];
__n51["properties"] := __n52;
__n50["argument"] := __n51;
__n45 := [ __n46, __n50 ];
__n44["body"] := __n45;
__n53 := [  ];
__n44["variableDeclarations"] := __n53;
__n54 := [  ];
__n44["functionDeclarations"] := __n54;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n42["body"] := __n44;
__n42["generator"] := false;
__n42["async"] := false;
__n42["expression"] := false;
__n40["value"] := __n42;
__n40["computed"] := false;
__n40["kind"] := "init";
__n40["shorthand"] := false;
__n24 := [ __n25, __n40 ];
__n23["properties"] := __n24;
__n21["value"] := __n23;
__n21["computed"] := false;
__n21["kind"] := "init";
__n21["shorthand"] := false;
__n17 := [ __n18, __n21 ];
__n16["properties"] := __n17;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "var";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "assert";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "throws";
__n59["raw"] := "\"throws\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "TypeError";
__n62 := {  };
__n62["type"] := "FunctionExpression";
__n62["id"] := null;
__n63 := [  ];
__n62["params"] := __n63;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "MemberExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "Array";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "prototype";
__n72["raw"] := "\"prototype\"";
__n70["property"] := __n72;
__n70["computed"] := true;
__n69["object"] := __n70;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "lastIndexOf";
__n73["raw"] := "\"lastIndexOf\"";
__n69["property"] := __n73;
__n69["computed"] := true;
__n68["object"] := __n69;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "call";
__n74["raw"] := "\"call\"";
__n68["property"] := __n74;
__n68["computed"] := true;
__n67["callee"] := __n68;
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "obj";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := true;
__n77["raw"] := "true";
__n75 := [ __n76, __n77 ];
__n67["arguments"] := __n75;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n78 := [  ];
__n64["variableDeclarations"] := __n78;
__n79 := [  ];
__n64["functionDeclarations"] := __n79;
__n64["codeType"] := "function";
__n64["strict"] := false;
__n62["body"] := __n64;
__n62["generator"] := false;
__n62["async"] := false;
__n62["expression"] := false;
__n60 := [ __n61, __n62 ];
__n56["arguments"] := __n60;
__n55["expression"] := __n56;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "assert";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "toStringAccessed";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "toStringAccessed";
__n85["raw"] := "'toStringAccessed'";
__n83 := [ __n84, __n85 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "assert";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "valueOfAccessed";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "valueOfAccessed";
__n91["raw"] := "'valueOfAccessed'";
__n89 := [ __n90, __n91 ];
__n87["arguments"] := __n89;
__n86["expression"] := __n87;
__n1 := [ __n2, __n7, __n12, __n55, __n80, __n86 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n92 := [ "toStringAccessed", "valueOfAccessed", "obj" ];
__n0["variableDeclarations"] := __n92;
__n93 := [  ];
__n0["functionDeclarations"] := __n93;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}