function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "C";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ThrowStatement";
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Test262Error";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n10["argument"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n14 := [  ];
__n8["variableDeclarations"] := __n14;
__n15 := [  ];
__n8["functionDeclarations"] := __n15;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["async"] := false;
__n6["expression"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "items";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "ObjectExpression";
__n21 := [  ];
__n20["properties"] := __n21;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n24["computed"] := true;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "items";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Symbol";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "iterator";
__n28["raw"] := "\"iterator\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n24["property"] := __n26;
__n23["left"] := __n24;
__n29 := {  };
__n29["type"] := "FunctionExpression";
__n29["id"] := null;
__n30 := [  ];
__n29["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n32 := [  ];
__n31["body"] := __n32;
__n33 := [  ];
__n31["variableDeclarations"] := __n33;
__n34 := [  ];
__n31["functionDeclarations"] := __n34;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n29["body"] := __n31;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n23["right"] := __n29;
__n22["expression"] := __n23;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "assert";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "throws";
__n39["raw"] := "\"throws\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n36["callee"] := __n37;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Test262Error";
__n42 := {  };
__n42["type"] := "FunctionExpression";
__n42["id"] := null;
__n43 := [  ];
__n42["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "Array";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "from";
__n51["raw"] := "\"from\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["object"] := __n49;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "call";
__n52["raw"] := "\"call\"";
__n48["property"] := __n52;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "C";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "items";
__n53 := [ __n54, __n55 ];
__n47["arguments"] := __n53;
__n46["expression"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n56 := [  ];
__n44["variableDeclarations"] := __n56;
__n57 := [  ];
__n44["functionDeclarations"] := __n57;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n42["body"] := __n44;
__n42["generator"] := false;
__n42["async"] := false;
__n42["expression"] := false;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "Array.from.call(C, items) throws a Test262Error exception";
__n58["raw"] := "'Array.from.call(C, items) throws a Test262Error exception'";
__n40 := [ __n41, __n42, __n58 ];
__n36["arguments"] := __n40;
__n35["expression"] := __n36;
__n1 := [ __n2, __n16, __n22, __n35 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n59 := [ "C", "items" ];
__n0["variableDeclarations"] := __n59;
__n60 := [  ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}