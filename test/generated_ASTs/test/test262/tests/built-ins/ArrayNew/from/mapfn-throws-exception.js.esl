function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "array";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 2.;
__n8["raw"] := "2";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 4.;
__n9["raw"] := "4";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 8.;
__n10["raw"] := "8";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 16.;
__n11["raw"] := "16";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 32.;
__n12["raw"] := "32";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 64.;
__n13["raw"] := "64";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 128.;
__n14["raw"] := "128";
__n7 := [ __n8, __n9, __n10, __n11, __n12, __n13, __n14 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "mapFnThrows";
__n15["expression"] := __n16;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "throws";
__n21["raw"] := "\"throws\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Test262Error";
__n24 := {  };
__n24["type"] := "FunctionExpression";
__n24["id"] := null;
__n25 := [  ];
__n24["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Array";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "from";
__n32["raw"] := "\"from\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "array";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "mapFnThrows";
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n36 := [  ];
__n26["variableDeclarations"] := __n36;
__n37 := [  ];
__n26["functionDeclarations"] := __n37;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n24["body"] := __n26;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "Array.from(array, mapFnThrows) throws a Test262Error exception";
__n38["raw"] := "'Array.from(array, mapFnThrows) throws a Test262Error exception'";
__n22 := [ __n23, __n24, __n38 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n1 := [ __n2, __n15, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [ "array" ];
__n0["variableDeclarations"] := __n39;
__n41 := {  };
__n41["type"] := "FunctionDeclaration";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "mapFnThrows";
__n41["id"] := __n42;
__n43 := [ "value", "index", "obj" ];
__n41["params"] := __n43;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "ThrowStatement";
__n47 := {  };
__n47["type"] := "NewExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "Test262Error";
__n47["callee"] := __n48;
__n49 := [  ];
__n47["arguments"] := __n49;
__n46["argument"] := __n47;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n50 := [  ];
__n44["variableDeclarations"] := __n50;
__n51 := [  ];
__n44["functionDeclarations"] := __n51;
__n44["codeType"] := "function";
__n44["strict"] := false;
__n41["body"] := __n44;
__n41["generator"] := false;
__n41["async"] := false;
__n41["expression"] := false;
__n40 := [ __n41 ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}