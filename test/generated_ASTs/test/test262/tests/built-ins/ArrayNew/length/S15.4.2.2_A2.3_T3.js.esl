function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Array";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "1";
__n9["raw"] := "\"1\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "assert";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "sameValue";
__n14["raw"] := "\"sameValue\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "x";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "length";
__n18["raw"] := "\"length\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 1.;
__n19["raw"] := "1";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "The value of x.length is expected to be 1";
__n20["raw"] := "'The value of x.length is expected to be 1'";
__n15 := [ __n16, __n19, __n20 ];
__n11["arguments"] := __n15;
__n10["expression"] := __n11;
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "assert";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "sameValue";
__n25["raw"] := "\"sameValue\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "MemberExpression";
__n27["computed"] := true;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n27["property"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "1";
__n30["raw"] := "\"1\"";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "The value of x[0] is expected to be \"1\"";
__n31["raw"] := "'The value of x[0] is expected to be \"1\"'";
__n26 := [ __n27, __n30, __n31 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "obj";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "NewExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "String";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "0";
__n39["raw"] := "\"0\"";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n40 := {  };
__n40["type"] := "VariableDeclaration";
__n42 := {  };
__n42["type"] := "VariableDeclarator";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n42["id"] := __n43;
__n44 := {  };
__n44["type"] := "NewExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Array";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "obj";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n42["init"] := __n44;
__n41 := [ __n42 ];
__n40["declarations"] := __n41;
__n40["kind"] := "var";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "assert";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "sameValue";
__n52["raw"] := "\"sameValue\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "x";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "length";
__n56["raw"] := "\"length\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1.;
__n57["raw"] := "1";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "The value of x.length is expected to be 1";
__n58["raw"] := "'The value of x.length is expected to be 1'";
__n53 := [ __n54, __n57, __n58 ];
__n49["arguments"] := __n53;
__n48["expression"] := __n49;
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "assert";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "sameValue";
__n63["raw"] := "\"sameValue\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "MemberExpression";
__n65["computed"] := true;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 0.;
__n67["raw"] := "0";
__n65["property"] := __n67;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "obj";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "The value of x[0] is expected to equal the value of obj";
__n69["raw"] := "'The value of x[0] is expected to equal the value of obj'";
__n64 := [ __n65, __n68, __n69 ];
__n60["arguments"] := __n64;
__n59["expression"] := __n60;
__n1 := [ __n2, __n10, __n21, __n32, __n40, __n48, __n59 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n70 := [ "x", "obj" ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}