function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "len";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "VariableDeclaration";
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "hits";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 0.;
__n10["raw"] := "0";
__n8["init"] := __n10;
__n7 := [ __n8 ];
__n6["declarations"] := __n7;
__n6["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "C";
__n11["expression"] := __n12;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Array";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "of";
__n18["raw"] := "\"of\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "call";
__n19["raw"] := "\"call\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "C";
__n20 := [ __n21 ];
__n14["arguments"] := __n20;
__n13["expression"] := __n14;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "assert";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "sameValue";
__n26["raw"] := "\"sameValue\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "len";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "The value of len is expected to be 0";
__n30["raw"] := "'The value of len is expected to be 0'";
__n27 := [ __n28, __n29, __n30 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "assert";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "sameValue";
__n35["raw"] := "\"sameValue\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "hits";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "The value of hits is expected to be 1";
__n39["raw"] := "'The value of hits is expected to be 1'";
__n36 := [ __n37, __n38, __n39 ];
__n32["arguments"] := __n36;
__n31["expression"] := __n32;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Array";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "of";
__n45["raw"] := "\"of\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["object"] := __n43;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "call";
__n46["raw"] := "\"call\"";
__n42["property"] := __n46;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "C";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "a";
__n49["raw"] := "'a'";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "b";
__n50["raw"] := "'b'";
__n47 := [ __n48, __n49, __n50 ];
__n41["arguments"] := __n47;
__n40["expression"] := __n41;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "sameValue";
__n55["raw"] := "\"sameValue\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "len";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 2.;
__n58["raw"] := "2";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "The value of len is expected to be 2";
__n59["raw"] := "'The value of len is expected to be 2'";
__n56 := [ __n57, __n58, __n59 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "assert";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "sameValue";
__n64["raw"] := "\"sameValue\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "hits";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 2.;
__n67["raw"] := "2";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "The value of hits is expected to be 2";
__n68["raw"] := "'The value of hits is expected to be 2'";
__n65 := [ __n66, __n67, __n68 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "Array";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "of";
__n74["raw"] := "\"of\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n71["object"] := __n72;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "call";
__n75["raw"] := "\"call\"";
__n71["property"] := __n75;
__n71["computed"] := true;
__n70["callee"] := __n71;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "C";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := false;
__n78["raw"] := "false";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := 'null;
__n79["raw"] := "\"'null\"";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "undefined";
__n76 := [ __n77, __n78, __n79, __n80 ];
__n70["arguments"] := __n76;
__n69["expression"] := __n70;
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "MemberExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "assert";
__n83["object"] := __n84;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "sameValue";
__n85["raw"] := "\"sameValue\"";
__n83["property"] := __n85;
__n83["computed"] := true;
__n82["callee"] := __n83;
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "len";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 3.;
__n88["raw"] := "3";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "The value of len is expected to be 3";
__n89["raw"] := "'The value of len is expected to be 3'";
__n86 := [ __n87, __n88, __n89 ];
__n82["arguments"] := __n86;
__n81["expression"] := __n82;
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "MemberExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "assert";
__n92["object"] := __n93;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "sameValue";
__n94["raw"] := "\"sameValue\"";
__n92["property"] := __n94;
__n92["computed"] := true;
__n91["callee"] := __n92;
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "hits";
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 3.;
__n97["raw"] := "3";
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := "The value of hits is expected to be 3";
__n98["raw"] := "'The value of hits is expected to be 3'";
__n95 := [ __n96, __n97, __n98 ];
__n91["arguments"] := __n95;
__n90["expression"] := __n91;
__n1 := [ __n2, __n6, __n11, __n13, __n22, __n31, __n40, __n51, __n60, __n69, __n81, __n90 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n99 := [ "len", "hits" ];
__n0["variableDeclarations"] := __n99;
__n101 := {  };
__n101["type"] := "FunctionDeclaration";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "C";
__n101["id"] := __n102;
__n103 := [ "length" ];
__n101["params"] := __n103;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "AssignmentExpression";
__n107["operator"] := "=";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "len";
__n107["left"] := __n108;
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "length";
__n107["right"] := __n109;
__n106["expression"] := __n107;
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "UpdateExpression";
__n111["operator"] := "++";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "hits";
__n111["argument"] := __n112;
__n111["prefix"] := false;
__n110["expression"] := __n111;
__n105 := [ __n106, __n110 ];
__n104["body"] := __n105;
__n113 := [  ];
__n104["variableDeclarations"] := __n113;
__n114 := [  ];
__n104["functionDeclarations"] := __n114;
__n104["codeType"] := "function";
__n104["strict"] := false;
__n101["body"] := __n104;
__n101["generator"] := false;
__n101["async"] := false;
__n101["expression"] := false;
__n100 := [ __n101 ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}