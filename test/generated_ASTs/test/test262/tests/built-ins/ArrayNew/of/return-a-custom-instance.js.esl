function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "Coop";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "coop";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Array";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "of";
__n12["raw"] := "\"of\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["object"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "call";
__n13["raw"] := "\"call\"";
__n9["property"] := __n13;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Coop";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "Mike";
__n16["raw"] := "'Mike'";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "Rick";
__n17["raw"] := "'Rick'";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "Leo";
__n18["raw"] := "'Leo'";
__n14 := [ __n15, __n16, __n17, __n18 ];
__n8["arguments"] := __n14;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "assert";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "sameValue";
__n23["raw"] := "\"sameValue\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "coop";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "length";
__n27["raw"] := "\"length\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 3.;
__n28["raw"] := "3";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "The value of coop.length is expected to be 3";
__n29["raw"] := "'The value of coop.length is expected to be 3'";
__n24 := [ __n25, __n28, __n29 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "assert";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "sameValue";
__n34["raw"] := "\"sameValue\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["callee"] := __n32;
__n36 := {  };
__n36["type"] := "MemberExpression";
__n36["computed"] := true;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "coop";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["property"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "Mike";
__n39["raw"] := "'Mike'";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "The value of coop[0] is expected to be \"Mike\"";
__n40["raw"] := "'The value of coop[0] is expected to be \"Mike\"'";
__n35 := [ __n36, __n39, __n40 ];
__n31["arguments"] := __n35;
__n30["expression"] := __n31;
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "assert";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "sameValue";
__n45["raw"] := "\"sameValue\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "MemberExpression";
__n47["computed"] := true;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "coop";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n47["property"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Rick";
__n50["raw"] := "'Rick'";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "The value of coop[1] is expected to be \"Rick\"";
__n51["raw"] := "'The value of coop[1] is expected to be \"Rick\"'";
__n46 := [ __n47, __n50, __n51 ];
__n42["arguments"] := __n46;
__n41["expression"] := __n42;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "assert";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "sameValue";
__n56["raw"] := "\"sameValue\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n58 := {  };
__n58["type"] := "MemberExpression";
__n58["computed"] := true;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "coop";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 2.;
__n60["raw"] := "2";
__n58["property"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "Leo";
__n61["raw"] := "'Leo'";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "The value of coop[2] is expected to be \"Leo\"";
__n62["raw"] := "'The value of coop[2] is expected to be \"Leo\"'";
__n57 := [ __n58, __n61, __n62 ];
__n53["arguments"] := __n57;
__n52["expression"] := __n53;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "instanceof";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "coop";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Coop";
__n67["right"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "The result of evaluating (coop instanceof Coop) is expected to be true";
__n70["raw"] := "'The result of evaluating (coop instanceof Coop) is expected to be true'";
__n66 := [ __n67, __n70 ];
__n64["arguments"] := __n66;
__n63["expression"] := __n64;
__n1 := [ __n2, __n4, __n19, __n30, __n41, __n52, __n63 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n71 := [ "coop" ];
__n0["variableDeclarations"] := __n71;
__n73 := {  };
__n73["type"] := "FunctionDeclaration";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "Coop";
__n73["id"] := __n74;
__n75 := [  ];
__n73["params"] := __n75;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n77 := [  ];
__n76["body"] := __n77;
__n78 := [  ];
__n76["variableDeclarations"] := __n78;
__n79 := [  ];
__n76["functionDeclarations"] := __n79;
__n76["codeType"] := "function";
__n76["strict"] := false;
__n73["body"] := __n76;
__n73["generator"] := false;
__n73["async"] := false;
__n73["expression"] := false;
__n72 := [ __n73 ];
__n0["functionDeclarations"] := __n72;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}