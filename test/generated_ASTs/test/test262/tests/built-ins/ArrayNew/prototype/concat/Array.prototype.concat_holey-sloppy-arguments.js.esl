function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "args";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [ "a" ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ReturnStatement";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "arguments";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n6["callee"] := __n7;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 1.;
__n16["raw"] := "1";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 2.;
__n17["raw"] := "2";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 3.;
__n18["raw"] := "3";
__n15 := [ __n16, __n17, __n18 ];
__n6["arguments"] := __n15;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "delete";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n21["computed"] := true;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "args";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n21["property"] := __n23;
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["expression"] := __n20;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "AssignmentExpression";
__n25["operator"] := "=";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n26["computed"] := true;
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "args";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "Symbol";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "isConcatSpreadable";
__n30["raw"] := "\"isConcatSpreadable\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n26["property"] := __n28;
__n25["left"] := __n26;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n25["right"] := __n31;
__n24["expression"] := __n25;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "compareArray";
__n36["raw"] := "\"compareArray\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "ArrayExpression";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 1.;
__n40["raw"] := "1";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "void";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := 0.;
__n42["raw"] := "0";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 3.;
__n43["raw"] := "3";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "void";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := 0.;
__n46["raw"] := "0";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 3.;
__n47["raw"] := "3";
__n39 := [ __n40, __n41, __n43, __n44, __n45, __n47 ];
__n38["elements"] := __n39;
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "ArrayExpression";
__n51 := [  ];
__n50["elements"] := __n51;
__n49["object"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "concat";
__n52["raw"] := "\"concat\"";
__n49["property"] := __n52;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "args";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "args";
__n53 := [ __n54, __n55 ];
__n48["arguments"] := __n53;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "[1, void 0, 3, 1, void 0, 3] must return the same value returned by [].concat(args, args)";
__n56["raw"] := "'[1, void 0, 3, 1, void 0, 3] must return the same value returned by [].concat(args, args)'";
__n37 := [ __n38, __n48, __n56 ];
__n33["arguments"] := __n37;
__n32["expression"] := __n33;
__n1 := [ __n2, __n19, __n24, __n32 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n57 := [ "args" ];
__n0["variableDeclarations"] := __n57;
__n58 := [  ];
__n0["functionDeclarations"] := __n58;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}