function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "Shoes";
__n8["raw"] := "'Shoes'";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "Car";
__n9["raw"] := "'Car'";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "Bike";
__n10["raw"] := "'Bike'";
__n7 := [ __n8, __n9, __n10 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "called";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n16 := {  };
__n16["type"] := "VariableDeclaration";
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "result";
__n18["id"] := __n19;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "arr";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "findLast";
__n23["raw"] := "\"findLast\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [  ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "UpdateExpression";
__n30["operator"] := "++";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "called";
__n30["argument"] := __n31;
__n30["prefix"] := false;
__n29["expression"] := __n30;
__n32 := {  };
__n32["type"] := "ReturnStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := true;
__n33["raw"] := "true";
__n32["argument"] := __n33;
__n28 := [ __n29, __n32 ];
__n27["body"] := __n28;
__n34 := [  ];
__n27["variableDeclarations"] := __n34;
__n35 := [  ];
__n27["functionDeclarations"] := __n35;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["async"] := false;
__n25["expression"] := false;
__n24 := [ __n25 ];
__n20["arguments"] := __n24;
__n18["init"] := __n20;
__n17 := [ __n18 ];
__n16["declarations"] := __n17;
__n16["kind"] := "var";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "result";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "Bike";
__n43["raw"] := "'Bike'";
__n41 := [ __n42, __n43 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "assert";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "sameValue";
__n48["raw"] := "\"sameValue\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["callee"] := __n46;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "called";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 1.;
__n51["raw"] := "1";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "predicate was called once";
__n52["raw"] := "'predicate was called once'";
__n49 := [ __n50, __n51, __n52 ];
__n45["arguments"] := __n49;
__n44["expression"] := __n45;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "called";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 0.;
__n56["raw"] := "0";
__n54["right"] := __n56;
__n53["expression"] := __n54;
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "AssignmentExpression";
__n58["operator"] := "=";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "result";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "arr";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "findLast";
__n63["raw"] := "\"findLast\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "FunctionExpression";
__n65["id"] := null;
__n66 := [ "val" ];
__n65["params"] := __n66;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "UpdateExpression";
__n70["operator"] := "++";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "called";
__n70["argument"] := __n71;
__n70["prefix"] := false;
__n69["expression"] := __n70;
__n72 := {  };
__n72["type"] := "ReturnStatement";
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "===";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "val";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "Shoes";
__n75["raw"] := "'Shoes'";
__n73["right"] := __n75;
__n72["argument"] := __n73;
__n68 := [ __n69, __n72 ];
__n67["body"] := __n68;
__n76 := [  ];
__n67["variableDeclarations"] := __n76;
__n77 := [  ];
__n67["functionDeclarations"] := __n77;
__n67["codeType"] := "function";
__n67["strict"] := false;
__n65["body"] := __n67;
__n65["generator"] := false;
__n65["async"] := false;
__n65["expression"] := false;
__n64 := [ __n65 ];
__n60["arguments"] := __n64;
__n58["right"] := __n60;
__n57["expression"] := __n58;
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "assert";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "sameValue";
__n82["raw"] := "\"sameValue\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n79["callee"] := __n80;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "called";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 3.;
__n85["raw"] := "3";
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "predicate was called three times";
__n86["raw"] := "'predicate was called three times'";
__n83 := [ __n84, __n85, __n86 ];
__n79["arguments"] := __n83;
__n78["expression"] := __n79;
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "assert";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "sameValue";
__n91["raw"] := "\"sameValue\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n88["callee"] := __n89;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "result";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "Shoes";
__n94["raw"] := "'Shoes'";
__n92 := [ __n93, __n94 ];
__n88["arguments"] := __n92;
__n87["expression"] := __n88;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "AssignmentExpression";
__n96["operator"] := "=";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "result";
__n96["left"] := __n97;
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "arr";
__n99["object"] := __n100;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "findLast";
__n101["raw"] := "\"findLast\"";
__n99["property"] := __n101;
__n99["computed"] := true;
__n98["callee"] := __n99;
__n103 := {  };
__n103["type"] := "FunctionExpression";
__n103["id"] := null;
__n104 := [  ];
__n103["params"] := __n104;
__n105 := {  };
__n105["type"] := "BlockStatement";
__n107 := {  };
__n107["type"] := "ReturnStatement";
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "string";
__n108["raw"] := "'string'";
__n107["argument"] := __n108;
__n106 := [ __n107 ];
__n105["body"] := __n106;
__n109 := [  ];
__n105["variableDeclarations"] := __n109;
__n110 := [  ];
__n105["functionDeclarations"] := __n110;
__n105["codeType"] := "function";
__n105["strict"] := false;
__n103["body"] := __n105;
__n103["generator"] := false;
__n103["async"] := false;
__n103["expression"] := false;
__n102 := [ __n103 ];
__n98["arguments"] := __n102;
__n96["right"] := __n98;
__n95["expression"] := __n96;
__n111 := {  };
__n111["type"] := "ExpressionStatement";
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "MemberExpression";
__n114 := {  };
__n114["type"] := "Identifier";
__n114["name"] := "assert";
__n113["object"] := __n114;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "sameValue";
__n115["raw"] := "\"sameValue\"";
__n113["property"] := __n115;
__n113["computed"] := true;
__n112["callee"] := __n113;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "result";
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := "Bike";
__n118["raw"] := "'Bike'";
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "coerced string";
__n119["raw"] := "'coerced string'";
__n116 := [ __n117, __n118, __n119 ];
__n112["arguments"] := __n116;
__n111["expression"] := __n112;
__n120 := {  };
__n120["type"] := "ExpressionStatement";
__n121 := {  };
__n121["type"] := "AssignmentExpression";
__n121["operator"] := "=";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "result";
__n121["left"] := __n122;
__n123 := {  };
__n123["type"] := "CallExpression";
__n124 := {  };
__n124["type"] := "MemberExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "arr";
__n124["object"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "findLast";
__n126["raw"] := "\"findLast\"";
__n124["property"] := __n126;
__n124["computed"] := true;
__n123["callee"] := __n124;
__n128 := {  };
__n128["type"] := "FunctionExpression";
__n128["id"] := null;
__n129 := [  ];
__n128["params"] := __n129;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ReturnStatement";
__n133 := {  };
__n133["type"] := "ObjectExpression";
__n134 := [  ];
__n133["properties"] := __n134;
__n132["argument"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n135 := [  ];
__n130["variableDeclarations"] := __n135;
__n136 := [  ];
__n130["functionDeclarations"] := __n136;
__n130["codeType"] := "function";
__n130["strict"] := false;
__n128["body"] := __n130;
__n128["generator"] := false;
__n128["async"] := false;
__n128["expression"] := false;
__n127 := [ __n128 ];
__n123["arguments"] := __n127;
__n121["right"] := __n123;
__n120["expression"] := __n121;
__n137 := {  };
__n137["type"] := "ExpressionStatement";
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "MemberExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "assert";
__n139["object"] := __n140;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "sameValue";
__n141["raw"] := "\"sameValue\"";
__n139["property"] := __n141;
__n139["computed"] := true;
__n138["callee"] := __n139;
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "result";
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "Bike";
__n144["raw"] := "'Bike'";
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "coerced object";
__n145["raw"] := "'coerced object'";
__n142 := [ __n143, __n144, __n145 ];
__n138["arguments"] := __n142;
__n137["expression"] := __n138;
__n146 := {  };
__n146["type"] := "ExpressionStatement";
__n147 := {  };
__n147["type"] := "AssignmentExpression";
__n147["operator"] := "=";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "result";
__n147["left"] := __n148;
__n149 := {  };
__n149["type"] := "CallExpression";
__n150 := {  };
__n150["type"] := "MemberExpression";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "arr";
__n150["object"] := __n151;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := "findLast";
__n152["raw"] := "\"findLast\"";
__n150["property"] := __n152;
__n150["computed"] := true;
__n149["callee"] := __n150;
__n154 := {  };
__n154["type"] := "FunctionExpression";
__n154["id"] := null;
__n155 := [  ];
__n154["params"] := __n155;
__n156 := {  };
__n156["type"] := "BlockStatement";
__n158 := {  };
__n158["type"] := "ReturnStatement";
__n159 := {  };
__n159["type"] := "CallExpression";
__n160 := {  };
__n160["type"] := "Identifier";
__n160["name"] := "Symbol";
__n159["callee"] := __n160;
__n162 := {  };
__n162["type"] := "Literal";
__n162["value"] := "";
__n162["raw"] := "''";
__n161 := [ __n162 ];
__n159["arguments"] := __n161;
__n158["argument"] := __n159;
__n157 := [ __n158 ];
__n156["body"] := __n157;
__n163 := [  ];
__n156["variableDeclarations"] := __n163;
__n164 := [  ];
__n156["functionDeclarations"] := __n164;
__n156["codeType"] := "function";
__n156["strict"] := false;
__n154["body"] := __n156;
__n154["generator"] := false;
__n154["async"] := false;
__n154["expression"] := false;
__n153 := [ __n154 ];
__n149["arguments"] := __n153;
__n147["right"] := __n149;
__n146["expression"] := __n147;
__n165 := {  };
__n165["type"] := "ExpressionStatement";
__n166 := {  };
__n166["type"] := "CallExpression";
__n167 := {  };
__n167["type"] := "MemberExpression";
__n168 := {  };
__n168["type"] := "Identifier";
__n168["name"] := "assert";
__n167["object"] := __n168;
__n169 := {  };
__n169["type"] := "Literal";
__n169["value"] := "sameValue";
__n169["raw"] := "\"sameValue\"";
__n167["property"] := __n169;
__n167["computed"] := true;
__n166["callee"] := __n167;
__n171 := {  };
__n171["type"] := "Identifier";
__n171["name"] := "result";
__n172 := {  };
__n172["type"] := "Literal";
__n172["value"] := "Bike";
__n172["raw"] := "'Bike'";
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "coerced Symbol";
__n173["raw"] := "'coerced Symbol'";
__n170 := [ __n171, __n172, __n173 ];
__n166["arguments"] := __n170;
__n165["expression"] := __n166;
__n174 := {  };
__n174["type"] := "ExpressionStatement";
__n175 := {  };
__n175["type"] := "AssignmentExpression";
__n175["operator"] := "=";
__n176 := {  };
__n176["type"] := "Identifier";
__n176["name"] := "result";
__n175["left"] := __n176;
__n177 := {  };
__n177["type"] := "CallExpression";
__n178 := {  };
__n178["type"] := "MemberExpression";
__n179 := {  };
__n179["type"] := "Identifier";
__n179["name"] := "arr";
__n178["object"] := __n179;
__n180 := {  };
__n180["type"] := "Literal";
__n180["value"] := "findLast";
__n180["raw"] := "\"findLast\"";
__n178["property"] := __n180;
__n178["computed"] := true;
__n177["callee"] := __n178;
__n182 := {  };
__n182["type"] := "FunctionExpression";
__n182["id"] := null;
__n183 := [  ];
__n182["params"] := __n183;
__n184 := {  };
__n184["type"] := "BlockStatement";
__n186 := {  };
__n186["type"] := "ReturnStatement";
__n187 := {  };
__n187["type"] := "Literal";
__n187["value"] := 1.;
__n187["raw"] := "1";
__n186["argument"] := __n187;
__n185 := [ __n186 ];
__n184["body"] := __n185;
__n188 := [  ];
__n184["variableDeclarations"] := __n188;
__n189 := [  ];
__n184["functionDeclarations"] := __n189;
__n184["codeType"] := "function";
__n184["strict"] := false;
__n182["body"] := __n184;
__n182["generator"] := false;
__n182["async"] := false;
__n182["expression"] := false;
__n181 := [ __n182 ];
__n177["arguments"] := __n181;
__n175["right"] := __n177;
__n174["expression"] := __n175;
__n190 := {  };
__n190["type"] := "ExpressionStatement";
__n191 := {  };
__n191["type"] := "CallExpression";
__n192 := {  };
__n192["type"] := "MemberExpression";
__n193 := {  };
__n193["type"] := "Identifier";
__n193["name"] := "assert";
__n192["object"] := __n193;
__n194 := {  };
__n194["type"] := "Literal";
__n194["value"] := "sameValue";
__n194["raw"] := "\"sameValue\"";
__n192["property"] := __n194;
__n192["computed"] := true;
__n191["callee"] := __n192;
__n196 := {  };
__n196["type"] := "Identifier";
__n196["name"] := "result";
__n197 := {  };
__n197["type"] := "Literal";
__n197["value"] := "Bike";
__n197["raw"] := "'Bike'";
__n198 := {  };
__n198["type"] := "Literal";
__n198["value"] := "coerced number";
__n198["raw"] := "'coerced number'";
__n195 := [ __n196, __n197, __n198 ];
__n191["arguments"] := __n195;
__n190["expression"] := __n191;
__n199 := {  };
__n199["type"] := "ExpressionStatement";
__n200 := {  };
__n200["type"] := "AssignmentExpression";
__n200["operator"] := "=";
__n201 := {  };
__n201["type"] := "Identifier";
__n201["name"] := "result";
__n200["left"] := __n201;
__n202 := {  };
__n202["type"] := "CallExpression";
__n203 := {  };
__n203["type"] := "MemberExpression";
__n204 := {  };
__n204["type"] := "Identifier";
__n204["name"] := "arr";
__n203["object"] := __n204;
__n205 := {  };
__n205["type"] := "Literal";
__n205["value"] := "findLast";
__n205["raw"] := "\"findLast\"";
__n203["property"] := __n205;
__n203["computed"] := true;
__n202["callee"] := __n203;
__n207 := {  };
__n207["type"] := "FunctionExpression";
__n207["id"] := null;
__n208 := [  ];
__n207["params"] := __n208;
__n209 := {  };
__n209["type"] := "BlockStatement";
__n211 := {  };
__n211["type"] := "ReturnStatement";
__n212 := {  };
__n212["type"] := "UnaryExpression";
__n212["operator"] := "-";
__n213 := {  };
__n213["type"] := "Literal";
__n213["value"] := 1.;
__n213["raw"] := "1";
__n212["argument"] := __n213;
__n212["prefix"] := true;
__n211["argument"] := __n212;
__n210 := [ __n211 ];
__n209["body"] := __n210;
__n214 := [  ];
__n209["variableDeclarations"] := __n214;
__n215 := [  ];
__n209["functionDeclarations"] := __n215;
__n209["codeType"] := "function";
__n209["strict"] := false;
__n207["body"] := __n209;
__n207["generator"] := false;
__n207["async"] := false;
__n207["expression"] := false;
__n206 := [ __n207 ];
__n202["arguments"] := __n206;
__n200["right"] := __n202;
__n199["expression"] := __n200;
__n216 := {  };
__n216["type"] := "ExpressionStatement";
__n217 := {  };
__n217["type"] := "CallExpression";
__n218 := {  };
__n218["type"] := "MemberExpression";
__n219 := {  };
__n219["type"] := "Identifier";
__n219["name"] := "assert";
__n218["object"] := __n219;
__n220 := {  };
__n220["type"] := "Literal";
__n220["value"] := "sameValue";
__n220["raw"] := "\"sameValue\"";
__n218["property"] := __n220;
__n218["computed"] := true;
__n217["callee"] := __n218;
__n222 := {  };
__n222["type"] := "Identifier";
__n222["name"] := "result";
__n223 := {  };
__n223["type"] := "Literal";
__n223["value"] := "Bike";
__n223["raw"] := "'Bike'";
__n224 := {  };
__n224["type"] := "Literal";
__n224["value"] := "coerced negative number";
__n224["raw"] := "'coerced negative number'";
__n221 := [ __n222, __n223, __n224 ];
__n217["arguments"] := __n221;
__n216["expression"] := __n217;
__n1 := [ __n2, __n11, __n16, __n36, __n44, __n53, __n57, __n78, __n87, __n95, __n111, __n120, __n137, __n146, __n165, __n174, __n190, __n199, __n216 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n225 := [ "arr", "called", "result" ];
__n0["variableDeclarations"] := __n225;
__n226 := [  ];
__n0["functionDeclarations"] := __n226;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}