function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "fromIndex";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "valueOf";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ThrowStatement";
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Test262Error";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "Length should be checked before ToInteger(fromIndex).";
__n18["raw"] := "\"Length should be checked before ToInteger(fromIndex).\"";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n19 := [  ];
__n12["variableDeclarations"] := __n19;
__n20 := [  ];
__n12["functionDeclarations"] := __n20;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "assert";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "sameValue";
__n25["raw"] := "\"sameValue\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "ArrayExpression";
__n30 := [  ];
__n29["elements"] := __n30;
__n28["object"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "indexOf";
__n31["raw"] := "\"indexOf\"";
__n28["property"] := __n31;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n32 := [ __n33 ];
__n27["arguments"] := __n32;
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "-";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 1.;
__n35["raw"] := "1";
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n26 := [ __n27, __n34 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "ArrayExpression";
__n45 := [  ];
__n44["elements"] := __n45;
__n43["object"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "indexOf";
__n46["raw"] := "\"indexOf\"";
__n43["property"] := __n46;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 2.;
__n48["raw"] := "2";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "fromIndex";
__n47 := [ __n48, __n49 ];
__n42["arguments"] := __n47;
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "-";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 1.;
__n51["raw"] := "1";
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n41 := [ __n42, __n50 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n1 := [ __n2, __n21, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "fromIndex" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}