function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "srcArr";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ArrayExpression";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 2.;
__n11["raw"] := "2";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 3.;
__n12["raw"] := "3";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 4.;
__n13["raw"] := "4";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 5.;
__n14["raw"] := "5";
__n9 := [ __n10, __n11, __n12, __n13, __n14 ];
__n8["elements"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n15 := {  };
__n15["type"] := "VariableDeclaration";
__n17 := {  };
__n17["type"] := "VariableDeclarator";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "resArr";
__n17["id"] := __n18;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "srcArr";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "map";
__n22["raw"] := "\"map\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "callbackfn";
__n23 := [ __n24 ];
__n19["arguments"] := __n23;
__n17["init"] := __n19;
__n16 := [ __n17 ];
__n15["declarations"] := __n16;
__n15["kind"] := "var";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "assert";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "sameValue";
__n29["raw"] := "\"sameValue\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "resArr";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "length";
__n33["raw"] := "\"length\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 5.;
__n34["raw"] := "5";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "resArr.length";
__n35["raw"] := "'resArr.length'";
__n30 := [ __n31, __n34, __n35 ];
__n26["arguments"] := __n30;
__n25["expression"] := __n26;
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "assert";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "sameValue";
__n40["raw"] := "\"sameValue\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "resArr";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 4.;
__n44["raw"] := "4";
__n42["property"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 0.;
__n45["raw"] := "0";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "resArr[4]";
__n46["raw"] := "'resArr[4]'";
__n41 := [ __n42, __n45, __n46 ];
__n37["arguments"] := __n41;
__n36["expression"] := __n37;
__n1 := [ __n2, __n4, __n15, __n25, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [ "srcArr", "resArr" ];
__n0["variableDeclarations"] := __n47;
__n49 := {  };
__n49["type"] := "FunctionDeclaration";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "callbackfn";
__n49["id"] := __n50;
__n51 := [ "val", "idx", "obj" ];
__n49["params"] := __n51;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "AssignmentExpression";
__n55["operator"] := "=";
__n56 := {  };
__n56["type"] := "MemberExpression";
__n56["computed"] := true;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "srcArr";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 4.;
__n58["raw"] := "4";
__n56["property"] := __n58;
__n55["left"] := __n56;
__n59 := {  };
__n59["type"] := "UnaryExpression";
__n59["operator"] := "-";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 1.;
__n60["raw"] := "1";
__n59["argument"] := __n60;
__n59["prefix"] := true;
__n55["right"] := __n59;
__n54["expression"] := __n55;
__n61 := {  };
__n61["type"] := "IfStatement";
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := ">";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "val";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n62["right"] := __n64;
__n61["test"] := __n62;
__n65 := {  };
__n65["type"] := "ReturnStatement";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n65["argument"] := __n66;
__n61["consequent"] := __n65;
__n67 := {  };
__n67["type"] := "ReturnStatement";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 0.;
__n68["raw"] := "0";
__n67["argument"] := __n68;
__n61["alternate"] := __n67;
__n53 := [ __n54, __n61 ];
__n52["body"] := __n53;
__n69 := [  ];
__n52["variableDeclarations"] := __n69;
__n70 := [  ];
__n52["functionDeclarations"] := __n70;
__n52["codeType"] := "function";
__n52["strict"] := false;
__n49["body"] := __n52;
__n49["generator"] := false;
__n49["async"] := false;
__n49["expression"] := false;
__n48 := [ __n49 ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}