function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "callbackfn";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "obj";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ObjectExpression";
__n10 := {  };
__n10["type"] := "Property";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n10["key"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 11.;
__n12["raw"] := "11";
__n10["value"] := __n12;
__n10["computed"] := false;
__n10["kind"] := "init";
__n10["shorthand"] := false;
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 2.;
__n14["raw"] := "2";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 9.;
__n15["raw"] := "9";
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n16 := {  };
__n16["type"] := "Property";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "length";
__n16["key"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "-";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 4294967294.;
__n19["raw"] := "4294967294";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["value"] := __n18;
__n16["computed"] := false;
__n16["kind"] := "init";
__n16["shorthand"] := false;
__n9 := [ __n10, __n13, __n16 ];
__n8["properties"] := __n9;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "assert";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "sameValue";
__n24["raw"] := "\"sameValue\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "Array";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "prototype";
__n31["raw"] := "\"prototype\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["object"] := __n29;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "reduce";
__n32["raw"] := "\"reduce\"";
__n28["property"] := __n32;
__n28["computed"] := true;
__n27["object"] := __n28;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "call";
__n33["raw"] := "\"call\"";
__n27["property"] := __n33;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "obj";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "callbackfn";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n34 := [ __n35, __n36, __n37 ];
__n26["arguments"] := __n34;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 1.;
__n38["raw"] := "1";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "Array.prototype.reduce.call(obj, callbackfn, 1)";
__n39["raw"] := "'Array.prototype.reduce.call(obj, callbackfn, 1)'";
__n25 := [ __n26, __n38, __n39 ];
__n21["arguments"] := __n25;
__n20["expression"] := __n21;
__n1 := [ __n2, __n4, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n40 := [ "obj" ];
__n0["variableDeclarations"] := __n40;
__n42 := {  };
__n42["type"] := "FunctionDeclaration";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "callbackfn";
__n42["id"] := __n43;
__n44 := [ "prevVal", "curVal", "idx", "obj" ];
__n42["params"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ReturnStatement";
__n48 := {  };
__n48["type"] := "LogicalExpression";
__n48["operator"] := "&&";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "===";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "curVal";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 11.;
__n51["raw"] := "11";
__n49["right"] := __n51;
__n48["left"] := __n49;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "===";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "idx";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 1.;
__n54["raw"] := "1";
__n52["right"] := __n54;
__n48["right"] := __n52;
__n47["argument"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n55 := [  ];
__n45["variableDeclarations"] := __n55;
__n56 := [  ];
__n45["functionDeclarations"] := __n56;
__n45["codeType"] := "function";
__n45["strict"] := false;
__n42["body"] := __n45;
__n42["generator"] := false;
__n42["async"] := false;
__n42["expression"] := false;
__n41 := [ __n42 ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}