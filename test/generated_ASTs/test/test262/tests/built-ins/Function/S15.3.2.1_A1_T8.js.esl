function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "body";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "var 1=1;";
__n6["raw"] := "\"var 1=1;\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "TryStatement";
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "f";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "NewExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Function";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "body";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "#1: If body is not parsable as FunctionBody then throw a SyntaxError exception";
__n22["raw"] := "'#1: If body is not parsable as FunctionBody then throw a SyntaxError exception'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n9 := [ __n10, __n18 ];
__n8["body"] := __n9;
__n7["block"] := __n8;
__n23 := {  };
__n23["type"] := "CatchClause";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "e";
__n23["param"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "!";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "instanceof";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "SyntaxError";
__n29["right"] := __n31;
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n27["test"] := __n28;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1.1: If body is not parsable as FunctionBody then throw a SyntaxError exception";
__n38["raw"] := "'#1.1: If body is not parsable as FunctionBody then throw a SyntaxError exception'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n27["consequent"] := __n32;
__n27["alternate"] := null;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n23["body"] := __n25;
__n7["handler"] := __n23;
__n7["finalizer"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [ "body", "f" ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}