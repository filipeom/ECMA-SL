function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "AssignmentExpression";
__n15["operator"] := "=";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "p";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n15["right"] := __n17;
__n14["expression"] := __n15;
__n18 := {  };
__n18["type"] := "ReturnStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "a";
__n19["raw"] := "\"a\"";
__n18["argument"] := __n19;
__n13 := [ __n14, __n18 ];
__n12["body"] := __n13;
__n20 := [  ];
__n12["variableDeclarations"] := __n20;
__n21 := [  ];
__n12["functionDeclarations"] := __n21;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "body";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "ObjectExpression";
__n28 := {  };
__n28["type"] := "Property";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "toString";
__n28["key"] := __n29;
__n30 := {  };
__n30["type"] := "FunctionExpression";
__n30["id"] := null;
__n31 := [  ];
__n30["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ThrowStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "body";
__n35["raw"] := "\"body\"";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n36 := [  ];
__n32["variableDeclarations"] := __n36;
__n37 := [  ];
__n32["functionDeclarations"] := __n37;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n30["body"] := __n32;
__n30["generator"] := false;
__n30["async"] := false;
__n30["expression"] := false;
__n28["value"] := __n30;
__n28["computed"] := false;
__n28["kind"] := "init";
__n28["shorthand"] := false;
__n27 := [ __n28 ];
__n26["properties"] := __n27;
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n38 := {  };
__n38["type"] := "TryStatement";
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "VariableDeclaration";
__n43 := {  };
__n43["type"] := "VariableDeclarator";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "f";
__n43["id"] := __n44;
__n45 := {  };
__n45["type"] := "NewExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "Function";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "p";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "body";
__n47 := [ __n48, __n49 ];
__n45["arguments"] := __n47;
__n43["init"] := __n45;
__n42 := [ __n43 ];
__n41["declarations"] := __n42;
__n41["kind"] := "var";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#1: test failed";
__n54["raw"] := "'#1: test failed'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n40 := [ __n41, __n50 ];
__n39["body"] := __n40;
__n38["block"] := __n39;
__n55 := {  };
__n55["type"] := "CatchClause";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "e";
__n55["param"] := __n56;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "e";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "body";
__n62["raw"] := "\"body\"";
__n60["right"] := __n62;
__n59["test"] := __n60;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$ERROR";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "#1.1: i) Let Result(i) be the first argument; ii) Let P be ToString(Result(i))";
__n69["raw"] := "'#1.1: i) Let Result(i) be the first argument; ii) Let P be ToString(Result(i))'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n59["consequent"] := __n63;
__n59["alternate"] := null;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n55["body"] := __n57;
__n38["handler"] := __n55;
__n38["finalizer"] := null;
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "p";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 1.;
__n73["raw"] := "1";
__n71["right"] := __n73;
__n70["test"] := __n71;
__n74 := {  };
__n74["type"] := "BlockStatement";
__n76 := {  };
__n76["type"] := "ExpressionStatement";
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "$ERROR";
__n77["callee"] := __n78;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#2: i) Let Result(i) be the first argument; ii) Let P be ToString(Result(i))";
__n80["raw"] := "'#2: i) Let Result(i) be the first argument; ii) Let P be ToString(Result(i))'";
__n79 := [ __n80 ];
__n77["arguments"] := __n79;
__n76["expression"] := __n77;
__n75 := [ __n76 ];
__n74["body"] := __n75;
__n70["consequent"] := __n74;
__n70["alternate"] := null;
__n1 := [ __n2, __n22, __n38, __n70 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n81 := [ "p", "body", "f" ];
__n0["variableDeclarations"] := __n81;
__n82 := [  ];
__n0["functionDeclarations"] := __n82;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}