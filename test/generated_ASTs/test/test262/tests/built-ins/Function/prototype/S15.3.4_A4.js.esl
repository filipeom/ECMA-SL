function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Function";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["object"] := __n6;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "hasOwnProperty";
__n9["raw"] := "\"hasOwnProperty\"";
__n5["property"] := __n9;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "valueOf";
__n11["raw"] := "\"valueOf\"";
__n10 := [ __n11 ];
__n4["arguments"] := __n10;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := false;
__n12["raw"] := "false";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: The Function prototype object does not have a valueOf property of its own";
__n19["raw"] := "'#1: The Function prototype object does not have a valueOf property of its own'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "===";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "typeof";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Function";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "prototype";
__n26["raw"] := "\"prototype\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "valueOf";
__n27["raw"] := "\"valueOf\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "undefined";
__n28["raw"] := "\"undefined\"";
__n21["right"] := __n28;
__n20["test"] := __n21;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#2: however, it inherits the valueOf property from the Object prototype Object";
__n35["raw"] := "'#2: however, it inherits the valueOf property from the Object prototype Object'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n20["consequent"] := __n29;
__n20["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Function";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "prototype";
__n41["raw"] := "\"prototype\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["object"] := __n39;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "valueOf";
__n42["raw"] := "\"valueOf\"";
__n38["property"] := __n42;
__n38["computed"] := true;
__n37["left"] := __n38;
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Object";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "prototype";
__n46["raw"] := "\"prototype\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["object"] := __n44;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "valueOf";
__n47["raw"] := "\"valueOf\"";
__n43["property"] := __n47;
__n43["computed"] := true;
__n37["right"] := __n43;
__n36["test"] := __n37;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#3: however, it inherits the valueOf property from the Object prototype Object";
__n54["raw"] := "'#3: however, it inherits the valueOf property from the Object prototype Object'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n36["consequent"] := __n48;
__n36["alternate"] := null;
__n1 := [ __n2, __n20, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n55 := [  ];
__n0["variableDeclarations"] := __n55;
__n56 := [  ];
__n0["functionDeclarations"] := __n56;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}