function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "fun";
__n4["expression"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "assert";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "sameValue";
__n10["raw"] := "\"sameValue\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["callee"] := __n8;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "fun";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "apply";
__n15["raw"] := "\"apply\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "-";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 12.;
__n18["raw"] := "12";
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Array";
__n16 := [ __n17, __n19 ];
__n12["arguments"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := false;
__n20["raw"] := "false";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "fun.apply(-12, Array)";
__n21["raw"] := "'fun.apply(-12, Array)'";
__n11 := [ __n12, __n20, __n21 ];
__n7["arguments"] := __n11;
__n6["expression"] := __n7;
__n1 := [ __n2, __n4, __n6 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n22 := [  ];
__n0["variableDeclarations"] := __n22;
__n24 := {  };
__n24["type"] := "FunctionDeclaration";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "fun";
__n24["id"] := __n25;
__n26 := [  ];
__n24["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "instanceof";
__n31 := {  };
__n31["type"] := "ThisExpression";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Number";
__n30["right"] := __n32;
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n33 := [  ];
__n27["variableDeclarations"] := __n33;
__n34 := [  ];
__n27["functionDeclarations"] := __n34;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n24["body"] := __n27;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n23 := [ __n24 ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}