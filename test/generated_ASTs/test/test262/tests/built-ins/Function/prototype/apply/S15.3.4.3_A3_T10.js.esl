function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "eval";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := " (function(){this.feat=1}).apply()";
__n6["raw"] := "\" (function(){this.feat=1}).apply()\"";
__n5 := [ __n6 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n9["computed"] := true;
__n10 := {  };
__n10["type"] := "ThisExpression";
__n9["object"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "feat";
__n11["raw"] := "\"feat\"";
__n9["property"] := __n11;
__n8["left"] := __n9;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n8["right"] := __n12;
__n7["test"] := __n8;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: If thisArg is null or undefined, the called function is passed the global object as the this value";
__n19["raw"] := "'#1: If thisArg is null or undefined, the called function is passed the global object as the this value'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n7["consequent"] := __n13;
__n7["alternate"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n20 := [  ];
__n0["variableDeclarations"] := __n20;
__n21 := [  ];
__n0["functionDeclarations"] := __n21;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}