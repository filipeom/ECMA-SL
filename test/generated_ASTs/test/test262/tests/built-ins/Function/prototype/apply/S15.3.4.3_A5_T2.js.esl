function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "retobj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "NewExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Function";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "this.touched= true; return this;";
__n16["raw"] := "\"this.touched= true; return this;\"";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["object"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "apply";
__n17["raw"] := "\"apply\"";
__n12["property"] := __n17;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "obj";
__n18 := [ __n19 ];
__n11["arguments"] := __n18;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "UnaryExpression";
__n22["operator"] := "typeof";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "obj";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "touched";
__n25["raw"] := "\"touched\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["argument"] := __n23;
__n22["prefix"] := true;
__n21["left"] := __n22;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "undefined";
__n26["raw"] := "\"undefined\"";
__n21["right"] := __n26;
__n20["test"] := __n21;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$ERROR";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n33["raw"] := "'#1: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n20["consequent"] := __n27;
__n20["alternate"] := null;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "UnaryExpression";
__n35["operator"] := "!";
__n36 := {  };
__n36["type"] := "MemberExpression";
__n36["computed"] := true;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "retobj";
__n36["object"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "touched";
__n38["raw"] := "\"touched\"";
__n36["property"] := __n38;
__n35["argument"] := __n36;
__n35["prefix"] := true;
__n34["test"] := __n35;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value";
__n45["raw"] := "'#2: If thisArg is not null(defined) the called function is passed ToObject(thisArg) as the this value'";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n34["consequent"] := __n39;
__n34["alternate"] := null;
__n1 := [ __n2, __n7, __n20, __n34 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "obj", "retobj" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}