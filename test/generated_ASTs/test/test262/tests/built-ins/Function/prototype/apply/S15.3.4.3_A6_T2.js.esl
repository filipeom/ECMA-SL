function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Function";
__n8["callee"] := __n9;
__n10 := [  ];
__n8["arguments"] := __n10;
__n7["object"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "apply";
__n11["raw"] := "\"apply\"";
__n7["property"] := __n11;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := 'null;
__n13["raw"] := "\"'null\"";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n12 := [ __n13, __n14 ];
__n6["arguments"] := __n12;
__n5["expression"] := __n6;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown";
__n19["raw"] := "'#1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n4 := [ __n5, __n15 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n20 := {  };
__n20["type"] := "CatchClause";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "e";
__n20["param"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "!";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "instanceof";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "e";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "TypeError";
__n26["right"] := __n28;
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["test"] := __n25;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1.1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown";
__n35["raw"] := "'#1.1: if argArray is neither an array nor an arguments object (see 10.1.8), a TypeError exception is thrown'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n24["consequent"] := __n29;
__n24["alternate"] := null;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n20["body"] := __n22;
__n2["handler"] := __n20;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [  ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}