function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "construct";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "d";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "construct";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Date";
__n12 := {  };
__n12["type"] := "ArrayExpression";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1957.;
__n14["raw"] := "1957";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 4.;
__n15["raw"] := "4";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := 27.;
__n16["raw"] := "27";
__n13 := [ __n14, __n15, __n16 ];
__n12["elements"] := __n13;
__n10 := [ __n11, __n12 ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Object";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "prototype";
__n24["raw"] := "\"prototype\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["object"] := __n22;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "toString";
__n25["raw"] := "\"toString\"";
__n21["property"] := __n25;
__n21["computed"] := true;
__n20["object"] := __n21;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "call";
__n26["raw"] := "\"call\"";
__n20["property"] := __n26;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "d";
__n27 := [ __n28 ];
__n19["arguments"] := __n27;
__n18["left"] := __n19;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "[object Date]";
__n29["raw"] := "'[object Date]'";
__n18["right"] := __n29;
__n17["test"] := __n18;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "Using the Date constructor via .bind did not create a Date.";
__n36["raw"] := "'Using the Date constructor via .bind did not create a Date.'";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n17["consequent"] := __n30;
__n17["alternate"] := null;
__n1 := [ __n2, __n4, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n37 := [ "d" ];
__n0["variableDeclarations"] := __n37;
__n39 := {  };
__n39["type"] := "FunctionDeclaration";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "construct";
__n39["id"] := __n40;
__n41 := [ "f", "args" ];
__n39["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "VariableDeclaration";
__n46 := {  };
__n46["type"] := "VariableDeclarator";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "bound";
__n46["id"] := __n47;
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "Function";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "prototype";
__n53["raw"] := "\"prototype\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["object"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "bind";
__n54["raw"] := "\"bind\"";
__n50["property"] := __n54;
__n50["computed"] := true;
__n49["object"] := __n50;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "apply";
__n55["raw"] := "\"apply\"";
__n49["property"] := __n55;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "f";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "ArrayExpression";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 'null;
__n62["raw"] := "\"'null\"";
__n61 := [ __n62 ];
__n60["elements"] := __n61;
__n59["object"] := __n60;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "concat";
__n63["raw"] := "\"concat\"";
__n59["property"] := __n63;
__n59["computed"] := true;
__n58["callee"] := __n59;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "args";
__n64 := [ __n65 ];
__n58["arguments"] := __n64;
__n56 := [ __n57, __n58 ];
__n48["arguments"] := __n56;
__n46["init"] := __n48;
__n45 := [ __n46 ];
__n44["declarations"] := __n45;
__n44["kind"] := "var";
__n66 := {  };
__n66["type"] := "ReturnStatement";
__n67 := {  };
__n67["type"] := "NewExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "bound";
__n67["callee"] := __n68;
__n69 := [  ];
__n67["arguments"] := __n69;
__n66["argument"] := __n67;
__n43 := [ __n44, __n66 ];
__n42["body"] := __n43;
__n70 := [ "bound" ];
__n42["variableDeclarations"] := __n70;
__n71 := [  ];
__n42["functionDeclarations"] := __n71;
__n42["codeType"] := "function";
__n42["strict"] := false;
__n39["body"] := __n42;
__n39["generator"] := false;
__n39["async"] := false;
__n39["expression"] := false;
__n38 := [ __n39 ];
__n0["functionDeclarations"] := __n38;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}