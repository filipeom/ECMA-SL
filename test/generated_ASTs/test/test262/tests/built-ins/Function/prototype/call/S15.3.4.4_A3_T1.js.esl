function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Function";
__n5["callee"] := __n6;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "this.field=\"strawberry\"";
__n8["raw"] := "\"this.field=\\\"strawberry\\\"\"";
__n7 := [ __n8 ];
__n5["arguments"] := __n7;
__n4["object"] := __n5;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "call";
__n9["raw"] := "\"call\"";
__n4["property"] := __n9;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n10 := [  ];
__n3["arguments"] := __n10;
__n2["expression"] := __n3;
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n13["computed"] := true;
__n14 := {  };
__n14["type"] := "ThisExpression";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "field";
__n15["raw"] := "\"field\"";
__n13["property"] := __n15;
__n12["left"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "strawberry";
__n16["raw"] := "\"strawberry\"";
__n12["right"] := __n16;
__n11["test"] := __n12;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: If thisArg is null or undefined, the called function is passed the global object as the this value";
__n23["raw"] := "'#1: If thisArg is null or undefined, the called function is passed the global object as the this value'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n11["consequent"] := __n17;
__n11["alternate"] := null;
__n1 := [ __n2, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n24 := [  ];
__n0["variableDeclarations"] := __n24;
__n25 := [  ];
__n0["functionDeclarations"] := __n25;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}