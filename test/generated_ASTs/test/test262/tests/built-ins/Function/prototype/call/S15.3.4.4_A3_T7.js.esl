function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "FunctionExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "FACTORY";
__n4["id"] := __n5;
__n6 := [  ];
__n4["params"] := __n6;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Function";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "this.feat=\"in da haus\"";
__n15["raw"] := "\"this.feat=\\\"in da haus\\\"\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["object"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "call";
__n16["raw"] := "\"call\"";
__n11["property"] := __n16;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "void";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.;
__n19["raw"] := "0";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n17 := [ __n18 ];
__n10["arguments"] := __n17;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n20 := [  ];
__n7["variableDeclarations"] := __n20;
__n21 := [  ];
__n7["functionDeclarations"] := __n21;
__n7["codeType"] := "function";
__n7["strict"] := false;
__n4["body"] := __n7;
__n4["generator"] := false;
__n4["async"] := false;
__n4["expression"] := false;
__n3["callee"] := __n4;
__n22 := [  ];
__n3["arguments"] := __n22;
__n2["expression"] := __n3;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n25["computed"] := true;
__n26 := {  };
__n26["type"] := "ThisExpression";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "feat";
__n27["raw"] := "\"feat\"";
__n25["property"] := __n27;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "in da haus";
__n28["raw"] := "\"in da haus\"";
__n24["right"] := __n28;
__n23["test"] := __n24;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1: If thisArg is null or undefined, the called function is passed the global object as the this value";
__n35["raw"] := "'#1: If thisArg is null or undefined, the called function is passed the global object as the this value'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n23["consequent"] := __n29;
__n23["alternate"] := null;
__n1 := [ __n2, __n23 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [  ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}