function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "badLength";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Proxy";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "ArrayExpression";
__n10 := [  ];
__n9["elements"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n13 := {  };
__n13["type"] := "Property";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "get";
__n13["key"] := __n14;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [ "_", "name" ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "name";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "length";
__n22["raw"] := "'length'";
__n20["right"] := __n22;
__n19["test"] := __n20;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ThrowStatement";
__n26 := {  };
__n26["type"] := "NewExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "Test262Error";
__n26["callee"] := __n27;
__n28 := [  ];
__n26["arguments"] := __n28;
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n19["consequent"] := __n23;
__n19["alternate"] := null;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n29 := [  ];
__n17["variableDeclarations"] := __n29;
__n30 := [  ];
__n17["functionDeclarations"] := __n30;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n13["value"] := __n15;
__n13["computed"] := false;
__n13["kind"] := "init";
__n13["shorthand"] := false;
__n12 := [ __n13 ];
__n11["properties"] := __n12;
__n8 := [ __n9, __n11 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "assert";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "throws";
__n35["raw"] := "\"throws\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "Test262Error";
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "JSON";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "parse";
__n46["raw"] := "\"parse\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "[0,0]";
__n48["raw"] := "'[0,0]'";
__n49 := {  };
__n49["type"] := "FunctionExpression";
__n49["id"] := null;
__n50 := [  ];
__n49["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "AssignmentExpression";
__n54["operator"] := "=";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n55["computed"] := true;
__n56 := {  };
__n56["type"] := "ThisExpression";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := 1.;
__n57["raw"] := "1";
__n55["property"] := __n57;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "badLength";
__n54["right"] := __n58;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n59 := [  ];
__n51["variableDeclarations"] := __n59;
__n60 := [  ];
__n51["functionDeclarations"] := __n60;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n49["body"] := __n51;
__n49["generator"] := false;
__n49["async"] := false;
__n49["expression"] := false;
__n47 := [ __n48, __n49 ];
__n43["arguments"] := __n47;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n61 := [  ];
__n40["variableDeclarations"] := __n61;
__n62 := [  ];
__n40["functionDeclarations"] := __n62;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n36 := [ __n37, __n38 ];
__n32["arguments"] := __n36;
__n31["expression"] := __n32;
__n1 := [ __n2, __n31 ];
__n0["body"] := __n1;
__n63 := [ "badLength" ];
__n0["variableDeclarations"] := __n63;
__n64 := [  ];
__n0["functionDeclarations"] := __n64;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}