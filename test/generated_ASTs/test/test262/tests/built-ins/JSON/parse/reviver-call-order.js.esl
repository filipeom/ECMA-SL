function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "calls";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n7 := [  ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "reviver";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "JSON";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "parse";
__n14["raw"] := "\"parse\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "{\"p1\":0,\"p2\":0,\"p1\":0,\"2\":0,\"1\":0}";
__n16["raw"] := "'{\"p1\":0,\"p2\":0,\"p1\":0,\"2\":0,\"1\":0}'";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "reviver";
__n15 := [ __n16, __n17 ];
__n11["arguments"] := __n15;
__n10["expression"] := __n11;
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "assert";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "compareArray";
__n22["raw"] := "\"compareArray\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "calls";
__n25 := {  };
__n25["type"] := "ArrayExpression";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "1";
__n27["raw"] := "'1'";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "2";
__n28["raw"] := "'2'";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "p1";
__n29["raw"] := "'p1'";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "p2";
__n30["raw"] := "'p2'";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "";
__n31["raw"] := "''";
__n26 := [ __n27, __n28, __n29, __n30, __n31 ];
__n25["elements"] := __n26;
__n23 := [ __n24, __n25 ];
__n19["arguments"] := __n23;
__n18["expression"] := __n19;
__n1 := [ __n2, __n8, __n10, __n18 ];
__n0["body"] := __n1;
__n32 := [ "calls" ];
__n0["variableDeclarations"] := __n32;
__n34 := {  };
__n34["type"] := "FunctionDeclaration";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "reviver";
__n34["id"] := __n35;
__n36 := [ "name", "val" ];
__n34["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "calls";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "push";
__n43["raw"] := "\"push\"";
__n41["property"] := __n43;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "name";
__n44 := [ __n45 ];
__n40["arguments"] := __n44;
__n39["expression"] := __n40;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "val";
__n46["argument"] := __n47;
__n38 := [ __n39, __n46 ];
__n37["body"] := __n38;
__n48 := [  ];
__n37["variableDeclarations"] := __n48;
__n49 := [  ];
__n37["functionDeclarations"] := __n49;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n34["body"] := __n37;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n33 := [ __n34 ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}