function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!=";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Math";
__n5["object"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "min";
__n7["raw"] := "\"min\"";
__n5["property"] := __n7;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n8 := [  ];
__n4["arguments"] := __n8;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "Infinity";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n3["right"] := __n9;
__n2["test"] := __n3;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "#1: 'Math.min() != +Infinity'";
__n17["raw"] := "\"#1: 'Math.min() != +Infinity'\"";
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n2["consequent"] := __n11;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n18 := [  ];
__n0["variableDeclarations"] := __n18;
__n19 := [  ];
__n0["functionDeclarations"] := __n19;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}