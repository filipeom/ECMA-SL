function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "exponent";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Infinity";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "base";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Array";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "=";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n17["computed"] := true;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "base";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.;
__n19["raw"] := "0";
__n17["property"] := __n19;
__n16["left"] := __n17;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "-";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 1.;
__n21["raw"] := "1";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n16["right"] := __n20;
__n15["expression"] := __n16;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n24["computed"] := true;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "base";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 1.;
__n26["raw"] := "1";
__n24["property"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 1.;
__n27["raw"] := "1";
__n23["right"] := __n27;
__n22["expression"] := __n23;
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "basenum";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := 2.;
__n32["raw"] := "2";
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n33 := {  };
__n33["type"] := "ForStatement";
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "i";
__n36["id"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["init"] := __n38;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n33["init"] := __n34;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "<";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "i";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "basenum";
__n39["right"] := __n41;
__n33["test"] := __n39;
__n42 := {  };
__n42["type"] := "UpdateExpression";
__n42["operator"] := "++";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "i";
__n42["argument"] := __n43;
__n42["prefix"] := false;
__n33["update"] := __n42;
__n44 := {  };
__n44["type"] := "BlockStatement";
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "!";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "isNaN";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Math";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "pow";
__n54["raw"] := "\"pow\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n56["computed"] := true;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "base";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "i";
__n56["property"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "exponent";
__n55 := [ __n56, __n59 ];
__n51["arguments"] := __n55;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["test"] := __n47;
__n60 := {  };
__n60["type"] := "BlockStatement";
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$ERROR";
__n63["callee"] := __n64;
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "+";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "+";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#1: isNaN(Math.pow(";
__n70["raw"] := "\"#1: isNaN(Math.pow(\"";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "MemberExpression";
__n71["computed"] := true;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "base";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "i";
__n71["property"] := __n73;
__n69["right"] := __n71;
__n68["left"] := __n69;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := ", ";
__n74["raw"] := "\", \"";
__n68["right"] := __n74;
__n67["left"] := __n68;
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "exponent";
__n67["right"] := __n75;
__n66["left"] := __n67;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := ")) === false";
__n76["raw"] := "\")) === false\"";
__n66["right"] := __n76;
__n65 := [ __n66 ];
__n63["arguments"] := __n65;
__n62["expression"] := __n63;
__n61 := [ __n62 ];
__n60["body"] := __n61;
__n46["consequent"] := __n60;
__n46["alternate"] := null;
__n45 := [ __n46 ];
__n44["body"] := __n45;
__n33["body"] := __n44;
__n1 := [ __n2, __n8, __n15, __n22, __n28, __n33 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n77 := [ "exponent", "base", "basenum", "i" ];
__n0["variableDeclarations"] := __n77;
__n78 := [  ];
__n0["functionDeclarations"] := __n78;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}