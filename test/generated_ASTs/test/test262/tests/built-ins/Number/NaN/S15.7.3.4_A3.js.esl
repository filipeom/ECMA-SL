function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "verifyNotConfigurable";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "Number";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "NaN";
__n7["raw"] := "\"NaN\"";
__n5 := [ __n6, __n7 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n8 := {  };
__n8["type"] := "TryStatement";
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "delete";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Number";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "NaN";
__n16["raw"] := "\"NaN\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n12["left"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := false;
__n17["raw"] := "false";
__n12["right"] := __n17;
__n11["test"] := __n12;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: delete Number.NaN === false";
__n24["raw"] := "'#1: delete Number.NaN === false'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n11["consequent"] := __n18;
__n11["alternate"] := null;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n8["block"] := __n9;
__n25 := {  };
__n25["type"] := "CatchClause";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "e";
__n25["param"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "instanceof";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "e";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Test262Error";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "ThrowStatement";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "e";
__n33["argument"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "instanceof";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "e";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "TypeError";
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n28 := [ __n29, __n35 ];
__n27["body"] := __n28;
__n25["body"] := __n27;
__n8["handler"] := __n25;
__n8["finalizer"] := null;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}