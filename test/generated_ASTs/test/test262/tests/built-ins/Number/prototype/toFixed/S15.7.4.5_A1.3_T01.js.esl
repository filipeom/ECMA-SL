function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "a";
__n9["raw"] := "\"a\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["object"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "toFixed";
__n10["raw"] := "\"toFixed\"";
__n5["property"] := __n10;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n11 := [  ];
__n4["arguments"] := __n11;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "NaN";
__n12["raw"] := "\"NaN\"";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: (new Number(\"a\")).prototype.toFixed() === \"NaN\"";
__n19["raw"] := "'#1: (new Number(\"a\")).prototype.toFixed() === \"NaN\"'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "NewExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Number";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "a";
__n27["raw"] := "\"a\"";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["object"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "toFixed";
__n28["raw"] := "\"toFixed\"";
__n23["property"] := __n28;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29 := [ __n30 ];
__n22["arguments"] := __n29;
__n21["left"] := __n22;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "NaN";
__n31["raw"] := "\"NaN\"";
__n21["right"] := __n31;
__n20["test"] := __n21;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: (new Number(\"a\")).prototype.toFixed(0) === \"NaN\"";
__n38["raw"] := "'#2: (new Number(\"a\")).prototype.toFixed(0) === \"NaN\"'";
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n20["consequent"] := __n32;
__n20["alternate"] := null;
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "NewExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Number";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "a";
__n46["raw"] := "\"a\"";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["object"] := __n43;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "toFixed";
__n47["raw"] := "\"toFixed\"";
__n42["property"] := __n47;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n48 := [ __n49 ];
__n41["arguments"] := __n48;
__n40["left"] := __n41;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "NaN";
__n50["raw"] := "\"NaN\"";
__n40["right"] := __n50;
__n39["test"] := __n40;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#3: (new Number(\"a\")).prototype.toFixed(1) === \"NaN\"";
__n57["raw"] := "'#3: (new Number(\"a\")).prototype.toFixed(1) === \"NaN\"'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n39["consequent"] := __n51;
__n39["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "NewExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "Number";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "a";
__n65["raw"] := "\"a\"";
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["object"] := __n62;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "toFixed";
__n66["raw"] := "\"toFixed\"";
__n61["property"] := __n66;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 1.1;
__n68["raw"] := "1.1";
__n67 := [ __n68 ];
__n60["arguments"] := __n67;
__n59["left"] := __n60;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "NaN";
__n69["raw"] := "\"NaN\"";
__n59["right"] := __n69;
__n58["test"] := __n59;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "#4: (new Number(\"a\")).toFixed(1.1) === \"NaN\"";
__n76["raw"] := "'#4: (new Number(\"a\")).toFixed(1.1) === \"NaN\"'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n58["consequent"] := __n70;
__n58["alternate"] := null;
__n77 := {  };
__n77["type"] := "IfStatement";
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "!==";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "NewExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "Number";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "a";
__n84["raw"] := "\"a\"";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["object"] := __n81;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "toFixed";
__n85["raw"] := "\"toFixed\"";
__n80["property"] := __n85;
__n80["computed"] := true;
__n79["callee"] := __n80;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := 0.9;
__n87["raw"] := "0.9";
__n86 := [ __n87 ];
__n79["arguments"] := __n86;
__n78["left"] := __n79;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "NaN";
__n88["raw"] := "\"NaN\"";
__n78["right"] := __n88;
__n77["test"] := __n78;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#5: (new Number(\"a\")).toFixed(0.9) === \"NaN\"";
__n95["raw"] := "'#5: (new Number(\"a\")).toFixed(0.9) === \"NaN\"'";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n77["consequent"] := __n89;
__n77["alternate"] := null;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "MemberExpression";
__n100 := {  };
__n100["type"] := "NewExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Number";
__n100["callee"] := __n101;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "a";
__n103["raw"] := "\"a\"";
__n102 := [ __n103 ];
__n100["arguments"] := __n102;
__n99["object"] := __n100;
__n104 := {  };
__n104["type"] := "Literal";
__n104["value"] := "toFixed";
__n104["raw"] := "\"toFixed\"";
__n99["property"] := __n104;
__n99["computed"] := true;
__n98["callee"] := __n99;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "1";
__n106["raw"] := "\"1\"";
__n105 := [ __n106 ];
__n98["arguments"] := __n105;
__n97["left"] := __n98;
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "NaN";
__n107["raw"] := "\"NaN\"";
__n97["right"] := __n107;
__n96["test"] := __n97;
__n108 := {  };
__n108["type"] := "BlockStatement";
__n110 := {  };
__n110["type"] := "ExpressionStatement";
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "$ERROR";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#6: (new Number(\"a\")).toFixed(\"1\") === \"NaN\"";
__n114["raw"] := "'#6: (new Number(\"a\")).toFixed(\"1\") === \"NaN\"'";
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n110["expression"] := __n111;
__n109 := [ __n110 ];
__n108["body"] := __n109;
__n96["consequent"] := __n108;
__n96["alternate"] := null;
__n115 := {  };
__n115["type"] := "IfStatement";
__n116 := {  };
__n116["type"] := "BinaryExpression";
__n116["operator"] := "!==";
__n117 := {  };
__n117["type"] := "CallExpression";
__n118 := {  };
__n118["type"] := "MemberExpression";
__n119 := {  };
__n119["type"] := "NewExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "Number";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "a";
__n122["raw"] := "\"a\"";
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["object"] := __n119;
__n123 := {  };
__n123["type"] := "Literal";
__n123["value"] := "toFixed";
__n123["raw"] := "\"toFixed\"";
__n118["property"] := __n123;
__n118["computed"] := true;
__n117["callee"] := __n118;
__n125 := {  };
__n125["type"] := "Literal";
__n125["value"] := "1.1";
__n125["raw"] := "\"1.1\"";
__n124 := [ __n125 ];
__n117["arguments"] := __n124;
__n116["left"] := __n117;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "NaN";
__n126["raw"] := "\"NaN\"";
__n116["right"] := __n126;
__n115["test"] := __n116;
__n127 := {  };
__n127["type"] := "BlockStatement";
__n129 := {  };
__n129["type"] := "ExpressionStatement";
__n130 := {  };
__n130["type"] := "CallExpression";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "$ERROR";
__n130["callee"] := __n131;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "#7: (new Number(\"a\")).toFixed(\"1.1\") === \"NaN\"";
__n133["raw"] := "'#7: (new Number(\"a\")).toFixed(\"1.1\") === \"NaN\"'";
__n132 := [ __n133 ];
__n130["arguments"] := __n132;
__n129["expression"] := __n130;
__n128 := [ __n129 ];
__n127["body"] := __n128;
__n115["consequent"] := __n127;
__n115["alternate"] := null;
__n134 := {  };
__n134["type"] := "IfStatement";
__n135 := {  };
__n135["type"] := "BinaryExpression";
__n135["operator"] := "!==";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "MemberExpression";
__n138 := {  };
__n138["type"] := "NewExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "Number";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "Literal";
__n141["value"] := "a";
__n141["raw"] := "\"a\"";
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n137["object"] := __n138;
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := "toFixed";
__n142["raw"] := "\"toFixed\"";
__n137["property"] := __n142;
__n137["computed"] := true;
__n136["callee"] := __n137;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "0.9";
__n144["raw"] := "\"0.9\"";
__n143 := [ __n144 ];
__n136["arguments"] := __n143;
__n135["left"] := __n136;
__n145 := {  };
__n145["type"] := "Literal";
__n145["value"] := "NaN";
__n145["raw"] := "\"NaN\"";
__n135["right"] := __n145;
__n134["test"] := __n135;
__n146 := {  };
__n146["type"] := "BlockStatement";
__n148 := {  };
__n148["type"] := "ExpressionStatement";
__n149 := {  };
__n149["type"] := "CallExpression";
__n150 := {  };
__n150["type"] := "Identifier";
__n150["name"] := "$ERROR";
__n149["callee"] := __n150;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := "#8: (new Number(\"a\")).toFixed(\"0.9\") === \"NaN\"";
__n152["raw"] := "'#8: (new Number(\"a\")).toFixed(\"0.9\") === \"NaN\"'";
__n151 := [ __n152 ];
__n149["arguments"] := __n151;
__n148["expression"] := __n149;
__n147 := [ __n148 ];
__n146["body"] := __n147;
__n134["consequent"] := __n146;
__n134["alternate"] := null;
__n153 := {  };
__n153["type"] := "IfStatement";
__n154 := {  };
__n154["type"] := "BinaryExpression";
__n154["operator"] := "!==";
__n155 := {  };
__n155["type"] := "CallExpression";
__n156 := {  };
__n156["type"] := "MemberExpression";
__n157 := {  };
__n157["type"] := "NewExpression";
__n158 := {  };
__n158["type"] := "Identifier";
__n158["name"] := "Number";
__n157["callee"] := __n158;
__n160 := {  };
__n160["type"] := "Literal";
__n160["value"] := "a";
__n160["raw"] := "\"a\"";
__n159 := [ __n160 ];
__n157["arguments"] := __n159;
__n156["object"] := __n157;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := "toFixed";
__n161["raw"] := "\"toFixed\"";
__n156["property"] := __n161;
__n156["computed"] := true;
__n155["callee"] := __n156;
__n163 := {  };
__n163["type"] := "MemberExpression";
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "Number";
__n163["object"] := __n164;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "NaN";
__n165["raw"] := "\"NaN\"";
__n163["property"] := __n165;
__n163["computed"] := true;
__n162 := [ __n163 ];
__n155["arguments"] := __n162;
__n154["left"] := __n155;
__n166 := {  };
__n166["type"] := "Literal";
__n166["value"] := "NaN";
__n166["raw"] := "\"NaN\"";
__n154["right"] := __n166;
__n153["test"] := __n154;
__n167 := {  };
__n167["type"] := "BlockStatement";
__n169 := {  };
__n169["type"] := "ExpressionStatement";
__n170 := {  };
__n170["type"] := "CallExpression";
__n171 := {  };
__n171["type"] := "Identifier";
__n171["name"] := "$ERROR";
__n170["callee"] := __n171;
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := "#9: (new Number(\"a\")).toFixed(Number.NaN) === \"NaN\"";
__n173["raw"] := "'#9: (new Number(\"a\")).toFixed(Number.NaN) === \"NaN\"'";
__n172 := [ __n173 ];
__n170["arguments"] := __n172;
__n169["expression"] := __n170;
__n168 := [ __n169 ];
__n167["body"] := __n168;
__n153["consequent"] := __n167;
__n153["alternate"] := null;
__n174 := {  };
__n174["type"] := "IfStatement";
__n175 := {  };
__n175["type"] := "BinaryExpression";
__n175["operator"] := "!==";
__n176 := {  };
__n176["type"] := "CallExpression";
__n177 := {  };
__n177["type"] := "MemberExpression";
__n178 := {  };
__n178["type"] := "NewExpression";
__n179 := {  };
__n179["type"] := "Identifier";
__n179["name"] := "Number";
__n178["callee"] := __n179;
__n181 := {  };
__n181["type"] := "Literal";
__n181["value"] := "a";
__n181["raw"] := "\"a\"";
__n180 := [ __n181 ];
__n178["arguments"] := __n180;
__n177["object"] := __n178;
__n182 := {  };
__n182["type"] := "Literal";
__n182["value"] := "toFixed";
__n182["raw"] := "\"toFixed\"";
__n177["property"] := __n182;
__n177["computed"] := true;
__n176["callee"] := __n177;
__n184 := {  };
__n184["type"] := "Literal";
__n184["value"] := "some string";
__n184["raw"] := "\"some string\"";
__n183 := [ __n184 ];
__n176["arguments"] := __n183;
__n175["left"] := __n176;
__n185 := {  };
__n185["type"] := "Literal";
__n185["value"] := "NaN";
__n185["raw"] := "\"NaN\"";
__n175["right"] := __n185;
__n174["test"] := __n175;
__n186 := {  };
__n186["type"] := "BlockStatement";
__n188 := {  };
__n188["type"] := "ExpressionStatement";
__n189 := {  };
__n189["type"] := "CallExpression";
__n190 := {  };
__n190["type"] := "Identifier";
__n190["name"] := "$ERROR";
__n189["callee"] := __n190;
__n192 := {  };
__n192["type"] := "Literal";
__n192["value"] := "#9: (new Number(\"a\")).toFixed(\"some string\") === \"NaN\"";
__n192["raw"] := "'#9: (new Number(\"a\")).toFixed(\"some string\") === \"NaN\"'";
__n191 := [ __n192 ];
__n189["arguments"] := __n191;
__n188["expression"] := __n189;
__n187 := [ __n188 ];
__n186["body"] := __n187;
__n174["consequent"] := __n186;
__n174["alternate"] := null;
__n193 := {  };
__n193["type"] := "TryStatement";
__n194 := {  };
__n194["type"] := "BlockStatement";
__n196 := {  };
__n196["type"] := "ExpressionStatement";
__n197 := {  };
__n197["type"] := "AssignmentExpression";
__n197["operator"] := "=";
__n198 := {  };
__n198["type"] := "Identifier";
__n198["name"] := "s";
__n197["left"] := __n198;
__n199 := {  };
__n199["type"] := "CallExpression";
__n200 := {  };
__n200["type"] := "MemberExpression";
__n201 := {  };
__n201["type"] := "NewExpression";
__n202 := {  };
__n202["type"] := "Identifier";
__n202["name"] := "Number";
__n201["callee"] := __n202;
__n204 := {  };
__n204["type"] := "Literal";
__n204["value"] := "a";
__n204["raw"] := "\"a\"";
__n203 := [ __n204 ];
__n201["arguments"] := __n203;
__n200["object"] := __n201;
__n205 := {  };
__n205["type"] := "Literal";
__n205["value"] := "toFixed";
__n205["raw"] := "\"toFixed\"";
__n200["property"] := __n205;
__n200["computed"] := true;
__n199["callee"] := __n200;
__n207 := {  };
__n207["type"] := "MemberExpression";
__n208 := {  };
__n208["type"] := "Identifier";
__n208["name"] := "Number";
__n207["object"] := __n208;
__n209 := {  };
__n209["type"] := "Literal";
__n209["value"] := "POSITIVE_INFINITY";
__n209["raw"] := "\"POSITIVE_INFINITY\"";
__n207["property"] := __n209;
__n207["computed"] := true;
__n206 := [ __n207 ];
__n199["arguments"] := __n206;
__n197["right"] := __n199;
__n196["expression"] := __n197;
__n210 := {  };
__n210["type"] := "ExpressionStatement";
__n211 := {  };
__n211["type"] := "CallExpression";
__n212 := {  };
__n212["type"] := "Identifier";
__n212["name"] := "$ERROR";
__n211["callee"] := __n212;
__n214 := {  };
__n214["type"] := "Literal";
__n214["value"] := "#10: (new Number(\"a\")).toFixed(Number.POSITIVE_INFINITY) should throw RangeError, not return NaN";
__n214["raw"] := "'#10: (new Number(\"a\")).toFixed(Number.POSITIVE_INFINITY) should throw RangeError, not return NaN'";
__n213 := [ __n214 ];
__n211["arguments"] := __n213;
__n210["expression"] := __n211;
__n195 := [ __n196, __n210 ];
__n194["body"] := __n195;
__n193["block"] := __n194;
__n215 := {  };
__n215["type"] := "CatchClause";
__n216 := {  };
__n216["type"] := "Identifier";
__n216["name"] := "e";
__n215["param"] := __n216;
__n217 := {  };
__n217["type"] := "BlockStatement";
__n219 := {  };
__n219["type"] := "IfStatement";
__n220 := {  };
__n220["type"] := "UnaryExpression";
__n220["operator"] := "!";
__n221 := {  };
__n221["type"] := "BinaryExpression";
__n221["operator"] := "instanceof";
__n222 := {  };
__n222["type"] := "Identifier";
__n222["name"] := "e";
__n221["left"] := __n222;
__n223 := {  };
__n223["type"] := "Identifier";
__n223["name"] := "RangeError";
__n221["right"] := __n223;
__n220["argument"] := __n221;
__n220["prefix"] := true;
__n219["test"] := __n220;
__n224 := {  };
__n224["type"] := "BlockStatement";
__n226 := {  };
__n226["type"] := "ExpressionStatement";
__n227 := {  };
__n227["type"] := "CallExpression";
__n228 := {  };
__n228["type"] := "Identifier";
__n228["name"] := "$ERROR";
__n227["callee"] := __n228;
__n230 := {  };
__n230["type"] := "BinaryExpression";
__n230["operator"] := "+";
__n231 := {  };
__n231["type"] := "Literal";
__n231["value"] := "#10: (new Number(\"a\")).toFixed(Number.POSITIVE_INFINITY) should throw RangeError, not ";
__n231["raw"] := "'#10: (new Number(\"a\")).toFixed(Number.POSITIVE_INFINITY) should throw RangeError, not '";
__n230["left"] := __n231;
__n232 := {  };
__n232["type"] := "Identifier";
__n232["name"] := "e";
__n230["right"] := __n232;
__n229 := [ __n230 ];
__n227["arguments"] := __n229;
__n226["expression"] := __n227;
__n225 := [ __n226 ];
__n224["body"] := __n225;
__n219["consequent"] := __n224;
__n219["alternate"] := null;
__n218 := [ __n219 ];
__n217["body"] := __n218;
__n215["body"] := __n217;
__n193["handler"] := __n215;
__n193["finalizer"] := null;
__n1 := [ __n2, __n20, __n39, __n58, __n77, __n96, __n115, __n134, __n153, __n174, __n193 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n233 := [  ];
__n0["variableDeclarations"] := __n233;
__n234 := [  ];
__n0["functionDeclarations"] := __n234;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}