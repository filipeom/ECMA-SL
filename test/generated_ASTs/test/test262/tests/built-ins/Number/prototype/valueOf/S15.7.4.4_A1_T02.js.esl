function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "prototype";
__n8["raw"] := "\"prototype\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["object"] := __n6;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "valueOf";
__n9["raw"] := "\"valueOf\"";
__n5["property"] := __n9;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "argument";
__n11["raw"] := "\"argument\"";
__n10 := [ __n11 ];
__n4["arguments"] := __n10;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 0.;
__n12["raw"] := "0";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: Number.prototype.valueOf(\"argument\") === 0";
__n19["raw"] := "'#1: Number.prototype.valueOf(\"argument\") === 0'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "NewExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "Number";
__n24["callee"] := __n25;
__n26 := [  ];
__n24["arguments"] := __n26;
__n23["object"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "valueOf";
__n27["raw"] := "\"valueOf\"";
__n23["property"] := __n27;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "argument";
__n29["raw"] := "\"argument\"";
__n28 := [ __n29 ];
__n22["arguments"] := __n28;
__n21["left"] := __n22;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n21["right"] := __n30;
__n20["test"] := __n21;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#2: (new Number()).valueOf(\"argument\") === 0";
__n37["raw"] := "'#2: (new Number()).valueOf(\"argument\") === 0'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n20["consequent"] := __n31;
__n20["alternate"] := null;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "MemberExpression";
__n42 := {  };
__n42["type"] := "NewExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "Number";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 0.;
__n45["raw"] := "0";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["object"] := __n42;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "valueOf";
__n46["raw"] := "\"valueOf\"";
__n41["property"] := __n46;
__n41["computed"] := true;
__n40["callee"] := __n41;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "argument";
__n48["raw"] := "\"argument\"";
__n47 := [ __n48 ];
__n40["arguments"] := __n47;
__n39["left"] := __n40;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 0.;
__n49["raw"] := "0";
__n39["right"] := __n49;
__n38["test"] := __n39;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$ERROR";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#3: (new Number(0)).valueOf(\"argument\") === 0";
__n56["raw"] := "'#3: (new Number(0)).valueOf(\"argument\") === 0'";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52["expression"] := __n53;
__n51 := [ __n52 ];
__n50["body"] := __n51;
__n38["consequent"] := __n50;
__n38["alternate"] := null;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "NewExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Number";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "-";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := 1.;
__n65["raw"] := "1";
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["object"] := __n61;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "valueOf";
__n66["raw"] := "\"valueOf\"";
__n60["property"] := __n66;
__n60["computed"] := true;
__n59["callee"] := __n60;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "argument";
__n68["raw"] := "\"argument\"";
__n67 := [ __n68 ];
__n59["arguments"] := __n67;
__n58["left"] := __n59;
__n69 := {  };
__n69["type"] := "UnaryExpression";
__n69["operator"] := "-";
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n69["argument"] := __n70;
__n69["prefix"] := true;
__n58["right"] := __n69;
__n57["test"] := __n58;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#4: (new Number(-1)).valueOf(\"argument\") === -1";
__n77["raw"] := "'#4: (new Number(-1)).valueOf(\"argument\") === -1'";
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n57["consequent"] := __n71;
__n57["alternate"] := null;
__n78 := {  };
__n78["type"] := "IfStatement";
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "!==";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "NewExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Number";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := 1.;
__n85["raw"] := "1";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["object"] := __n82;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "valueOf";
__n86["raw"] := "\"valueOf\"";
__n81["property"] := __n86;
__n81["computed"] := true;
__n80["callee"] := __n81;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "argument";
__n88["raw"] := "\"argument\"";
__n87 := [ __n88 ];
__n80["arguments"] := __n87;
__n79["left"] := __n80;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 1.;
__n89["raw"] := "1";
__n79["right"] := __n89;
__n78["test"] := __n79;
__n90 := {  };
__n90["type"] := "BlockStatement";
__n92 := {  };
__n92["type"] := "ExpressionStatement";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "$ERROR";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "#5: (new Number(1)).valueOf(\"argument\") === 1";
__n96["raw"] := "'#5: (new Number(1)).valueOf(\"argument\") === 1'";
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["expression"] := __n93;
__n91 := [ __n92 ];
__n90["body"] := __n91;
__n78["consequent"] := __n90;
__n78["alternate"] := null;
__n97 := {  };
__n97["type"] := "IfStatement";
__n98 := {  };
__n98["type"] := "UnaryExpression";
__n98["operator"] := "!";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "isNaN";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "MemberExpression";
__n104 := {  };
__n104["type"] := "NewExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "Number";
__n104["callee"] := __n105;
__n107 := {  };
__n107["type"] := "MemberExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "Number";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "NaN";
__n109["raw"] := "\"NaN\"";
__n107["property"] := __n109;
__n107["computed"] := true;
__n106 := [ __n107 ];
__n104["arguments"] := __n106;
__n103["object"] := __n104;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "valueOf";
__n110["raw"] := "\"valueOf\"";
__n103["property"] := __n110;
__n103["computed"] := true;
__n102["callee"] := __n103;
__n112 := {  };
__n112["type"] := "Literal";
__n112["value"] := "argument";
__n112["raw"] := "\"argument\"";
__n111 := [ __n112 ];
__n102["arguments"] := __n111;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["argument"] := __n99;
__n98["prefix"] := true;
__n97["test"] := __n98;
__n113 := {  };
__n113["type"] := "BlockStatement";
__n115 := {  };
__n115["type"] := "ExpressionStatement";
__n116 := {  };
__n116["type"] := "CallExpression";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "$ERROR";
__n116["callee"] := __n117;
__n119 := {  };
__n119["type"] := "Literal";
__n119["value"] := "#6: (new Number(Number.NaN)).valueOf(\"argument\") === NaN";
__n119["raw"] := "'#6: (new Number(Number.NaN)).valueOf(\"argument\") === NaN'";
__n118 := [ __n119 ];
__n116["arguments"] := __n118;
__n115["expression"] := __n116;
__n114 := [ __n115 ];
__n113["body"] := __n114;
__n97["consequent"] := __n113;
__n97["alternate"] := null;
__n120 := {  };
__n120["type"] := "IfStatement";
__n121 := {  };
__n121["type"] := "BinaryExpression";
__n121["operator"] := "!==";
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "MemberExpression";
__n124 := {  };
__n124["type"] := "NewExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "Number";
__n124["callee"] := __n125;
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "Number";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "POSITIVE_INFINITY";
__n129["raw"] := "\"POSITIVE_INFINITY\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n126 := [ __n127 ];
__n124["arguments"] := __n126;
__n123["object"] := __n124;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := "valueOf";
__n130["raw"] := "\"valueOf\"";
__n123["property"] := __n130;
__n123["computed"] := true;
__n122["callee"] := __n123;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "argument";
__n132["raw"] := "\"argument\"";
__n131 := [ __n132 ];
__n122["arguments"] := __n131;
__n121["left"] := __n122;
__n133 := {  };
__n133["type"] := "MemberExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "Number";
__n133["object"] := __n134;
__n135 := {  };
__n135["type"] := "Literal";
__n135["value"] := "POSITIVE_INFINITY";
__n135["raw"] := "\"POSITIVE_INFINITY\"";
__n133["property"] := __n135;
__n133["computed"] := true;
__n121["right"] := __n133;
__n120["test"] := __n121;
__n136 := {  };
__n136["type"] := "BlockStatement";
__n138 := {  };
__n138["type"] := "ExpressionStatement";
__n139 := {  };
__n139["type"] := "CallExpression";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "$ERROR";
__n139["callee"] := __n140;
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := "#7: (new Number(Number.POSITIVE_INFINITY)).valueOf(\"argument\") === Infinity";
__n142["raw"] := "'#7: (new Number(Number.POSITIVE_INFINITY)).valueOf(\"argument\") === Infinity'";
__n141 := [ __n142 ];
__n139["arguments"] := __n141;
__n138["expression"] := __n139;
__n137 := [ __n138 ];
__n136["body"] := __n137;
__n120["consequent"] := __n136;
__n120["alternate"] := null;
__n143 := {  };
__n143["type"] := "IfStatement";
__n144 := {  };
__n144["type"] := "BinaryExpression";
__n144["operator"] := "!==";
__n145 := {  };
__n145["type"] := "CallExpression";
__n146 := {  };
__n146["type"] := "MemberExpression";
__n147 := {  };
__n147["type"] := "NewExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "Number";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "MemberExpression";
__n151 := {  };
__n151["type"] := "Identifier";
__n151["name"] := "Number";
__n150["object"] := __n151;
__n152 := {  };
__n152["type"] := "Literal";
__n152["value"] := "NEGATIVE_INFINITY";
__n152["raw"] := "\"NEGATIVE_INFINITY\"";
__n150["property"] := __n152;
__n150["computed"] := true;
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["object"] := __n147;
__n153 := {  };
__n153["type"] := "Literal";
__n153["value"] := "valueOf";
__n153["raw"] := "\"valueOf\"";
__n146["property"] := __n153;
__n146["computed"] := true;
__n145["callee"] := __n146;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := "argument";
__n155["raw"] := "\"argument\"";
__n154 := [ __n155 ];
__n145["arguments"] := __n154;
__n144["left"] := __n145;
__n156 := {  };
__n156["type"] := "MemberExpression";
__n157 := {  };
__n157["type"] := "Identifier";
__n157["name"] := "Number";
__n156["object"] := __n157;
__n158 := {  };
__n158["type"] := "Literal";
__n158["value"] := "NEGATIVE_INFINITY";
__n158["raw"] := "\"NEGATIVE_INFINITY\"";
__n156["property"] := __n158;
__n156["computed"] := true;
__n144["right"] := __n156;
__n143["test"] := __n144;
__n159 := {  };
__n159["type"] := "BlockStatement";
__n161 := {  };
__n161["type"] := "ExpressionStatement";
__n162 := {  };
__n162["type"] := "CallExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "$ERROR";
__n162["callee"] := __n163;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "#8: (new Number(Number.NEGATIVE_INFINITY)).valueOf(\"argument\") === -Infinity";
__n165["raw"] := "'#8: (new Number(Number.NEGATIVE_INFINITY)).valueOf(\"argument\") === -Infinity'";
__n164 := [ __n165 ];
__n162["arguments"] := __n164;
__n161["expression"] := __n162;
__n160 := [ __n161 ];
__n159["body"] := __n160;
__n143["consequent"] := __n159;
__n143["alternate"] := null;
__n1 := [ __n2, __n20, __n38, __n57, __n78, __n97, __n120, __n143 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n166 := [  ];
__n0["variableDeclarations"] := __n166;
__n167 := [  ];
__n0["functionDeclarations"] := __n167;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}