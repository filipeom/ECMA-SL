function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "FunctionExpression";
__n4["id"] := null;
__n5 := [ "a", "b", "c" ];
__n4["params"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "delete";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n10["computed"] := true;
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "arguments";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 0.;
__n12["raw"] := "0";
__n10["property"] := __n12;
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n8["expression"] := __n9;
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Object";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "defineProperty";
__n17["raw"] := "\"defineProperty\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["callee"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "arguments";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "0";
__n20["raw"] := "\"0\"";
__n21 := {  };
__n21["type"] := "ObjectExpression";
__n23 := {  };
__n23["type"] := "Property";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "value";
__n23["key"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 10.;
__n25["raw"] := "10";
__n23["value"] := __n25;
__n23["computed"] := false;
__n23["kind"] := "init";
__n23["shorthand"] := false;
__n26 := {  };
__n26["type"] := "Property";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "writable";
__n26["key"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := false;
__n28["raw"] := "false";
__n26["value"] := __n28;
__n26["computed"] := false;
__n26["kind"] := "init";
__n26["shorthand"] := false;
__n29 := {  };
__n29["type"] := "Property";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "enumerable";
__n29["key"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := false;
__n31["raw"] := "false";
__n29["value"] := __n31;
__n29["computed"] := false;
__n29["kind"] := "init";
__n29["shorthand"] := false;
__n32 := {  };
__n32["type"] := "Property";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "configurable";
__n32["key"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := false;
__n34["raw"] := "false";
__n32["value"] := __n34;
__n32["computed"] := false;
__n32["kind"] := "init";
__n32["shorthand"] := false;
__n22 := [ __n23, __n26, __n29, __n32 ];
__n21["properties"] := __n22;
__n18 := [ __n19, __n20, __n21 ];
__n14["arguments"] := __n18;
__n13["expression"] := __n14;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "!==";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "a";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 0.;
__n38["raw"] := "0";
__n36["right"] := __n38;
__n35["test"] := __n36;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "Expected a === 0, actually ";
__n46["raw"] := "\"Expected a === 0, actually \"";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "a";
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n35["consequent"] := __n39;
__n35["alternate"] := null;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "verifyEqualTo";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "arguments";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "0";
__n53["raw"] := "\"0\"";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 10.;
__n54["raw"] := "10";
__n51 := [ __n52, __n53, __n54 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "verifyNotWritable";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arguments";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "0";
__n60["raw"] := "\"0\"";
__n58 := [ __n59, __n60 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "verifyNotEnumerable";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "arguments";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "0";
__n66["raw"] := "\"0\"";
__n64 := [ __n65, __n66 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "verifyNotConfigurable";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arguments";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "0";
__n72["raw"] := "\"0\"";
__n70 := [ __n71, __n72 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n7 := [ __n8, __n13, __n35, __n48, __n55, __n61, __n67 ];
__n6["body"] := __n7;
__n73 := [  ];
__n6["variableDeclarations"] := __n73;
__n74 := [  ];
__n6["functionDeclarations"] := __n74;
__n6["codeType"] := "function";
__n6["strict"] := false;
__n4["body"] := __n6;
__n4["generator"] := false;
__n4["async"] := false;
__n4["expression"] := false;
__n3["callee"] := __n4;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 0.;
__n76["raw"] := "0";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 2.;
__n78["raw"] := "2";
__n75 := [ __n76, __n77, __n78 ];
__n3["arguments"] := __n75;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n79 := [  ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}