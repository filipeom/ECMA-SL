function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Promise";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "all";
__n9["raw"] := "\"all\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n11 := {  };
__n11["type"] := "ArrayExpression";
__n12 := [  ];
__n11["elements"] := __n12;
__n10 := [ __n11 ];
__n6["arguments"] := __n10;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "UnaryExpression";
__n14["operator"] := "!";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "instanceof";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "p";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "Promise";
__n15["right"] := __n17;
__n14["argument"] := __n15;
__n14["prefix"] := true;
__n13["test"] := __n14;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ThrowStatement";
__n21 := {  };
__n21["type"] := "NewExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Test262Error";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "Expected p to be a Promise";
__n24["raw"] := "'Expected p to be a Promise'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["argument"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n13["consequent"] := __n18;
__n13["alternate"] := null;
__n1 := [ __n2, __n13 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n25 := [ "p" ];
__n0["variableDeclarations"] := __n25;
__n26 := [  ];
__n0["functionDeclarations"] := __n26;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}