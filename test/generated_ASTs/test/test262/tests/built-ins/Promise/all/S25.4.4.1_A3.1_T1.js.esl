function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "nonIterable";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 3.;
__n6["raw"] := "3";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "MemberExpression";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "Promise";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "all";
__n15["raw"] := "\"all\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "nonIterable";
__n16 := [ __n17 ];
__n12["arguments"] := __n16;
__n11["object"] := __n12;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "then";
__n18["raw"] := "\"then\"";
__n11["property"] := __n18;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n20 := {  };
__n20["type"] := "FunctionExpression";
__n20["id"] := null;
__n21 := [  ];
__n20["params"] := __n21;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ThrowStatement";
__n25 := {  };
__n25["type"] := "NewExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Test262Error";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "Promise unexpectedly resolved: Promise.all(nonIterable) should throw TypeError";
__n28["raw"] := "'Promise unexpectedly resolved: Promise.all(nonIterable) should throw TypeError'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["argument"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n29 := [  ];
__n22["variableDeclarations"] := __n29;
__n30 := [  ];
__n22["functionDeclarations"] := __n30;
__n22["codeType"] := "function";
__n22["strict"] := false;
__n20["body"] := __n22;
__n20["generator"] := false;
__n20["async"] := false;
__n20["expression"] := false;
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [ "err" ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "UnaryExpression";
__n36["operator"] := "!";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "instanceof";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "err";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "TypeError";
__n37["right"] := __n39;
__n36["argument"] := __n37;
__n36["prefix"] := true;
__n35["test"] := __n36;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "NewExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Test262Error";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "Expected TypeError, got ";
__n47["raw"] := "'Expected TypeError, got '";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "err";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["argument"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n35["consequent"] := __n40;
__n35["alternate"] := null;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n49 := [  ];
__n33["variableDeclarations"] := __n49;
__n50 := [  ];
__n33["functionDeclarations"] := __n50;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n19 := [ __n20, __n31 ];
__n10["arguments"] := __n19;
__n9["object"] := __n10;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "then";
__n51["raw"] := "\"then\"";
__n9["property"] := __n51;
__n9["computed"] := true;
__n8["callee"] := __n9;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$DONE";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "$DONE";
__n52 := [ __n53, __n54 ];
__n8["arguments"] := __n52;
__n7["expression"] := __n8;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n55 := [ "nonIterable" ];
__n0["variableDeclarations"] := __n55;
__n56 := [  ];
__n0["functionDeclarations"] := __n56;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}