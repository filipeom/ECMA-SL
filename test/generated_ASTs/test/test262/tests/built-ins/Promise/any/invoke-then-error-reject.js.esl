function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "error";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Test262Error";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "let";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "promise";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Promise";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "resolve";
__n16["raw"] := "\"resolve\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n17 := [  ];
__n13["arguments"] := __n17;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "let";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "promise";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "then";
__n22["raw"] := "\"then\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ThrowStatement";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "error";
__n27["argument"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n29 := [  ];
__n25["variableDeclarations"] := __n29;
__n30 := [  ];
__n25["functionDeclarations"] := __n30;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n19["right"] := __n23;
__n18["expression"] := __n19;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Promise";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "any";
__n39["raw"] := "\"any\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n36["callee"] := __n37;
__n41 := {  };
__n41["type"] := "ArrayExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "promise";
__n42 := [ __n43 ];
__n41["elements"] := __n42;
__n40 := [ __n41 ];
__n36["arguments"] := __n40;
__n35["object"] := __n36;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "then";
__n44["raw"] := "\"then\"";
__n35["property"] := __n44;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n46 := {  };
__n46["type"] := "ArrowFunctionExpression";
__n46["id"] := null;
__n47 := [  ];
__n46["params"] := __n47;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$DONE";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "The promise should be rejected, but was resolved";
__n54["raw"] := "'The promise should be rejected, but was resolved'";
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n46["body"] := __n48;
__n46["generator"] := false;
__n46["expression"] := false;
__n46["async"] := false;
__n55 := {  };
__n55["type"] := "ArrowFunctionExpression";
__n55["id"] := null;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "reason";
__n56 := [ __n57 ];
__n55["params"] := __n56;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "assert";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "sameValue";
__n64["raw"] := "\"sameValue\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "reason";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "error";
__n65 := [ __n66, __n67 ];
__n61["arguments"] := __n65;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n55["body"] := __n58;
__n55["generator"] := false;
__n55["expression"] := false;
__n55["async"] := false;
__n45 := [ __n46, __n55 ];
__n34["arguments"] := __n45;
__n33["object"] := __n34;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "then";
__n68["raw"] := "\"then\"";
__n33["property"] := __n68;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$DONE";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$DONE";
__n69 := [ __n70, __n71 ];
__n32["arguments"] := __n69;
__n31["expression"] := __n32;
__n1 := [ __n2, __n9, __n18, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n72 := [ "error", "promise" ];
__n0["variableDeclarations"] := __n72;
__n73 := [  ];
__n0["functionDeclarations"] := __n73;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}