function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Promise";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n12 := [  ];
__n11["body"] := __n12;
__n13 := [  ];
__n11["variableDeclarations"] := __n13;
__n14 := [  ];
__n11["functionDeclarations"] := __n14;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "!";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "instanceof";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "p";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "then";
__n20["raw"] := "\"then\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["left"] := __n18;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Function";
__n17["right"] := __n21;
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n15["test"] := __n16;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ThrowStatement";
__n25 := {  };
__n25["type"] := "NewExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Test262Error";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "Expected p.then to be a function";
__n28["raw"] := "\"Expected p.then to be a function\"";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["argument"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n15["consequent"] := __n22;
__n15["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "MemberExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "p";
__n32["object"] := __n33;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "then";
__n34["raw"] := "\"then\"";
__n32["property"] := __n34;
__n32["computed"] := true;
__n31["object"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "length";
__n35["raw"] := "\"length\"";
__n31["property"] := __n35;
__n31["computed"] := true;
__n30["left"] := __n31;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 2.;
__n36["raw"] := "2";
__n30["right"] := __n36;
__n29["test"] := __n30;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ThrowStatement";
__n40 := {  };
__n40["type"] := "NewExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Test262Error";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "Expected p.then to be a function of two arguments";
__n43["raw"] := "\"Expected p.then to be a function of two arguments\"";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n29["consequent"] := __n37;
__n29["alternate"] := null;
__n1 := [ __n2, __n15, __n29 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n44 := [ "p" ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}