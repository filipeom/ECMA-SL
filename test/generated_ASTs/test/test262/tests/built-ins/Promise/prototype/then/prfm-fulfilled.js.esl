function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "value";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "p";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "NewExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Promise";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [ "resolve" ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "resolve";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "value";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n24 := [  ];
__n17["variableDeclarations"] := __n24;
__n25 := [  ];
__n17["functionDeclarations"] := __n25;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "p";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "then";
__n30["raw"] := "\"then\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [ "x" ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "value";
__n37["right"] := __n39;
__n36["test"] := __n37;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$DONE";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "The `onFulfilled` handler should be invoked with the promise result.";
__n46["raw"] := "'The `onFulfilled` handler should be invoked with the promise result.'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n47 := {  };
__n47["type"] := "ReturnStatement";
__n47["argument"] := null;
__n41 := [ __n42, __n47 ];
__n40["body"] := __n41;
__n36["consequent"] := __n40;
__n36["alternate"] := null;
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$DONE";
__n49["callee"] := __n50;
__n51 := [  ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n35 := [ __n36, __n48 ];
__n34["body"] := __n35;
__n52 := [  ];
__n34["variableDeclarations"] := __n52;
__n53 := [  ];
__n34["functionDeclarations"] := __n53;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n54 := {  };
__n54["type"] := "FunctionExpression";
__n54["id"] := null;
__n55 := [  ];
__n54["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$DONE";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "The `onRejected` handler should not be invoked.";
__n62["raw"] := "'The `onRejected` handler should not be invoked.'";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n63 := [  ];
__n56["variableDeclarations"] := __n63;
__n64 := [  ];
__n56["functionDeclarations"] := __n64;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n54["body"] := __n56;
__n54["generator"] := false;
__n54["async"] := false;
__n54["expression"] := false;
__n31 := [ __n32, __n54 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n1 := [ __n2, __n8, __n26 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n65 := [ "value", "p" ];
__n0["variableDeclarations"] := __n65;
__n66 := [  ];
__n0["functionDeclarations"] := __n66;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}