function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "thenable";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Promise";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [ "resolve" ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "resolve";
__n14["callee"] := __n15;
__n16 := [  ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n17 := [  ];
__n11["variableDeclarations"] := __n17;
__n18 := [  ];
__n11["functionDeclarations"] := __n18;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n19 := {  };
__n19["type"] := "VariableDeclaration";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "p1";
__n21["id"] := __n22;
__n23 := {  };
__n23["type"] := "NewExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "Promise";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "FunctionExpression";
__n26["id"] := null;
__n27 := [ "_", "reject" ];
__n26["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "reject";
__n31["callee"] := __n32;
__n33 := [  ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n34 := [  ];
__n28["variableDeclarations"] := __n34;
__n35 := [  ];
__n28["functionDeclarations"] := __n35;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n26["body"] := __n28;
__n26["generator"] := false;
__n26["async"] := false;
__n26["expression"] := false;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n21["init"] := __n23;
__n20 := [ __n21 ];
__n19["declarations"] := __n20;
__n19["kind"] := "var";
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "p2";
__n38["id"] := __n39;
__n38["init"] := null;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "AssignmentExpression";
__n41["operator"] := "=";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "p2";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "p1";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "then";
__n46["raw"] := "\"then\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "FunctionExpression";
__n48["id"] := null;
__n49 := [  ];
__n48["params"] := __n49;
__n50 := {  };
__n50["type"] := "BlockStatement";
__n51 := [  ];
__n50["body"] := __n51;
__n52 := [  ];
__n50["variableDeclarations"] := __n52;
__n53 := [  ];
__n50["functionDeclarations"] := __n53;
__n50["codeType"] := "function";
__n50["strict"] := false;
__n48["body"] := __n50;
__n48["generator"] := false;
__n48["async"] := false;
__n48["expression"] := false;
__n54 := {  };
__n54["type"] := "FunctionExpression";
__n54["id"] := null;
__n55 := [  ];
__n54["params"] := __n55;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ThrowStatement";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "thenable";
__n58["argument"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n60 := [  ];
__n56["variableDeclarations"] := __n60;
__n61 := [  ];
__n56["functionDeclarations"] := __n61;
__n56["codeType"] := "function";
__n56["strict"] := false;
__n54["body"] := __n56;
__n54["generator"] := false;
__n54["async"] := false;
__n54["expression"] := false;
__n47 := [ __n48, __n54 ];
__n43["arguments"] := __n47;
__n41["right"] := __n43;
__n40["expression"] := __n41;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "p2";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "then";
__n66["raw"] := "\"then\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n68 := {  };
__n68["type"] := "FunctionExpression";
__n68["id"] := null;
__n69 := [  ];
__n68["params"] := __n69;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$DONE";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "The promise should not be fulfilled.";
__n76["raw"] := "'The promise should not be fulfilled.'";
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n77 := [  ];
__n70["variableDeclarations"] := __n77;
__n78 := [  ];
__n70["functionDeclarations"] := __n78;
__n70["codeType"] := "function";
__n70["strict"] := false;
__n68["body"] := __n70;
__n68["generator"] := false;
__n68["async"] := false;
__n68["expression"] := false;
__n79 := {  };
__n79["type"] := "FunctionExpression";
__n79["id"] := null;
__n80 := [ "x" ];
__n79["params"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "!==";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "x";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "thenable";
__n84["right"] := __n86;
__n83["test"] := __n84;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$DONE";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "The promise should be rejected with the resolution value of the provided promise.";
__n93["raw"] := "'The promise should be rejected with the resolution value of the provided promise.'";
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n94 := {  };
__n94["type"] := "ReturnStatement";
__n94["argument"] := null;
__n88 := [ __n89, __n94 ];
__n87["body"] := __n88;
__n83["consequent"] := __n87;
__n83["alternate"] := null;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$DONE";
__n96["callee"] := __n97;
__n98 := [  ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n82 := [ __n83, __n95 ];
__n81["body"] := __n82;
__n99 := [  ];
__n81["variableDeclarations"] := __n99;
__n100 := [  ];
__n81["functionDeclarations"] := __n100;
__n81["codeType"] := "function";
__n81["strict"] := false;
__n79["body"] := __n81;
__n79["generator"] := false;
__n79["async"] := false;
__n79["expression"] := false;
__n67 := [ __n68, __n79 ];
__n63["arguments"] := __n67;
__n62["expression"] := __n63;
__n1 := [ __n2, __n19, __n36, __n40, __n62 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n101 := [ "thenable", "p1", "p2" ];
__n0["variableDeclarations"] := __n101;
__n102 := [  ];
__n0["functionDeclarations"] := __n102;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}