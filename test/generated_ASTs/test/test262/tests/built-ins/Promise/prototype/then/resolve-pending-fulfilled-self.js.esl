function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "resolve";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "VariableDeclaration";
__n8 := {  };
__n8["type"] := "VariableDeclarator";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "p1";
__n8["id"] := __n9;
__n10 := {  };
__n10["type"] := "NewExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Promise";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [ "_resolve" ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "resolve";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "_resolve";
__n18["right"] := __n20;
__n17["expression"] := __n18;
__n16 := [ __n17 ];
__n15["body"] := __n16;
__n21 := [  ];
__n15["variableDeclarations"] := __n21;
__n22 := [  ];
__n15["functionDeclarations"] := __n22;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n8["init"] := __n10;
__n7 := [ __n8 ];
__n6["declarations"] := __n7;
__n6["kind"] := "var";
__n23 := {  };
__n23["type"] := "VariableDeclaration";
__n25 := {  };
__n25["type"] := "VariableDeclarator";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "p2";
__n25["id"] := __n26;
__n25["init"] := null;
__n24 := [ __n25 ];
__n23["declarations"] := __n24;
__n23["kind"] := "var";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "AssignmentExpression";
__n28["operator"] := "=";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "p2";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "p1";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "then";
__n33["raw"] := "\"then\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ReturnStatement";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "p2";
__n39["argument"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n41 := [  ];
__n37["variableDeclarations"] := __n41;
__n42 := [  ];
__n37["functionDeclarations"] := __n42;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n34 := [ __n35 ];
__n30["arguments"] := __n34;
__n28["right"] := __n30;
__n27["expression"] := __n28;
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "p2";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "then";
__n47["raw"] := "\"then\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "FunctionExpression";
__n49["id"] := null;
__n50 := [  ];
__n49["params"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$DONE";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "The promise should not be fulfilled.";
__n57["raw"] := "'The promise should not be fulfilled.'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n58 := [  ];
__n51["variableDeclarations"] := __n58;
__n59 := [  ];
__n51["functionDeclarations"] := __n59;
__n51["codeType"] := "function";
__n51["strict"] := false;
__n49["body"] := __n51;
__n49["generator"] := false;
__n49["async"] := false;
__n49["expression"] := false;
__n60 := {  };
__n60["type"] := "FunctionExpression";
__n60["id"] := null;
__n61 := [ "reason" ];
__n60["params"] := __n61;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "UnaryExpression";
__n65["operator"] := "!";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "reason";
__n65["argument"] := __n66;
__n65["prefix"] := true;
__n64["test"] := __n65;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$DONE";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "The promise should be rejected with a value.";
__n73["raw"] := "'The promise should be rejected with a value.'";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n74 := {  };
__n74["type"] := "ReturnStatement";
__n74["argument"] := null;
__n68 := [ __n69, __n74 ];
__n67["body"] := __n68;
__n64["consequent"] := __n67;
__n64["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "MemberExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "reason";
__n77["object"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "constructor";
__n79["raw"] := "\"constructor\"";
__n77["property"] := __n79;
__n77["computed"] := true;
__n76["left"] := __n77;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "TypeError";
__n76["right"] := __n80;
__n75["test"] := __n76;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$DONE";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "The promise should be rejected with a TypeError instance.";
__n87["raw"] := "'The promise should be rejected with a TypeError instance.'";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n88 := {  };
__n88["type"] := "ReturnStatement";
__n88["argument"] := null;
__n82 := [ __n83, __n88 ];
__n81["body"] := __n82;
__n75["consequent"] := __n81;
__n75["alternate"] := null;
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$DONE";
__n90["callee"] := __n91;
__n92 := [  ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n63 := [ __n64, __n75, __n89 ];
__n62["body"] := __n63;
__n93 := [  ];
__n62["variableDeclarations"] := __n93;
__n94 := [  ];
__n62["functionDeclarations"] := __n94;
__n62["codeType"] := "function";
__n62["strict"] := false;
__n60["body"] := __n62;
__n60["generator"] := false;
__n60["async"] := false;
__n60["expression"] := false;
__n48 := [ __n49, __n60 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "resolve";
__n96["callee"] := __n97;
__n98 := [  ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n1 := [ __n2, __n6, __n23, __n27, __n43, __n95 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n99 := [ "resolve", "p1", "p2" ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}