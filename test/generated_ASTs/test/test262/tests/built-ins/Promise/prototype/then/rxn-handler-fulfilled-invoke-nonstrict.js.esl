function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "expectedThis";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "obj";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "ObjectExpression";
__n10 := [  ];
__n9["properties"] := __n10;
__n7["init"] := __n9;
__n3 := [ __n4, __n7 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "p";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Promise";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "resolve";
__n20["raw"] := "\"resolve\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "obj";
__n21 := [ __n22 ];
__n17["arguments"] := __n21;
__n16["object"] := __n17;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "then";
__n23["raw"] := "\"then\"";
__n16["property"] := __n23;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n25 := {  };
__n25["type"] := "FunctionExpression";
__n25["id"] := null;
__n26 := [ "arg" ];
__n25["params"] := __n26;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "ThisExpression";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "expectedThis";
__n30["right"] := __n32;
__n29["test"] := __n30;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$DONE";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "+";
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "'this' must be global object, got ";
__n40["raw"] := "\"'this' must be global object, got \"";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "ThisExpression";
__n39["right"] := __n41;
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n42 := {  };
__n42["type"] := "ReturnStatement";
__n42["argument"] := null;
__n34 := [ __n35, __n42 ];
__n33["body"] := __n34;
__n29["consequent"] := __n33;
__n29["alternate"] := null;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "arg";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "obj";
__n44["right"] := __n46;
__n43["test"] := __n44;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$DONE";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "Expected promise to be fulfilled by obj, actually ";
__n54["raw"] := "\"Expected promise to be fulfilled by obj, actually \"";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arg";
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n56 := {  };
__n56["type"] := "ReturnStatement";
__n56["argument"] := null;
__n48 := [ __n49, __n56 ];
__n47["body"] := __n48;
__n43["consequent"] := __n47;
__n43["alternate"] := null;
__n57 := {  };
__n57["type"] := "IfStatement";
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "!==";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "arguments";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "length";
__n61["raw"] := "\"length\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n58["left"] := __n59;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := 1.;
__n62["raw"] := "1";
__n58["right"] := __n62;
__n57["test"] := __n58;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "$DONE";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "Expected handler function to be called with exactly 1 argument.";
__n69["raw"] := "'Expected handler function to be called with exactly 1 argument.'";
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n65["expression"] := __n66;
__n70 := {  };
__n70["type"] := "ReturnStatement";
__n70["argument"] := null;
__n64 := [ __n65, __n70 ];
__n63["body"] := __n64;
__n57["consequent"] := __n63;
__n57["alternate"] := null;
__n71 := {  };
__n71["type"] := "ExpressionStatement";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "$DONE";
__n72["callee"] := __n73;
__n74 := [  ];
__n72["arguments"] := __n74;
__n71["expression"] := __n72;
__n28 := [ __n29, __n43, __n57, __n71 ];
__n27["body"] := __n28;
__n75 := [  ];
__n27["variableDeclarations"] := __n75;
__n76 := [  ];
__n27["functionDeclarations"] := __n76;
__n27["codeType"] := "function";
__n27["strict"] := false;
__n25["body"] := __n27;
__n25["generator"] := false;
__n25["async"] := false;
__n25["expression"] := false;
__n77 := {  };
__n77["type"] := "FunctionExpression";
__n77["id"] := null;
__n78 := [  ];
__n77["params"] := __n78;
__n79 := {  };
__n79["type"] := "BlockStatement";
__n81 := {  };
__n81["type"] := "ExpressionStatement";
__n82 := {  };
__n82["type"] := "CallExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "$DONE";
__n82["callee"] := __n83;
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "The promise should not be rejected.";
__n85["raw"] := "'The promise should not be rejected.'";
__n84 := [ __n85 ];
__n82["arguments"] := __n84;
__n81["expression"] := __n82;
__n80 := [ __n81 ];
__n79["body"] := __n80;
__n86 := [  ];
__n79["variableDeclarations"] := __n86;
__n87 := [  ];
__n79["functionDeclarations"] := __n87;
__n79["codeType"] := "function";
__n79["strict"] := false;
__n77["body"] := __n79;
__n77["generator"] := false;
__n77["async"] := false;
__n77["expression"] := false;
__n24 := [ __n25, __n77 ];
__n15["arguments"] := __n24;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n1 := [ __n2, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n88 := [ "expectedThis", "obj", "p" ];
__n0["variableDeclarations"] := __n88;
__n89 := [  ];
__n0["functionDeclarations"] := __n89;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}