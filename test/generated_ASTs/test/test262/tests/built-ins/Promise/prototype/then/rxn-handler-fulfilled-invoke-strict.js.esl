function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "expectedThis";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "undefined";
__n6["init"] := __n8;
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "obj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "ObjectExpression";
__n12 := [  ];
__n11["properties"] := __n12;
__n9["init"] := __n11;
__n5 := [ __n6, __n9 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n13 := {  };
__n13["type"] := "VariableDeclaration";
__n15 := {  };
__n15["type"] := "VariableDeclarator";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "p";
__n15["id"] := __n16;
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Promise";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "resolve";
__n22["raw"] := "\"resolve\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "obj";
__n23 := [ __n24 ];
__n19["arguments"] := __n23;
__n18["object"] := __n19;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "then";
__n25["raw"] := "\"then\"";
__n18["property"] := __n25;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n27 := {  };
__n27["type"] := "FunctionExpression";
__n27["id"] := null;
__n28 := [ "arg" ];
__n27["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "ThisExpression";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "expectedThis";
__n32["right"] := __n34;
__n31["test"] := __n32;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$DONE";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "'this' must be undefined, got ";
__n42["raw"] := "\"'this' must be undefined, got \"";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "ThisExpression";
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n44["argument"] := null;
__n36 := [ __n37, __n44 ];
__n35["body"] := __n36;
__n31["consequent"] := __n35;
__n31["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "arg";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "obj";
__n46["right"] := __n48;
__n45["test"] := __n46;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$DONE";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "Expected promise to be fulfilled by obj, actually ";
__n56["raw"] := "\"Expected promise to be fulfilled by obj, actually \"";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "arg";
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n58 := {  };
__n58["type"] := "ReturnStatement";
__n58["argument"] := null;
__n50 := [ __n51, __n58 ];
__n49["body"] := __n50;
__n45["consequent"] := __n49;
__n45["alternate"] := null;
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "arguments";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "length";
__n63["raw"] := "\"length\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["left"] := __n61;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n60["right"] := __n64;
__n59["test"] := __n60;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$DONE";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "Expected handler function to be called with exactly 1 argument.";
__n71["raw"] := "'Expected handler function to be called with exactly 1 argument.'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n72 := {  };
__n72["type"] := "ReturnStatement";
__n72["argument"] := null;
__n66 := [ __n67, __n72 ];
__n65["body"] := __n66;
__n59["consequent"] := __n65;
__n59["alternate"] := null;
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$DONE";
__n74["callee"] := __n75;
__n76 := [  ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n30 := [ __n31, __n45, __n59, __n73 ];
__n29["body"] := __n30;
__n77 := [  ];
__n29["variableDeclarations"] := __n77;
__n78 := [  ];
__n29["functionDeclarations"] := __n78;
__n29["codeType"] := "function";
__n29["strict"] := false;
__n27["body"] := __n29;
__n27["generator"] := false;
__n27["async"] := false;
__n27["expression"] := false;
__n79 := {  };
__n79["type"] := "FunctionExpression";
__n79["id"] := null;
__n80 := [  ];
__n79["params"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$DONE";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "The promise should not be rejected.";
__n87["raw"] := "'The promise should not be rejected.'";
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n88 := [  ];
__n81["variableDeclarations"] := __n88;
__n89 := [  ];
__n81["functionDeclarations"] := __n89;
__n81["codeType"] := "function";
__n81["strict"] := false;
__n79["body"] := __n81;
__n79["generator"] := false;
__n79["async"] := false;
__n79["expression"] := false;
__n26 := [ __n27, __n79 ];
__n17["arguments"] := __n26;
__n15["init"] := __n17;
__n14 := [ __n15 ];
__n13["declarations"] := __n14;
__n13["kind"] := "var";
__n1 := [ __n2, __n4, __n13 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n90 := [ "expectedThis", "obj", "p" ];
__n0["variableDeclarations"] := __n90;
__n91 := [  ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}