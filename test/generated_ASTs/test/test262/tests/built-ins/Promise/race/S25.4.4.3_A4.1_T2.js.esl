function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "iterThrows";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "Object";
__n10["object"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "defineProperty";
__n12["raw"] := "\"defineProperty\"";
__n10["property"] := __n12;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "iterThrows";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Symbol";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "iterator";
__n17["raw"] := "\"iterator\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n18 := {  };
__n18["type"] := "ObjectExpression";
__n20 := {  };
__n20["type"] := "Property";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "get";
__n20["key"] := __n21;
__n22 := {  };
__n22["type"] := "FunctionExpression";
__n22["id"] := null;
__n23 := [  ];
__n22["params"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ReturnStatement";
__n27 := {  };
__n27["type"] := "ObjectExpression";
__n29 := {  };
__n29["type"] := "Property";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "next";
__n29["key"] := __n30;
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [  ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "VariableDeclaration";
__n37 := {  };
__n37["type"] := "VariableDeclarator";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "v";
__n37["id"] := __n38;
__n39 := {  };
__n39["type"] := "ObjectExpression";
__n40 := [  ];
__n39["properties"] := __n40;
__n37["init"] := __n39;
__n36 := [ __n37 ];
__n35["declarations"] := __n36;
__n35["kind"] := "var";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "Object";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "defineProperty";
__n45["raw"] := "\"defineProperty\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["callee"] := __n43;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "v";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "value";
__n48["raw"] := "'value'";
__n49 := {  };
__n49["type"] := "ObjectExpression";
__n51 := {  };
__n51["type"] := "Property";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "get";
__n51["key"] := __n52;
__n53 := {  };
__n53["type"] := "FunctionExpression";
__n53["id"] := null;
__n54 := [  ];
__n53["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ThrowStatement";
__n58 := {  };
__n58["type"] := "NewExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Error";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "abrupt completion";
__n61["raw"] := "\"abrupt completion\"";
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["argument"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n62 := [  ];
__n55["variableDeclarations"] := __n62;
__n63 := [  ];
__n55["functionDeclarations"] := __n63;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n53["body"] := __n55;
__n53["generator"] := false;
__n53["async"] := false;
__n53["expression"] := false;
__n51["value"] := __n53;
__n51["computed"] := false;
__n51["kind"] := "init";
__n51["shorthand"] := false;
__n50 := [ __n51 ];
__n49["properties"] := __n50;
__n46 := [ __n47, __n48, __n49 ];
__n42["arguments"] := __n46;
__n41["expression"] := __n42;
__n64 := {  };
__n64["type"] := "ReturnStatement";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "v";
__n64["argument"] := __n65;
__n34 := [ __n35, __n41, __n64 ];
__n33["body"] := __n34;
__n66 := [ "v" ];
__n33["variableDeclarations"] := __n66;
__n67 := [  ];
__n33["functionDeclarations"] := __n67;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n29["value"] := __n31;
__n29["computed"] := false;
__n29["kind"] := "init";
__n29["shorthand"] := false;
__n28 := [ __n29 ];
__n27["properties"] := __n28;
__n26["argument"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n68 := [  ];
__n24["variableDeclarations"] := __n68;
__n69 := [  ];
__n24["functionDeclarations"] := __n69;
__n24["codeType"] := "function";
__n24["strict"] := false;
__n22["body"] := __n24;
__n22["generator"] := false;
__n22["async"] := false;
__n22["expression"] := false;
__n20["value"] := __n22;
__n20["computed"] := false;
__n20["kind"] := "init";
__n20["shorthand"] := false;
__n19 := [ __n20 ];
__n18["properties"] := __n19;
__n13 := [ __n14, __n15, __n18 ];
__n9["arguments"] := __n13;
__n8["expression"] := __n9;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "Promise";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "race";
__n78["raw"] := "\"race\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "iterThrows";
__n79 := [ __n80 ];
__n75["arguments"] := __n79;
__n74["object"] := __n75;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "then";
__n81["raw"] := "\"then\"";
__n74["property"] := __n81;
__n74["computed"] := true;
__n73["callee"] := __n74;
__n83 := {  };
__n83["type"] := "FunctionExpression";
__n83["id"] := null;
__n84 := [  ];
__n83["params"] := __n84;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ThrowStatement";
__n88 := {  };
__n88["type"] := "NewExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "Test262Error";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "Promise unexpectedly fulfilled: Promise.race(iterThrows) should throw TypeError";
__n91["raw"] := "'Promise unexpectedly fulfilled: Promise.race(iterThrows) should throw TypeError'";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["argument"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n92 := [  ];
__n85["variableDeclarations"] := __n92;
__n93 := [  ];
__n85["functionDeclarations"] := __n93;
__n85["codeType"] := "function";
__n85["strict"] := false;
__n83["body"] := __n85;
__n83["generator"] := false;
__n83["async"] := false;
__n83["expression"] := false;
__n94 := {  };
__n94["type"] := "FunctionExpression";
__n94["id"] := null;
__n95 := [ "err" ];
__n94["params"] := __n95;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "IfStatement";
__n99 := {  };
__n99["type"] := "UnaryExpression";
__n99["operator"] := "!";
__n100 := {  };
__n100["type"] := "BinaryExpression";
__n100["operator"] := "instanceof";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "err";
__n100["left"] := __n101;
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "TypeError";
__n100["right"] := __n102;
__n99["argument"] := __n100;
__n99["prefix"] := true;
__n98["test"] := __n99;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ThrowStatement";
__n106 := {  };
__n106["type"] := "NewExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "Test262Error";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "Expected TypeError, got ";
__n110["raw"] := "'Expected TypeError, got '";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "err";
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["argument"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n98["consequent"] := __n103;
__n98["alternate"] := null;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n112 := [  ];
__n96["variableDeclarations"] := __n112;
__n113 := [  ];
__n96["functionDeclarations"] := __n113;
__n96["codeType"] := "function";
__n96["strict"] := false;
__n94["body"] := __n96;
__n94["generator"] := false;
__n94["async"] := false;
__n94["expression"] := false;
__n82 := [ __n83, __n94 ];
__n73["arguments"] := __n82;
__n72["object"] := __n73;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "then";
__n114["raw"] := "\"then\"";
__n72["property"] := __n114;
__n72["computed"] := true;
__n71["callee"] := __n72;
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "$DONE";
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "$DONE";
__n115 := [ __n116, __n117 ];
__n71["arguments"] := __n115;
__n70["expression"] := __n71;
__n1 := [ __n2, __n8, __n70 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n118 := [ "iterThrows" ];
__n0["variableDeclarations"] := __n118;
__n119 := [  ];
__n0["functionDeclarations"] := __n119;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}