function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "p";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Promise";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "reject";
__n9["raw"] := "\"reject\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 3.;
__n11["raw"] := "3";
__n10 := [ __n11 ];
__n6["arguments"] := __n10;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "!";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "instanceof";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "p";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Promise";
__n14["right"] := __n16;
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n12["test"] := __n13;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ThrowStatement";
__n20 := {  };
__n20["type"] := "NewExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "Test262Error";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "Expected Promise.reject to return a promise.";
__n23["raw"] := "\"Expected Promise.reject to return a promise.\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n12["consequent"] := __n17;
__n12["alternate"] := null;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "p";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "then";
__n30["raw"] := "\"then\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "FunctionExpression";
__n32["id"] := null;
__n33 := [  ];
__n32["params"] := __n33;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ThrowStatement";
__n37 := {  };
__n37["type"] := "NewExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Test262Error";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "Promise should not be fulfilled.";
__n40["raw"] := "\"Promise should not be fulfilled.\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["argument"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n41 := [  ];
__n34["variableDeclarations"] := __n41;
__n42 := [  ];
__n34["functionDeclarations"] := __n42;
__n34["codeType"] := "function";
__n34["strict"] := false;
__n32["body"] := __n34;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n43 := {  };
__n43["type"] := "FunctionExpression";
__n43["id"] := null;
__n44 := [ "arg" ];
__n43["params"] := __n44;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "arg";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 3.;
__n50["raw"] := "3";
__n48["right"] := __n50;
__n47["test"] := __n48;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ThrowStatement";
__n54 := {  };
__n54["type"] := "NewExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "Test262Error";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "Expected promise to be rejected with supplied arg, got ";
__n58["raw"] := "\"Expected promise to be rejected with supplied arg, got \"";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arg";
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["argument"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n47["consequent"] := __n51;
__n47["alternate"] := null;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n60 := [  ];
__n45["variableDeclarations"] := __n60;
__n61 := [  ];
__n45["functionDeclarations"] := __n61;
__n45["codeType"] := "function";
__n45["strict"] := false;
__n43["body"] := __n45;
__n43["generator"] := false;
__n43["async"] := false;
__n43["expression"] := false;
__n31 := [ __n32, __n43 ];
__n27["arguments"] := __n31;
__n26["object"] := __n27;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "then";
__n62["raw"] := "\"then\"";
__n26["property"] := __n62;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "$DONE";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "$DONE";
__n63 := [ __n64, __n65 ];
__n25["arguments"] := __n63;
__n24["expression"] := __n25;
__n1 := [ __n2, __n12, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n66 := [ "p" ];
__n0["variableDeclarations"] := __n66;
__n67 := [  ];
__n0["functionDeclarations"] := __n67;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}