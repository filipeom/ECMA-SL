function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "returnValue";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 'null;
__n6["raw"] := "\"'null\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "resolve";
__n9["id"] := __n10;
__n9["init"] := null;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "promise";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "NewExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Promise";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [ "_resolve" ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "AssignmentExpression";
__n23["operator"] := "=";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "resolve";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "_resolve";
__n23["right"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n26 := [  ];
__n20["variableDeclarations"] := __n26;
__n27 := [  ];
__n20["functionDeclarations"] := __n27;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["async"] := false;
__n18["expression"] := false;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "promise";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "then";
__n32["raw"] := "\"then\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "FunctionExpression";
__n34["id"] := null;
__n35 := [  ];
__n34["params"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$DONE";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "The promise should not be fulfilled.";
__n42["raw"] := "'The promise should not be fulfilled.'";
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n43 := [  ];
__n36["variableDeclarations"] := __n43;
__n44 := [  ];
__n36["functionDeclarations"] := __n44;
__n36["codeType"] := "function";
__n36["strict"] := false;
__n34["body"] := __n36;
__n34["generator"] := false;
__n34["async"] := false;
__n34["expression"] := false;
__n45 := {  };
__n45["type"] := "FunctionExpression";
__n45["id"] := null;
__n46 := [ "reason" ];
__n45["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "!";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "reason";
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n49["test"] := __n50;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$DONE";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "The promise should be rejected with a value.";
__n58["raw"] := "'The promise should be rejected with a value.'";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n59 := {  };
__n59["type"] := "ReturnStatement";
__n59["argument"] := null;
__n53 := [ __n54, __n59 ];
__n52["body"] := __n53;
__n49["consequent"] := __n52;
__n49["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "reason";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "constructor";
__n64["raw"] := "\"constructor\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["left"] := __n62;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "TypeError";
__n61["right"] := __n65;
__n60["test"] := __n61;
__n66 := {  };
__n66["type"] := "BlockStatement";
__n68 := {  };
__n68["type"] := "ExpressionStatement";
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "$DONE";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "The promise should be rejected with a TypeError instance.";
__n72["raw"] := "'The promise should be rejected with a TypeError instance.'";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68["expression"] := __n69;
__n73 := {  };
__n73["type"] := "ReturnStatement";
__n73["argument"] := null;
__n67 := [ __n68, __n73 ];
__n66["body"] := __n67;
__n60["consequent"] := __n66;
__n60["alternate"] := null;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$DONE";
__n75["callee"] := __n76;
__n77 := [  ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n48 := [ __n49, __n60, __n74 ];
__n47["body"] := __n48;
__n78 := [  ];
__n47["variableDeclarations"] := __n78;
__n79 := [  ];
__n47["functionDeclarations"] := __n79;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n45["body"] := __n47;
__n45["generator"] := false;
__n45["async"] := false;
__n45["expression"] := false;
__n33 := [ __n34, __n45 ];
__n29["arguments"] := __n33;
__n28["expression"] := __n29;
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "AssignmentExpression";
__n81["operator"] := "=";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "returnValue";
__n81["left"] := __n82;
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "resolve";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "promise";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n81["right"] := __n83;
__n80["expression"] := __n81;
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "assert";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "sameValue";
__n91["raw"] := "\"sameValue\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n88["callee"] := __n89;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "returnValue";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "undefined";
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "\"resolve\" return value";
__n95["raw"] := "'\"resolve\" return value'";
__n92 := [ __n93, __n94, __n95 ];
__n88["arguments"] := __n92;
__n87["expression"] := __n88;
__n1 := [ __n2, __n7, __n11, __n28, __n80, __n87 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n96 := [ "returnValue", "resolve", "promise" ];
__n0["variableDeclarations"] := __n96;
__n97 := [  ];
__n0["functionDeclarations"] := __n97;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}