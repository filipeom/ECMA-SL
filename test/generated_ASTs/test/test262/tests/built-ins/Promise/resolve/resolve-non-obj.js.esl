function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Promise";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "resolve";
__n8["raw"] := "\"resolve\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 23.;
__n10["raw"] := "23";
__n9 := [ __n10 ];
__n5["arguments"] := __n9;
__n4["object"] := __n5;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "then";
__n11["raw"] := "\"then\"";
__n4["property"] := __n11;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [ "value" ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "value";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 23.;
__n20["raw"] := "23";
__n18["right"] := __n20;
__n17["test"] := __n18;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$DONE";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "The promise should be fulfilled with the provided value.";
__n27["raw"] := "'The promise should be fulfilled with the provided value.'";
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n28 := {  };
__n28["type"] := "ReturnStatement";
__n28["argument"] := null;
__n22 := [ __n23, __n28 ];
__n21["body"] := __n22;
__n17["consequent"] := __n21;
__n17["alternate"] := null;
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$DONE";
__n30["callee"] := __n31;
__n32 := [  ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n16 := [ __n17, __n29 ];
__n15["body"] := __n16;
__n33 := [  ];
__n15["variableDeclarations"] := __n33;
__n34 := [  ];
__n15["functionDeclarations"] := __n34;
__n15["codeType"] := "function";
__n15["strict"] := false;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n35 := {  };
__n35["type"] := "FunctionExpression";
__n35["id"] := null;
__n36 := [  ];
__n35["params"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$DONE";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "The promise should not be rejected.";
__n43["raw"] := "'The promise should not be rejected.'";
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n44 := [  ];
__n37["variableDeclarations"] := __n44;
__n45 := [  ];
__n37["functionDeclarations"] := __n45;
__n37["codeType"] := "function";
__n37["strict"] := false;
__n35["body"] := __n37;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n12 := [ __n13, __n35 ];
__n3["arguments"] := __n12;
__n2["expression"] := __n3;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [  ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}