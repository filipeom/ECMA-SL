function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "value";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "MemberExpression";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "Promise";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "resolve";
__n14["raw"] := "\"resolve\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "value";
__n15 := [ __n16 ];
__n11["arguments"] := __n15;
__n10["object"] := __n11;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "then";
__n17["raw"] := "\"then\"";
__n10["property"] := __n17;
__n10["computed"] := true;
__n9["callee"] := __n10;
__n19 := {  };
__n19["type"] := "FunctionExpression";
__n19["id"] := null;
__n20 := [ "value" ];
__n19["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "value";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "value";
__n24["right"] := __n26;
__n23["test"] := __n24;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "$DONE";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "The promise should be fulfilled with the provided value.";
__n33["raw"] := "'The promise should be fulfilled with the provided value.'";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n29["expression"] := __n30;
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n34["argument"] := null;
__n28 := [ __n29, __n34 ];
__n27["body"] := __n28;
__n23["consequent"] := __n27;
__n23["alternate"] := null;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$DONE";
__n36["callee"] := __n37;
__n38 := [  ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n22 := [ __n23, __n35 ];
__n21["body"] := __n22;
__n39 := [  ];
__n21["variableDeclarations"] := __n39;
__n40 := [  ];
__n21["functionDeclarations"] := __n40;
__n21["codeType"] := "function";
__n21["strict"] := false;
__n19["body"] := __n21;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n41 := {  };
__n41["type"] := "FunctionExpression";
__n41["id"] := null;
__n42 := [  ];
__n41["params"] := __n42;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$DONE";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "The promise should not be rejected.";
__n49["raw"] := "'The promise should not be rejected.'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n50 := [  ];
__n43["variableDeclarations"] := __n50;
__n51 := [  ];
__n43["functionDeclarations"] := __n51;
__n43["codeType"] := "function";
__n43["strict"] := false;
__n41["body"] := __n43;
__n41["generator"] := false;
__n41["async"] := false;
__n41["expression"] := false;
__n18 := [ __n19, __n41 ];
__n9["arguments"] := __n18;
__n8["expression"] := __n9;
__n1 := [ __n2, __n8 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n52 := [ "value" ];
__n0["variableDeclarations"] := __n52;
__n53 := [  ];
__n0["functionDeclarations"] := __n53;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}