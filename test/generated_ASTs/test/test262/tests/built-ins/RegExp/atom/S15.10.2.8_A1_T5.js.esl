function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/[Jj]ava([Ss]cript)?(?=\\:)/";
__n8["raw"] := "/[Jj]ava([Ss]cript)?(?=\\:)/";
__n8["source"] := "[Jj]ava([Ss]cript)?(?=\\:)";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "CharacterClass";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "J";
__n14["kind"] := "simple";
__n14["symbol"] := "J";
__n14["codePoint"] := 74.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "j";
__n15["kind"] := "simple";
__n15["symbol"] := "j";
__n15["codePoint"] := 106.;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "a";
__n16["kind"] := "simple";
__n16["symbol"] := "a";
__n16["codePoint"] := 97.;
__n17 := {  };
__n17["type"] := "Char";
__n17["value"] := "v";
__n17["kind"] := "simple";
__n17["symbol"] := "v";
__n17["codePoint"] := 118.;
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "a";
__n18["kind"] := "simple";
__n18["symbol"] := "a";
__n18["codePoint"] := 97.;
__n19 := {  };
__n19["type"] := "Repetition";
__n20 := {  };
__n20["type"] := "Group";
__n20["capturing"] := true;
__n20["number"] := 1.;
__n21 := {  };
__n21["type"] := "Alternative";
__n23 := {  };
__n23["type"] := "CharacterClass";
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "S";
__n25["kind"] := "simple";
__n25["symbol"] := "S";
__n25["codePoint"] := 83.;
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := "s";
__n26["kind"] := "simple";
__n26["symbol"] := "s";
__n26["codePoint"] := 115.;
__n24 := [ __n25, __n26 ];
__n23["expressions"] := __n24;
__n27 := {  };
__n27["type"] := "Char";
__n27["value"] := "c";
__n27["kind"] := "simple";
__n27["symbol"] := "c";
__n27["codePoint"] := 99.;
__n28 := {  };
__n28["type"] := "Char";
__n28["value"] := "r";
__n28["kind"] := "simple";
__n28["symbol"] := "r";
__n28["codePoint"] := 114.;
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "i";
__n29["kind"] := "simple";
__n29["symbol"] := "i";
__n29["codePoint"] := 105.;
__n30 := {  };
__n30["type"] := "Char";
__n30["value"] := "p";
__n30["kind"] := "simple";
__n30["symbol"] := "p";
__n30["codePoint"] := 112.;
__n31 := {  };
__n31["type"] := "Char";
__n31["value"] := "t";
__n31["kind"] := "simple";
__n31["symbol"] := "t";
__n31["codePoint"] := 116.;
__n22 := [ __n23, __n27, __n28, __n29, __n30, __n31 ];
__n21["expressions"] := __n22;
__n20["expression"] := __n21;
__n19["expression"] := __n20;
__n32 := {  };
__n32["type"] := "Quantifier";
__n32["kind"] := "?";
__n32["greedy"] := true;
__n19["quantifier"] := __n32;
__n19["parenIndex"] := 1.;
__n19["parenCount"] := 0.;
__n33 := {  };
__n33["type"] := "Assertion";
__n33["kind"] := "Lookahead";
__n34 := {  };
__n34["type"] := "Char";
__n34["value"] := ":";
__n34["kind"] := "simple";
__n34["symbol"] := ":";
__n34["codePoint"] := 58.;
__n34["escaped"] := true;
__n33["assertion"] := __n34;
__n11 := [ __n12, __n16, __n17, __n18, __n19, __n33 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 1.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "test";
__n35["raw"] := "\"test\"";
__n7["property"] := __n35;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "rhino is JavaScript engine";
__n37["raw"] := "\"rhino is JavaScript engine\"";
__n36 := [ __n37 ];
__n6["arguments"] := __n36;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__executed";
__n38["test"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#1: /[Jj]ava([Ss]cript)?(?=\\:)/.test(\"rhino is JavaScript engine\") === false";
__n46["raw"] := "'#1: /[Jj]ava([Ss]cript)?(?=\\\\:)/.test(\"rhino is JavaScript engine\") === false'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n38["consequent"] := __n40;
__n38["alternate"] := null;
__n1 := [ __n2, __n38 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n47 := [ "__executed" ];
__n0["variableDeclarations"] := __n47;
__n48 := [  ];
__n0["functionDeclarations"] := __n48;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}