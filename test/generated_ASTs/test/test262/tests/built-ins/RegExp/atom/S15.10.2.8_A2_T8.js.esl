function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/(\\.(?!com|org)|\\/)/";
__n8["raw"] := "/(\\.(?!com|org)|\\/)/";
__n8["source"] := "(\\.(?!com|org)|\\/)";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Group";
__n10["capturing"] := true;
__n10["number"] := 1.;
__n11 := {  };
__n11["type"] := "Disjunction";
__n12 := {  };
__n12["type"] := "Alternative";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := ".";
__n14["kind"] := "simple";
__n14["symbol"] := ".";
__n14["codePoint"] := 46.;
__n14["escaped"] := true;
__n15 := {  };
__n15["type"] := "Assertion";
__n15["kind"] := "Lookahead";
__n15["negative"] := true;
__n16 := {  };
__n16["type"] := "Disjunction";
__n17 := {  };
__n17["type"] := "Alternative";
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "c";
__n19["kind"] := "simple";
__n19["symbol"] := "c";
__n19["codePoint"] := 99.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "o";
__n20["kind"] := "simple";
__n20["symbol"] := "o";
__n20["codePoint"] := 111.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "m";
__n21["kind"] := "simple";
__n21["symbol"] := "m";
__n21["codePoint"] := 109.;
__n18 := [ __n19, __n20, __n21 ];
__n17["expressions"] := __n18;
__n16["left"] := __n17;
__n22 := {  };
__n22["type"] := "Alternative";
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "o";
__n24["kind"] := "simple";
__n24["symbol"] := "o";
__n24["codePoint"] := 111.;
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "r";
__n25["kind"] := "simple";
__n25["symbol"] := "r";
__n25["codePoint"] := 114.;
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := "g";
__n26["kind"] := "simple";
__n26["symbol"] := "g";
__n26["codePoint"] := 103.;
__n23 := [ __n24, __n25, __n26 ];
__n22["expressions"] := __n23;
__n16["right"] := __n22;
__n15["assertion"] := __n16;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n11["left"] := __n12;
__n27 := {  };
__n27["type"] := "Char";
__n27["value"] := "/";
__n27["kind"] := "simple";
__n27["symbol"] := "/";
__n27["codePoint"] := 47.;
__n27["escaped"] := true;
__n11["right"] := __n27;
__n10["expression"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 1.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "test";
__n28["raw"] := "\"test\"";
__n7["property"] := __n28;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "ah.com";
__n30["raw"] := "\"ah.com\"";
__n29 := [ __n30 ];
__n6["arguments"] := __n29;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__executed";
__n31["test"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1: /(\\.(?!com|org)|\\/)/.test(\"ah.com\") === false";
__n39["raw"] := "'#1: /(\\\\.(?!com|org)|\\\\/)/.test(\"ah.com\") === false'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n31["consequent"] := __n33;
__n31["alternate"] := null;
__n1 := [ __n2, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n40 := [ "__executed" ];
__n0["variableDeclarations"] := __n40;
__n41 := [  ];
__n0["functionDeclarations"] := __n41;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}