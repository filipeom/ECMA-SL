function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "non_w";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := "
	~`!@#$%^&*()-+={[}]|\\:;'<,>./? ";
__n7["raw"] := "\"\\f\\n\\r\\t\\v~`!@#$%^&*()-+={[}]|\\\\:;'<,>./? \"";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "\"";
__n8["raw"] := "'\"'";
__n6["right"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "!==";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "/\\w/";
__n13["raw"] := "/\\w/";
__n13["source"] := "\\w";
__n14 := {  };
__n14["type"] := "RegExp";
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "\\w";
__n15["kind"] := "meta";
__n15["symbol"] := 'undefined;
__n15["codePoint"] := nan;
__n14["body"] := __n15;
__n14["flags"] := "";
__n14["nCaps"] := 0.;
__n13["regex"] := __n14;
__n12["object"] := __n13;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "exec";
__n16["raw"] := "\"exec\"";
__n12["property"] := __n16;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "non_w";
__n17 := [ __n18 ];
__n11["arguments"] := __n17;
__n10["left"] := __n11;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 'null;
__n19["raw"] := "\"'null\"";
__n10["right"] := __n19;
__n9["test"] := __n10;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: non-w";
__n26["raw"] := "'#1: non-w'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n9["consequent"] := __n20;
__n9["alternate"] := null;
__n27 := {  };
__n27["type"] := "VariableDeclaration";
__n29 := {  };
__n29["type"] := "VariableDeclarator";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "non_W";
__n29["id"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "_0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
__n31["raw"] := "\"_0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"";
__n29["init"] := __n31;
__n28 := [ __n29 ];
__n27["declarations"] := __n28;
__n27["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "regexp_w";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "/\\w/g";
__n36["raw"] := "/\\w/g";
__n36["source"] := "\\w";
__n37 := {  };
__n37["type"] := "RegExp";
__n38 := {  };
__n38["type"] := "Char";
__n38["value"] := "\\w";
__n38["kind"] := "meta";
__n38["symbol"] := 'undefined;
__n38["codePoint"] := nan;
__n37["body"] := __n38;
__n37["flags"] := "g";
__n37["nCaps"] := 0.;
__n36["regex"] := __n37;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n39 := {  };
__n39["type"] := "VariableDeclaration";
__n41 := {  };
__n41["type"] := "VariableDeclarator";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "k";
__n41["id"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n41["init"] := __n43;
__n40 := [ __n41 ];
__n39["declarations"] := __n40;
__n39["kind"] := "var";
__n44 := {  };
__n44["type"] := "WhileStatement";
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "!==";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "regexp_w";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "exec";
__n49["raw"] := "\"exec\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["callee"] := __n47;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "non_W";
__n50 := [ __n51 ];
__n46["arguments"] := __n50;
__n45["left"] := __n46;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 'null;
__n52["raw"] := "\"'null\"";
__n45["right"] := __n52;
__n44["test"] := __n45;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "UpdateExpression";
__n56["operator"] := "++";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "k";
__n56["argument"] := __n57;
__n56["prefix"] := false;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n44["body"] := __n53;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "non_W";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "length";
__n62["raw"] := "\"length\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "k";
__n59["right"] := __n63;
__n58["test"] := __n59;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "#2: non-W";
__n70["raw"] := "'#2: non-W'";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n58["consequent"] := __n64;
__n58["alternate"] := null;
__n1 := [ __n2, __n9, __n27, __n32, __n39, __n44, __n58 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n71 := [ "non_w", "non_W", "regexp_w", "k" ];
__n0["variableDeclarations"] := __n71;
__n72 := [  ];
__n0["functionDeclarations"] := __n72;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}