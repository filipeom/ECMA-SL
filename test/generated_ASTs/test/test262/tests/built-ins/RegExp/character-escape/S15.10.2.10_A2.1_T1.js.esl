function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "result";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := true;
__n6["raw"] := "true";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ForStatement";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "alpha";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 65.;
__n12["raw"] := "0x0041";
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n7["init"] := __n8;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "<=";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "alpha";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 90.;
__n15["raw"] := "0x005A";
__n13["right"] := __n15;
__n7["test"] := __n13;
__n16 := {  };
__n16["type"] := "UpdateExpression";
__n16["operator"] := "++";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "alpha";
__n16["argument"] := __n17;
__n16["prefix"] := false;
__n7["update"] := __n16;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "VariableDeclaration";
__n22 := {  };
__n22["type"] := "VariableDeclarator";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "str";
__n22["id"] := __n23;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "String";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "fromCharCode";
__n27["raw"] := "\"fromCharCode\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "%";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "alpha";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 32.;
__n31["raw"] := "32";
__n29["right"] := __n31;
__n28 := [ __n29 ];
__n24["arguments"] := __n28;
__n22["init"] := __n24;
__n21 := [ __n22 ];
__n20["declarations"] := __n21;
__n20["kind"] := "var";
__n32 := {  };
__n32["type"] := "VariableDeclaration";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arr";
__n34["id"] := __n35;
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "NewExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "RegExp";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "\\c";
__n42["raw"] := "\"\\\\c\"";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "String";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "fromCharCode";
__n46["raw"] := "\"fromCharCode\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "alpha";
__n47 := [ __n48 ];
__n43["arguments"] := __n47;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["object"] := __n38;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "exec";
__n49["raw"] := "\"exec\"";
__n37["property"] := __n49;
__n37["computed"] := true;
__n36["callee"] := __n37;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "str";
__n50 := [ __n51 ];
__n36["arguments"] := __n50;
__n34["init"] := __n36;
__n33 := [ __n34 ];
__n32["declarations"] := __n33;
__n32["kind"] := "var";
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "LogicalExpression";
__n53["operator"] := "||";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "===";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arr";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := 'null;
__n56["raw"] := "\"'null\"";
__n54["right"] := __n56;
__n53["left"] := __n54;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n58["computed"] := true;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arr";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := 0.;
__n60["raw"] := "0";
__n58["property"] := __n60;
__n57["left"] := __n58;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "str";
__n57["right"] := __n61;
__n53["right"] := __n57;
__n52["test"] := __n53;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "AssignmentExpression";
__n65["operator"] := "=";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "result";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := false;
__n67["raw"] := "false";
__n65["right"] := __n67;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n52["consequent"] := __n62;
__n52["alternate"] := null;
__n19 := [ __n20, __n32, __n52 ];
__n18["body"] := __n19;
__n7["body"] := __n18;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "result";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := true;
__n71["raw"] := "true";
__n69["right"] := __n71;
__n68["test"] := __n69;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#1: CharacterEscape :: c A - Z";
__n78["raw"] := "'#1: CharacterEscape :: c A - Z'";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n68["consequent"] := __n72;
__n68["alternate"] := null;
__n1 := [ __n2, __n7, __n68 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n79 := [ "result", "alpha", "str", "arr" ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}