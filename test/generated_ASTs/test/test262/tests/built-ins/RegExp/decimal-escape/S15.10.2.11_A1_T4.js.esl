function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/(A)\\1/";
__n8["raw"] := "/(A)\\1/";
__n8["source"] := "(A)\\1";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Group";
__n12["capturing"] := true;
__n12["number"] := 1.;
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "A";
__n13["kind"] := "simple";
__n13["symbol"] := "A";
__n13["codePoint"] := 65.;
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "Backreference";
__n14["kind"] := "number";
__n14["number"] := 1.;
__n14["reference"] := 1.;
__n11 := [ __n12, __n14 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 1.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "exec";
__n15["raw"] := "\"exec\"";
__n7["property"] := __n15;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "AA";
__n17["raw"] := "\"AA\"";
__n16 := [ __n17 ];
__n6["arguments"] := __n16;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "LogicalExpression";
__n19["operator"] := "||";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "arr";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 'null;
__n22["raw"] := "\"'null\"";
__n20["right"] := __n22;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "!==";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n24["computed"] := true;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "arr";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := 0.;
__n26["raw"] := "0";
__n24["property"] := __n26;
__n23["left"] := __n24;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "AA";
__n27["raw"] := "\"AA\"";
__n23["right"] := __n27;
__n19["right"] := __n23;
__n18["test"] := __n19;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ExpressionStatement";
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "$ERROR";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1: var arr = (/(A)\\1/.exec(\"AA\")); arr[0] === \"AA\". Actual. ";
__n35["raw"] := "'#1: var arr = (/(A)\\\\1/.exec(\"AA\")); arr[0] === \"AA\". Actual. '";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "LogicalExpression";
__n36["operator"] := "&&";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "arr";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "MemberExpression";
__n38["computed"] := true;
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "arr";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.;
__n40["raw"] := "0";
__n38["property"] := __n40;
__n36["right"] := __n38;
__n34["right"] := __n36;
__n33 := [ __n34 ];
__n31["arguments"] := __n33;
__n30["expression"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n18["consequent"] := __n28;
__n18["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "LogicalExpression";
__n42["operator"] := "||";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "===";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "arr";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 'null;
__n45["raw"] := "\"'null\"";
__n43["right"] := __n45;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n47["computed"] := true;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "arr";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 1.;
__n49["raw"] := "1";
__n47["property"] := __n49;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "A";
__n50["raw"] := "\"A\"";
__n46["right"] := __n50;
__n42["right"] := __n46;
__n41["test"] := __n42;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#2: var arr = (/(A)\\1/.exec(\"AA\")); arr[1] === \"A\". Actual. ";
__n58["raw"] := "'#2: var arr = (/(A)\\\\1/.exec(\"AA\")); arr[1] === \"A\". Actual. '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "LogicalExpression";
__n59["operator"] := "&&";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "arr";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n61["computed"] := true;
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "arr";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 1.;
__n63["raw"] := "1";
__n61["property"] := __n63;
__n59["right"] := __n61;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n41["consequent"] := __n51;
__n41["alternate"] := null;
__n1 := [ __n2, __n18, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n64 := [ "arr" ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}