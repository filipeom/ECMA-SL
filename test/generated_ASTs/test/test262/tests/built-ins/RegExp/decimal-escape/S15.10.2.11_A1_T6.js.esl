function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/(A)\\1(B)\\2/";
__n8["raw"] := "/(A)\\1(B)\\2/";
__n8["source"] := "(A)\\1(B)\\2";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Group";
__n12["capturing"] := true;
__n12["number"] := 1.;
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "A";
__n13["kind"] := "simple";
__n13["symbol"] := "A";
__n13["codePoint"] := 65.;
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "Backreference";
__n14["kind"] := "number";
__n14["number"] := 1.;
__n14["reference"] := 1.;
__n15 := {  };
__n15["type"] := "Group";
__n15["capturing"] := true;
__n15["number"] := 2.;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "B";
__n16["kind"] := "simple";
__n16["symbol"] := "B";
__n16["codePoint"] := 66.;
__n15["expression"] := __n16;
__n17 := {  };
__n17["type"] := "Backreference";
__n17["kind"] := "number";
__n17["number"] := 2.;
__n17["reference"] := 2.;
__n11 := [ __n12, __n14, __n15, __n17 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 2.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "exec";
__n18["raw"] := "\"exec\"";
__n7["property"] := __n18;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "AABB";
__n20["raw"] := "\"AABB\"";
__n19 := [ __n20 ];
__n6["arguments"] := __n19;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "LogicalExpression";
__n22["operator"] := "||";
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "===";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "arr";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 'null;
__n25["raw"] := "\"'null\"";
__n23["right"] := __n25;
__n22["left"] := __n23;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n27["computed"] := true;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "arr";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 0.;
__n29["raw"] := "0";
__n27["property"] := __n29;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "AABB";
__n30["raw"] := "\"AABB\"";
__n26["right"] := __n30;
__n22["right"] := __n26;
__n21["test"] := __n22;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#1: var arr = /(A)\\1(B)\\2/.exec(\"AABB\"); arr[0] === \"AABB\". Actual. ";
__n38["raw"] := "'#1: var arr = /(A)\\\\1(B)\\\\2/.exec(\"AABB\"); arr[0] === \"AABB\". Actual. '";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "LogicalExpression";
__n39["operator"] := "&&";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "arr";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "MemberExpression";
__n41["computed"] := true;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "arr";
__n41["object"] := __n42;
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := 0.;
__n43["raw"] := "0";
__n41["property"] := __n43;
__n39["right"] := __n41;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n21["consequent"] := __n31;
__n21["alternate"] := null;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "LogicalExpression";
__n45["operator"] := "||";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "===";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "arr";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 'null;
__n48["raw"] := "\"'null\"";
__n46["right"] := __n48;
__n45["left"] := __n46;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n50["computed"] := true;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "arr";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 1.;
__n52["raw"] := "1";
__n50["property"] := __n52;
__n49["left"] := __n50;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "A";
__n53["raw"] := "\"A\"";
__n49["right"] := __n53;
__n45["right"] := __n49;
__n44["test"] := __n45;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "$ERROR";
__n57["callee"] := __n58;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "+";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "#2: var arr = /(A)\\1(B)\\2/.exec(\"AABB\"); arr[1] === \"A\". Actual. ";
__n61["raw"] := "'#2: var arr = /(A)\\\\1(B)\\\\2/.exec(\"AABB\"); arr[1] === \"A\". Actual. '";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "LogicalExpression";
__n62["operator"] := "&&";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "arr";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "arr";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 1.;
__n66["raw"] := "1";
__n64["property"] := __n66;
__n62["right"] := __n64;
__n60["right"] := __n62;
__n59 := [ __n60 ];
__n57["arguments"] := __n59;
__n56["expression"] := __n57;
__n55 := [ __n56 ];
__n54["body"] := __n55;
__n44["consequent"] := __n54;
__n44["alternate"] := null;
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "LogicalExpression";
__n68["operator"] := "||";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "===";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "arr";
__n69["left"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := 'null;
__n71["raw"] := "\"'null\"";
__n69["right"] := __n71;
__n68["left"] := __n69;
__n72 := {  };
__n72["type"] := "BinaryExpression";
__n72["operator"] := "!==";
__n73 := {  };
__n73["type"] := "MemberExpression";
__n73["computed"] := true;
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "arr";
__n73["object"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 2.;
__n75["raw"] := "2";
__n73["property"] := __n75;
__n72["left"] := __n73;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "B";
__n76["raw"] := "\"B\"";
__n72["right"] := __n76;
__n68["right"] := __n72;
__n67["test"] := __n68;
__n77 := {  };
__n77["type"] := "BlockStatement";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "$ERROR";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "BinaryExpression";
__n83["operator"] := "+";
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#3: var arr = /(A)\\1(B)\\2/.exec(\"AABB\"); arr[2] === \"B\". Actual. ";
__n84["raw"] := "'#3: var arr = /(A)\\\\1(B)\\\\2/.exec(\"AABB\"); arr[2] === \"B\". Actual. '";
__n83["left"] := __n84;
__n85 := {  };
__n85["type"] := "LogicalExpression";
__n85["operator"] := "&&";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "arr";
__n85["left"] := __n86;
__n87 := {  };
__n87["type"] := "MemberExpression";
__n87["computed"] := true;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "arr";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := 2.;
__n89["raw"] := "2";
__n87["property"] := __n89;
__n85["right"] := __n87;
__n83["right"] := __n85;
__n82 := [ __n83 ];
__n80["arguments"] := __n82;
__n79["expression"] := __n80;
__n78 := [ __n79 ];
__n77["body"] := __n78;
__n67["consequent"] := __n77;
__n67["alternate"] := null;
__n1 := [ __n2, __n21, __n44, __n67 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n90 := [ "arr" ];
__n0["variableDeclarations"] := __n90;
__n91 := [  ];
__n0["functionDeclarations"] := __n91;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}