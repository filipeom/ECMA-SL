function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "arr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/";
__n8["raw"] := "/((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/";
__n8["source"] := "((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "Group";
__n12["capturing"] := true;
__n12["number"] := 1.;
__n13 := {  };
__n13["type"] := "Group";
__n13["capturing"] := true;
__n13["number"] := 2.;
__n14 := {  };
__n14["type"] := "Group";
__n14["capturing"] := true;
__n14["number"] := 3.;
__n15 := {  };
__n15["type"] := "Group";
__n15["capturing"] := true;
__n15["number"] := 4.;
__n16 := {  };
__n16["type"] := "Group";
__n16["capturing"] := true;
__n16["number"] := 5.;
__n17 := {  };
__n17["type"] := "Group";
__n17["capturing"] := true;
__n17["number"] := 6.;
__n18 := {  };
__n18["type"] := "Group";
__n18["capturing"] := true;
__n18["number"] := 7.;
__n19 := {  };
__n19["type"] := "Group";
__n19["capturing"] := true;
__n19["number"] := 8.;
__n20 := {  };
__n20["type"] := "Group";
__n20["capturing"] := true;
__n20["number"] := 9.;
__n21 := {  };
__n21["type"] := "Group";
__n21["capturing"] := true;
__n21["number"] := 10.;
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "A";
__n22["kind"] := "simple";
__n22["symbol"] := "A";
__n22["codePoint"] := 65.;
__n21["expression"] := __n22;
__n20["expression"] := __n21;
__n19["expression"] := __n20;
__n18["expression"] := __n19;
__n17["expression"] := __n18;
__n16["expression"] := __n17;
__n15["expression"] := __n16;
__n14["expression"] := __n15;
__n13["expression"] := __n14;
__n12["expression"] := __n13;
__n23 := {  };
__n23["type"] := "Backreference";
__n23["kind"] := "number";
__n23["number"] := 10.;
__n23["reference"] := 10.;
__n24 := {  };
__n24["type"] := "Backreference";
__n24["kind"] := "number";
__n24["number"] := 9.;
__n24["reference"] := 9.;
__n25 := {  };
__n25["type"] := "Backreference";
__n25["kind"] := "number";
__n25["number"] := 8.;
__n25["reference"] := 8.;
__n26 := {  };
__n26["type"] := "Backreference";
__n26["kind"] := "number";
__n26["number"] := 7.;
__n26["reference"] := 7.;
__n27 := {  };
__n27["type"] := "Backreference";
__n27["kind"] := "number";
__n27["number"] := 6.;
__n27["reference"] := 6.;
__n28 := {  };
__n28["type"] := "Backreference";
__n28["kind"] := "number";
__n28["number"] := 5.;
__n28["reference"] := 5.;
__n29 := {  };
__n29["type"] := "Backreference";
__n29["kind"] := "number";
__n29["number"] := 4.;
__n29["reference"] := 4.;
__n30 := {  };
__n30["type"] := "Backreference";
__n30["kind"] := "number";
__n30["number"] := 3.;
__n30["reference"] := 3.;
__n31 := {  };
__n31["type"] := "Backreference";
__n31["kind"] := "number";
__n31["number"] := 2.;
__n31["reference"] := 2.;
__n32 := {  };
__n32["type"] := "Backreference";
__n32["kind"] := "number";
__n32["number"] := 1.;
__n32["reference"] := 1.;
__n11 := [ __n12, __n23, __n24, __n25, __n26, __n27, __n28, __n29, __n30, __n31, __n32 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 10.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "exec";
__n33["raw"] := "\"exec\"";
__n7["property"] := __n33;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "AAAAAAAAAAA";
__n35["raw"] := "\"AAAAAAAAAAA\"";
__n34 := [ __n35 ];
__n6["arguments"] := __n34;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "LogicalExpression";
__n37["operator"] := "||";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "===";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "arr";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 'null;
__n40["raw"] := "\"'null\"";
__n38["right"] := __n40;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "!==";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "arr";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 0.;
__n44["raw"] := "0";
__n42["property"] := __n44;
__n41["left"] := __n42;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "AAAAAAAAAAA";
__n45["raw"] := "\"AAAAAAAAAAA\"";
__n41["right"] := __n45;
__n37["right"] := __n41;
__n36["test"] := __n37;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "#1: var arr = /((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/.exec(\"AAAAAAAAAAA\"); arr[0] === \"AAAAAAAAAAA\". Actual. ";
__n53["raw"] := "'#1: var arr = /((((((((((A))))))))))\\\\10\\\\9\\\\8\\\\7\\\\6\\\\5\\\\4\\\\3\\\\2\\\\1/.exec(\"AAAAAAAAAAA\"); arr[0] === \"AAAAAAAAAAA\". Actual. '";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "LogicalExpression";
__n54["operator"] := "&&";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arr";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "MemberExpression";
__n56["computed"] := true;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "arr";
__n56["object"] := __n57;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 0.;
__n58["raw"] := "0";
__n56["property"] := __n58;
__n54["right"] := __n56;
__n52["right"] := __n54;
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n36["consequent"] := __n46;
__n36["alternate"] := null;
__n59 := {  };
__n59["type"] := "ForStatement";
__n60 := {  };
__n60["type"] := "VariableDeclaration";
__n62 := {  };
__n62["type"] := "VariableDeclarator";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "i";
__n62["id"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 1.;
__n64["raw"] := "1";
__n62["init"] := __n64;
__n61 := [ __n62 ];
__n60["declarations"] := __n61;
__n60["kind"] := "var";
__n59["init"] := __n60;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "<=";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "i";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := 10.;
__n67["raw"] := "10";
__n65["right"] := __n67;
__n59["test"] := __n65;
__n68 := {  };
__n68["type"] := "UpdateExpression";
__n68["operator"] := "++";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "i";
__n68["argument"] := __n69;
__n68["prefix"] := false;
__n59["update"] := __n68;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "IfStatement";
__n73 := {  };
__n73["type"] := "LogicalExpression";
__n73["operator"] := "||";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "===";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "arr";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 'null;
__n76["raw"] := "\"'null\"";
__n74["right"] := __n76;
__n73["left"] := __n74;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n78["computed"] := true;
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "arr";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "i";
__n78["property"] := __n80;
__n77["left"] := __n78;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "A";
__n81["raw"] := "\"A\"";
__n77["right"] := __n81;
__n73["right"] := __n77;
__n72["test"] := __n73;
__n82 := {  };
__n82["type"] := "BlockStatement";
__n84 := {  };
__n84["type"] := "ExpressionStatement";
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "$ERROR";
__n85["callee"] := __n86;
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "+";
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "BinaryExpression";
__n90["operator"] := "+";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#2: var arr = /((((((((((A))))))))))\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1/.exec(\"AAAAAAAAAAA\"); arr[";
__n91["raw"] := "'#2: var arr = /((((((((((A))))))))))\\\\10\\\\9\\\\8\\\\7\\\\6\\\\5\\\\4\\\\3\\\\2\\\\1/.exec(\"AAAAAAAAAAA\"); arr['";
__n90["left"] := __n91;
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "i";
__n90["right"] := __n92;
__n89["left"] := __n90;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "] === \"A\". Actual. ";
__n93["raw"] := "'] === \"A\". Actual. '";
__n89["right"] := __n93;
__n88["left"] := __n89;
__n94 := {  };
__n94["type"] := "LogicalExpression";
__n94["operator"] := "&&";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "arr";
__n94["left"] := __n95;
__n96 := {  };
__n96["type"] := "MemberExpression";
__n96["computed"] := true;
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "arr";
__n96["object"] := __n97;
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "i";
__n96["property"] := __n98;
__n94["right"] := __n96;
__n88["right"] := __n94;
__n87 := [ __n88 ];
__n85["arguments"] := __n87;
__n84["expression"] := __n85;
__n83 := [ __n84 ];
__n82["body"] := __n83;
__n72["consequent"] := __n82;
__n72["alternate"] := null;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n59["body"] := __n70;
__n1 := [ __n2, __n36, __n59 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n99 := [ "arr", "i" ];
__n0["variableDeclarations"] := __n99;
__n100 := [  ];
__n0["functionDeclarations"] := __n100;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}