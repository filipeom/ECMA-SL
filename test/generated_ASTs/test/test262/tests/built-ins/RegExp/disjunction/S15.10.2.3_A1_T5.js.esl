function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/\\d{3}|[a-z]{4}/";
__n8["raw"] := "/\\d{3}|[a-z]{4}/";
__n8["source"] := "\\d{3}|[a-z]{4}";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Disjunction";
__n11 := {  };
__n11["type"] := "Repetition";
__n12 := {  };
__n12["type"] := "Char";
__n12["value"] := "\\d";
__n12["kind"] := "meta";
__n12["symbol"] := 'undefined;
__n12["codePoint"] := nan;
__n11["expression"] := __n12;
__n13 := {  };
__n13["type"] := "Quantifier";
__n13["kind"] := "Range";
__n13["from"] := 3.;
__n13["to"] := 3.;
__n13["greedy"] := true;
__n11["quantifier"] := __n13;
__n11["parenIndex"] := 0.;
__n11["parenCount"] := 0.;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "Repetition";
__n15 := {  };
__n15["type"] := "CharacterClass";
__n17 := {  };
__n17["type"] := "ClassRange";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "a";
__n18["kind"] := "simple";
__n18["symbol"] := "a";
__n18["codePoint"] := 97.;
__n17["from"] := __n18;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "z";
__n19["kind"] := "simple";
__n19["symbol"] := "z";
__n19["codePoint"] := 122.;
__n17["to"] := __n19;
__n16 := [ __n17 ];
__n15["expressions"] := __n16;
__n14["expression"] := __n15;
__n20 := {  };
__n20["type"] := "Quantifier";
__n20["kind"] := "Range";
__n20["from"] := 4.;
__n20["to"] := 4.;
__n20["greedy"] := true;
__n14["quantifier"] := __n20;
__n14["parenIndex"] := 0.;
__n14["parenCount"] := 0.;
__n10["right"] := __n14;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "test";
__n21["raw"] := "\"test\"";
__n7["property"] := __n21;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "2, 12 and 23 AND 0.00.1";
__n23["raw"] := "\"2, 12 and 23 AND 0.00.1\"";
__n22 := [ __n23 ];
__n6["arguments"] := __n22;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__executed";
__n24["test"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#1: /\\d{3}|[a-z]{4}/.test(\"2, 12 and 23 AND 0.00.1\") === false";
__n32["raw"] := "'#1: /\\\\d{3}|[a-z]{4}/.test(\"2, 12 and 23 AND 0.00.1\") === false'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["consequent"] := __n26;
__n24["alternate"] := null;
__n1 := [ __n2, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [ "__executed" ];
__n0["variableDeclarations"] := __n33;
__n34 := [  ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}