function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/ab|cd|ef/";
__n8["raw"] := "/ab|cd|ef/";
__n8["source"] := "ab|cd|ef";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Disjunction";
__n11 := {  };
__n11["type"] := "Disjunction";
__n12 := {  };
__n12["type"] := "Alternative";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "a";
__n14["kind"] := "simple";
__n14["symbol"] := "a";
__n14["codePoint"] := 97.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "b";
__n15["kind"] := "simple";
__n15["symbol"] := "b";
__n15["codePoint"] := 98.;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n11["left"] := __n12;
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "c";
__n18["kind"] := "simple";
__n18["symbol"] := "c";
__n18["codePoint"] := 99.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "d";
__n19["kind"] := "simple";
__n19["symbol"] := "d";
__n19["codePoint"] := 100.;
__n17 := [ __n18, __n19 ];
__n16["expressions"] := __n17;
__n11["right"] := __n16;
__n10["left"] := __n11;
__n20 := {  };
__n20["type"] := "Alternative";
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := "e";
__n22["kind"] := "simple";
__n22["symbol"] := "e";
__n22["codePoint"] := 101.;
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "f";
__n23["kind"] := "simple";
__n23["symbol"] := "f";
__n23["codePoint"] := 102.;
__n21 := [ __n22, __n23 ];
__n20["expressions"] := __n21;
__n10["right"] := __n20;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "test";
__n24["raw"] := "\"test\"";
__n7["property"] := __n24;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "AEKFCD";
__n26["raw"] := "\"AEKFCD\"";
__n25 := [ __n26 ];
__n6["arguments"] := __n25;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__executed";
__n27["test"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1: /ab|cd|ef/.test(\"AEKFCD\") === false";
__n35["raw"] := "'#1: /ab|cd|ef/.test(\"AEKFCD\") === false'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n27["consequent"] := __n29;
__n27["alternate"] := null;
__n1 := [ __n2, __n27 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n36 := [ "__executed" ];
__n0["variableDeclarations"] := __n36;
__n37 := [  ];
__n0["functionDeclarations"] := __n37;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}