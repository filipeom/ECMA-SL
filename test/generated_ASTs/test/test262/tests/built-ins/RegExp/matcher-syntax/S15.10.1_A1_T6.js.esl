function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "$ERROR";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "#1.1: new RegExp(\"a????\") throw SyntaxError. Actual: ";
__n10["raw"] := "'#1.1: new RegExp(\"a????\") throw SyntaxError. Actual: '";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "RegExp";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "a????";
__n14["raw"] := "\"a????\"";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n9["right"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n15 := {  };
__n15["type"] := "CatchClause";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "e";
__n15["param"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "instanceof";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "e";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "SyntaxError";
__n21["right"] := __n23;
__n20["left"] := __n21;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := true;
__n24["raw"] := "true";
__n20["right"] := __n24;
__n19["test"] := __n20;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#1.2: new RegExp(\"a????\") throw SyntaxError. Actual: ";
__n32["raw"] := "'#1.2: new RegExp(\"a????\") throw SyntaxError. Actual: '";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n19["consequent"] := __n25;
__n19["alternate"] := null;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n15["body"] := __n17;
__n2["handler"] := __n15;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n34 := [  ];
__n0["variableDeclarations"] := __n34;
__n35 := [  ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}