function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__pattern";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/\\t/m";
__n6["raw"] := "/\\t/m";
__n6["source"] := "\\t";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Char";
__n8["value"] := "\\t";
__n8["kind"] := "meta";
__n8["symbol"] := "	";
__n8["codePoint"] := 9.;
__n7["body"] := __n8;
__n7["flags"] := "m";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__re";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "NewExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "RegExp";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__pattern";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "x";
__n15 := [ __n16, __n17 ];
__n13["arguments"] := __n15;
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "!==";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__re";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "source";
__n22["raw"] := "\"source\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__pattern";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "source";
__n25["raw"] := "\"source\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n19["right"] := __n23;
__n18["test"] := __n19;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: __pattern = /\\t/m; _re = new RegExp(__pattern, x); var x; __re.source === __pattern.source. Actual: ";
__n33["raw"] := "'#1: __pattern = /\\\\t/m; _re = new RegExp(__pattern, x); var x; __re.source === __pattern.source. Actual: '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__re";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "source";
__n36["raw"] := "\"source\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n18["consequent"] := __n26;
__n18["alternate"] := null;
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "!==";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__re";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "multiline";
__n41["raw"] := "\"multiline\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["left"] := __n39;
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__pattern";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "multiline";
__n44["raw"] := "\"multiline\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n38["right"] := __n42;
__n37["test"] := __n38;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2: __pattern = /\\t/m; _re = new RegExp(__pattern, x); var x; __re.multiline === __pattern.multiline. Actual: ";
__n52["raw"] := "'#2: __pattern = /\\\\t/m; _re = new RegExp(__pattern, x); var x; __re.multiline === __pattern.multiline. Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__re";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "multiline";
__n55["raw"] := "\"multiline\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n37["consequent"] := __n45;
__n37["alternate"] := null;
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "__re";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "global";
__n60["raw"] := "\"global\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["left"] := __n58;
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__pattern";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "global";
__n63["raw"] := "\"global\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n57["right"] := __n61;
__n56["test"] := __n57;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#3: __pattern = /\\t/m; _re = new RegExp(__pattern, x); var x; __re.global === __pattern.global. Actual: ";
__n71["raw"] := "'#3: __pattern = /\\\\t/m; _re = new RegExp(__pattern, x); var x; __re.global === __pattern.global. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__re";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "global";
__n74["raw"] := "\"global\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n56["consequent"] := __n64;
__n56["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "MemberExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__re";
__n77["object"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "ignoreCase";
__n79["raw"] := "\"ignoreCase\"";
__n77["property"] := __n79;
__n77["computed"] := true;
__n76["left"] := __n77;
__n80 := {  };
__n80["type"] := "MemberExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "__pattern";
__n80["object"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "ignoreCase";
__n82["raw"] := "\"ignoreCase\"";
__n80["property"] := __n82;
__n80["computed"] := true;
__n76["right"] := __n80;
__n75["test"] := __n76;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#4: __pattern = /\\t/m; _re = new RegExp(__pattern, x); var x; __re.ignoreCase === __pattern.ignoreCase. Actual: ";
__n90["raw"] := "'#4: __pattern = /\\\\t/m; _re = new RegExp(__pattern, x); var x; __re.ignoreCase === __pattern.ignoreCase. Actual: '";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "MemberExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "__re";
__n91["object"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "ignoreCase";
__n93["raw"] := "\"ignoreCase\"";
__n91["property"] := __n93;
__n91["computed"] := true;
__n89["right"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n75["consequent"] := __n83;
__n75["alternate"] := null;
__n94 := {  };
__n94["type"] := "VariableDeclaration";
__n96 := {  };
__n96["type"] := "VariableDeclarator";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "x";
__n96["id"] := __n97;
__n96["init"] := null;
__n95 := [ __n96 ];
__n94["declarations"] := __n95;
__n94["kind"] := "var";
__n1 := [ __n2, __n9, __n18, __n37, __n56, __n75, __n94 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n98 := [ "__pattern", "__re", "x" ];
__n0["variableDeclarations"] := __n98;
__n99 := [  ];
__n0["functionDeclarations"] := __n99;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}