function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "ObjectExpression";
__n11 := {  };
__n11["type"] := "Property";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "toString";
__n11["key"] := __n12;
__n13 := {  };
__n13["type"] := "UnaryExpression";
__n13["operator"] := "void";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 0.;
__n14["raw"] := "0";
__n13["argument"] := __n14;
__n13["prefix"] := true;
__n11["value"] := __n13;
__n11["computed"] := false;
__n11["kind"] := "init";
__n11["shorthand"] := false;
__n15 := {  };
__n15["type"] := "Property";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "valueOf";
__n15["key"] := __n16;
__n17 := {  };
__n17["type"] := "FunctionExpression";
__n17["id"] := null;
__n18 := [  ];
__n17["params"] := __n18;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ReturnStatement";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "[z-z]";
__n22["raw"] := "\"[z-z]\"";
__n21["argument"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n23 := [  ];
__n19["variableDeclarations"] := __n23;
__n24 := [  ];
__n19["functionDeclarations"] := __n24;
__n19["codeType"] := "function";
__n19["strict"] := false;
__n17["body"] := __n19;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n15["value"] := __n17;
__n15["computed"] := false;
__n15["kind"] := "init";
__n15["shorthand"] := false;
__n10 := [ __n11, __n15 ];
__n9["properties"] := __n10;
__n25 := {  };
__n25["type"] := "ObjectExpression";
__n27 := {  };
__n27["type"] := "Property";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "toString";
__n27["key"] := __n28;
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "void";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n27["value"] := __n29;
__n27["computed"] := false;
__n27["kind"] := "init";
__n27["shorthand"] := false;
__n31 := {  };
__n31["type"] := "Property";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "valueOf";
__n31["key"] := __n32;
__n33 := {  };
__n33["type"] := "FunctionExpression";
__n33["id"] := null;
__n34 := [  ];
__n33["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ReturnStatement";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "mig";
__n38["raw"] := "\"mig\"";
__n37["argument"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n39 := [  ];
__n35["variableDeclarations"] := __n39;
__n40 := [  ];
__n35["functionDeclarations"] := __n40;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n33["body"] := __n35;
__n33["generator"] := false;
__n33["async"] := false;
__n33["expression"] := false;
__n31["value"] := __n33;
__n31["computed"] := false;
__n31["kind"] := "init";
__n31["shorthand"] := false;
__n26 := [ __n27, __n31 ];
__n25["properties"] := __n26;
__n8 := [ __n9, __n25 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "MemberExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__re";
__n43["object"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "ignoreCase";
__n45["raw"] := "\"ignoreCase\"";
__n43["property"] := __n45;
__n43["computed"] := true;
__n42["left"] := __n43;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := true;
__n46["raw"] := "true";
__n42["right"] := __n46;
__n41["test"] := __n42;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#1: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.ignoreCase === true. Actual: ";
__n54["raw"] := "'#1: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.ignoreCase === true. Actual: '";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__re";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "ignoreCase";
__n57["raw"] := "\"ignoreCase\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n41["consequent"] := __n47;
__n41["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__re";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "multiline";
__n62["raw"] := "\"multiline\"";
__n60["property"] := __n62;
__n60["computed"] := true;
__n59["left"] := __n60;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := true;
__n63["raw"] := "true";
__n59["right"] := __n63;
__n58["test"] := __n59;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#2: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.multiline === true. Actual: ";
__n71["raw"] := "'#2: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.multiline === true. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__re";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := "multiline";
__n74["raw"] := "\"multiline\"";
__n72["property"] := __n74;
__n72["computed"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n58["consequent"] := __n64;
__n58["alternate"] := null;
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "MemberExpression";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__re";
__n77["object"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "global";
__n79["raw"] := "\"global\"";
__n77["property"] := __n79;
__n77["computed"] := true;
__n76["left"] := __n77;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := true;
__n80["raw"] := "true";
__n76["right"] := __n80;
__n75["test"] := __n76;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ExpressionStatement";
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "$ERROR";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "BinaryExpression";
__n87["operator"] := "+";
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "#3: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.global === true. Actual: ";
__n88["raw"] := "'#3: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.global === true. Actual: '";
__n87["left"] := __n88;
__n89 := {  };
__n89["type"] := "MemberExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "__re";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "global";
__n91["raw"] := "\"global\"";
__n89["property"] := __n91;
__n89["computed"] := true;
__n87["right"] := __n89;
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83["expression"] := __n84;
__n82 := [ __n83 ];
__n81["body"] := __n82;
__n75["consequent"] := __n81;
__n75["alternate"] := null;
__n92 := {  };
__n92["type"] := "IfStatement";
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "!==";
__n94 := {  };
__n94["type"] := "MemberExpression";
__n95 := {  };
__n95["type"] := "Identifier";
__n95["name"] := "__re";
__n94["object"] := __n95;
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := "lastIndex";
__n96["raw"] := "\"lastIndex\"";
__n94["property"] := __n96;
__n94["computed"] := true;
__n93["left"] := __n94;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := 0.;
__n97["raw"] := "0";
__n93["right"] := __n97;
__n92["test"] := __n93;
__n98 := {  };
__n98["type"] := "BlockStatement";
__n100 := {  };
__n100["type"] := "ExpressionStatement";
__n101 := {  };
__n101["type"] := "CallExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "$ERROR";
__n101["callee"] := __n102;
__n104 := {  };
__n104["type"] := "BinaryExpression";
__n104["operator"] := "+";
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "#4: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.lastIndex === 0. Actual: ";
__n105["raw"] := "'#4: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; __re.lastIndex === 0. Actual: '";
__n104["left"] := __n105;
__n106 := {  };
__n106["type"] := "MemberExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "__re";
__n106["object"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "lastIndex";
__n108["raw"] := "\"lastIndex\"";
__n106["property"] := __n108;
__n106["computed"] := true;
__n104["right"] := __n106;
__n103 := [ __n104 ];
__n101["arguments"] := __n103;
__n100["expression"] := __n101;
__n99 := [ __n100 ];
__n98["body"] := __n99;
__n92["consequent"] := __n98;
__n92["alternate"] := null;
__n109 := {  };
__n109["type"] := "IfStatement";
__n110 := {  };
__n110["type"] := "BinaryExpression";
__n110["operator"] := "===";
__n111 := {  };
__n111["type"] := "UnaryExpression";
__n111["operator"] := "typeof";
__n112 := {  };
__n112["type"] := "MemberExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "__re";
__n112["object"] := __n113;
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "source";
__n114["raw"] := "\"source\"";
__n112["property"] := __n114;
__n112["computed"] := true;
__n111["argument"] := __n112;
__n111["prefix"] := true;
__n110["left"] := __n111;
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := "undefined";
__n115["raw"] := "\"undefined\"";
__n110["right"] := __n115;
__n109["test"] := __n110;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "ExpressionStatement";
__n119 := {  };
__n119["type"] := "CallExpression";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "$ERROR";
__n119["callee"] := __n120;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "#5: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; typeof __re.source !== \"undefined\"";
__n122["raw"] := "'#5: __re = new RegExp({toString:void 0,valueOf:function(){return \"[z-z]\"; typeof __re.source !== \"undefined\"'";
__n121 := [ __n122 ];
__n119["arguments"] := __n121;
__n118["expression"] := __n119;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n109["consequent"] := __n116;
__n109["alternate"] := null;
__n1 := [ __n2, __n41, __n58, __n75, __n92, __n109 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n123 := [ "__re" ];
__n0["variableDeclarations"] := __n123;
__n124 := [  ];
__n0["functionDeclarations"] := __n124;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}