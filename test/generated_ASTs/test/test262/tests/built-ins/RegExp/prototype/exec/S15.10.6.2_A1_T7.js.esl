function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "$ERROR";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "#1.1: /[a-z]/.exec({toString:function(){throw \"intostr\"}}) throw \"intostr\". Actual: ";
__n10["raw"] := "'#1.1: /[a-z]/.exec({toString:function(){throw \"intostr\"}}) throw \"intostr\". Actual: '";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "/[a-z]/";
__n13["raw"] := "/[a-z]/";
__n13["source"] := "[a-z]";
__n14 := {  };
__n14["type"] := "RegExp";
__n15 := {  };
__n15["type"] := "CharacterClass";
__n17 := {  };
__n17["type"] := "ClassRange";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "a";
__n18["kind"] := "simple";
__n18["symbol"] := "a";
__n18["codePoint"] := 97.;
__n17["from"] := __n18;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "z";
__n19["kind"] := "simple";
__n19["symbol"] := "z";
__n19["codePoint"] := 122.;
__n17["to"] := __n19;
__n16 := [ __n17 ];
__n15["expressions"] := __n16;
__n14["body"] := __n15;
__n14["flags"] := "";
__n14["nCaps"] := 0.;
__n13["regex"] := __n14;
__n12["object"] := __n13;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "exec";
__n20["raw"] := "\"exec\"";
__n12["property"] := __n20;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n22 := {  };
__n22["type"] := "ObjectExpression";
__n24 := {  };
__n24["type"] := "Property";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "toString";
__n24["key"] := __n25;
__n26 := {  };
__n26["type"] := "FunctionExpression";
__n26["id"] := null;
__n27 := [  ];
__n26["params"] := __n27;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "ThrowStatement";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "intostr";
__n31["raw"] := "\"intostr\"";
__n30["argument"] := __n31;
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n32 := [  ];
__n28["variableDeclarations"] := __n32;
__n33 := [  ];
__n28["functionDeclarations"] := __n33;
__n28["codeType"] := "function";
__n28["strict"] := false;
__n26["body"] := __n28;
__n26["generator"] := false;
__n26["async"] := false;
__n26["expression"] := false;
__n24["value"] := __n26;
__n24["computed"] := false;
__n24["kind"] := "init";
__n24["shorthand"] := false;
__n23 := [ __n24 ];
__n22["properties"] := __n23;
__n21 := [ __n22 ];
__n11["arguments"] := __n21;
__n9["right"] := __n11;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["expression"] := __n6;
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n34 := {  };
__n34["type"] := "CatchClause";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n34["param"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "e";
__n39["left"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "intostr";
__n41["raw"] := "\"intostr\"";
__n39["right"] := __n41;
__n38["test"] := __n39;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#1.2: /[a-z]/.exec({toString:function(){throw \"intostr\"}}) throw \"intostr\". Actual: ";
__n49["raw"] := "'#1.2: /[a-z]/.exec({toString:function(){throw \"intostr\"}}) throw \"intostr\". Actual: '";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n48["right"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n38["consequent"] := __n42;
__n38["alternate"] := null;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n34["body"] := __n36;
__n2["handler"] := __n34;
__n2["finalizer"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n51 := [  ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}