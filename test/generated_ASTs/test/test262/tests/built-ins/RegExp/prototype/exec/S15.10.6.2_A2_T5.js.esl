function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := false;
__n9["raw"] := "false";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "AssignmentExpression";
__n11["operator"] := "=";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__instance";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "exec";
__n14["raw"] := "\"exec\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["left"] := __n12;
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "RegExp";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "prototype";
__n18["raw"] := "\"prototype\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["object"] := __n16;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "exec";
__n19["raw"] := "\"exec\"";
__n15["property"] := __n19;
__n15["computed"] := true;
__n11["right"] := __n15;
__n10["expression"] := __n11;
__n20 := {  };
__n20["type"] := "TryStatement";
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "$ERROR";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "+";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1.1: __instance = new Boolean(false); __instance.exec = RegExp.prototype.exec; exec(\"message to investigate\"). Actual: ";
__n28["raw"] := "'#1.1: __instance = new Boolean(false); __instance.exec = RegExp.prototype.exec; exec(\"message to investigate\"). Actual: '";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__instance";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "exec";
__n32["raw"] := "\"exec\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "message to investigate";
__n34["raw"] := "\"message to investigate\"";
__n33 := [ __n34 ];
__n29["arguments"] := __n33;
__n27["right"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n23["expression"] := __n24;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n20["block"] := __n21;
__n35 := {  };
__n35["type"] := "CatchClause";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "e";
__n35["param"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "IfStatement";
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "!==";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "instanceof";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "e";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "TypeError";
__n41["right"] := __n43;
__n40["left"] := __n41;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := true;
__n44["raw"] := "true";
__n40["right"] := __n44;
__n39["test"] := __n40;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#1.2: __instance = new Boolean(false); __instance.exec = RegExp.prototype.exec; exec(\"message to investigate\"). Actual: ";
__n52["raw"] := "'#1.2: __instance = new Boolean(false); __instance.exec = RegExp.prototype.exec; exec(\"message to investigate\"). Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n39["consequent"] := __n45;
__n39["alternate"] := null;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n35["body"] := __n37;
__n20["handler"] := __n35;
__n20["finalizer"] := null;
__n1 := [ __n2, __n10, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n54 := [ "__instance" ];
__n0["variableDeclarations"] := __n54;
__n55 := [  ];
__n0["functionDeclarations"] := __n55;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}