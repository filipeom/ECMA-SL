function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.01;
__n6["raw"] := "1.01";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__re";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "/1|12/";
__n11["raw"] := "/1|12/";
__n11["source"] := "1|12";
__n12 := {  };
__n12["type"] := "RegExp";
__n13 := {  };
__n13["type"] := "Disjunction";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "1";
__n14["kind"] := "simple";
__n14["symbol"] := "1";
__n14["codePoint"] := 49.;
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Alternative";
__n17 := {  };
__n17["type"] := "Char";
__n17["value"] := "1";
__n17["kind"] := "simple";
__n17["symbol"] := "1";
__n17["codePoint"] := 49.;
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "2";
__n18["kind"] := "simple";
__n18["symbol"] := "2";
__n18["codePoint"] := 50.;
__n16 := [ __n17, __n18 ];
__n15["expressions"] := __n16;
__n13["right"] := __n15;
__n12["body"] := __n13;
__n12["flags"] := "";
__n12["nCaps"] := 0.;
__n11["regex"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__re";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "test";
__n24["raw"] := "\"test\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__string";
__n25 := [ __n26 ];
__n21["arguments"] := __n25;
__n20["left"] := __n21;
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__re";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "exec";
__n31["raw"] := "\"exec\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__string";
__n32 := [ __n33 ];
__n28["arguments"] := __n32;
__n27["left"] := __n28;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 'null;
__n34["raw"] := "\"'null\"";
__n27["right"] := __n34;
__n20["right"] := __n27;
__n19["test"] := __n20;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#0: var __string = 1.01;__re = /1|12/; __re.test(__string) === (__re.exec(__string) !== null)";
__n41["raw"] := "'#0: var __string = 1.01;__re = /1|12/; __re.test(__string) === (__re.exec(__string) !== null)'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n19["consequent"] := __n35;
__n19["alternate"] := null;
__n1 := [ __n2, __n7, __n19 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}