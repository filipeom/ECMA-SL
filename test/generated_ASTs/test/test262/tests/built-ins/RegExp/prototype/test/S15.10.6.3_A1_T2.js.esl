function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "123";
__n9["raw"] := "\"123\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__re";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "/((1)|(12))((3)|(23))/";
__n14["raw"] := "/((1)|(12))((3)|(23))/";
__n14["source"] := "((1)|(12))((3)|(23))";
__n15 := {  };
__n15["type"] := "RegExp";
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Group";
__n18["capturing"] := true;
__n18["number"] := 1.;
__n19 := {  };
__n19["type"] := "Disjunction";
__n20 := {  };
__n20["type"] := "Group";
__n20["capturing"] := true;
__n20["number"] := 2.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "1";
__n21["kind"] := "simple";
__n21["symbol"] := "1";
__n21["codePoint"] := 49.;
__n20["expression"] := __n21;
__n19["left"] := __n20;
__n22 := {  };
__n22["type"] := "Group";
__n22["capturing"] := true;
__n22["number"] := 3.;
__n23 := {  };
__n23["type"] := "Alternative";
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "1";
__n25["kind"] := "simple";
__n25["symbol"] := "1";
__n25["codePoint"] := 49.;
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := "2";
__n26["kind"] := "simple";
__n26["symbol"] := "2";
__n26["codePoint"] := 50.;
__n24 := [ __n25, __n26 ];
__n23["expressions"] := __n24;
__n22["expression"] := __n23;
__n19["right"] := __n22;
__n18["expression"] := __n19;
__n27 := {  };
__n27["type"] := "Group";
__n27["capturing"] := true;
__n27["number"] := 4.;
__n28 := {  };
__n28["type"] := "Disjunction";
__n29 := {  };
__n29["type"] := "Group";
__n29["capturing"] := true;
__n29["number"] := 5.;
__n30 := {  };
__n30["type"] := "Char";
__n30["value"] := "3";
__n30["kind"] := "simple";
__n30["symbol"] := "3";
__n30["codePoint"] := 51.;
__n29["expression"] := __n30;
__n28["left"] := __n29;
__n31 := {  };
__n31["type"] := "Group";
__n31["capturing"] := true;
__n31["number"] := 6.;
__n32 := {  };
__n32["type"] := "Alternative";
__n34 := {  };
__n34["type"] := "Char";
__n34["value"] := "2";
__n34["kind"] := "simple";
__n34["symbol"] := "2";
__n34["codePoint"] := 50.;
__n35 := {  };
__n35["type"] := "Char";
__n35["value"] := "3";
__n35["kind"] := "simple";
__n35["symbol"] := "3";
__n35["codePoint"] := 51.;
__n33 := [ __n34, __n35 ];
__n32["expressions"] := __n33;
__n31["expression"] := __n32;
__n28["right"] := __n31;
__n27["expression"] := __n28;
__n17 := [ __n18, __n27 ];
__n16["expressions"] := __n17;
__n15["body"] := __n16;
__n15["flags"] := "";
__n15["nCaps"] := 6.;
__n14["regex"] := __n15;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "__re";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "test";
__n41["raw"] := "\"test\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__string";
__n42 := [ __n43 ];
__n38["arguments"] := __n42;
__n37["left"] := __n38;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__re";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "exec";
__n48["raw"] := "\"exec\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["callee"] := __n46;
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__string";
__n49 := [ __n50 ];
__n45["arguments"] := __n49;
__n44["left"] := __n45;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 'null;
__n51["raw"] := "\"'null\"";
__n44["right"] := __n51;
__n37["right"] := __n44;
__n36["test"] := __n37;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#0: var __string = new String(\"123\"); __re = /((1)|(12))((3)|(23))/; __re.test(__string) === (__re.exec(__string) !== null)";
__n58["raw"] := "'#0: var __string = new String(\"123\"); __re = /((1)|(12))((3)|(23))/; __re.test(__string) === (__re.exec(__string) !== null)'";
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n36["consequent"] := __n52;
__n36["alternate"] := null;
__n1 := [ __n2, __n10, __n36 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n59 := [ "__string", "__re" ];
__n0["variableDeclarations"] := __n59;
__n60 := [  ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}