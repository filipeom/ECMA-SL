function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/[a-z]n/";
__n6["raw"] := "/[a-z]n/";
__n6["source"] := "[a-z]n";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Alternative";
__n10 := {  };
__n10["type"] := "CharacterClass";
__n12 := {  };
__n12["type"] := "ClassRange";
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "a";
__n13["kind"] := "simple";
__n13["symbol"] := "a";
__n13["codePoint"] := 97.;
__n12["from"] := __n13;
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "z";
__n14["kind"] := "simple";
__n14["symbol"] := "z";
__n14["codePoint"] := 122.;
__n12["to"] := __n14;
__n11 := [ __n12 ];
__n10["expressions"] := __n11;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "n";
__n15["kind"] := "simple";
__n15["symbol"] := "n";
__n15["codePoint"] := 110.;
__n9 := [ __n10, __n15 ];
__n8["expressions"] := __n9;
__n7["body"] := __n8;
__n7["flags"] := "";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__re";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "test";
__n21["raw"] := "\"test\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "FunctionExpression";
__n24["id"] := null;
__n25 := [  ];
__n24["params"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n27 := [  ];
__n26["body"] := __n27;
__n28 := [  ];
__n26["variableDeclarations"] := __n28;
__n29 := [  ];
__n26["functionDeclarations"] := __n29;
__n26["codeType"] := "function";
__n26["strict"] := false;
__n24["body"] := __n26;
__n24["generator"] := false;
__n24["async"] := false;
__n24["expression"] := false;
__n23["callee"] := __n24;
__n30 := [  ];
__n23["arguments"] := __n30;
__n22 := [ __n23 ];
__n18["arguments"] := __n22;
__n17["left"] := __n18;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!==";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "MemberExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__re";
__n33["object"] := __n34;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "exec";
__n35["raw"] := "\"exec\"";
__n33["property"] := __n35;
__n33["computed"] := true;
__n32["callee"] := __n33;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "FunctionExpression";
__n38["id"] := null;
__n39 := [  ];
__n38["params"] := __n39;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n41 := [  ];
__n40["body"] := __n41;
__n42 := [  ];
__n40["variableDeclarations"] := __n42;
__n43 := [  ];
__n40["functionDeclarations"] := __n43;
__n40["codeType"] := "function";
__n40["strict"] := false;
__n38["body"] := __n40;
__n38["generator"] := false;
__n38["async"] := false;
__n38["expression"] := false;
__n37["callee"] := __n38;
__n44 := [  ];
__n37["arguments"] := __n44;
__n36 := [ __n37 ];
__n32["arguments"] := __n36;
__n31["left"] := __n32;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 'null;
__n45["raw"] := "\"'null\"";
__n31["right"] := __n45;
__n17["right"] := __n31;
__n16["test"] := __n17;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#0: __re = /[a-z]n/; __re.test(function(){}()) === (__re.exec(function(){}()) !== null)";
__n52["raw"] := "'#0: __re = /[a-z]n/; __re.test(function(){}()) === (__re.exec(function(){}()) !== null)'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n16["consequent"] := __n46;
__n16["alternate"] := null;
__n1 := [ __n2, __n16 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n53 := [ "__re" ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}