function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__re";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "/(?:ab|cd)\\d?/g";
__n6["raw"] := "/(?:ab|cd)\\d?/g";
__n6["source"] := "(?:ab|cd)\\d?";
__n7 := {  };
__n7["type"] := "RegExp";
__n8 := {  };
__n8["type"] := "Alternative";
__n10 := {  };
__n10["type"] := "Group";
__n10["capturing"] := false;
__n11 := {  };
__n11["type"] := "Disjunction";
__n12 := {  };
__n12["type"] := "Alternative";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "a";
__n14["kind"] := "simple";
__n14["symbol"] := "a";
__n14["codePoint"] := 97.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "b";
__n15["kind"] := "simple";
__n15["symbol"] := "b";
__n15["codePoint"] := 98.;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n11["left"] := __n12;
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "c";
__n18["kind"] := "simple";
__n18["symbol"] := "c";
__n18["codePoint"] := 99.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "d";
__n19["kind"] := "simple";
__n19["symbol"] := "d";
__n19["codePoint"] := 100.;
__n17 := [ __n18, __n19 ];
__n16["expressions"] := __n17;
__n11["right"] := __n16;
__n10["expression"] := __n11;
__n20 := {  };
__n20["type"] := "Repetition";
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "\\d";
__n21["kind"] := "meta";
__n21["symbol"] := 'undefined;
__n21["codePoint"] := nan;
__n20["expression"] := __n21;
__n22 := {  };
__n22["type"] := "Quantifier";
__n22["kind"] := "?";
__n22["greedy"] := true;
__n20["quantifier"] := __n22;
__n20["parenIndex"] := 0.;
__n20["parenCount"] := 0.;
__n9 := [ __n10, __n20 ];
__n8["expressions"] := __n9;
__n7["body"] := __n8;
__n7["flags"] := "g";
__n7["nCaps"] := 0.;
__n6["regex"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "AssignmentExpression";
__n24["operator"] := "=";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "lastIndex";
__n27["raw"] := "\"lastIndex\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["left"] := __n25;
__n28 := {  };
__n28["type"] := "UnaryExpression";
__n28["operator"] := "-";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := 1.;
__n29["raw"] := "1";
__n28["argument"] := __n29;
__n28["prefix"] := true;
__n24["right"] := __n28;
__n23["expression"] := __n24;
__n30 := {  };
__n30["type"] := "VariableDeclaration";
__n32 := {  };
__n32["type"] := "VariableDeclarator";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__executed";
__n32["id"] := __n33;
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "__re";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "test";
__n37["raw"] := "\"test\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "aacd22 ";
__n39["raw"] := "\"aacd22 \"";
__n38 := [ __n39 ];
__n34["arguments"] := __n38;
__n32["init"] := __n34;
__n31 := [ __n32 ];
__n30["declarations"] := __n31;
__n30["kind"] := "var";
__n40 := {  };
__n40["type"] := "IfStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "!";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__executed";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["test"] := __n41;
__n43 := {  };
__n43["type"] := "BlockStatement";
__n45 := {  };
__n45["type"] := "ExpressionStatement";
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "$ERROR";
__n46["callee"] := __n47;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#1: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __executed === true";
__n49["raw"] := "'#1: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __executed === true'";
__n48 := [ __n49 ];
__n46["arguments"] := __n48;
__n45["expression"] := __n46;
__n44 := [ __n45 ];
__n43["body"] := __n44;
__n40["consequent"] := __n43;
__n40["alternate"] := null;
__n50 := {  };
__n50["type"] := "IfStatement";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__re";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "lastIndex";
__n54["raw"] := "\"lastIndex\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["left"] := __n52;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := 5.;
__n55["raw"] := "5";
__n51["right"] := __n55;
__n50["test"] := __n51;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#2: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex === 5. Actual: ";
__n63["raw"] := "'#2: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex === 5. Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__re";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "lastIndex";
__n66["raw"] := "\"lastIndex\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n50["consequent"] := __n56;
__n50["alternate"] := null;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "AssignmentExpression";
__n68["operator"] := "=";
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "__re";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "lastIndex";
__n71["raw"] := "\"lastIndex\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n68["left"] := __n69;
__n72 := {  };
__n72["type"] := "UnaryExpression";
__n72["operator"] := "-";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 100.;
__n73["raw"] := "100";
__n72["argument"] := __n73;
__n72["prefix"] := true;
__n68["right"] := __n72;
__n67["expression"] := __n68;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "AssignmentExpression";
__n75["operator"] := "=";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "__executed";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__re";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "test";
__n80["raw"] := "\"test\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["callee"] := __n78;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "aacd22 ";
__n82["raw"] := "\"aacd22 \"";
__n81 := [ __n82 ];
__n77["arguments"] := __n81;
__n75["right"] := __n77;
__n74["expression"] := __n75;
__n83 := {  };
__n83["type"] := "IfStatement";
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "!";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__executed";
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n83["test"] := __n84;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n88 := {  };
__n88["type"] := "ExpressionStatement";
__n89 := {  };
__n89["type"] := "CallExpression";
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "$ERROR";
__n89["callee"] := __n90;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "#3: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex=-100; __executed = __re.test(\"aacd22 \"); __executed === true";
__n92["raw"] := "'#3: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex=-100; __executed = __re.test(\"aacd22 \"); __executed === true'";
__n91 := [ __n92 ];
__n89["arguments"] := __n91;
__n88["expression"] := __n89;
__n87 := [ __n88 ];
__n86["body"] := __n87;
__n83["consequent"] := __n86;
__n83["alternate"] := null;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "MemberExpression";
__n96 := {  };
__n96["type"] := "Identifier";
__n96["name"] := "__re";
__n95["object"] := __n96;
__n97 := {  };
__n97["type"] := "Literal";
__n97["value"] := "lastIndex";
__n97["raw"] := "\"lastIndex\"";
__n95["property"] := __n97;
__n95["computed"] := true;
__n94["left"] := __n95;
__n98 := {  };
__n98["type"] := "Literal";
__n98["value"] := 5.;
__n98["raw"] := "5";
__n94["right"] := __n98;
__n93["test"] := __n94;
__n99 := {  };
__n99["type"] := "BlockStatement";
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "Identifier";
__n103["name"] := "$ERROR";
__n102["callee"] := __n103;
__n105 := {  };
__n105["type"] := "BinaryExpression";
__n105["operator"] := "+";
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#4: __re = /(?:ab|cd)\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex=-100; __executed = __re.test(\"aacd22 \"); __re.lastIndex === 5. Actual: ";
__n106["raw"] := "'#4: __re = /(?:ab|cd)\\\\d?/g; __re.lastIndex=-1; __executed = __re.test(\"aacd22 \"); __re.lastIndex=-100; __executed = __re.test(\"aacd22 \"); __re.lastIndex === 5. Actual: '";
__n105["left"] := __n106;
__n107 := {  };
__n107["type"] := "MemberExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "__re";
__n107["object"] := __n108;
__n109 := {  };
__n109["type"] := "Literal";
__n109["value"] := "lastIndex";
__n109["raw"] := "\"lastIndex\"";
__n107["property"] := __n109;
__n107["computed"] := true;
__n105["right"] := __n107;
__n104 := [ __n105 ];
__n102["arguments"] := __n104;
__n101["expression"] := __n102;
__n100 := [ __n101 ];
__n99["body"] := __n100;
__n93["consequent"] := __n99;
__n93["alternate"] := null;
__n1 := [ __n2, __n23, __n30, __n40, __n50, __n67, __n74, __n83, __n93 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n110 := [ "__re", "__executed" ];
__n0["variableDeclarations"] := __n110;
__n111 := [  ];
__n0["functionDeclarations"] := __n111;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}