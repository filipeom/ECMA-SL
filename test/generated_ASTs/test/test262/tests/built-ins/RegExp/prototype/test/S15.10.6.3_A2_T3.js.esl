function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "test";
__n6["raw"] := "\"test\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "RegExp";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "prototype";
__n10["raw"] := "\"prototype\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["object"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "test";
__n11["raw"] := "\"test\"";
__n7["property"] := __n11;
__n7["computed"] := true;
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n12 := {  };
__n12["type"] := "TryStatement";
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "__instance";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "test";
__n19["raw"] := "\"test\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "message to investigate";
__n21["raw"] := "\"message to investigate\"";
__n20 := [ __n21 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1.1: __instance.test = RegExp.prototype.test; __instance.test(\"message to investigate\"); function __instance(){}";
__n26["raw"] := "'#1.1: __instance.test = RegExp.prototype.test; __instance.test(\"message to investigate\"); function __instance(){}'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n14 := [ __n15, __n22 ];
__n13["body"] := __n14;
__n12["block"] := __n13;
__n27 := {  };
__n27["type"] := "CatchClause";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "e";
__n27["param"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "instanceof";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "e";
__n33["left"] := __n34;
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "TypeError";
__n33["right"] := __n35;
__n32["left"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n32["right"] := __n36;
__n31["test"] := __n32;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "$ERROR";
__n40["callee"] := __n41;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#1.2: __instance.test = RegExp.prototype.test; __instance.test(\"message to investigate\"); function __instance(){}. Actual: ";
__n44["raw"] := "'#1.2: __instance.test = RegExp.prototype.test; __instance.test(\"message to investigate\"); function __instance(){}. Actual: '";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "e";
__n43["right"] := __n45;
__n42 := [ __n43 ];
__n40["arguments"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n31["consequent"] := __n37;
__n31["alternate"] := null;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n27["body"] := __n29;
__n12["handler"] := __n27;
__n12["finalizer"] := null;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__instance";
__n46["expression"] := __n47;
__n48 := {  };
__n48["type"] := "EmptyStatement";
__n1 := [ __n2, __n12, __n46, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n49 := [  ];
__n0["variableDeclarations"] := __n49;
__n51 := {  };
__n51["type"] := "FunctionDeclaration";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "__instance";
__n51["id"] := __n52;
__n53 := [  ];
__n51["params"] := __n53;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n55 := [  ];
__n54["body"] := __n55;
__n56 := [  ];
__n54["variableDeclarations"] := __n56;
__n57 := [  ];
__n54["functionDeclarations"] := __n57;
__n54["codeType"] := "function";
__n54["strict"] := false;
__n51["body"] := __n54;
__n51["generator"] := false;
__n51["async"] := false;
__n51["expression"] := false;
__n50 := [ __n51 ];
__n0["functionDeclarations"] := __n50;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}