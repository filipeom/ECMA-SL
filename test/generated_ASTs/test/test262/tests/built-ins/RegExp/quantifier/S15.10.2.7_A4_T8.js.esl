function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__executed";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/[\"'][^\"']*[\"']/";
__n8["raw"] := "/[\"'][^\"']*[\"']/";
__n8["source"] := "[\"'][^\"']*[\"']";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "Alternative";
__n12 := {  };
__n12["type"] := "CharacterClass";
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "\"";
__n14["kind"] := "simple";
__n14["symbol"] := "\"";
__n14["codePoint"] := 34.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "'";
__n15["kind"] := "simple";
__n15["symbol"] := "'";
__n15["codePoint"] := 39.;
__n13 := [ __n14, __n15 ];
__n12["expressions"] := __n13;
__n16 := {  };
__n16["type"] := "Repetition";
__n17 := {  };
__n17["type"] := "CharacterClass";
__n17["negative"] := true;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "\"";
__n19["kind"] := "simple";
__n19["symbol"] := "\"";
__n19["codePoint"] := 34.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "'";
__n20["kind"] := "simple";
__n20["symbol"] := "'";
__n20["codePoint"] := 39.;
__n18 := [ __n19, __n20 ];
__n17["expressions"] := __n18;
__n16["expression"] := __n17;
__n21 := {  };
__n21["type"] := "Quantifier";
__n21["kind"] := "*";
__n21["greedy"] := true;
__n16["quantifier"] := __n21;
__n16["parenIndex"] := 0.;
__n16["parenCount"] := 0.;
__n22 := {  };
__n22["type"] := "CharacterClass";
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "\"";
__n24["kind"] := "simple";
__n24["symbol"] := "\"";
__n24["codePoint"] := 34.;
__n25 := {  };
__n25["type"] := "Char";
__n25["value"] := "'";
__n25["kind"] := "simple";
__n25["symbol"] := "'";
__n25["codePoint"] := 39.;
__n23 := [ __n24, __n25 ];
__n22["expressions"] := __n23;
__n11 := [ __n12, __n16, __n22 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "test";
__n26["raw"] := "\"test\"";
__n7["property"] := __n26;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "alice cries out: don't";
__n28["raw"] := "'alice cries out: don\\'t'";
__n27 := [ __n28 ];
__n6["arguments"] := __n27;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__executed";
__n29["test"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1: /[\"'][^\"']*[\"']/.test('alice cries out: don't') === false";
__n37["raw"] := "'#1: /[\"\\'][^\"\\']*[\"\\']/.test(\\'alice cries out: don\\'t\\') === false'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n29["consequent"] := __n31;
__n29["alternate"] := null;
__n1 := [ __n2, __n29 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n38 := [ "__executed" ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}