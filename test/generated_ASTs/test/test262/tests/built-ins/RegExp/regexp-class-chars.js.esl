function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "assert";
__n3["callee"] := __n4;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "/[/]/";
__n8["raw"] := "/[/]/";
__n8["source"] := "[/]";
__n9 := {  };
__n9["type"] := "RegExp";
__n10 := {  };
__n10["type"] := "CharacterClass";
__n12 := {  };
__n12["type"] := "Char";
__n12["value"] := "/";
__n12["kind"] := "simple";
__n12["symbol"] := "/";
__n12["codePoint"] := 47.;
__n11 := [ __n12 ];
__n10["expressions"] := __n11;
__n9["body"] := __n10;
__n9["flags"] := "";
__n9["nCaps"] := 0.;
__n8["regex"] := __n9;
__n7["object"] := __n8;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "test";
__n13["raw"] := "\"test\"";
__n7["property"] := __n13;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "/";
__n15["raw"] := "\"/\"";
__n14 := [ __n15 ];
__n6["arguments"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "Forward slash";
__n16["raw"] := "\"Forward slash\"";
__n5 := [ __n6, __n16 ];
__n3["arguments"] := __n5;
__n2["expression"] := __n3;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "/[/]/";
__n25["raw"] := "/[/]/";
__n25["source"] := "[/]";
__n26 := {  };
__n26["type"] := "RegExp";
__n27 := {  };
__n27["type"] := "CharacterClass";
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "/";
__n29["kind"] := "simple";
__n29["symbol"] := "/";
__n29["codePoint"] := 47.;
__n28 := [ __n29 ];
__n27["expressions"] := __n28;
__n26["body"] := __n27;
__n26["flags"] := "";
__n26["nCaps"] := 0.;
__n25["regex"] := __n26;
__n24["object"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "test";
__n30["raw"] := "\"test\"";
__n24["property"] := __n30;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "x";
__n32["raw"] := "\"x\"";
__n31 := [ __n32 ];
__n23["arguments"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := false;
__n33["raw"] := "false";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "Forward slash";
__n34["raw"] := "\"Forward slash\"";
__n22 := [ __n23, __n33, __n34 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "assert";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "/[//]/";
__n41["raw"] := "/[//]/";
__n41["source"] := "[//]";
__n42 := {  };
__n42["type"] := "RegExp";
__n43 := {  };
__n43["type"] := "CharacterClass";
__n45 := {  };
__n45["type"] := "Char";
__n45["value"] := "/";
__n45["kind"] := "simple";
__n45["symbol"] := "/";
__n45["codePoint"] := 47.;
__n46 := {  };
__n46["type"] := "Char";
__n46["value"] := "/";
__n46["kind"] := "simple";
__n46["symbol"] := "/";
__n46["codePoint"] := 47.;
__n44 := [ __n45, __n46 ];
__n43["expressions"] := __n44;
__n42["body"] := __n43;
__n42["flags"] := "";
__n42["nCaps"] := 0.;
__n41["regex"] := __n42;
__n40["object"] := __n41;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "test";
__n47["raw"] := "\"test\"";
__n40["property"] := __n47;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "/";
__n49["raw"] := "\"/\"";
__n48 := [ __n49 ];
__n39["arguments"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Forward slash - repeated";
__n50["raw"] := "\"Forward slash - repeated\"";
__n38 := [ __n39, __n50 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "sameValue";
__n55["raw"] := "\"sameValue\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "CallExpression";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "/[//]/";
__n59["raw"] := "/[//]/";
__n59["source"] := "[//]";
__n60 := {  };
__n60["type"] := "RegExp";
__n61 := {  };
__n61["type"] := "CharacterClass";
__n63 := {  };
__n63["type"] := "Char";
__n63["value"] := "/";
__n63["kind"] := "simple";
__n63["symbol"] := "/";
__n63["codePoint"] := 47.;
__n64 := {  };
__n64["type"] := "Char";
__n64["value"] := "/";
__n64["kind"] := "simple";
__n64["symbol"] := "/";
__n64["codePoint"] := 47.;
__n62 := [ __n63, __n64 ];
__n61["expressions"] := __n62;
__n60["body"] := __n61;
__n60["flags"] := "";
__n60["nCaps"] := 0.;
__n59["regex"] := __n60;
__n58["object"] := __n59;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "test";
__n65["raw"] := "\"test\"";
__n58["property"] := __n65;
__n58["computed"] := true;
__n57["callee"] := __n58;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "x";
__n67["raw"] := "\"x\"";
__n66 := [ __n67 ];
__n57["arguments"] := __n66;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := false;
__n68["raw"] := "false";
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "Forward slash - repeated";
__n69["raw"] := "\"Forward slash - repeated\"";
__n56 := [ __n57, __n68, __n69 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n1 := [ __n2, __n17, __n35, __n51 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n70 := [  ];
__n0["variableDeclarations"] := __n70;
__n71 := [  ];
__n0["functionDeclarations"] := __n71;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}