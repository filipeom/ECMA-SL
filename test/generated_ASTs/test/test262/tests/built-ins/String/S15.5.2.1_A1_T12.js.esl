function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__obj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n8 := {  };
__n8["type"] := "Property";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "toString";
__n8["key"] := __n9;
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ThrowStatement";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "intostr";
__n15["raw"] := "\"intostr\"";
__n14["argument"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n16 := [  ];
__n12["variableDeclarations"] := __n16;
__n17 := [  ];
__n12["functionDeclarations"] := __n17;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n8["value"] := __n10;
__n8["computed"] := false;
__n8["kind"] := "init";
__n8["shorthand"] := false;
__n7 := [ __n8 ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__obj";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "valueOf";
__n22["raw"] := "\"valueOf\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "FunctionExpression";
__n23["id"] := null;
__n24 := [  ];
__n23["params"] := __n24;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ReturnStatement";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := true;
__n28["raw"] := "true";
__n27["argument"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n29 := [  ];
__n25["variableDeclarations"] := __n29;
__n30 := [  ];
__n25["functionDeclarations"] := __n30;
__n25["codeType"] := "function";
__n25["strict"] := false;
__n23["body"] := __n25;
__n23["generator"] := false;
__n23["async"] := false;
__n23["expression"] := false;
__n19["right"] := __n23;
__n18["expression"] := __n19;
__n31 := {  };
__n31["type"] := "TryStatement";
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "VariableDeclaration";
__n36 := {  };
__n36["type"] := "VariableDeclarator";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__str";
__n36["id"] := __n37;
__n38 := {  };
__n38["type"] := "NewExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "String";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__obj";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n36["init"] := __n38;
__n35 := [ __n36 ];
__n34["declarations"] := __n35;
__n34["kind"] := "var";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#1: var __obj = {toString:function(){throw \"intostr\"}}; __str = new String(__obj) lead throwing exception";
__n46["raw"] := "'#1: var __obj = {toString:function(){throw \"intostr\"}}; __str = new String(__obj) lead throwing exception'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n33 := [ __n34, __n42 ];
__n32["body"] := __n33;
__n31["block"] := __n32;
__n47 := {  };
__n47["type"] := "CatchClause";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "e";
__n47["param"] := __n48;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "IfStatement";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "!==";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "intostr";
__n54["raw"] := "\"intostr\"";
__n52["right"] := __n54;
__n51["test"] := __n52;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#1.1: e===\"intostr\". Actual: e===";
__n62["raw"] := "'#1.1: e===\"intostr\". Actual: e==='";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "e";
__n61["right"] := __n63;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n51["consequent"] := __n55;
__n51["alternate"] := null;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n47["body"] := __n49;
__n31["handler"] := __n47;
__n31["finalizer"] := null;
__n1 := [ __n2, __n18, __n31 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n64 := [ "__obj", "__str" ];
__n0["variableDeclarations"] := __n64;
__n65 := [  ];
__n0["functionDeclarations"] := __n65;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}