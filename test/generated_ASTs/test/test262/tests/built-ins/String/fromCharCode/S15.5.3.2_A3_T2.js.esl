function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__fcc__func";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "fromCharCode";
__n8["raw"] := "\"fromCharCode\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "delete";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "String";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "fromCharCode";
__n13["raw"] := "\"fromCharCode\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["expression"] := __n10;
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__fcc__func";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 65.;
__n19["raw"] := "65";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 66.;
__n20["raw"] := "66";
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := 66.;
__n21["raw"] := "66";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 65.;
__n22["raw"] := "65";
__n18 := [ __n19, __n20, __n21, __n22 ];
__n16["arguments"] := __n18;
__n15["left"] := __n16;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "ABBA";
__n23["raw"] := "\"ABBA\"";
__n15["right"] := __n23;
__n14["test"] := __n15;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "+";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#1: __fcc__func = String.fromCharCode; delete String.fromCharCode; __fcc__func(65,66,66,65) === \"ABBA\". Actual: __fcc__func(65,66,66,65) ===";
__n31["raw"] := "'#1: __fcc__func = String.fromCharCode; delete String.fromCharCode; __fcc__func(65,66,66,65) === \"ABBA\". Actual: __fcc__func(65,66,66,65) ==='";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__fcc__func";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 65.;
__n35["raw"] := "65";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 66.;
__n36["raw"] := "66";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 66.;
__n37["raw"] := "66";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := 65.;
__n38["raw"] := "65";
__n34 := [ __n35, __n36, __n37, __n38 ];
__n32["arguments"] := __n34;
__n30["right"] := __n32;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n14["consequent"] := __n24;
__n14["alternate"] := null;
__n1 := [ __n2, __n9, __n14 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n39 := [ "__fcc__func" ];
__n0["variableDeclarations"] := __n39;
__n40 := [  ];
__n0["functionDeclarations"] := __n40;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}