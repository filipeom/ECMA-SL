function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "MemberExpression";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "String";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "fromCharCode";
__n9["raw"] := "\"fromCharCode\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Boolean";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := true;
__n14["raw"] := "true";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10 := [ __n11 ];
__n6["arguments"] := __n10;
__n5["object"] := __n6;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "charCodeAt";
__n15["raw"] := "\"charCodeAt\"";
__n5["property"] := __n15;
__n5["computed"] := true;
__n4["callee"] := __n5;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 0.;
__n17["raw"] := "0";
__n16 := [ __n17 ];
__n4["arguments"] := __n16;
__n3["left"] := __n4;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 1.;
__n18["raw"] := "1";
__n3["right"] := __n18;
__n2["test"] := __n3;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: String.fromCharCode(new Boolean(true)).charCodeAt(0) === 1. Actual: ";
__n26["raw"] := "'#1: String.fromCharCode(new Boolean(true)).charCodeAt(0) === 1. Actual: '";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "String";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "fromCharCode";
__n32["raw"] := "\"fromCharCode\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "NewExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Boolean";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := true;
__n37["raw"] := "true";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33 := [ __n34 ];
__n29["arguments"] := __n33;
__n28["object"] := __n29;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "charCodeAt";
__n38["raw"] := "\"charCodeAt\"";
__n28["property"] := __n38;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := 0.;
__n40["raw"] := "0";
__n39 := [ __n40 ];
__n27["arguments"] := __n39;
__n25["right"] := __n27;
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n2["consequent"] := __n19;
__n2["alternate"] := null;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "!==";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "String";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "fromCharCode";
__n48["raw"] := "\"fromCharCode\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n45["callee"] := __n46;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := false;
__n50["raw"] := "false";
__n49 := [ __n50 ];
__n45["arguments"] := __n49;
__n44["object"] := __n45;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "charCodeAt";
__n51["raw"] := "\"charCodeAt\"";
__n44["property"] := __n51;
__n44["computed"] := true;
__n43["callee"] := __n44;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 0.;
__n53["raw"] := "0";
__n52 := [ __n53 ];
__n43["arguments"] := __n52;
__n42["left"] := __n43;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 0.;
__n54["raw"] := "0";
__n42["right"] := __n54;
__n41["test"] := __n42;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ExpressionStatement";
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "$ERROR";
__n58["callee"] := __n59;
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "+";
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#2: String.fromCharCode(false).charCodeAt(0) === 0. Actual: ";
__n62["raw"] := "'#2: String.fromCharCode(false).charCodeAt(0) === 0. Actual: '";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "String";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "fromCharCode";
__n68["raw"] := "\"fromCharCode\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["callee"] := __n66;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := false;
__n70["raw"] := "false";
__n69 := [ __n70 ];
__n65["arguments"] := __n69;
__n64["object"] := __n65;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "charCodeAt";
__n71["raw"] := "\"charCodeAt\"";
__n64["property"] := __n71;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := 0.;
__n73["raw"] := "0";
__n72 := [ __n73 ];
__n63["arguments"] := __n72;
__n61["right"] := __n63;
__n60 := [ __n61 ];
__n58["arguments"] := __n60;
__n57["expression"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n41["consequent"] := __n55;
__n41["alternate"] := null;
__n1 := [ __n2, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n74 := [  ];
__n0["variableDeclarations"] := __n74;
__n75 := [  ];
__n0["functionDeclarations"] := __n75;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}