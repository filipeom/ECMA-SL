function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__matches";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "02134";
__n8["raw"] := "\"02134\"";
__n7 := [ __n8 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__string";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "Boston, MA 02134";
__n13["raw"] := "\"Boston, MA 02134\"";
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "__re";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n18["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n18["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n19 := {  };
__n19["type"] := "RegExp";
__n20 := {  };
__n20["type"] := "Alternative";
__n22 := {  };
__n22["type"] := "Group";
__n22["capturing"] := true;
__n22["number"] := 1.;
__n23 := {  };
__n23["type"] := "Repetition";
__n24 := {  };
__n24["type"] := "CharacterClass";
__n26 := {  };
__n26["type"] := "Char";
__n26["value"] := "\\d";
__n26["kind"] := "meta";
__n26["symbol"] := 'undefined;
__n26["codePoint"] := nan;
__n25 := [ __n26 ];
__n24["expressions"] := __n25;
__n23["expression"] := __n24;
__n27 := {  };
__n27["type"] := "Quantifier";
__n27["kind"] := "Range";
__n27["from"] := 5.;
__n27["to"] := 5.;
__n27["greedy"] := true;
__n23["quantifier"] := __n27;
__n23["parenIndex"] := 1.;
__n23["parenCount"] := 1.;
__n22["expression"] := __n23;
__n28 := {  };
__n28["type"] := "Repetition";
__n29 := {  };
__n29["type"] := "Group";
__n29["capturing"] := true;
__n29["number"] := 2.;
__n30 := {  };
__n30["type"] := "Alternative";
__n32 := {  };
__n32["type"] := "Repetition";
__n33 := {  };
__n33["type"] := "CharacterClass";
__n35 := {  };
__n35["type"] := "Char";
__n35["value"] := "-";
__n35["kind"] := "simple";
__n35["symbol"] := "-";
__n35["codePoint"] := 45.;
__n36 := {  };
__n36["type"] := "Char";
__n36["value"] := " ";
__n36["kind"] := "simple";
__n36["symbol"] := " ";
__n36["codePoint"] := 32.;
__n36["escaped"] := true;
__n34 := [ __n35, __n36 ];
__n33["expressions"] := __n34;
__n32["expression"] := __n33;
__n37 := {  };
__n37["type"] := "Quantifier";
__n37["kind"] := "?";
__n37["greedy"] := true;
__n32["quantifier"] := __n37;
__n32["parenIndex"] := 2.;
__n32["parenCount"] := 1.;
__n38 := {  };
__n38["type"] := "Repetition";
__n39 := {  };
__n39["type"] := "CharacterClass";
__n41 := {  };
__n41["type"] := "Char";
__n41["value"] := "\\d";
__n41["kind"] := "meta";
__n41["symbol"] := 'undefined;
__n41["codePoint"] := nan;
__n40 := [ __n41 ];
__n39["expressions"] := __n40;
__n38["expression"] := __n39;
__n42 := {  };
__n42["type"] := "Quantifier";
__n42["kind"] := "Range";
__n42["from"] := 4.;
__n42["to"] := 4.;
__n42["greedy"] := true;
__n38["quantifier"] := __n42;
__n38["parenIndex"] := 2.;
__n38["parenCount"] := 1.;
__n31 := [ __n32, __n38 ];
__n30["expressions"] := __n31;
__n29["expression"] := __n30;
__n28["expression"] := __n29;
__n43 := {  };
__n43["type"] := "Quantifier";
__n43["kind"] := "?";
__n43["greedy"] := true;
__n28["quantifier"] := __n43;
__n28["parenIndex"] := 2.;
__n28["parenCount"] := 0.;
__n44 := {  };
__n44["type"] := "Assertion";
__n44["kind"] := "$";
__n21 := [ __n22, __n28, __n44 ];
__n20["expressions"] := __n21;
__n19["body"] := __n20;
__n19["flags"] := "g";
__n19["nCaps"] := 2.;
__n18["regex"] := __n19;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "MemberExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__string";
__n49["object"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "match";
__n51["raw"] := "\"match\"";
__n49["property"] := __n51;
__n49["computed"] := true;
__n48["callee"] := __n49;
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__re";
__n52 := [ __n53 ];
__n48["arguments"] := __n52;
__n47["object"] := __n48;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "length";
__n54["raw"] := "\"length\"";
__n47["property"] := __n54;
__n47["computed"] := true;
__n46["left"] := __n47;
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__matches";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "length";
__n57["raw"] := "\"length\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n46["right"] := __n55;
__n45["test"] := __n46;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#1: __string.match(__re).length=== __matches.length. Actual: ";
__n65["raw"] := "'#1: __string.match(__re).length=== __matches.length. Actual: '";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "MemberExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "__string";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "match";
__n70["raw"] := "\"match\"";
__n68["property"] := __n70;
__n68["computed"] := true;
__n67["callee"] := __n68;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__re";
__n71 := [ __n72 ];
__n67["arguments"] := __n71;
__n66["object"] := __n67;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "length";
__n73["raw"] := "\"length\"";
__n66["property"] := __n73;
__n66["computed"] := true;
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n45["consequent"] := __n58;
__n45["alternate"] := null;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n76["computed"] := true;
__n77 := {  };
__n77["type"] := "CallExpression";
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__string";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "match";
__n80["raw"] := "\"match\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n77["callee"] := __n78;
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "__re";
__n81 := [ __n82 ];
__n77["arguments"] := __n81;
__n76["object"] := __n77;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := 0.;
__n83["raw"] := "0";
__n76["property"] := __n83;
__n75["left"] := __n76;
__n84 := {  };
__n84["type"] := "MemberExpression";
__n84["computed"] := true;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__matches";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 0.;
__n86["raw"] := "0";
__n84["property"] := __n86;
__n75["right"] := __n84;
__n74["test"] := __n75;
__n87 := {  };
__n87["type"] := "BlockStatement";
__n89 := {  };
__n89["type"] := "ExpressionStatement";
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "$ERROR";
__n90["callee"] := __n91;
__n93 := {  };
__n93["type"] := "BinaryExpression";
__n93["operator"] := "+";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#2: __string.match(__re)[0]===__matches[0]. Actual: ";
__n94["raw"] := "'#2: __string.match(__re)[0]===__matches[0]. Actual: '";
__n93["left"] := __n94;
__n95 := {  };
__n95["type"] := "MemberExpression";
__n95["computed"] := true;
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "__string";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "match";
__n99["raw"] := "\"match\"";
__n97["property"] := __n99;
__n97["computed"] := true;
__n96["callee"] := __n97;
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "__re";
__n100 := [ __n101 ];
__n96["arguments"] := __n100;
__n95["object"] := __n96;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := 0.;
__n102["raw"] := "0";
__n95["property"] := __n102;
__n93["right"] := __n95;
__n92 := [ __n93 ];
__n90["arguments"] := __n92;
__n89["expression"] := __n90;
__n88 := [ __n89 ];
__n87["body"] := __n88;
__n74["consequent"] := __n87;
__n74["alternate"] := null;
__n1 := [ __n2, __n9, __n14, __n45, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n103 := [ "__matches", "__string", "__re" ];
__n0["variableDeclarations"] := __n103;
__n104 := [  ];
__n0["functionDeclarations"] := __n104;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}