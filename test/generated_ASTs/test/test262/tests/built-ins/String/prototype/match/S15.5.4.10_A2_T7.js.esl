function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__matches";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "02134";
__n8["raw"] := "\"02134\"";
__n7 := [ __n8 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "VariableDeclaration";
__n11 := {  };
__n11["type"] := "VariableDeclarator";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__string";
__n11["id"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "Boston, Mass. 02134";
__n13["raw"] := "\"Boston, Mass. 02134\"";
__n11["init"] := __n13;
__n10 := [ __n11 ];
__n9["declarations"] := __n10;
__n9["kind"] := "var";
__n14 := {  };
__n14["type"] := "IfStatement";
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "!==";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "__string";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "match";
__n20["raw"] := "\"match\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n22["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n22["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n23 := {  };
__n23["type"] := "RegExp";
__n24 := {  };
__n24["type"] := "Alternative";
__n26 := {  };
__n26["type"] := "Group";
__n26["capturing"] := true;
__n26["number"] := 1.;
__n27 := {  };
__n27["type"] := "Repetition";
__n28 := {  };
__n28["type"] := "CharacterClass";
__n30 := {  };
__n30["type"] := "Char";
__n30["value"] := "\\d";
__n30["kind"] := "meta";
__n30["symbol"] := 'undefined;
__n30["codePoint"] := nan;
__n29 := [ __n30 ];
__n28["expressions"] := __n29;
__n27["expression"] := __n28;
__n31 := {  };
__n31["type"] := "Quantifier";
__n31["kind"] := "Range";
__n31["from"] := 5.;
__n31["to"] := 5.;
__n31["greedy"] := true;
__n27["quantifier"] := __n31;
__n27["parenIndex"] := 1.;
__n27["parenCount"] := 1.;
__n26["expression"] := __n27;
__n32 := {  };
__n32["type"] := "Repetition";
__n33 := {  };
__n33["type"] := "Group";
__n33["capturing"] := true;
__n33["number"] := 2.;
__n34 := {  };
__n34["type"] := "Alternative";
__n36 := {  };
__n36["type"] := "Repetition";
__n37 := {  };
__n37["type"] := "CharacterClass";
__n39 := {  };
__n39["type"] := "Char";
__n39["value"] := "-";
__n39["kind"] := "simple";
__n39["symbol"] := "-";
__n39["codePoint"] := 45.;
__n40 := {  };
__n40["type"] := "Char";
__n40["value"] := " ";
__n40["kind"] := "simple";
__n40["symbol"] := " ";
__n40["codePoint"] := 32.;
__n40["escaped"] := true;
__n38 := [ __n39, __n40 ];
__n37["expressions"] := __n38;
__n36["expression"] := __n37;
__n41 := {  };
__n41["type"] := "Quantifier";
__n41["kind"] := "?";
__n41["greedy"] := true;
__n36["quantifier"] := __n41;
__n36["parenIndex"] := 2.;
__n36["parenCount"] := 1.;
__n42 := {  };
__n42["type"] := "Repetition";
__n43 := {  };
__n43["type"] := "CharacterClass";
__n45 := {  };
__n45["type"] := "Char";
__n45["value"] := "\\d";
__n45["kind"] := "meta";
__n45["symbol"] := 'undefined;
__n45["codePoint"] := nan;
__n44 := [ __n45 ];
__n43["expressions"] := __n44;
__n42["expression"] := __n43;
__n46 := {  };
__n46["type"] := "Quantifier";
__n46["kind"] := "Range";
__n46["from"] := 4.;
__n46["to"] := 4.;
__n46["greedy"] := true;
__n42["quantifier"] := __n46;
__n42["parenIndex"] := 2.;
__n42["parenCount"] := 1.;
__n35 := [ __n36, __n42 ];
__n34["expressions"] := __n35;
__n33["expression"] := __n34;
__n32["expression"] := __n33;
__n47 := {  };
__n47["type"] := "Quantifier";
__n47["kind"] := "?";
__n47["greedy"] := true;
__n32["quantifier"] := __n47;
__n32["parenIndex"] := 2.;
__n32["parenCount"] := 0.;
__n48 := {  };
__n48["type"] := "Assertion";
__n48["kind"] := "$";
__n25 := [ __n26, __n32, __n48 ];
__n24["expressions"] := __n25;
__n23["body"] := __n24;
__n23["flags"] := "g";
__n23["nCaps"] := 2.;
__n22["regex"] := __n23;
__n21 := [ __n22 ];
__n17["arguments"] := __n21;
__n16["object"] := __n17;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "length";
__n49["raw"] := "\"length\"";
__n16["property"] := __n49;
__n16["computed"] := true;
__n15["left"] := __n16;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n15["right"] := __n50;
__n14["test"] := __n15;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#1: __string = \"Boston, Mass. 02134\"; __string.match(/([\\d]{5})([-\\ ]?[\\d]{4})?$/g).length=== 1. Actual: ";
__n58["raw"] := "'#1: __string = \"Boston, Mass. 02134\"; __string.match(/([\\\\d]{5})([-\\\\ ]?[\\\\d]{4})?$/g).length=== 1. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__string";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "match";
__n63["raw"] := "\"match\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["callee"] := __n61;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n65["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n65["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n66 := {  };
__n66["type"] := "RegExp";
__n67 := {  };
__n67["type"] := "Alternative";
__n69 := {  };
__n69["type"] := "Group";
__n69["capturing"] := true;
__n69["number"] := 1.;
__n70 := {  };
__n70["type"] := "Repetition";
__n71 := {  };
__n71["type"] := "CharacterClass";
__n73 := {  };
__n73["type"] := "Char";
__n73["value"] := "\\d";
__n73["kind"] := "meta";
__n73["symbol"] := 'undefined;
__n73["codePoint"] := nan;
__n72 := [ __n73 ];
__n71["expressions"] := __n72;
__n70["expression"] := __n71;
__n74 := {  };
__n74["type"] := "Quantifier";
__n74["kind"] := "Range";
__n74["from"] := 5.;
__n74["to"] := 5.;
__n74["greedy"] := true;
__n70["quantifier"] := __n74;
__n70["parenIndex"] := 1.;
__n70["parenCount"] := 1.;
__n69["expression"] := __n70;
__n75 := {  };
__n75["type"] := "Repetition";
__n76 := {  };
__n76["type"] := "Group";
__n76["capturing"] := true;
__n76["number"] := 2.;
__n77 := {  };
__n77["type"] := "Alternative";
__n79 := {  };
__n79["type"] := "Repetition";
__n80 := {  };
__n80["type"] := "CharacterClass";
__n82 := {  };
__n82["type"] := "Char";
__n82["value"] := "-";
__n82["kind"] := "simple";
__n82["symbol"] := "-";
__n82["codePoint"] := 45.;
__n83 := {  };
__n83["type"] := "Char";
__n83["value"] := " ";
__n83["kind"] := "simple";
__n83["symbol"] := " ";
__n83["codePoint"] := 32.;
__n83["escaped"] := true;
__n81 := [ __n82, __n83 ];
__n80["expressions"] := __n81;
__n79["expression"] := __n80;
__n84 := {  };
__n84["type"] := "Quantifier";
__n84["kind"] := "?";
__n84["greedy"] := true;
__n79["quantifier"] := __n84;
__n79["parenIndex"] := 2.;
__n79["parenCount"] := 1.;
__n85 := {  };
__n85["type"] := "Repetition";
__n86 := {  };
__n86["type"] := "CharacterClass";
__n88 := {  };
__n88["type"] := "Char";
__n88["value"] := "\\d";
__n88["kind"] := "meta";
__n88["symbol"] := 'undefined;
__n88["codePoint"] := nan;
__n87 := [ __n88 ];
__n86["expressions"] := __n87;
__n85["expression"] := __n86;
__n89 := {  };
__n89["type"] := "Quantifier";
__n89["kind"] := "Range";
__n89["from"] := 4.;
__n89["to"] := 4.;
__n89["greedy"] := true;
__n85["quantifier"] := __n89;
__n85["parenIndex"] := 2.;
__n85["parenCount"] := 1.;
__n78 := [ __n79, __n85 ];
__n77["expressions"] := __n78;
__n76["expression"] := __n77;
__n75["expression"] := __n76;
__n90 := {  };
__n90["type"] := "Quantifier";
__n90["kind"] := "?";
__n90["greedy"] := true;
__n75["quantifier"] := __n90;
__n75["parenIndex"] := 2.;
__n75["parenCount"] := 0.;
__n91 := {  };
__n91["type"] := "Assertion";
__n91["kind"] := "$";
__n68 := [ __n69, __n75, __n91 ];
__n67["expressions"] := __n68;
__n66["body"] := __n67;
__n66["flags"] := "g";
__n66["nCaps"] := 2.;
__n65["regex"] := __n66;
__n64 := [ __n65 ];
__n60["arguments"] := __n64;
__n59["object"] := __n60;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "length";
__n92["raw"] := "\"length\"";
__n59["property"] := __n92;
__n59["computed"] := true;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n14["consequent"] := __n51;
__n14["alternate"] := null;
__n93 := {  };
__n93["type"] := "IfStatement";
__n94 := {  };
__n94["type"] := "BinaryExpression";
__n94["operator"] := "!==";
__n95 := {  };
__n95["type"] := "MemberExpression";
__n95["computed"] := true;
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "MemberExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "__string";
__n97["object"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "match";
__n99["raw"] := "\"match\"";
__n97["property"] := __n99;
__n97["computed"] := true;
__n96["callee"] := __n97;
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n101["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n101["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n102 := {  };
__n102["type"] := "RegExp";
__n103 := {  };
__n103["type"] := "Alternative";
__n105 := {  };
__n105["type"] := "Group";
__n105["capturing"] := true;
__n105["number"] := 1.;
__n106 := {  };
__n106["type"] := "Repetition";
__n107 := {  };
__n107["type"] := "CharacterClass";
__n109 := {  };
__n109["type"] := "Char";
__n109["value"] := "\\d";
__n109["kind"] := "meta";
__n109["symbol"] := 'undefined;
__n109["codePoint"] := nan;
__n108 := [ __n109 ];
__n107["expressions"] := __n108;
__n106["expression"] := __n107;
__n110 := {  };
__n110["type"] := "Quantifier";
__n110["kind"] := "Range";
__n110["from"] := 5.;
__n110["to"] := 5.;
__n110["greedy"] := true;
__n106["quantifier"] := __n110;
__n106["parenIndex"] := 1.;
__n106["parenCount"] := 1.;
__n105["expression"] := __n106;
__n111 := {  };
__n111["type"] := "Repetition";
__n112 := {  };
__n112["type"] := "Group";
__n112["capturing"] := true;
__n112["number"] := 2.;
__n113 := {  };
__n113["type"] := "Alternative";
__n115 := {  };
__n115["type"] := "Repetition";
__n116 := {  };
__n116["type"] := "CharacterClass";
__n118 := {  };
__n118["type"] := "Char";
__n118["value"] := "-";
__n118["kind"] := "simple";
__n118["symbol"] := "-";
__n118["codePoint"] := 45.;
__n119 := {  };
__n119["type"] := "Char";
__n119["value"] := " ";
__n119["kind"] := "simple";
__n119["symbol"] := " ";
__n119["codePoint"] := 32.;
__n119["escaped"] := true;
__n117 := [ __n118, __n119 ];
__n116["expressions"] := __n117;
__n115["expression"] := __n116;
__n120 := {  };
__n120["type"] := "Quantifier";
__n120["kind"] := "?";
__n120["greedy"] := true;
__n115["quantifier"] := __n120;
__n115["parenIndex"] := 2.;
__n115["parenCount"] := 1.;
__n121 := {  };
__n121["type"] := "Repetition";
__n122 := {  };
__n122["type"] := "CharacterClass";
__n124 := {  };
__n124["type"] := "Char";
__n124["value"] := "\\d";
__n124["kind"] := "meta";
__n124["symbol"] := 'undefined;
__n124["codePoint"] := nan;
__n123 := [ __n124 ];
__n122["expressions"] := __n123;
__n121["expression"] := __n122;
__n125 := {  };
__n125["type"] := "Quantifier";
__n125["kind"] := "Range";
__n125["from"] := 4.;
__n125["to"] := 4.;
__n125["greedy"] := true;
__n121["quantifier"] := __n125;
__n121["parenIndex"] := 2.;
__n121["parenCount"] := 1.;
__n114 := [ __n115, __n121 ];
__n113["expressions"] := __n114;
__n112["expression"] := __n113;
__n111["expression"] := __n112;
__n126 := {  };
__n126["type"] := "Quantifier";
__n126["kind"] := "?";
__n126["greedy"] := true;
__n111["quantifier"] := __n126;
__n111["parenIndex"] := 2.;
__n111["parenCount"] := 0.;
__n127 := {  };
__n127["type"] := "Assertion";
__n127["kind"] := "$";
__n104 := [ __n105, __n111, __n127 ];
__n103["expressions"] := __n104;
__n102["body"] := __n103;
__n102["flags"] := "g";
__n102["nCaps"] := 2.;
__n101["regex"] := __n102;
__n100 := [ __n101 ];
__n96["arguments"] := __n100;
__n95["object"] := __n96;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := 0.;
__n128["raw"] := "0";
__n95["property"] := __n128;
__n94["left"] := __n95;
__n129 := {  };
__n129["type"] := "MemberExpression";
__n129["computed"] := true;
__n130 := {  };
__n130["type"] := "Identifier";
__n130["name"] := "__matches";
__n129["object"] := __n130;
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := 0.;
__n131["raw"] := "0";
__n129["property"] := __n131;
__n94["right"] := __n129;
__n93["test"] := __n94;
__n132 := {  };
__n132["type"] := "BlockStatement";
__n134 := {  };
__n134["type"] := "ExpressionStatement";
__n135 := {  };
__n135["type"] := "CallExpression";
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "$ERROR";
__n135["callee"] := __n136;
__n138 := {  };
__n138["type"] := "BinaryExpression";
__n138["operator"] := "+";
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "#2: __matches=[\"02134\"]; __string = \"Boston, Mass. 02134\"; __string.match(/([\\d]{5})([-\\ ]?[\\d]{4})?$/g)[0]===__matches[0]. Actual: ";
__n139["raw"] := "'#2: __matches=[\"02134\"]; __string = \"Boston, Mass. 02134\"; __string.match(/([\\\\d]{5})([-\\\\ ]?[\\\\d]{4})?$/g)[0]===__matches[0]. Actual: '";
__n138["left"] := __n139;
__n140 := {  };
__n140["type"] := "MemberExpression";
__n140["computed"] := true;
__n141 := {  };
__n141["type"] := "CallExpression";
__n142 := {  };
__n142["type"] := "MemberExpression";
__n143 := {  };
__n143["type"] := "Identifier";
__n143["name"] := "__string";
__n142["object"] := __n143;
__n144 := {  };
__n144["type"] := "Literal";
__n144["value"] := "match";
__n144["raw"] := "\"match\"";
__n142["property"] := __n144;
__n142["computed"] := true;
__n141["callee"] := __n142;
__n146 := {  };
__n146["type"] := "Literal";
__n146["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n146["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/g";
__n146["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n147 := {  };
__n147["type"] := "RegExp";
__n148 := {  };
__n148["type"] := "Alternative";
__n150 := {  };
__n150["type"] := "Group";
__n150["capturing"] := true;
__n150["number"] := 1.;
__n151 := {  };
__n151["type"] := "Repetition";
__n152 := {  };
__n152["type"] := "CharacterClass";
__n154 := {  };
__n154["type"] := "Char";
__n154["value"] := "\\d";
__n154["kind"] := "meta";
__n154["symbol"] := 'undefined;
__n154["codePoint"] := nan;
__n153 := [ __n154 ];
__n152["expressions"] := __n153;
__n151["expression"] := __n152;
__n155 := {  };
__n155["type"] := "Quantifier";
__n155["kind"] := "Range";
__n155["from"] := 5.;
__n155["to"] := 5.;
__n155["greedy"] := true;
__n151["quantifier"] := __n155;
__n151["parenIndex"] := 1.;
__n151["parenCount"] := 1.;
__n150["expression"] := __n151;
__n156 := {  };
__n156["type"] := "Repetition";
__n157 := {  };
__n157["type"] := "Group";
__n157["capturing"] := true;
__n157["number"] := 2.;
__n158 := {  };
__n158["type"] := "Alternative";
__n160 := {  };
__n160["type"] := "Repetition";
__n161 := {  };
__n161["type"] := "CharacterClass";
__n163 := {  };
__n163["type"] := "Char";
__n163["value"] := "-";
__n163["kind"] := "simple";
__n163["symbol"] := "-";
__n163["codePoint"] := 45.;
__n164 := {  };
__n164["type"] := "Char";
__n164["value"] := " ";
__n164["kind"] := "simple";
__n164["symbol"] := " ";
__n164["codePoint"] := 32.;
__n164["escaped"] := true;
__n162 := [ __n163, __n164 ];
__n161["expressions"] := __n162;
__n160["expression"] := __n161;
__n165 := {  };
__n165["type"] := "Quantifier";
__n165["kind"] := "?";
__n165["greedy"] := true;
__n160["quantifier"] := __n165;
__n160["parenIndex"] := 2.;
__n160["parenCount"] := 1.;
__n166 := {  };
__n166["type"] := "Repetition";
__n167 := {  };
__n167["type"] := "CharacterClass";
__n169 := {  };
__n169["type"] := "Char";
__n169["value"] := "\\d";
__n169["kind"] := "meta";
__n169["symbol"] := 'undefined;
__n169["codePoint"] := nan;
__n168 := [ __n169 ];
__n167["expressions"] := __n168;
__n166["expression"] := __n167;
__n170 := {  };
__n170["type"] := "Quantifier";
__n170["kind"] := "Range";
__n170["from"] := 4.;
__n170["to"] := 4.;
__n170["greedy"] := true;
__n166["quantifier"] := __n170;
__n166["parenIndex"] := 2.;
__n166["parenCount"] := 1.;
__n159 := [ __n160, __n166 ];
__n158["expressions"] := __n159;
__n157["expression"] := __n158;
__n156["expression"] := __n157;
__n171 := {  };
__n171["type"] := "Quantifier";
__n171["kind"] := "?";
__n171["greedy"] := true;
__n156["quantifier"] := __n171;
__n156["parenIndex"] := 2.;
__n156["parenCount"] := 0.;
__n172 := {  };
__n172["type"] := "Assertion";
__n172["kind"] := "$";
__n149 := [ __n150, __n156, __n172 ];
__n148["expressions"] := __n149;
__n147["body"] := __n148;
__n147["flags"] := "g";
__n147["nCaps"] := 2.;
__n146["regex"] := __n147;
__n145 := [ __n146 ];
__n141["arguments"] := __n145;
__n140["object"] := __n141;
__n173 := {  };
__n173["type"] := "Literal";
__n173["value"] := 0.;
__n173["raw"] := "0";
__n140["property"] := __n173;
__n138["right"] := __n140;
__n137 := [ __n138 ];
__n135["arguments"] := __n137;
__n134["expression"] := __n135;
__n133 := [ __n134 ];
__n132["body"] := __n133;
__n93["consequent"] := __n132;
__n93["alternate"] := null;
__n1 := [ __n2, __n9, __n14, __n93 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n174 := [ "__matches", "__string" ];
__n0["variableDeclarations"] := __n174;
__n175 := [  ];
__n0["functionDeclarations"] := __n175;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}