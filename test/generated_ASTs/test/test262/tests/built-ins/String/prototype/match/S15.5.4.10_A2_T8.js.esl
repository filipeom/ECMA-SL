function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__matches";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ArrayExpression";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "02134";
__n8["raw"] := "\"02134\"";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "02134";
__n9["raw"] := "\"02134\"";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "undefined";
__n7 := [ __n8, __n9, __n10 ];
__n6["elements"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__re";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/";
__n15["raw"] := "/([\\d]{5})([-\\ ]?[\\d]{4})?$/";
__n15["source"] := "([\\d]{5})([-\\ ]?[\\d]{4})?$";
__n16 := {  };
__n16["type"] := "RegExp";
__n17 := {  };
__n17["type"] := "Alternative";
__n19 := {  };
__n19["type"] := "Group";
__n19["capturing"] := true;
__n19["number"] := 1.;
__n20 := {  };
__n20["type"] := "Repetition";
__n21 := {  };
__n21["type"] := "CharacterClass";
__n23 := {  };
__n23["type"] := "Char";
__n23["value"] := "\\d";
__n23["kind"] := "meta";
__n23["symbol"] := 'undefined;
__n23["codePoint"] := nan;
__n22 := [ __n23 ];
__n21["expressions"] := __n22;
__n20["expression"] := __n21;
__n24 := {  };
__n24["type"] := "Quantifier";
__n24["kind"] := "Range";
__n24["from"] := 5.;
__n24["to"] := 5.;
__n24["greedy"] := true;
__n20["quantifier"] := __n24;
__n20["parenIndex"] := 1.;
__n20["parenCount"] := 1.;
__n19["expression"] := __n20;
__n25 := {  };
__n25["type"] := "Repetition";
__n26 := {  };
__n26["type"] := "Group";
__n26["capturing"] := true;
__n26["number"] := 2.;
__n27 := {  };
__n27["type"] := "Alternative";
__n29 := {  };
__n29["type"] := "Repetition";
__n30 := {  };
__n30["type"] := "CharacterClass";
__n32 := {  };
__n32["type"] := "Char";
__n32["value"] := "-";
__n32["kind"] := "simple";
__n32["symbol"] := "-";
__n32["codePoint"] := 45.;
__n33 := {  };
__n33["type"] := "Char";
__n33["value"] := " ";
__n33["kind"] := "simple";
__n33["symbol"] := " ";
__n33["codePoint"] := 32.;
__n33["escaped"] := true;
__n31 := [ __n32, __n33 ];
__n30["expressions"] := __n31;
__n29["expression"] := __n30;
__n34 := {  };
__n34["type"] := "Quantifier";
__n34["kind"] := "?";
__n34["greedy"] := true;
__n29["quantifier"] := __n34;
__n29["parenIndex"] := 2.;
__n29["parenCount"] := 1.;
__n35 := {  };
__n35["type"] := "Repetition";
__n36 := {  };
__n36["type"] := "CharacterClass";
__n38 := {  };
__n38["type"] := "Char";
__n38["value"] := "\\d";
__n38["kind"] := "meta";
__n38["symbol"] := 'undefined;
__n38["codePoint"] := nan;
__n37 := [ __n38 ];
__n36["expressions"] := __n37;
__n35["expression"] := __n36;
__n39 := {  };
__n39["type"] := "Quantifier";
__n39["kind"] := "Range";
__n39["from"] := 4.;
__n39["to"] := 4.;
__n39["greedy"] := true;
__n35["quantifier"] := __n39;
__n35["parenIndex"] := 2.;
__n35["parenCount"] := 1.;
__n28 := [ __n29, __n35 ];
__n27["expressions"] := __n28;
__n26["expression"] := __n27;
__n25["expression"] := __n26;
__n40 := {  };
__n40["type"] := "Quantifier";
__n40["kind"] := "?";
__n40["greedy"] := true;
__n25["quantifier"] := __n40;
__n25["parenIndex"] := 2.;
__n25["parenCount"] := 0.;
__n41 := {  };
__n41["type"] := "Assertion";
__n41["kind"] := "$";
__n18 := [ __n19, __n25, __n41 ];
__n17["expressions"] := __n18;
__n16["body"] := __n17;
__n16["flags"] := "";
__n16["nCaps"] := 2.;
__n15["regex"] := __n16;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "MemberExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__re";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "lastIndex";
__n46["raw"] := "\"lastIndex\"";
__n44["property"] := __n46;
__n44["computed"] := true;
__n43["left"] := __n44;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 0.;
__n47["raw"] := "0";
__n43["right"] := __n47;
__n42["expression"] := __n43;
__n48 := {  };
__n48["type"] := "VariableDeclaration";
__n50 := {  };
__n50["type"] := "VariableDeclarator";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__string";
__n50["id"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "Boston, MA 02134";
__n52["raw"] := "\"Boston, MA 02134\"";
__n50["init"] := __n52;
__n49 := [ __n50 ];
__n48["declarations"] := __n49;
__n48["kind"] := "var";
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__string";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "match";
__n59["raw"] := "\"match\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__re";
__n60 := [ __n61 ];
__n56["arguments"] := __n60;
__n55["object"] := __n56;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "length";
__n62["raw"] := "\"length\"";
__n55["property"] := __n62;
__n55["computed"] := true;
__n54["left"] := __n55;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 3.;
__n63["raw"] := "3";
__n54["right"] := __n63;
__n53["test"] := __n54;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#1: __string = \"Boston, MA 02134\"; __re = /([d]{5})([- ]?[d]{4})?$/; __string.match(__re).length=== 3. Actual: ";
__n71["raw"] := "'#1: __string = \"Boston, MA 02134\"; __re = /([\\d]{5})([-\\ ]?[\\d]{4})?$/; __string.match(__re).length=== 3. Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "MemberExpression";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "MemberExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "__string";
__n74["object"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "match";
__n76["raw"] := "\"match\"";
__n74["property"] := __n76;
__n74["computed"] := true;
__n73["callee"] := __n74;
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "__re";
__n77 := [ __n78 ];
__n73["arguments"] := __n77;
__n72["object"] := __n73;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "length";
__n79["raw"] := "\"length\"";
__n72["property"] := __n79;
__n72["computed"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n53["consequent"] := __n64;
__n53["alternate"] := null;
__n80 := {  };
__n80["type"] := "IfStatement";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__string";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "match";
__n86["raw"] := "\"match\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n83["callee"] := __n84;
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "__re";
__n87 := [ __n88 ];
__n83["arguments"] := __n87;
__n82["object"] := __n83;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "index";
__n89["raw"] := "\"index\"";
__n82["property"] := __n89;
__n82["computed"] := true;
__n81["left"] := __n82;
__n90 := {  };
__n90["type"] := "CallExpression";
__n91 := {  };
__n91["type"] := "MemberExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "__string";
__n91["object"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := "lastIndexOf";
__n93["raw"] := "\"lastIndexOf\"";
__n91["property"] := __n93;
__n91["computed"] := true;
__n90["callee"] := __n91;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "0";
__n95["raw"] := "\"0\"";
__n94 := [ __n95 ];
__n90["arguments"] := __n94;
__n81["right"] := __n90;
__n80["test"] := __n81;
__n96 := {  };
__n96["type"] := "BlockStatement";
__n98 := {  };
__n98["type"] := "ExpressionStatement";
__n99 := {  };
__n99["type"] := "CallExpression";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "$ERROR";
__n99["callee"] := __n100;
__n102 := {  };
__n102["type"] := "BinaryExpression";
__n102["operator"] := "+";
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "#2: __string = \"Boston, MA 02134\"; __re = /([d]{5})([- ]?[d]{4})?$/; __re.lastIndex = 0; __string.match(__re).index ===__string.lastIndexOf(\"0\"). Actual: ";
__n103["raw"] := "'#2: __string = \"Boston, MA 02134\"; __re = /([\\d]{5})([-\\ ]?[\\d]{4})?$/; __re.lastIndex = 0; __string.match(__re).index ===__string.lastIndexOf(\"0\"). Actual: '";
__n102["left"] := __n103;
__n104 := {  };
__n104["type"] := "MemberExpression";
__n105 := {  };
__n105["type"] := "CallExpression";
__n106 := {  };
__n106["type"] := "MemberExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "__string";
__n106["object"] := __n107;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "match";
__n108["raw"] := "\"match\"";
__n106["property"] := __n108;
__n106["computed"] := true;
__n105["callee"] := __n106;
__n110 := {  };
__n110["type"] := "Identifier";
__n110["name"] := "__re";
__n109 := [ __n110 ];
__n105["arguments"] := __n109;
__n104["object"] := __n105;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "index";
__n111["raw"] := "\"index\"";
__n104["property"] := __n111;
__n104["computed"] := true;
__n102["right"] := __n104;
__n101 := [ __n102 ];
__n99["arguments"] := __n101;
__n98["expression"] := __n99;
__n97 := [ __n98 ];
__n96["body"] := __n97;
__n80["consequent"] := __n96;
__n80["alternate"] := null;
__n112 := {  };
__n112["type"] := "ForStatement";
__n113 := {  };
__n113["type"] := "VariableDeclaration";
__n115 := {  };
__n115["type"] := "VariableDeclarator";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "mi";
__n115["id"] := __n116;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 0.;
__n117["raw"] := "0";
__n115["init"] := __n117;
__n114 := [ __n115 ];
__n113["declarations"] := __n114;
__n113["kind"] := "var";
__n112["init"] := __n113;
__n118 := {  };
__n118["type"] := "BinaryExpression";
__n118["operator"] := "<";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "mi";
__n118["left"] := __n119;
__n120 := {  };
__n120["type"] := "MemberExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "__matches";
__n120["object"] := __n121;
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "length";
__n122["raw"] := "\"length\"";
__n120["property"] := __n122;
__n120["computed"] := true;
__n118["right"] := __n120;
__n112["test"] := __n118;
__n123 := {  };
__n123["type"] := "UpdateExpression";
__n123["operator"] := "++";
__n124 := {  };
__n124["type"] := "Identifier";
__n124["name"] := "mi";
__n123["argument"] := __n124;
__n123["prefix"] := false;
__n112["update"] := __n123;
__n125 := {  };
__n125["type"] := "BlockStatement";
__n127 := {  };
__n127["type"] := "IfStatement";
__n128 := {  };
__n128["type"] := "BinaryExpression";
__n128["operator"] := "!==";
__n129 := {  };
__n129["type"] := "MemberExpression";
__n129["computed"] := true;
__n130 := {  };
__n130["type"] := "CallExpression";
__n131 := {  };
__n131["type"] := "MemberExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "__string";
__n131["object"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "match";
__n133["raw"] := "\"match\"";
__n131["property"] := __n133;
__n131["computed"] := true;
__n130["callee"] := __n131;
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "__re";
__n134 := [ __n135 ];
__n130["arguments"] := __n134;
__n129["object"] := __n130;
__n136 := {  };
__n136["type"] := "Identifier";
__n136["name"] := "mi";
__n129["property"] := __n136;
__n128["left"] := __n129;
__n137 := {  };
__n137["type"] := "MemberExpression";
__n137["computed"] := true;
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "__matches";
__n137["object"] := __n138;
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "mi";
__n137["property"] := __n139;
__n128["right"] := __n137;
__n127["test"] := __n128;
__n140 := {  };
__n140["type"] := "BlockStatement";
__n142 := {  };
__n142["type"] := "ExpressionStatement";
__n143 := {  };
__n143["type"] := "CallExpression";
__n144 := {  };
__n144["type"] := "Identifier";
__n144["name"] := "$ERROR";
__n143["callee"] := __n144;
__n146 := {  };
__n146["type"] := "BinaryExpression";
__n146["operator"] := "+";
__n147 := {  };
__n147["type"] := "BinaryExpression";
__n147["operator"] := "+";
__n148 := {  };
__n148["type"] := "BinaryExpression";
__n148["operator"] := "+";
__n149 := {  };
__n149["type"] := "BinaryExpression";
__n149["operator"] := "+";
__n150 := {  };
__n150["type"] := "BinaryExpression";
__n150["operator"] := "+";
__n151 := {  };
__n151["type"] := "BinaryExpression";
__n151["operator"] := "+";
__n152 := {  };
__n152["type"] := "BinaryExpression";
__n152["operator"] := "+";
__n153 := {  };
__n153["type"] := "Literal";
__n153["value"] := "#3.";
__n153["raw"] := "'#3.'";
__n152["left"] := __n153;
__n154 := {  };
__n154["type"] := "Identifier";
__n154["name"] := "mi";
__n152["right"] := __n154;
__n151["left"] := __n152;
__n155 := {  };
__n155["type"] := "Literal";
__n155["value"] := ": __string = \"Boston, MA 02134\"; __re = /([d]{5})([- ]?[d]{4})?$/; __matches=[\"02134\", \"02134\", undefined]; __string.match(__re)[";
__n155["raw"] := "': __string = \"Boston, MA 02134\"; __re = /([\\d]{5})([-\\ ]?[\\d]{4})?$/; __matches=[\"02134\", \"02134\", undefined]; __string.match(__re)['";
__n151["right"] := __n155;
__n150["left"] := __n151;
__n156 := {  };
__n156["type"] := "Identifier";
__n156["name"] := "mi";
__n150["right"] := __n156;
__n149["left"] := __n150;
__n157 := {  };
__n157["type"] := "Literal";
__n157["value"] := "]===__matches[";
__n157["raw"] := "']===__matches['";
__n149["right"] := __n157;
__n148["left"] := __n149;
__n158 := {  };
__n158["type"] := "Identifier";
__n158["name"] := "mi";
__n148["right"] := __n158;
__n147["left"] := __n148;
__n159 := {  };
__n159["type"] := "Literal";
__n159["value"] := "]. Actual: ";
__n159["raw"] := "']. Actual: '";
__n147["right"] := __n159;
__n146["left"] := __n147;
__n160 := {  };
__n160["type"] := "MemberExpression";
__n160["computed"] := true;
__n161 := {  };
__n161["type"] := "CallExpression";
__n162 := {  };
__n162["type"] := "MemberExpression";
__n163 := {  };
__n163["type"] := "Identifier";
__n163["name"] := "__string";
__n162["object"] := __n163;
__n164 := {  };
__n164["type"] := "Literal";
__n164["value"] := "match";
__n164["raw"] := "\"match\"";
__n162["property"] := __n164;
__n162["computed"] := true;
__n161["callee"] := __n162;
__n166 := {  };
__n166["type"] := "Identifier";
__n166["name"] := "__re";
__n165 := [ __n166 ];
__n161["arguments"] := __n165;
__n160["object"] := __n161;
__n167 := {  };
__n167["type"] := "Identifier";
__n167["name"] := "mi";
__n160["property"] := __n167;
__n146["right"] := __n160;
__n145 := [ __n146 ];
__n143["arguments"] := __n145;
__n142["expression"] := __n143;
__n141 := [ __n142 ];
__n140["body"] := __n141;
__n127["consequent"] := __n140;
__n127["alternate"] := null;
__n126 := [ __n127 ];
__n125["body"] := __n126;
__n112["body"] := __n125;
__n1 := [ __n2, __n11, __n42, __n48, __n53, __n80, __n112 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n168 := [ "__matches", "__re", "__string", "mi" ];
__n0["variableDeclarations"] := __n168;
__n169 := [  ];
__n0["functionDeclarations"] := __n169;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}