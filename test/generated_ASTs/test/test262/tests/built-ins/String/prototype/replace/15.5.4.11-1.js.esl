function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "retVal";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "MemberExpression";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "x";
__n13["raw"] := "'x'";
__n12["object"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "replace";
__n14["raw"] := "\"replace\"";
__n12["property"] := __n14;
__n12["computed"] := true;
__n11["callee"] := __n12;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "/x/";
__n16["raw"] := "/x/";
__n16["source"] := "x";
__n17 := {  };
__n17["type"] := "RegExp";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "x";
__n18["kind"] := "simple";
__n18["symbol"] := "x";
__n18["codePoint"] := 120.;
__n17["body"] := __n18;
__n17["flags"] := "";
__n17["nCaps"] := 0.;
__n16["regex"] := __n17;
__n19 := {  };
__n19["type"] := "FunctionExpression";
__n19["id"] := null;
__n20 := [  ];
__n19["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "===";
__n25 := {  };
__n25["type"] := "ThisExpression";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "global";
__n24["right"] := __n26;
__n23["test"] := __n24;
__n27 := {  };
__n27["type"] := "BlockStatement";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "y";
__n30["raw"] := "'y'";
__n29["argument"] := __n30;
__n28 := [ __n29 ];
__n27["body"] := __n28;
__n23["consequent"] := __n27;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "z";
__n34["raw"] := "'z'";
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n23["alternate"] := __n31;
__n22 := [ __n23 ];
__n21["body"] := __n22;
__n35 := [  ];
__n21["variableDeclarations"] := __n35;
__n36 := [  ];
__n21["functionDeclarations"] := __n36;
__n21["codeType"] := "function";
__n21["strict"] := false;
__n19["body"] := __n21;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n15 := [ __n16, __n19 ];
__n11["arguments"] := __n15;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "assert";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "sameValue";
__n41["raw"] := "\"sameValue\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "retVal";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "y";
__n44["raw"] := "'y'";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "retVal";
__n45["raw"] := "'retVal'";
__n42 := [ __n43, __n44, __n45 ];
__n38["arguments"] := __n42;
__n37["expression"] := __n38;
__n1 := [ __n2, __n7, __n37 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "global", "retVal" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}