function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "She sells seashells by the seashore.";
__n6["raw"] := "'She sells seashells by the seashore.'";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__re";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "/sh/";
__n11["raw"] := "/sh/";
__n11["source"] := "sh";
__n12 := {  };
__n12["type"] := "RegExp";
__n13 := {  };
__n13["type"] := "Alternative";
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "s";
__n15["kind"] := "simple";
__n15["symbol"] := "s";
__n15["codePoint"] := 115.;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "h";
__n16["kind"] := "simple";
__n16["symbol"] := "h";
__n16["codePoint"] := 104.;
__n14 := [ __n15, __n16 ];
__n13["expressions"] := __n14;
__n12["body"] := __n13;
__n12["flags"] := "";
__n12["nCaps"] := 0.;
__n11["regex"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__str";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "replace";
__n22["raw"] := "\"replace\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["callee"] := __n20;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__re";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "+";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "$'";
__n26["raw"] := "\"$'\"";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "sch";
__n27["raw"] := "'sch'";
__n25["right"] := __n27;
__n23 := [ __n24, __n25 ];
__n19["arguments"] := __n23;
__n18["left"] := __n19;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "She sells seaells by the seashore.schells by the seashore.";
__n28["raw"] := "'She sells seaells by the seashore.schells by the seashore.'";
__n18["right"] := __n28;
__n17["test"] := __n18;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#1: var __str = 'She sells seashells by the seashore.'; var __re = /sh/; __str.replace(__re, \"$'\" + 'sch')==='She sells seaells by the seashore.schells by the seashore.'. Actual: ";
__n36["raw"] := "'#1: var __str = \\'She sells seashells by the seashore.\\'; var __re = /sh/; __str.replace(__re, \"$\\'\" + \\'sch\\')===\\'She sells seaells by the seashore.schells by the seashore.\\'. Actual: '";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__str";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "replace";
__n40["raw"] := "\"replace\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["callee"] := __n38;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "__re";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "$'";
__n44["raw"] := "\"$'\"";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "sch";
__n45["raw"] := "'sch'";
__n43["right"] := __n45;
__n41 := [ __n42, __n43 ];
__n37["arguments"] := __n41;
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n17["consequent"] := __n29;
__n17["alternate"] := null;
__n1 := [ __n2, __n7, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "__str", "__re" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}