function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "uid=31";
__n6["raw"] := "'uid=31'";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__re";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "/(uid=)(\\d+)/";
__n11["raw"] := "/(uid=)(\\d+)/";
__n11["source"] := "(uid=)(\\d+)";
__n12 := {  };
__n12["type"] := "RegExp";
__n13 := {  };
__n13["type"] := "Alternative";
__n15 := {  };
__n15["type"] := "Group";
__n15["capturing"] := true;
__n15["number"] := 1.;
__n16 := {  };
__n16["type"] := "Alternative";
__n18 := {  };
__n18["type"] := "Char";
__n18["value"] := "u";
__n18["kind"] := "simple";
__n18["symbol"] := "u";
__n18["codePoint"] := 117.;
__n19 := {  };
__n19["type"] := "Char";
__n19["value"] := "i";
__n19["kind"] := "simple";
__n19["symbol"] := "i";
__n19["codePoint"] := 105.;
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "d";
__n20["kind"] := "simple";
__n20["symbol"] := "d";
__n20["codePoint"] := 100.;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "=";
__n21["kind"] := "simple";
__n21["symbol"] := "=";
__n21["codePoint"] := 61.;
__n17 := [ __n18, __n19, __n20, __n21 ];
__n16["expressions"] := __n17;
__n15["expression"] := __n16;
__n22 := {  };
__n22["type"] := "Group";
__n22["capturing"] := true;
__n22["number"] := 2.;
__n23 := {  };
__n23["type"] := "Repetition";
__n24 := {  };
__n24["type"] := "Char";
__n24["value"] := "\\d";
__n24["kind"] := "meta";
__n24["symbol"] := 'undefined;
__n24["codePoint"] := nan;
__n23["expression"] := __n24;
__n25 := {  };
__n25["type"] := "Quantifier";
__n25["kind"] := "+";
__n25["greedy"] := true;
__n23["quantifier"] := __n25;
__n23["parenIndex"] := 2.;
__n23["parenCount"] := 1.;
__n22["expression"] := __n23;
__n14 := [ __n15, __n22 ];
__n13["expressions"] := __n14;
__n12["body"] := __n13;
__n12["flags"] := "";
__n12["nCaps"] := 2.;
__n11["regex"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "__str";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "replace";
__n31["raw"] := "\"replace\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__re";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "+";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "$11";
__n35["raw"] := "\"$11\"";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "A15";
__n36["raw"] := "'A15'";
__n34["right"] := __n36;
__n32 := [ __n33, __n34 ];
__n28["arguments"] := __n32;
__n27["left"] := __n28;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "uid=1A15";
__n37["raw"] := "'uid=1A15'";
__n27["right"] := __n37;
__n26["test"] := __n27;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "+";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "#1: var __str = 'uid=31'; var __re = /(uid=)(d+)/; __str.replace(__re, \"$11\" + 'A15')==='uid=1A15' . Actual: ";
__n45["raw"] := "'#1: var __str = \\'uid=31\\'; var __re = /(uid=)(\\d+)/; __str.replace(__re, \"$11\" + \\'A15\\')===\\'uid=1A15\\' . Actual: '";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "CallExpression";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__str";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "replace";
__n49["raw"] := "\"replace\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["callee"] := __n47;
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__re";
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "$11";
__n53["raw"] := "\"$11\"";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "A15";
__n54["raw"] := "'A15'";
__n52["right"] := __n54;
__n50 := [ __n51, __n52 ];
__n46["arguments"] := __n50;
__n44["right"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n26["consequent"] := __n38;
__n26["alternate"] := null;
__n1 := [ __n2, __n7, __n26 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n55 := [ "__str", "__re" ];
__n0["variableDeclarations"] := __n55;
__n56 := [  ];
__n0["functionDeclarations"] := __n56;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}