function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "aBc12 dEf34";
__n6["raw"] := "\"aBc12 dEf34\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__pattern";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "/([a-z]+)([0-9]+)/ig";
__n11["raw"] := "/([a-z]+)([0-9]+)/ig";
__n11["source"] := "([a-z]+)([0-9]+)";
__n12 := {  };
__n12["type"] := "RegExp";
__n13 := {  };
__n13["type"] := "Alternative";
__n15 := {  };
__n15["type"] := "Group";
__n15["capturing"] := true;
__n15["number"] := 1.;
__n16 := {  };
__n16["type"] := "Repetition";
__n17 := {  };
__n17["type"] := "CharacterClass";
__n19 := {  };
__n19["type"] := "ClassRange";
__n20 := {  };
__n20["type"] := "Char";
__n20["value"] := "a";
__n20["kind"] := "simple";
__n20["symbol"] := "a";
__n20["codePoint"] := 97.;
__n19["from"] := __n20;
__n21 := {  };
__n21["type"] := "Char";
__n21["value"] := "z";
__n21["kind"] := "simple";
__n21["symbol"] := "z";
__n21["codePoint"] := 122.;
__n19["to"] := __n21;
__n18 := [ __n19 ];
__n17["expressions"] := __n18;
__n16["expression"] := __n17;
__n22 := {  };
__n22["type"] := "Quantifier";
__n22["kind"] := "+";
__n22["greedy"] := true;
__n16["quantifier"] := __n22;
__n16["parenIndex"] := 1.;
__n16["parenCount"] := 1.;
__n15["expression"] := __n16;
__n23 := {  };
__n23["type"] := "Group";
__n23["capturing"] := true;
__n23["number"] := 2.;
__n24 := {  };
__n24["type"] := "Repetition";
__n25 := {  };
__n25["type"] := "CharacterClass";
__n27 := {  };
__n27["type"] := "ClassRange";
__n28 := {  };
__n28["type"] := "Char";
__n28["value"] := "0";
__n28["kind"] := "simple";
__n28["symbol"] := "0";
__n28["codePoint"] := 48.;
__n27["from"] := __n28;
__n29 := {  };
__n29["type"] := "Char";
__n29["value"] := "9";
__n29["kind"] := "simple";
__n29["symbol"] := "9";
__n29["codePoint"] := 57.;
__n27["to"] := __n29;
__n26 := [ __n27 ];
__n25["expressions"] := __n26;
__n24["expression"] := __n25;
__n30 := {  };
__n30["type"] := "Quantifier";
__n30["kind"] := "+";
__n30["greedy"] := true;
__n24["quantifier"] := __n30;
__n24["parenIndex"] := 2.;
__n24["parenCount"] := 1.;
__n23["expression"] := __n24;
__n14 := [ __n15, __n23 ];
__n13["expressions"] := __n14;
__n12["body"] := __n13;
__n12["flags"] := "gi";
__n12["nCaps"] := 2.;
__n11["regex"] := __n12;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "!==";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__str";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "replace";
__n36["raw"] := "\"replace\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "__pattern";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__replFN";
__n37 := [ __n38, __n39 ];
__n33["arguments"] := __n37;
__n32["left"] := __n33;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "12aBc 34dEf";
__n40["raw"] := "'12aBc 34dEf'";
__n32["right"] := __n40;
__n31["test"] := __n32;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "$ERROR";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "+";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#1: var __str = \"aBc12 dEf34\"; var __pattern = /([a-z]+)([0-9]+)/ig; function __replFN() {return arguments[2] + arguments[1];}; __str.replace(__pattern, __replFN)==='12aBc 34dEf'. Actual: ";
__n48["raw"] := "'#1: var __str = \"aBc12 dEf34\"; var __pattern = /([a-z]+)([0-9]+)/ig; function __replFN() {return arguments[2] + arguments[1];}; __str.replace(__pattern, __replFN)===\\'12aBc 34dEf\\'. Actual: '";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__str";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "replace";
__n52["raw"] := "\"replace\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["callee"] := __n50;
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__pattern";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "__replFN";
__n53 := [ __n54, __n55 ];
__n49["arguments"] := __n53;
__n47["right"] := __n49;
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n31["consequent"] := __n41;
__n31["alternate"] := null;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__replFN";
__n56["expression"] := __n57;
__n1 := [ __n2, __n7, __n31, __n56 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n58 := [ "__str", "__pattern" ];
__n0["variableDeclarations"] := __n58;
__n60 := {  };
__n60["type"] := "FunctionDeclaration";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__replFN";
__n60["id"] := __n61;
__n62 := [  ];
__n60["params"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "ReturnStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "+";
__n67 := {  };
__n67["type"] := "MemberExpression";
__n67["computed"] := true;
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "arguments";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := 2.;
__n69["raw"] := "2";
__n67["property"] := __n69;
__n66["left"] := __n67;
__n70 := {  };
__n70["type"] := "MemberExpression";
__n70["computed"] := true;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "arguments";
__n70["object"] := __n71;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 1.;
__n72["raw"] := "1";
__n70["property"] := __n72;
__n66["right"] := __n70;
__n65["argument"] := __n66;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n73 := [  ];
__n63["variableDeclarations"] := __n73;
__n74 := [  ];
__n63["functionDeclarations"] := __n74;
__n63["codeType"] := "function";
__n63["strict"] := false;
__n60["body"] := __n63;
__n60["generator"] := false;
__n60["async"] := false;
__n60["expression"] := false;
__n59 := [ __n60 ];
__n0["functionDeclarations"] := __n59;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}