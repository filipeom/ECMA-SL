function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__split";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "FunctionExpression";
__n9["id"] := null;
__n10 := [  ];
__n9["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ReturnStatement";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "gnulluna";
__n14["raw"] := "\"gnulluna\"";
__n13["argument"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n15 := [  ];
__n11["variableDeclarations"] := __n15;
__n16 := [  ];
__n11["functionDeclarations"] := __n16;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n9["body"] := __n11;
__n9["generator"] := false;
__n9["async"] := false;
__n9["expression"] := false;
__n8["callee"] := __n9;
__n17 := [  ];
__n8["arguments"] := __n17;
__n7["object"] := __n8;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "split";
__n18["raw"] := "\"split\"";
__n7["property"] := __n18;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 'null;
__n20["raw"] := "\"'null\"";
__n19 := [ __n20 ];
__n6["arguments"] := __n19;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "UnaryExpression";
__n23["operator"] := "typeof";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "__split";
__n23["argument"] := __n24;
__n23["prefix"] := true;
__n22["left"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "object";
__n25["raw"] := "\"object\"";
__n22["right"] := __n25;
__n21["test"] := __n22;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "+";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "#1: __split = function(){return \"gnulluna\"}().split(null); typeof __split === \"object\". Actual: ";
__n33["raw"] := "'#1: __split = function(){return \"gnulluna\"}().split(null); typeof __split === \"object\". Actual: '";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "UnaryExpression";
__n34["operator"] := "typeof";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__split";
__n34["argument"] := __n35;
__n34["prefix"] := true;
__n32["right"] := __n34;
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n21["consequent"] := __n26;
__n21["alternate"] := null;
__n36 := {  };
__n36["type"] := "IfStatement";
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "!==";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__split";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "constructor";
__n40["raw"] := "\"constructor\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "Array";
__n37["right"] := __n41;
__n36["test"] := __n37;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "+";
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "#2: __split = function(){return \"gnulluna\"}().split(null); __split.constructor === Array. Actual: ";
__n49["raw"] := "'#2: __split = function(){return \"gnulluna\"}().split(null); __split.constructor === Array. Actual: '";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "__split";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "constructor";
__n52["raw"] := "\"constructor\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n48["right"] := __n50;
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n36["consequent"] := __n42;
__n36["alternate"] := null;
__n53 := {  };
__n53["type"] := "IfStatement";
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "!==";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__split";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "length";
__n57["raw"] := "\"length\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["left"] := __n55;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := 2.;
__n58["raw"] := "2";
__n54["right"] := __n58;
__n53["test"] := __n54;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#3: __split = function(){return \"gnulluna\"}().split(null); __split.length === 2. Actual: ";
__n66["raw"] := "'#3: __split = function(){return \"gnulluna\"}().split(null); __split.length === 2. Actual: '";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "MemberExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "__split";
__n67["object"] := __n68;
__n69 := {  };
__n69["type"] := "Literal";
__n69["value"] := "length";
__n69["raw"] := "\"length\"";
__n67["property"] := __n69;
__n67["computed"] := true;
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n53["consequent"] := __n59;
__n53["alternate"] := null;
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "MemberExpression";
__n72["computed"] := true;
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__split";
__n72["object"] := __n73;
__n74 := {  };
__n74["type"] := "Literal";
__n74["value"] := 0.;
__n74["raw"] := "0";
__n72["property"] := __n74;
__n71["left"] := __n72;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "g";
__n75["raw"] := "\"g\"";
__n71["right"] := __n75;
__n70["test"] := __n71;
__n76 := {  };
__n76["type"] := "BlockStatement";
__n78 := {  };
__n78["type"] := "ExpressionStatement";
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "$ERROR";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "BinaryExpression";
__n82["operator"] := "+";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "#4: __split = function(){return \"gnulluna\"}().split(null); __split[0] === \"g\". Actual: ";
__n83["raw"] := "'#4: __split = function(){return \"gnulluna\"}().split(null); __split[0] === \"g\". Actual: '";
__n82["left"] := __n83;
__n84 := {  };
__n84["type"] := "MemberExpression";
__n84["computed"] := true;
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "__split";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := 0.;
__n86["raw"] := "0";
__n84["property"] := __n86;
__n82["right"] := __n84;
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n78["expression"] := __n79;
__n77 := [ __n78 ];
__n76["body"] := __n77;
__n70["consequent"] := __n76;
__n70["alternate"] := null;
__n87 := {  };
__n87["type"] := "IfStatement";
__n88 := {  };
__n88["type"] := "BinaryExpression";
__n88["operator"] := "!==";
__n89 := {  };
__n89["type"] := "MemberExpression";
__n89["computed"] := true;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "__split";
__n89["object"] := __n90;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := 1.;
__n91["raw"] := "1";
__n89["property"] := __n91;
__n88["left"] := __n89;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "una";
__n92["raw"] := "\"una\"";
__n88["right"] := __n92;
__n87["test"] := __n88;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ExpressionStatement";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "$ERROR";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "#5: __split = function(){return \"gnulluna\"}().split(null); __split[1] === \"una\". Actual: ";
__n100["raw"] := "'#5: __split = function(){return \"gnulluna\"}().split(null); __split[1] === \"una\". Actual: '";
__n99["left"] := __n100;
__n101 := {  };
__n101["type"] := "MemberExpression";
__n101["computed"] := true;
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "__split";
__n101["object"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := 1.;
__n103["raw"] := "1";
__n101["property"] := __n103;
__n99["right"] := __n101;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["expression"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n87["consequent"] := __n93;
__n87["alternate"] := null;
__n1 := [ __n2, __n21, __n36, __n53, __n70, __n87 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n104 := [ "__split" ];
__n0["variableDeclarations"] := __n104;
__n105 := [  ];
__n0["functionDeclarations"] := __n105;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}