function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__instance";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Boolean";
__n6["callee"] := __n7;
__n8 := [  ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "__instance";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "split";
__n13["raw"] := "\"split\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "MemberExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "String";
__n15["object"] := __n16;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "prototype";
__n17["raw"] := "\"prototype\"";
__n15["property"] := __n17;
__n15["computed"] := true;
__n14["object"] := __n15;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "split";
__n18["raw"] := "\"split\"";
__n14["property"] := __n18;
__n14["computed"] := true;
__n10["right"] := __n14;
__n9["expression"] := __n10;
__n19 := {  };
__n19["type"] := "VariableDeclaration";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__split";
__n21["id"] := __n22;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__instance";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "split";
__n26["raw"] := "\"split\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n27 := [  ];
__n23["arguments"] := __n27;
__n21["init"] := __n23;
__n20 := [ __n21 ];
__n19["declarations"] := __n20;
__n19["kind"] := "var";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "!==";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__split";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "constructor";
__n32["raw"] := "\"constructor\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Array";
__n29["right"] := __n33;
__n28["test"] := __n29;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#1: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split.constructor === Array. Actual: ";
__n41["raw"] := "'#1: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split.constructor === Array. Actual: '";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__split";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "constructor";
__n44["raw"] := "\"constructor\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n28["consequent"] := __n34;
__n28["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "MemberExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "__split";
__n47["object"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := "length";
__n49["raw"] := "\"length\"";
__n47["property"] := __n49;
__n47["computed"] := true;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := 1.;
__n50["raw"] := "1";
__n46["right"] := __n50;
__n45["test"] := __n46;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "+";
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := "#2: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split.length === 1. Actual: ";
__n58["raw"] := "'#2: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split.length === 1. Actual: '";
__n57["left"] := __n58;
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "__split";
__n59["object"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "length";
__n61["raw"] := "\"length\"";
__n59["property"] := __n61;
__n59["computed"] := true;
__n57["right"] := __n59;
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n45["consequent"] := __n51;
__n45["alternate"] := null;
__n62 := {  };
__n62["type"] := "IfStatement";
__n63 := {  };
__n63["type"] := "BinaryExpression";
__n63["operator"] := "!==";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "__split";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := 0.;
__n66["raw"] := "0";
__n64["property"] := __n66;
__n63["left"] := __n64;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "false";
__n67["raw"] := "\"false\"";
__n63["right"] := __n67;
__n62["test"] := __n63;
__n68 := {  };
__n68["type"] := "BlockStatement";
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "CallExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "$ERROR";
__n71["callee"] := __n72;
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "+";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "#3: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split[0] === \"false\". Actual: ";
__n75["raw"] := "'#3: var __instance = new Boolean; __instance.split = String.prototype.split; __split = __instance.split(); __split[0] === \"false\". Actual: '";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "MemberExpression";
__n76["computed"] := true;
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "__split";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 0.;
__n78["raw"] := "0";
__n76["property"] := __n78;
__n74["right"] := __n76;
__n73 := [ __n74 ];
__n71["arguments"] := __n73;
__n70["expression"] := __n71;
__n69 := [ __n70 ];
__n68["body"] := __n69;
__n62["consequent"] := __n68;
__n62["alternate"] := null;
__n1 := [ __n2, __n9, __n19, __n28, __n45, __n62 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n79 := [ "__instance", "__split" ];
__n0["variableDeclarations"] := __n79;
__n80 := [  ];
__n0["functionDeclarations"] := __n80;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}