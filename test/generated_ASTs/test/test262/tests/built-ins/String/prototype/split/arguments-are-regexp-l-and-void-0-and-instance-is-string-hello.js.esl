function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__string";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "String";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "hello";
__n9["raw"] := "\"hello\"";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__re";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "/l/";
__n14["raw"] := "/l/";
__n14["source"] := "l";
__n15 := {  };
__n15["type"] := "RegExp";
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "l";
__n16["kind"] := "simple";
__n16["symbol"] := "l";
__n16["codePoint"] := 108.;
__n15["body"] := __n16;
__n15["flags"] := "";
__n15["nCaps"] := 0.;
__n14["regex"] := __n15;
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n17 := {  };
__n17["type"] := "VariableDeclaration";
__n19 := {  };
__n19["type"] := "VariableDeclarator";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__split";
__n19["id"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__string";
__n22["object"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "split";
__n24["raw"] := "\"split\"";
__n22["property"] := __n24;
__n22["computed"] := true;
__n21["callee"] := __n22;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__re";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "void";
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 0.;
__n28["raw"] := "0";
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n25 := [ __n26, __n27 ];
__n21["arguments"] := __n25;
__n19["init"] := __n21;
__n18 := [ __n19 ];
__n17["declarations"] := __n18;
__n17["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "assert";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "sameValue";
__n33["raw"] := "\"sameValue\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n30["callee"] := __n31;
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "__split";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "constructor";
__n37["raw"] := "\"constructor\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Array";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "The value of __split.constructor is expected to equal the value of Array";
__n39["raw"] := "'The value of __split.constructor is expected to equal the value of Array'";
__n34 := [ __n35, __n38, __n39 ];
__n30["arguments"] := __n34;
__n29["expression"] := __n30;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "assert";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "sameValue";
__n44["raw"] := "\"sameValue\"";
__n42["property"] := __n44;
__n42["computed"] := true;
__n41["callee"] := __n42;
__n46 := {  };
__n46["type"] := "MemberExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__split";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "length";
__n48["raw"] := "\"length\"";
__n46["property"] := __n48;
__n46["computed"] := true;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 3.;
__n49["raw"] := "3";
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "The value of __split.length is 3";
__n50["raw"] := "'The value of __split.length is 3'";
__n45 := [ __n46, __n49, __n50 ];
__n41["arguments"] := __n45;
__n40["expression"] := __n41;
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "assert";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "sameValue";
__n55["raw"] := "\"sameValue\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "MemberExpression";
__n57["computed"] := true;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "__split";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 0.;
__n59["raw"] := "0";
__n57["property"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "he";
__n60["raw"] := "\"he\"";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := "The value of __split[0] is \"he\"";
__n61["raw"] := "'The value of __split[0] is \"he\"'";
__n56 := [ __n57, __n60, __n61 ];
__n52["arguments"] := __n56;
__n51["expression"] := __n52;
__n62 := {  };
__n62["type"] := "ExpressionStatement";
__n63 := {  };
__n63["type"] := "CallExpression";
__n64 := {  };
__n64["type"] := "MemberExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "assert";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "sameValue";
__n66["raw"] := "\"sameValue\"";
__n64["property"] := __n66;
__n64["computed"] := true;
__n63["callee"] := __n64;
__n68 := {  };
__n68["type"] := "MemberExpression";
__n68["computed"] := true;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "__split";
__n68["object"] := __n69;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 1.;
__n70["raw"] := "1";
__n68["property"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "";
__n71["raw"] := "\"\"";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "The value of __split[1] is \"\"";
__n72["raw"] := "'The value of __split[1] is \"\"'";
__n67 := [ __n68, __n71, __n72 ];
__n63["arguments"] := __n67;
__n62["expression"] := __n63;
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "MemberExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "assert";
__n75["object"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "sameValue";
__n77["raw"] := "\"sameValue\"";
__n75["property"] := __n77;
__n75["computed"] := true;
__n74["callee"] := __n75;
__n79 := {  };
__n79["type"] := "MemberExpression";
__n79["computed"] := true;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "__split";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := 2.;
__n81["raw"] := "2";
__n79["property"] := __n81;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := "o";
__n82["raw"] := "\"o\"";
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "The value of __split[2] is \"o\"";
__n83["raw"] := "'The value of __split[2] is \"o\"'";
__n78 := [ __n79, __n82, __n83 ];
__n74["arguments"] := __n78;
__n73["expression"] := __n74;
__n1 := [ __n2, __n10, __n17, __n29, __n40, __n51, __n62, __n73 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n84 := [ "__string", "__re", "__split" ];
__n0["variableDeclarations"] := __n84;
__n85 := [  ];
__n0["functionDeclarations"] := __n85;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}