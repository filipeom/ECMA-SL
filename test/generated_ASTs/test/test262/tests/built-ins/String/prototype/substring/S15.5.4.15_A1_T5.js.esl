function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "AssignmentExpression";
__n3["operator"] := "=";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__func";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "valueOf";
__n6["raw"] := "\"valueOf\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ReturnStatement";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "gnulluna";
__n12["raw"] := "\"gnulluna\"";
__n11["argument"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n13 := [  ];
__n9["variableDeclarations"] := __n13;
__n14 := [  ];
__n9["functionDeclarations"] := __n14;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n3["right"] := __n7;
__n2["expression"] := __n3;
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "AssignmentExpression";
__n16["operator"] := "=";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Function";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "prototype";
__n20["raw"] := "\"prototype\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["object"] := __n18;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "substring";
__n21["raw"] := "\"substring\"";
__n17["property"] := __n21;
__n17["computed"] := true;
__n16["left"] := __n17;
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "String";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "prototype";
__n25["raw"] := "\"prototype\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["object"] := __n23;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "substring";
__n26["raw"] := "\"substring\"";
__n22["property"] := __n26;
__n22["computed"] := true;
__n16["right"] := __n22;
__n15["expression"] := __n16;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "MemberExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__func";
__n30["object"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "substring";
__n32["raw"] := "\"substring\"";
__n30["property"] := __n32;
__n30["computed"] := true;
__n29["callee"] := __n30;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := 'null;
__n34["raw"] := "\"'null\"";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "Function";
__n35["callee"] := __n36;
__n37 := [  ];
__n35["arguments"] := __n37;
__n33 := [ __n34, __n35 ];
__n29["arguments"] := __n33;
__n28["left"] := __n29;
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "";
__n38["raw"] := "\"\"";
__n28["right"] := __n38;
__n27["test"] := __n28;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "ExpressionStatement";
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "$ERROR";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "BinaryExpression";
__n45["operator"] := "+";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#1: __func.valueOf=function(){return \"gnulluna\"}; Function.prototype.substring=String.prototype.substring; function __func(){}; __func.substring(null, Function()) === \"\". Actual: ";
__n46["raw"] := "'#1: __func.valueOf=function(){return \"gnulluna\"}; Function.prototype.substring=String.prototype.substring; function __func(){}; __func.substring(null, Function()) === \"\". Actual: '";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "MemberExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__func";
__n48["object"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "substring";
__n50["raw"] := "\"substring\"";
__n48["property"] := __n50;
__n48["computed"] := true;
__n47["callee"] := __n48;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 'null;
__n52["raw"] := "\"'null\"";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Function";
__n53["callee"] := __n54;
__n55 := [  ];
__n53["arguments"] := __n55;
__n51 := [ __n52, __n53 ];
__n47["arguments"] := __n51;
__n45["right"] := __n47;
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n41["expression"] := __n42;
__n40 := [ __n41 ];
__n39["body"] := __n40;
__n27["consequent"] := __n39;
__n27["alternate"] := null;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__func";
__n56["expression"] := __n57;
__n58 := {  };
__n58["type"] := "EmptyStatement";
__n1 := [ __n2, __n15, __n27, __n56, __n58 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n59 := [  ];
__n0["variableDeclarations"] := __n59;
__n61 := {  };
__n61["type"] := "FunctionDeclaration";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__func";
__n61["id"] := __n62;
__n63 := [  ];
__n61["params"] := __n63;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n65 := [  ];
__n64["body"] := __n65;
__n66 := [  ];
__n64["variableDeclarations"] := __n66;
__n67 := [  ];
__n64["functionDeclarations"] := __n67;
__n64["codeType"] := "function";
__n64["strict"] := false;
__n61["body"] := __n64;
__n61["generator"] := false;
__n61["async"] := false;
__n61["expression"] := false;
__n60 := [ __n61 ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}