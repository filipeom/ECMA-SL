function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "regObj";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "NewExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "RegExp";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "/test/";
__n9["raw"] := "/test/";
__n9["source"] := "test";
__n10 := {  };
__n10["type"] := "RegExp";
__n11 := {  };
__n11["type"] := "Alternative";
__n13 := {  };
__n13["type"] := "Char";
__n13["value"] := "t";
__n13["kind"] := "simple";
__n13["symbol"] := "t";
__n13["codePoint"] := 116.;
__n14 := {  };
__n14["type"] := "Char";
__n14["value"] := "e";
__n14["kind"] := "simple";
__n14["symbol"] := "e";
__n14["codePoint"] := 101.;
__n15 := {  };
__n15["type"] := "Char";
__n15["value"] := "s";
__n15["kind"] := "simple";
__n15["symbol"] := "s";
__n15["codePoint"] := 115.;
__n16 := {  };
__n16["type"] := "Char";
__n16["value"] := "t";
__n16["kind"] := "simple";
__n16["symbol"] := "t";
__n16["codePoint"] := 116.;
__n12 := [ __n13, __n14, __n15, __n16 ];
__n11["expressions"] := __n12;
__n10["body"] := __n11;
__n10["flags"] := "";
__n10["nCaps"] := 0.;
__n9["regex"] := __n10;
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "String";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "prototype";
__n28["raw"] := "\"prototype\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["object"] := __n26;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "trim";
__n29["raw"] := "\"trim\"";
__n25["property"] := __n29;
__n25["computed"] := true;
__n24["object"] := __n25;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "call";
__n30["raw"] := "\"call\"";
__n24["property"] := __n30;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "regObj";
__n31 := [ __n32 ];
__n23["arguments"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "/test/";
__n33["raw"] := "\"/test/\"";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "String.prototype.trim.call(regObj)";
__n34["raw"] := "'String.prototype.trim.call(regObj)'";
__n22 := [ __n23, __n33, __n34 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n1 := [ __n2, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n35 := [ "regObj" ];
__n0["variableDeclarations"] := __n35;
__n36 := [  ];
__n0["functionDeclarations"] := __n36;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}