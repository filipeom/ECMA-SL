function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "String";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "Symbol";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "66";
__n14["raw"] := "'66'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "Symbol(66)";
__n15["raw"] := "'Symbol(66)'";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "`String(Symbol('66'))` returns `'Symbol(66)'`";
__n16["raw"] := "\"`String(Symbol('66'))` returns `'Symbol(66)'`\"";
__n7 := [ __n8, __n15, __n16 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "Symbol";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "66";
__n28["raw"] := "'66'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["object"] := __n25;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "toString";
__n29["raw"] := "\"toString\"";
__n24["property"] := __n29;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n30 := [  ];
__n23["arguments"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "Symbol(66)";
__n31["raw"] := "'Symbol(66)'";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "`Symbol('66').toString()` returns `'Symbol(66)'`";
__n32["raw"] := "\"`Symbol('66').toString()` returns `'Symbol(66)'`\"";
__n22 := [ __n23, __n31, __n32 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "assert";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "sameValue";
__n37["raw"] := "\"sameValue\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "Object";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "Symbol";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "66";
__n47["raw"] := "'66'";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["object"] := __n41;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "toString";
__n48["raw"] := "\"toString\"";
__n40["property"] := __n48;
__n40["computed"] := true;
__n39["callee"] := __n40;
__n49 := [  ];
__n39["arguments"] := __n49;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "Symbol(66)";
__n50["raw"] := "'Symbol(66)'";
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "`Object(Symbol('66')).toString()` returns `'Symbol(66)'`";
__n51["raw"] := "\"`Object(Symbol('66')).toString()` returns `'Symbol(66)'`\"";
__n38 := [ __n39, __n50, __n51 ];
__n34["arguments"] := __n38;
__n33["expression"] := __n34;
__n52 := {  };
__n52["type"] := "ExpressionStatement";
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "assert";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "sameValue";
__n56["raw"] := "\"sameValue\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n53["callee"] := __n54;
__n58 := {  };
__n58["type"] := "CallExpression";
__n59 := {  };
__n59["type"] := "MemberExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n61 := {  };
__n61["type"] := "MemberExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "Symbol";
__n61["object"] := __n62;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "prototype";
__n63["raw"] := "\"prototype\"";
__n61["property"] := __n63;
__n61["computed"] := true;
__n60["object"] := __n61;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "toString";
__n64["raw"] := "\"toString\"";
__n60["property"] := __n64;
__n60["computed"] := true;
__n59["object"] := __n60;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "call";
__n65["raw"] := "\"call\"";
__n59["property"] := __n65;
__n59["computed"] := true;
__n58["callee"] := __n59;
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "Symbol";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := "66";
__n70["raw"] := "'66'";
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66 := [ __n67 ];
__n58["arguments"] := __n66;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "Symbol(66)";
__n71["raw"] := "'Symbol(66)'";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "`Symbol.prototype.toString.call(Symbol('66'))` returns `'Symbol(66)'`";
__n72["raw"] := "\"`Symbol.prototype.toString.call(Symbol('66'))` returns `'Symbol(66)'`\"";
__n57 := [ __n58, __n71, __n72 ];
__n53["arguments"] := __n57;
__n52["expression"] := __n53;
__n1 := [ __n2, __n17, __n33, __n52 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n73 := [  ];
__n0["variableDeclarations"] := __n73;
__n74 := [  ];
__n0["functionDeclarations"] := __n74;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}