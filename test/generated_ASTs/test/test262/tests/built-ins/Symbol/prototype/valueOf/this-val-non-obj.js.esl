function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "valueOf";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Symbol";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "prototype";
__n9["raw"] := "\"prototype\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["object"] := __n7;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "valueOf";
__n10["raw"] := "\"valueOf\"";
__n6["property"] := __n10;
__n6["computed"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "assert";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "throws";
__n15["raw"] := "\"throws\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "TypeError";
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [  ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "MemberExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "valueOf";
__n24["object"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "call";
__n26["raw"] := "\"call\"";
__n24["property"] := __n26;
__n24["computed"] := true;
__n23["callee"] := __n24;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := 'null;
__n28["raw"] := "\"'null\"";
__n27 := [ __n28 ];
__n23["arguments"] := __n27;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n29 := [  ];
__n20["variableDeclarations"] := __n29;
__n30 := [  ];
__n20["functionDeclarations"] := __n30;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["async"] := false;
__n18["expression"] := false;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "null";
__n31["raw"] := "'null'";
__n16 := [ __n17, __n18, __n31 ];
__n12["arguments"] := __n16;
__n11["expression"] := __n12;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "throws";
__n36["raw"] := "\"throws\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "TypeError";
__n39 := {  };
__n39["type"] := "FunctionExpression";
__n39["id"] := null;
__n40 := [  ];
__n39["params"] := __n40;
__n41 := {  };
__n41["type"] := "BlockStatement";
__n43 := {  };
__n43["type"] := "ExpressionStatement";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "MemberExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "valueOf";
__n45["object"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "call";
__n47["raw"] := "\"call\"";
__n45["property"] := __n47;
__n45["computed"] := true;
__n44["callee"] := __n45;
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "undefined";
__n48 := [ __n49 ];
__n44["arguments"] := __n48;
__n43["expression"] := __n44;
__n42 := [ __n43 ];
__n41["body"] := __n42;
__n50 := [  ];
__n41["variableDeclarations"] := __n50;
__n51 := [  ];
__n41["functionDeclarations"] := __n51;
__n41["codeType"] := "function";
__n41["strict"] := false;
__n39["body"] := __n41;
__n39["generator"] := false;
__n39["async"] := false;
__n39["expression"] := false;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "undefined";
__n52["raw"] := "'undefined'";
__n37 := [ __n38, __n39, __n52 ];
__n33["arguments"] := __n37;
__n32["expression"] := __n33;
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "assert";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "throws";
__n57["raw"] := "\"throws\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n54["callee"] := __n55;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "TypeError";
__n60 := {  };
__n60["type"] := "FunctionExpression";
__n60["id"] := null;
__n61 := [  ];
__n60["params"] := __n61;
__n62 := {  };
__n62["type"] := "BlockStatement";
__n64 := {  };
__n64["type"] := "ExpressionStatement";
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "valueOf";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "call";
__n68["raw"] := "\"call\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["callee"] := __n66;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := 0.;
__n70["raw"] := "0";
__n69 := [ __n70 ];
__n65["arguments"] := __n69;
__n64["expression"] := __n65;
__n63 := [ __n64 ];
__n62["body"] := __n63;
__n71 := [  ];
__n62["variableDeclarations"] := __n71;
__n72 := [  ];
__n62["functionDeclarations"] := __n72;
__n62["codeType"] := "function";
__n62["strict"] := false;
__n60["body"] := __n62;
__n60["generator"] := false;
__n60["async"] := false;
__n60["expression"] := false;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "number";
__n73["raw"] := "'number'";
__n58 := [ __n59, __n60, __n73 ];
__n54["arguments"] := __n58;
__n53["expression"] := __n54;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "assert";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "throws";
__n78["raw"] := "\"throws\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "TypeError";
__n81 := {  };
__n81["type"] := "FunctionExpression";
__n81["id"] := null;
__n82 := [  ];
__n81["params"] := __n82;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "MemberExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "valueOf";
__n87["object"] := __n88;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "call";
__n89["raw"] := "\"call\"";
__n87["property"] := __n89;
__n87["computed"] := true;
__n86["callee"] := __n87;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "";
__n91["raw"] := "''";
__n90 := [ __n91 ];
__n86["arguments"] := __n90;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n92 := [  ];
__n83["variableDeclarations"] := __n92;
__n93 := [  ];
__n83["functionDeclarations"] := __n93;
__n83["codeType"] := "function";
__n83["strict"] := false;
__n81["body"] := __n83;
__n81["generator"] := false;
__n81["async"] := false;
__n81["expression"] := false;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "string";
__n94["raw"] := "'string'";
__n79 := [ __n80, __n81, __n94 ];
__n75["arguments"] := __n79;
__n74["expression"] := __n75;
__n1 := [ __n2, __n11, __n32, __n53, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n95 := [ "valueOf" ];
__n0["variableDeclarations"] := __n95;
__n96 := [  ];
__n0["functionDeclarations"] := __n96;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}