function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ForInStatement";
__n3 := {  };
__n3["type"] := "VariableDeclarator";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "x";
__n3["id"] := __n4;
__n3["init"] := null;
__n2["left"] := __n3;
__n5 := {  };
__n5["type"] := "ThisExpression";
__n2["right"] := __n5;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "IfStatement";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "===";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n9["left"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "Object";
__n11["raw"] := "'Object'";
__n9["right"] := __n11;
__n8["test"] := __n9;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: 'property 'Object' have attribute DontEnum";
__n18["raw"] := "\"#1: 'property 'Object' have attribute DontEnum\"";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n8["consequent"] := __n12;
__n19 := {  };
__n19["type"] := "IfStatement";
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "===";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "x";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "Function";
__n22["raw"] := "'Function'";
__n20["right"] := __n22;
__n19["test"] := __n20;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: 'Function' have attribute DontEnum";
__n29["raw"] := "\"#1: 'Function' have attribute DontEnum\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n19["consequent"] := __n23;
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "x";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "String";
__n33["raw"] := "'String'";
__n31["right"] := __n33;
__n30["test"] := __n31;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "#1: 'String' have attribute DontEnum";
__n40["raw"] := "\"#1: 'String' have attribute DontEnum\"";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n30["consequent"] := __n34;
__n41 := {  };
__n41["type"] := "IfStatement";
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "===";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "x";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "Number";
__n44["raw"] := "'Number'";
__n42["right"] := __n44;
__n41["test"] := __n42;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "#1: 'Number' have attribute DontEnum";
__n51["raw"] := "\"#1: 'Number' have attribute DontEnum\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n41["consequent"] := __n45;
__n52 := {  };
__n52["type"] := "IfStatement";
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "===";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "x";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "Array";
__n55["raw"] := "'Array'";
__n53["right"] := __n55;
__n52["test"] := __n53;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#1: 'Array' have attribute DontEnum";
__n62["raw"] := "\"#1: 'Array' have attribute DontEnum\"";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n52["consequent"] := __n56;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "===";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "x";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "Boolean";
__n66["raw"] := "'Boolean'";
__n64["right"] := __n66;
__n63["test"] := __n64;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#1: 'Boolean' have attribute DontEnum";
__n73["raw"] := "\"#1: 'Boolean' have attribute DontEnum\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n63["consequent"] := __n67;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "===";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "x";
__n75["left"] := __n76;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "Date";
__n77["raw"] := "'Date'";
__n75["right"] := __n77;
__n74["test"] := __n75;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#1: 'Date' have attribute DontEnum";
__n84["raw"] := "\"#1: 'Date' have attribute DontEnum\"";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n74["consequent"] := __n78;
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "===";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "x";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := "RegExp";
__n88["raw"] := "'RegExp'";
__n86["right"] := __n88;
__n85["test"] := __n86;
__n89 := {  };
__n89["type"] := "BlockStatement";
__n91 := {  };
__n91["type"] := "ExpressionStatement";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "$ERROR";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "#1: 'RegExp' have attribute DontEnum";
__n95["raw"] := "\"#1: 'RegExp' have attribute DontEnum\"";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["expression"] := __n92;
__n90 := [ __n91 ];
__n89["body"] := __n90;
__n85["consequent"] := __n89;
__n96 := {  };
__n96["type"] := "IfStatement";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "===";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "x";
__n97["left"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "Error";
__n99["raw"] := "'Error'";
__n97["right"] := __n99;
__n96["test"] := __n97;
__n100 := {  };
__n100["type"] := "BlockStatement";
__n102 := {  };
__n102["type"] := "ExpressionStatement";
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "$ERROR";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "#1: 'Error' have attribute DontEnum";
__n106["raw"] := "\"#1: 'Error' have attribute DontEnum\"";
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n102["expression"] := __n103;
__n101 := [ __n102 ];
__n100["body"] := __n101;
__n96["consequent"] := __n100;
__n107 := {  };
__n107["type"] := "IfStatement";
__n108 := {  };
__n108["type"] := "BinaryExpression";
__n108["operator"] := "===";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "x";
__n108["left"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "EvalError";
__n110["raw"] := "'EvalError'";
__n108["right"] := __n110;
__n107["test"] := __n108;
__n111 := {  };
__n111["type"] := "BlockStatement";
__n113 := {  };
__n113["type"] := "ExpressionStatement";
__n114 := {  };
__n114["type"] := "CallExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "$ERROR";
__n114["callee"] := __n115;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "#1: 'EvalError' have attribute DontEnum";
__n117["raw"] := "\"#1: 'EvalError' have attribute DontEnum\"";
__n116 := [ __n117 ];
__n114["arguments"] := __n116;
__n113["expression"] := __n114;
__n112 := [ __n113 ];
__n111["body"] := __n112;
__n107["consequent"] := __n111;
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "===";
__n120 := {  };
__n120["type"] := "Identifier";
__n120["name"] := "x";
__n119["left"] := __n120;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := "RangeError";
__n121["raw"] := "'RangeError'";
__n119["right"] := __n121;
__n118["test"] := __n119;
__n122 := {  };
__n122["type"] := "BlockStatement";
__n124 := {  };
__n124["type"] := "ExpressionStatement";
__n125 := {  };
__n125["type"] := "CallExpression";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "$ERROR";
__n125["callee"] := __n126;
__n128 := {  };
__n128["type"] := "Literal";
__n128["value"] := "#1: 'RangeError' have attribute DontEnum";
__n128["raw"] := "\"#1: 'RangeError' have attribute DontEnum\"";
__n127 := [ __n128 ];
__n125["arguments"] := __n127;
__n124["expression"] := __n125;
__n123 := [ __n124 ];
__n122["body"] := __n123;
__n118["consequent"] := __n122;
__n129 := {  };
__n129["type"] := "IfStatement";
__n130 := {  };
__n130["type"] := "BinaryExpression";
__n130["operator"] := "===";
__n131 := {  };
__n131["type"] := "Identifier";
__n131["name"] := "x";
__n130["left"] := __n131;
__n132 := {  };
__n132["type"] := "Literal";
__n132["value"] := "ReferenceError";
__n132["raw"] := "'ReferenceError'";
__n130["right"] := __n132;
__n129["test"] := __n130;
__n133 := {  };
__n133["type"] := "BlockStatement";
__n135 := {  };
__n135["type"] := "ExpressionStatement";
__n136 := {  };
__n136["type"] := "CallExpression";
__n137 := {  };
__n137["type"] := "Identifier";
__n137["name"] := "$ERROR";
__n136["callee"] := __n137;
__n139 := {  };
__n139["type"] := "Literal";
__n139["value"] := "#1: 'ReferenceError' have attribute DontEnum";
__n139["raw"] := "\"#1: 'ReferenceError' have attribute DontEnum\"";
__n138 := [ __n139 ];
__n136["arguments"] := __n138;
__n135["expression"] := __n136;
__n134 := [ __n135 ];
__n133["body"] := __n134;
__n129["consequent"] := __n133;
__n140 := {  };
__n140["type"] := "IfStatement";
__n141 := {  };
__n141["type"] := "BinaryExpression";
__n141["operator"] := "===";
__n142 := {  };
__n142["type"] := "Identifier";
__n142["name"] := "x";
__n141["left"] := __n142;
__n143 := {  };
__n143["type"] := "Literal";
__n143["value"] := "SyntaxError";
__n143["raw"] := "'SyntaxError'";
__n141["right"] := __n143;
__n140["test"] := __n141;
__n144 := {  };
__n144["type"] := "BlockStatement";
__n146 := {  };
__n146["type"] := "ExpressionStatement";
__n147 := {  };
__n147["type"] := "CallExpression";
__n148 := {  };
__n148["type"] := "Identifier";
__n148["name"] := "$ERROR";
__n147["callee"] := __n148;
__n150 := {  };
__n150["type"] := "Literal";
__n150["value"] := "#1: 'SyntaxError' have attribute DontEnum";
__n150["raw"] := "\"#1: 'SyntaxError' have attribute DontEnum\"";
__n149 := [ __n150 ];
__n147["arguments"] := __n149;
__n146["expression"] := __n147;
__n145 := [ __n146 ];
__n144["body"] := __n145;
__n140["consequent"] := __n144;
__n151 := {  };
__n151["type"] := "IfStatement";
__n152 := {  };
__n152["type"] := "BinaryExpression";
__n152["operator"] := "===";
__n153 := {  };
__n153["type"] := "Identifier";
__n153["name"] := "x";
__n152["left"] := __n153;
__n154 := {  };
__n154["type"] := "Literal";
__n154["value"] := "TypeError";
__n154["raw"] := "'TypeError'";
__n152["right"] := __n154;
__n151["test"] := __n152;
__n155 := {  };
__n155["type"] := "BlockStatement";
__n157 := {  };
__n157["type"] := "ExpressionStatement";
__n158 := {  };
__n158["type"] := "CallExpression";
__n159 := {  };
__n159["type"] := "Identifier";
__n159["name"] := "$ERROR";
__n158["callee"] := __n159;
__n161 := {  };
__n161["type"] := "Literal";
__n161["value"] := "#1: 'TypeError' have attribute DontEnum";
__n161["raw"] := "\"#1: 'TypeError' have attribute DontEnum\"";
__n160 := [ __n161 ];
__n158["arguments"] := __n160;
__n157["expression"] := __n158;
__n156 := [ __n157 ];
__n155["body"] := __n156;
__n151["consequent"] := __n155;
__n162 := {  };
__n162["type"] := "IfStatement";
__n163 := {  };
__n163["type"] := "BinaryExpression";
__n163["operator"] := "===";
__n164 := {  };
__n164["type"] := "Identifier";
__n164["name"] := "x";
__n163["left"] := __n164;
__n165 := {  };
__n165["type"] := "Literal";
__n165["value"] := "URIError";
__n165["raw"] := "'URIError'";
__n163["right"] := __n165;
__n162["test"] := __n163;
__n166 := {  };
__n166["type"] := "BlockStatement";
__n168 := {  };
__n168["type"] := "ExpressionStatement";
__n169 := {  };
__n169["type"] := "CallExpression";
__n170 := {  };
__n170["type"] := "Identifier";
__n170["name"] := "$ERROR";
__n169["callee"] := __n170;
__n172 := {  };
__n172["type"] := "Literal";
__n172["value"] := "#1: 'URIError' have attribute DontEnum";
__n172["raw"] := "\"#1: 'URIError' have attribute DontEnum\"";
__n171 := [ __n172 ];
__n169["arguments"] := __n171;
__n168["expression"] := __n169;
__n167 := [ __n168 ];
__n166["body"] := __n167;
__n162["consequent"] := __n166;
__n162["alternate"] := null;
__n151["alternate"] := __n162;
__n140["alternate"] := __n151;
__n129["alternate"] := __n140;
__n118["alternate"] := __n129;
__n107["alternate"] := __n118;
__n96["alternate"] := __n107;
__n85["alternate"] := __n96;
__n74["alternate"] := __n85;
__n63["alternate"] := __n74;
__n52["alternate"] := __n63;
__n41["alternate"] := __n52;
__n30["alternate"] := __n41;
__n19["alternate"] := __n30;
__n8["alternate"] := __n19;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n2["body"] := __n6;
__n2["each"] := false;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n173 := [ "x" ];
__n0["variableDeclarations"] := __n173;
__n174 := [  ];
__n0["functionDeclarations"] := __n174;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}