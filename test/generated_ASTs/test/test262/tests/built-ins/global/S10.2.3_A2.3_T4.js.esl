function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "evalStr";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "+";
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "+";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "+";
__n9 := {  };
__n9["type"] := "BinaryExpression";
__n9["operator"] := "+";
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "+";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "//CHECK#1
";
__n11["raw"] := "'//CHECK#1\\n'";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "for (var x in this) {
";
__n12["raw"] := "'for (var x in this) {\\n'";
__n10["right"] := __n12;
__n9["left"] := __n10;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "  if ( x === 'Math' ) {
";
__n13["raw"] := "'  if ( x === \\'Math\\' ) {\\n'";
__n9["right"] := __n13;
__n8["left"] := __n9;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "    $ERROR(\"#1: 'Math' have attribute DontEnum\");
";
__n14["raw"] := "'    $ERROR(\"#1: \\'Math\\' have attribute DontEnum\");\\n'";
__n8["right"] := __n14;
__n7["left"] := __n8;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "  }
";
__n15["raw"] := "'  }\\n'";
__n7["right"] := __n15;
__n6["left"] := __n7;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "}
";
__n16["raw"] := "'}\\n'";
__n6["right"] := __n16;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "eval";
__n18["callee"] := __n19;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "evalStr";
__n20 := [ __n21 ];
__n18["arguments"] := __n20;
__n17["expression"] := __n18;
__n1 := [ __n2, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n22 := [ "evalStr" ];
__n0["variableDeclarations"] := __n22;
__n23 := [  ];
__n0["functionDeclarations"] := __n23;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}