function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "UnaryExpression";
__n7["operator"] := "-";
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.1;
__n8["raw"] := "1.1";
__n7["argument"] := __n8;
__n7["prefix"] := true;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "parseFloat";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "-1.1";
__n12["raw"] := "\"-1.1\"";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n3["right"] := __n9;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: parseFloat(-1.1) === parseFloat(\"-1.1\"). Actual: ";
__n20["raw"] := "'#1: parseFloat(-1.1) === parseFloat(\"-1.1\"). Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "parseFloat";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "UnaryExpression";
__n24["operator"] := "-";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 1.1;
__n25["raw"] := "1.1";
__n24["argument"] := __n25;
__n24["prefix"] := true;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "parseFloat";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Infinity";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["left"] := __n28;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "parseFloat";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "Infinity";
__n35["raw"] := "\"Infinity\"";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n27["right"] := __n32;
__n26["test"] := __n27;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ExpressionStatement";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "$ERROR";
__n39["callee"] := __n40;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "#2: parseFloat(Infinity) === parseFloat(\"Infinity\"). Actual: ";
__n43["raw"] := "'#2: parseFloat(Infinity) === parseFloat(\"Infinity\"). Actual: '";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "parseFloat";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "Infinity";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n42["right"] := __n44;
__n41 := [ __n42 ];
__n39["arguments"] := __n41;
__n38["expression"] := __n39;
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n26["consequent"] := __n36;
__n26["alternate"] := null;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "String";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "parseFloat";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "NaN";
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["left"] := __n50;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "NaN";
__n57["raw"] := "\"NaN\"";
__n49["right"] := __n57;
__n48["test"] := __n49;
__n58 := {  };
__n58["type"] := "BlockStatement";
__n60 := {  };
__n60["type"] := "ExpressionStatement";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "$ERROR";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "#3: String(parseFloat(NaN)) === \"NaN\". Actual: ";
__n65["raw"] := "'#3: String(parseFloat(NaN)) === \"NaN\". Actual: '";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "CallExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "String";
__n66["callee"] := __n67;
__n69 := {  };
__n69["type"] := "CallExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "parseFloat";
__n69["callee"] := __n70;
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "NaN";
__n71 := [ __n72 ];
__n69["arguments"] := __n71;
__n68 := [ __n69 ];
__n66["arguments"] := __n68;
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n61["arguments"] := __n63;
__n60["expression"] := __n61;
__n59 := [ __n60 ];
__n58["body"] := __n59;
__n48["consequent"] := __n58;
__n48["alternate"] := null;
__n73 := {  };
__n73["type"] := "IfStatement";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!==";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "parseFloat";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 1.;
__n78["raw"] := ".01e+2";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["left"] := __n75;
__n79 := {  };
__n79["type"] := "CallExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "parseFloat";
__n79["callee"] := __n80;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := ".01e+2";
__n82["raw"] := "\".01e+2\"";
__n81 := [ __n82 ];
__n79["arguments"] := __n81;
__n74["right"] := __n79;
__n73["test"] := __n74;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#4: parseFloat(.01e+2) === parseFloat(\".01e+2\"). Actual: ";
__n90["raw"] := "'#4: parseFloat(.01e+2) === parseFloat(\".01e+2\"). Actual: '";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "parseFloat";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 1.;
__n94["raw"] := ".01e+2";
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n89["right"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n73["consequent"] := __n83;
__n73["alternate"] := null;
__n95 := {  };
__n95["type"] := "IfStatement";
__n96 := {  };
__n96["type"] := "BinaryExpression";
__n96["operator"] := "!==";
__n97 := {  };
__n97["type"] := "CallExpression";
__n98 := {  };
__n98["type"] := "Identifier";
__n98["name"] := "parseFloat";
__n97["callee"] := __n98;
__n100 := {  };
__n100["type"] := "UnaryExpression";
__n100["operator"] := "-";
__n101 := {  };
__n101["type"] := "Literal";
__n101["value"] := 0.;
__n101["raw"] := "0";
__n100["argument"] := __n101;
__n100["prefix"] := true;
__n99 := [ __n100 ];
__n97["arguments"] := __n99;
__n96["left"] := __n97;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := 0.;
__n102["raw"] := "0";
__n96["right"] := __n102;
__n95["test"] := __n96;
__n103 := {  };
__n103["type"] := "BlockStatement";
__n105 := {  };
__n105["type"] := "ExpressionStatement";
__n106 := {  };
__n106["type"] := "CallExpression";
__n107 := {  };
__n107["type"] := "Identifier";
__n107["name"] := "$ERROR";
__n106["callee"] := __n107;
__n109 := {  };
__n109["type"] := "BinaryExpression";
__n109["operator"] := "+";
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#5: parseFloat(-0) === 0. Actual: ";
__n110["raw"] := "'#5: parseFloat(-0) === 0. Actual: '";
__n109["left"] := __n110;
__n111 := {  };
__n111["type"] := "CallExpression";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "parseFloat";
__n111["callee"] := __n112;
__n114 := {  };
__n114["type"] := "UnaryExpression";
__n114["operator"] := "-";
__n115 := {  };
__n115["type"] := "Literal";
__n115["value"] := 0.;
__n115["raw"] := "0";
__n114["argument"] := __n115;
__n114["prefix"] := true;
__n113 := [ __n114 ];
__n111["arguments"] := __n113;
__n109["right"] := __n111;
__n108 := [ __n109 ];
__n106["arguments"] := __n108;
__n105["expression"] := __n106;
__n104 := [ __n105 ];
__n103["body"] := __n104;
__n95["consequent"] := __n103;
__n116 := {  };
__n116["type"] := "BlockStatement";
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!==";
__n120 := {  };
__n120["type"] := "BinaryExpression";
__n120["operator"] := "/";
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := 1.;
__n121["raw"] := "1";
__n120["left"] := __n121;
__n122 := {  };
__n122["type"] := "CallExpression";
__n123 := {  };
__n123["type"] := "Identifier";
__n123["name"] := "parseFloat";
__n122["callee"] := __n123;
__n125 := {  };
__n125["type"] := "UnaryExpression";
__n125["operator"] := "-";
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := 0.;
__n126["raw"] := "0";
__n125["argument"] := __n126;
__n125["prefix"] := true;
__n124 := [ __n125 ];
__n122["arguments"] := __n124;
__n120["right"] := __n122;
__n119["left"] := __n120;
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "Number";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "POSITIVE_INFINITY";
__n129["raw"] := "\"POSITIVE_INFINITY\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n119["right"] := __n127;
__n118["test"] := __n119;
__n130 := {  };
__n130["type"] := "BlockStatement";
__n132 := {  };
__n132["type"] := "ExpressionStatement";
__n133 := {  };
__n133["type"] := "CallExpression";
__n134 := {  };
__n134["type"] := "Identifier";
__n134["name"] := "$ERROR";
__n133["callee"] := __n134;
__n136 := {  };
__n136["type"] := "BinaryExpression";
__n136["operator"] := "+";
__n137 := {  };
__n137["type"] := "Literal";
__n137["value"] := "#5: parseFloat(-0) === +0. Actual: ";
__n137["raw"] := "'#5: parseFloat(-0) === +0. Actual: '";
__n136["left"] := __n137;
__n138 := {  };
__n138["type"] := "CallExpression";
__n139 := {  };
__n139["type"] := "Identifier";
__n139["name"] := "parseFloat";
__n138["callee"] := __n139;
__n141 := {  };
__n141["type"] := "UnaryExpression";
__n141["operator"] := "-";
__n142 := {  };
__n142["type"] := "Literal";
__n142["value"] := 0.;
__n142["raw"] := "0";
__n141["argument"] := __n142;
__n141["prefix"] := true;
__n140 := [ __n141 ];
__n138["arguments"] := __n140;
__n136["right"] := __n138;
__n135 := [ __n136 ];
__n133["arguments"] := __n135;
__n132["expression"] := __n133;
__n131 := [ __n132 ];
__n130["body"] := __n131;
__n118["consequent"] := __n130;
__n118["alternate"] := null;
__n117 := [ __n118 ];
__n116["body"] := __n117;
__n95["alternate"] := __n116;
__n1 := [ __n2, __n26, __n48, __n73, __n95 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n143 := [  ];
__n0["variableDeclarations"] := __n143;
__n144 := [  ];
__n0["functionDeclarations"] := __n144;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}