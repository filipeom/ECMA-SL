function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "NewExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "Number";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "-";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.1;
__n11["raw"] := "1.1";
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "parseFloat";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "-1.1";
__n15["raw"] := "\"-1.1\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n3["right"] := __n12;
__n2["test"] := __n3;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: ";
__n23["raw"] := "'#1: parseFloat(new Number(-1.1)) === parseFloat(\"-1.1\"). Actual: '";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "parseFloat";
__n24["callee"] := __n25;
__n27 := {  };
__n27["type"] := "NewExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "Number";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "UnaryExpression";
__n30["operator"] := "-";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 1.1;
__n31["raw"] := "1.1";
__n30["argument"] := __n31;
__n30["prefix"] := true;
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26 := [ __n27 ];
__n24["arguments"] := __n26;
__n22["right"] := __n24;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n2["consequent"] := __n16;
__n2["alternate"] := null;
__n32 := {  };
__n32["type"] := "IfStatement";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "parseFloat";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "NewExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "Infinity";
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["left"] := __n34;
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "parseFloat";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "Infinity";
__n44["raw"] := "\"Infinity\"";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n33["right"] := __n41;
__n32["test"] := __n33;
__n45 := {  };
__n45["type"] := "BlockStatement";
__n47 := {  };
__n47["type"] := "ExpressionStatement";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "$ERROR";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: ";
__n52["raw"] := "'#2: parseFloat(new Number(Infinity)) === parseFloat(\"Infinity\"). Actual: '";
__n51["left"] := __n52;
__n53 := {  };
__n53["type"] := "CallExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "parseFloat";
__n53["callee"] := __n54;
__n56 := {  };
__n56["type"] := "NewExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "Number";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "Infinity";
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55 := [ __n56 ];
__n53["arguments"] := __n55;
__n51["right"] := __n53;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["expression"] := __n48;
__n46 := [ __n47 ];
__n45["body"] := __n46;
__n32["consequent"] := __n45;
__n32["alternate"] := null;
__n60 := {  };
__n60["type"] := "IfStatement";
__n61 := {  };
__n61["type"] := "BinaryExpression";
__n61["operator"] := "!==";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "String";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "CallExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "parseFloat";
__n65["callee"] := __n66;
__n68 := {  };
__n68["type"] := "NewExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Number";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "NaN";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67 := [ __n68 ];
__n65["arguments"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["left"] := __n62;
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := "NaN";
__n72["raw"] := "\"NaN\"";
__n61["right"] := __n72;
__n60["test"] := __n61;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ExpressionStatement";
__n76 := {  };
__n76["type"] := "CallExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "$ERROR";
__n76["callee"] := __n77;
__n79 := {  };
__n79["type"] := "BinaryExpression";
__n79["operator"] := "+";
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: ";
__n80["raw"] := "'#3: String(parseFloat(new Number(NaN))) === \"NaN\". Actual: '";
__n79["left"] := __n80;
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "String";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "CallExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "parseFloat";
__n84["callee"] := __n85;
__n87 := {  };
__n87["type"] := "NewExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "Number";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Identifier";
__n90["name"] := "NaN";
__n89 := [ __n90 ];
__n87["arguments"] := __n89;
__n86 := [ __n87 ];
__n84["arguments"] := __n86;
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n79["right"] := __n81;
__n78 := [ __n79 ];
__n76["arguments"] := __n78;
__n75["expression"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n60["consequent"] := __n73;
__n60["alternate"] := null;
__n91 := {  };
__n91["type"] := "IfStatement";
__n92 := {  };
__n92["type"] := "BinaryExpression";
__n92["operator"] := "!==";
__n93 := {  };
__n93["type"] := "CallExpression";
__n94 := {  };
__n94["type"] := "Identifier";
__n94["name"] := "parseFloat";
__n93["callee"] := __n94;
__n96 := {  };
__n96["type"] := "NewExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "Number";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 1.;
__n99["raw"] := ".01e+2";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95 := [ __n96 ];
__n93["arguments"] := __n95;
__n92["left"] := __n93;
__n100 := {  };
__n100["type"] := "CallExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "parseFloat";
__n100["callee"] := __n101;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := ".01e+2";
__n103["raw"] := "\".01e+2\"";
__n102 := [ __n103 ];
__n100["arguments"] := __n102;
__n92["right"] := __n100;
__n91["test"] := __n92;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "$ERROR";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "BinaryExpression";
__n110["operator"] := "+";
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: ";
__n111["raw"] := "'#4: parseFloat(new Number(.01e+2)) === parseFloat(\".01e+2\"). Actual: '";
__n110["left"] := __n111;
__n112 := {  };
__n112["type"] := "CallExpression";
__n113 := {  };
__n113["type"] := "Identifier";
__n113["name"] := "parseFloat";
__n112["callee"] := __n113;
__n115 := {  };
__n115["type"] := "NewExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "Number";
__n115["callee"] := __n116;
__n118 := {  };
__n118["type"] := "Literal";
__n118["value"] := 1.;
__n118["raw"] := ".01e+2";
__n117 := [ __n118 ];
__n115["arguments"] := __n117;
__n114 := [ __n115 ];
__n112["arguments"] := __n114;
__n110["right"] := __n112;
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n91["consequent"] := __n104;
__n91["alternate"] := null;
__n1 := [ __n2, __n32, __n60, __n91 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n119 := [  ];
__n0["variableDeclarations"] := __n119;
__n120 := [  ];
__n0["functionDeclarations"] := __n120;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}