function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "parseFloat";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := " 1.1";
__n7["raw"] := "\"\\u00201.1\"";
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseFloat";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "1.1";
__n11["raw"] := "\"1.1\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n3["right"] := __n8;
__n2["test"] := __n3;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: parseFloat(\"\\u00201.1\") === parseFloat(\"1.1\"). Actual: ";
__n19["raw"] := "'#1: parseFloat(\"\\\\u00201.1\") === parseFloat(\"1.1\"). Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "parseFloat";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := " 1.1";
__n23["raw"] := "\"\\u00201.1\"";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n2["consequent"] := __n12;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "parseFloat";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "  -1.1";
__n29["raw"] := "\"\\u0020\\u0020-1.1\"";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "parseFloat";
__n30["callee"] := __n31;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "-1.1";
__n33["raw"] := "\"-1.1\"";
__n32 := [ __n33 ];
__n30["arguments"] := __n32;
__n25["right"] := __n30;
__n24["test"] := __n25;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: parseFloat(\"\\u0020\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: ";
__n41["raw"] := "'#2: parseFloat(\"\\\\u0020\\\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: '";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "parseFloat";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "  -1.1";
__n45["raw"] := "\"\\u0020\\u0020-1.1\"";
__n44 := [ __n45 ];
__n42["arguments"] := __n44;
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n24["consequent"] := __n34;
__n24["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "parseFloat";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := " 1.1";
__n51["raw"] := "\" 1.1\"";
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["left"] := __n48;
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "parseFloat";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "1.1";
__n55["raw"] := "\"1.1\"";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n47["right"] := __n52;
__n46["test"] := __n47;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "+";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#3: parseFloat(\" 1.1\") === parseFloat(\"1.1\"). Actual: ";
__n63["raw"] := "'#3: parseFloat(\" 1.1\") === parseFloat(\"1.1\"). Actual: '";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "CallExpression";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "parseFloat";
__n64["callee"] := __n65;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := " 1.1";
__n67["raw"] := "\" 1.1\"";
__n66 := [ __n67 ];
__n64["arguments"] := __n66;
__n62["right"] := __n64;
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n46["consequent"] := __n56;
__n46["alternate"] := null;
__n68 := {  };
__n68["type"] := "IfStatement";
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "parseFloat";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "       1.1";
__n73["raw"] := "\"       1.1\"";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["left"] := __n70;
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "parseFloat";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "1.1";
__n77["raw"] := "\"1.1\"";
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n69["right"] := __n74;
__n68["test"] := __n69;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "BinaryExpression";
__n84["operator"] := "+";
__n85 := {  };
__n85["type"] := "Literal";
__n85["value"] := "#4: parseFloat(\"       1.1\") === parseFloat(\"1.1\"). Actual: ";
__n85["raw"] := "'#4: parseFloat(\"       1.1\") === parseFloat(\"1.1\"). Actual: '";
__n84["left"] := __n85;
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "parseFloat";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "       1.1";
__n89["raw"] := "\"       1.1\"";
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n84["right"] := __n86;
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n68["consequent"] := __n78;
__n68["alternate"] := null;
__n90 := {  };
__n90["type"] := "IfStatement";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "!==";
__n92 := {  };
__n92["type"] := "CallExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "parseFloat";
__n92["callee"] := __n93;
__n95 := {  };
__n95["type"] := "Literal";
__n95["value"] := "                -1.1";
__n95["raw"] := "\"       \\u0020       \\u0020-1.1\"";
__n94 := [ __n95 ];
__n92["arguments"] := __n94;
__n91["left"] := __n92;
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "parseFloat";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := "-1.1";
__n99["raw"] := "\"-1.1\"";
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n91["right"] := __n96;
__n90["test"] := __n91;
__n100 := {  };
__n100["type"] := "BlockStatement";
__n102 := {  };
__n102["type"] := "ExpressionStatement";
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "$ERROR";
__n103["callee"] := __n104;
__n106 := {  };
__n106["type"] := "BinaryExpression";
__n106["operator"] := "+";
__n107 := {  };
__n107["type"] := "Literal";
__n107["value"] := "#5: parseFloat(\"       \\u0020       \\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: ";
__n107["raw"] := "'#5: parseFloat(\"       \\\\u0020       \\\\u0020-1.1\") === parseFloat(\"-1.1\"). Actual: '";
__n106["left"] := __n107;
__n108 := {  };
__n108["type"] := "CallExpression";
__n109 := {  };
__n109["type"] := "Identifier";
__n109["name"] := "parseFloat";
__n108["callee"] := __n109;
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "                -1.1";
__n111["raw"] := "\"       \\u0020       \\u0020-1.1\"";
__n110 := [ __n111 ];
__n108["arguments"] := __n110;
__n106["right"] := __n108;
__n105 := [ __n106 ];
__n103["arguments"] := __n105;
__n102["expression"] := __n103;
__n101 := [ __n102 ];
__n100["body"] := __n101;
__n90["consequent"] := __n100;
__n90["alternate"] := null;
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "MemberExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "assert";
__n114["object"] := __n115;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "sameValue";
__n116["raw"] := "\"sameValue\"";
__n114["property"] := __n116;
__n114["computed"] := true;
__n113["callee"] := __n114;
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "parseFloat";
__n118["callee"] := __n119;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := " ";
__n121["raw"] := "\"\\u0020\"";
__n120 := [ __n121 ];
__n118["arguments"] := __n120;
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "NaN";
__n117 := [ __n118, __n122 ];
__n113["arguments"] := __n117;
__n112["expression"] := __n113;
__n1 := [ __n2, __n24, __n46, __n68, __n90, __n112 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n123 := [  ];
__n0["variableDeclarations"] := __n123;
__n124 := [  ];
__n0["functionDeclarations"] := __n124;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}