function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "1";
__n11["raw"] := "\"\\u000B1\"";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "parseInt";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "1";
__n15["raw"] := "\"1\"";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "parseInt(\"\\u000B1\") must return the same value returned by parseInt(\"1\")";
__n16["raw"] := "'parseInt(\"\\\\u000B1\") must return the same value returned by parseInt(\"1\")'";
__n7 := [ __n8, __n12, __n16 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "assert";
__n19["object"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "sameValue";
__n21["raw"] := "\"sameValue\"";
__n19["property"] := __n21;
__n19["computed"] := true;
__n18["callee"] := __n19;
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "parseInt";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "-1";
__n26["raw"] := "\"\\u000B\\u000B-1\"";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "parseInt";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "-1";
__n30["raw"] := "\"-1\"";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "parseInt(\"\\u000B\\u000B-1\") must return the same value returned by parseInt(\"-1\")";
__n31["raw"] := "'parseInt(\"\\\\u000B\\\\u000B-1\") must return the same value returned by parseInt(\"-1\")'";
__n22 := [ __n23, __n27, __n31 ];
__n18["arguments"] := __n22;
__n17["expression"] := __n18;
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "assert";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "sameValue";
__n36["raw"] := "\"sameValue\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["callee"] := __n34;
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "parseInt";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "";
__n41["raw"] := "\"\\u000B\"";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "NaN";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "parseInt(\"\\u000B\") must return NaN";
__n43["raw"] := "'parseInt(\"\\\\u000B\") must return NaN'";
__n37 := [ __n38, __n42, __n43 ];
__n33["arguments"] := __n37;
__n32["expression"] := __n33;
__n1 := [ __n2, __n17, __n32 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n44 := [  ];
__n0["variableDeclarations"] := __n44;
__n45 := [  ];
__n0["functionDeclarations"] := __n45;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}