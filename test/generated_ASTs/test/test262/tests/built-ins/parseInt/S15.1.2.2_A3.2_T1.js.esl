function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "CallExpression";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "assert";
__n4["object"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "sameValue";
__n6["raw"] := "\"sameValue\"";
__n4["property"] := __n6;
__n4["computed"] := true;
__n3["callee"] := __n4;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "parseInt";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "11";
__n11["raw"] := "\"11\"";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "NaN";
__n10 := [ __n11, __n12 ];
__n8["arguments"] := __n10;
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "parseInt";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "11";
__n16["raw"] := "\"11\"";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 10.;
__n17["raw"] := "10";
__n15 := [ __n16, __n17 ];
__n13["arguments"] := __n15;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "parseInt(\"11\", NaN) must return the same value returned by parseInt(\"11\", 10)";
__n18["raw"] := "'parseInt(\"11\", NaN) must return the same value returned by parseInt(\"11\", 10)'";
__n7 := [ __n8, __n13, __n18 ];
__n3["arguments"] := __n7;
__n2["expression"] := __n3;
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "assert";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "sameValue";
__n23["raw"] := "\"sameValue\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "parseInt";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "11";
__n28["raw"] := "\"11\"";
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 0.;
__n30["raw"] := "0";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n27 := [ __n28, __n29 ];
__n25["arguments"] := __n27;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "parseInt";
__n31["callee"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "11";
__n34["raw"] := "\"11\"";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := 10.;
__n35["raw"] := "10";
__n33 := [ __n34, __n35 ];
__n31["arguments"] := __n33;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "parseInt(\"11\", +0) must return the same value returned by parseInt(\"11\", 10)";
__n36["raw"] := "'parseInt(\"11\", +0) must return the same value returned by parseInt(\"11\", 10)'";
__n24 := [ __n25, __n31, __n36 ];
__n20["arguments"] := __n24;
__n19["expression"] := __n20;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "assert";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "sameValue";
__n41["raw"] := "\"sameValue\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n38["callee"] := __n39;
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "parseInt";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "11";
__n46["raw"] := "\"11\"";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "-";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 0.;
__n48["raw"] := "0";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n45 := [ __n46, __n47 ];
__n43["arguments"] := __n45;
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "parseInt";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "11";
__n52["raw"] := "\"11\"";
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := 10.;
__n53["raw"] := "10";
__n51 := [ __n52, __n53 ];
__n49["arguments"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "parseInt(\"11\", -0) must return the same value returned by parseInt(\"11\", 10)";
__n54["raw"] := "'parseInt(\"11\", -0) must return the same value returned by parseInt(\"11\", 10)'";
__n42 := [ __n43, __n49, __n54 ];
__n38["arguments"] := __n42;
__n37["expression"] := __n38;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "assert";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "sameValue";
__n59["raw"] := "\"sameValue\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["callee"] := __n57;
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "parseInt";
__n61["callee"] := __n62;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "11";
__n64["raw"] := "\"11\"";
__n65 := {  };
__n65["type"] := "MemberExpression";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "Number";
__n65["object"] := __n66;
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "POSITIVE_INFINITY";
__n67["raw"] := "\"POSITIVE_INFINITY\"";
__n65["property"] := __n67;
__n65["computed"] := true;
__n63 := [ __n64, __n65 ];
__n61["arguments"] := __n63;
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "parseInt";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "11";
__n71["raw"] := "\"11\"";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 10.;
__n72["raw"] := "10";
__n70 := [ __n71, __n72 ];
__n68["arguments"] := __n70;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "parseInt(\"11\", Number.POSITIVE_INFINITY) must return the same value returned by parseInt(\"11\", 10)";
__n73["raw"] := "'parseInt(\"11\", Number.POSITIVE_INFINITY) must return the same value returned by parseInt(\"11\", 10)'";
__n60 := [ __n61, __n68, __n73 ];
__n56["arguments"] := __n60;
__n55["expression"] := __n56;
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "assert";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "sameValue";
__n78["raw"] := "\"sameValue\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["callee"] := __n76;
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "parseInt";
__n80["callee"] := __n81;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "11";
__n83["raw"] := "\"11\"";
__n84 := {  };
__n84["type"] := "MemberExpression";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "Number";
__n84["object"] := __n85;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "NEGATIVE_INFINITY";
__n86["raw"] := "\"NEGATIVE_INFINITY\"";
__n84["property"] := __n86;
__n84["computed"] := true;
__n82 := [ __n83, __n84 ];
__n80["arguments"] := __n82;
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "Identifier";
__n88["name"] := "parseInt";
__n87["callee"] := __n88;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "11";
__n90["raw"] := "\"11\"";
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := 10.;
__n91["raw"] := "10";
__n89 := [ __n90, __n91 ];
__n87["arguments"] := __n89;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "parseInt(\"11\", Number.NEGATIVE_INFINITY) must return the same value returned by parseInt(\"11\", 10)";
__n92["raw"] := "'parseInt(\"11\", Number.NEGATIVE_INFINITY) must return the same value returned by parseInt(\"11\", 10)'";
__n79 := [ __n80, __n87, __n92 ];
__n75["arguments"] := __n79;
__n74["expression"] := __n75;
__n1 := [ __n2, __n19, __n37, __n55, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n93 := [  ];
__n0["variableDeclarations"] := __n93;
__n94 := [  ];
__n0["functionDeclarations"] := __n94;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}