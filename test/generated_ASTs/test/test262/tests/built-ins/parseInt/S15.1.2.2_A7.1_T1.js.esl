function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ForStatement";
__n3 := {  };
__n3["type"] := "VariableDeclaration";
__n5 := {  };
__n5["type"] := "VariableDeclarator";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "i";
__n5["id"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 2.;
__n7["raw"] := "2";
__n5["init"] := __n7;
__n4 := [ __n5 ];
__n3["declarations"] := __n4;
__n3["kind"] := "var";
__n2["init"] := __n3;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "<=";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "i";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 36.;
__n10["raw"] := "36";
__n8["right"] := __n10;
__n2["test"] := __n8;
__n11 := {  };
__n11["type"] := "UpdateExpression";
__n11["operator"] := "++";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "i";
__n11["argument"] := __n12;
__n11["prefix"] := false;
__n2["update"] := __n11;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "assert";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "sameValue";
__n19["raw"] := "\"sameValue\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "parseInt";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "$string";
__n24["raw"] := "\"$string\"";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "i";
__n23 := [ __n24, __n25 ];
__n21["arguments"] := __n23;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "NaN";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "parseInt(\"$string\", i) must return NaN";
__n27["raw"] := "'parseInt(\"$string\", i) must return NaN'";
__n20 := [ __n21, __n26, __n27 ];
__n16["arguments"] := __n20;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["body"] := __n13;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n28 := [ "i" ];
__n0["variableDeclarations"] := __n28;
__n29 := [  ];
__n0["functionDeclarations"] := __n29;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}