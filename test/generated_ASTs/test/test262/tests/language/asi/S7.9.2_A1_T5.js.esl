function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "a";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 1.;
__n6["raw"] := "1";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "b";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 2.;
__n9["raw"] := "2";
__n7["init"] := __n9;
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "c";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 3.;
__n12["raw"] := "3";
__n10["init"] := __n12;
__n3 := [ __n4, __n7, __n10 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "AssignmentExpression";
__n14["operator"] := "=";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "a";
__n14["left"] := __n15;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "b";
__n14["right"] := __n16;
__n13["expression"] := __n14;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "UpdateExpression";
__n18["operator"] := "++";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "c";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n17["expression"] := __n18;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "a";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "b";
__n21["right"] := __n23;
__n20["test"] := __n21;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#1: Automatic semicolon insertion not work with ++";
__n28["raw"] := "'#1: Automatic semicolon insertion not work with ++'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n20["consequent"] := __n24;
__n20["alternate"] := null;
__n1 := [ __n2, __n13, __n17, __n20 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n29 := [ "a", "b", "c" ];
__n0["variableDeclarations"] := __n29;
__n30 := [  ];
__n0["functionDeclarations"] := __n30;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}