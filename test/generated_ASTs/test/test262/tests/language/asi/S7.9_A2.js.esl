function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "LabeledStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "label1";
__n2["label"] := __n3;
__n4 := {  };
__n4["type"] := "ForStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "i";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n4["init"] := __n5;
__n10 := {  };
__n10["type"] := "BinaryExpression";
__n10["operator"] := "<=";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "i";
__n10["left"] := __n11;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 0.;
__n12["raw"] := "0";
__n10["right"] := __n12;
__n4["test"] := __n10;
__n13 := {  };
__n13["type"] := "UpdateExpression";
__n13["operator"] := "++";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "i";
__n13["argument"] := __n14;
__n13["prefix"] := false;
__n4["update"] := __n13;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ForStatement";
__n18 := {  };
__n18["type"] := "VariableDeclaration";
__n20 := {  };
__n20["type"] := "VariableDeclarator";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "j";
__n20["id"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := 0.;
__n22["raw"] := "0";
__n20["init"] := __n22;
__n19 := [ __n20 ];
__n18["declarations"] := __n19;
__n18["kind"] := "var";
__n17["init"] := __n18;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "<=";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "j";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := 0.;
__n25["raw"] := "0";
__n23["right"] := __n25;
__n17["test"] := __n23;
__n26 := {  };
__n26["type"] := "UpdateExpression";
__n26["operator"] := "++";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "j";
__n26["argument"] := __n27;
__n26["prefix"] := false;
__n17["update"] := __n26;
__n28 := {  };
__n28["type"] := "BlockStatement";
__n30 := {  };
__n30["type"] := "BreakStatement";
__n30["label"] := "label1";
__n29 := [ __n30 ];
__n28["body"] := __n29;
__n17["body"] := __n28;
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "#1: Check break statement for automatic semicolon insertion";
__n35["raw"] := "'#1: Check break statement for automatic semicolon insertion'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n16 := [ __n17, __n31 ];
__n15["body"] := __n16;
__n4["body"] := __n15;
__n2["body"] := __n4;
__n36 := {  };
__n36["type"] := "VariableDeclaration";
__n38 := {  };
__n38["type"] := "VariableDeclarator";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "result";
__n38["id"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := false;
__n40["raw"] := "false";
__n38["init"] := __n40;
__n37 := [ __n38 ];
__n36["declarations"] := __n37;
__n36["kind"] := "var";
__n41 := {  };
__n41["type"] := "LabeledStatement";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "label2";
__n41["label"] := __n42;
__n43 := {  };
__n43["type"] := "ForStatement";
__n44 := {  };
__n44["type"] := "VariableDeclaration";
__n46 := {  };
__n46["type"] := "VariableDeclarator";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "i";
__n46["id"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 0.;
__n48["raw"] := "0";
__n46["init"] := __n48;
__n45 := [ __n46 ];
__n44["declarations"] := __n45;
__n44["kind"] := "var";
__n43["init"] := __n44;
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "<=";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "i";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 0.;
__n51["raw"] := "0";
__n49["right"] := __n51;
__n43["test"] := __n49;
__n52 := {  };
__n52["type"] := "UpdateExpression";
__n52["operator"] := "++";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "i";
__n52["argument"] := __n53;
__n52["prefix"] := false;
__n43["update"] := __n52;
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ForStatement";
__n57 := {  };
__n57["type"] := "VariableDeclaration";
__n59 := {  };
__n59["type"] := "VariableDeclarator";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "j";
__n59["id"] := __n60;
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 0.;
__n61["raw"] := "0";
__n59["init"] := __n61;
__n58 := [ __n59 ];
__n57["declarations"] := __n58;
__n57["kind"] := "var";
__n56["init"] := __n57;
__n62 := {  };
__n62["type"] := "BinaryExpression";
__n62["operator"] := "<=";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "j";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := 0.;
__n64["raw"] := "0";
__n62["right"] := __n64;
__n56["test"] := __n62;
__n65 := {  };
__n65["type"] := "UpdateExpression";
__n65["operator"] := "++";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "j";
__n65["argument"] := __n66;
__n65["prefix"] := false;
__n56["update"] := __n65;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "BreakStatement";
__n69["label"] := null;
__n70 := {  };
__n70["type"] := "ExpressionStatement";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "label2";
__n70["expression"] := __n71;
__n68 := [ __n69, __n70 ];
__n67["body"] := __n68;
__n56["body"] := __n67;
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "AssignmentExpression";
__n73["operator"] := "=";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "result";
__n73["left"] := __n74;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := true;
__n75["raw"] := "true";
__n73["right"] := __n75;
__n72["expression"] := __n73;
__n55 := [ __n56, __n72 ];
__n54["body"] := __n55;
__n43["body"] := __n54;
__n41["body"] := __n43;
__n76 := {  };
__n76["type"] := "IfStatement";
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "!==";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "result";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := true;
__n79["raw"] := "true";
__n77["right"] := __n79;
__n76["test"] := __n77;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "Literal";
__n86["value"] := "#2: Check break statement for automatic semicolon insertion";
__n86["raw"] := "'#2: Check break statement for automatic semicolon insertion'";
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n81 := [ __n82 ];
__n80["body"] := __n81;
__n76["consequent"] := __n80;
__n76["alternate"] := null;
__n1 := [ __n2, __n36, __n41, __n76 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n87 := [ "i", "j", "result" ];
__n0["variableDeclarations"] := __n87;
__n88 := [  ];
__n0["functionDeclarations"] := __n88;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}