function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "+";
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 1.;
__n9["raw"] := "1";
__n8["left"] := __n9;
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "f";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 2.;
__n14["raw"] := "2";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 3.;
__n15["raw"] := "3";
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n8["right"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!==";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "x";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 6.;
__n19["raw"] := "6";
__n17["right"] := __n19;
__n16["test"] := __n17;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#1: Check Function Expression for automatic semicolon insertion";
__n26["raw"] := "'#1: Check Function Expression for automatic semicolon insertion'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n16["consequent"] := __n20;
__n16["alternate"] := null;
__n1 := [ __n2, __n4, __n16 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n27 := [ "x" ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [ "t" ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ReturnStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "t";
__n34["argument"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n36 := [  ];
__n32["variableDeclarations"] := __n36;
__n37 := [  ];
__n32["functionDeclarations"] := __n37;
__n32["codeType"] := "function";
__n32["strict"] := false;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28 := [ __n29 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}