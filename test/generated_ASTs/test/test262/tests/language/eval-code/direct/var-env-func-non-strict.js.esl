function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "typeofInside";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "FunctionExpression";
__n8["id"] := null;
__n9 := [  ];
__n8["params"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "eval";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "function fun() {}";
__n16["raw"] := "'function fun() {}'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "AssignmentExpression";
__n18["operator"] := "=";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "typeofInside";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "typeof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "fun";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n18["right"] := __n20;
__n17["expression"] := __n18;
__n11 := [ __n12, __n17 ];
__n10["body"] := __n11;
__n22 := [  ];
__n10["variableDeclarations"] := __n22;
__n23 := [  ];
__n10["functionDeclarations"] := __n23;
__n10["codeType"] := "function";
__n10["strict"] := false;
__n8["body"] := __n10;
__n8["generator"] := false;
__n8["async"] := false;
__n8["expression"] := false;
__n7["callee"] := __n8;
__n24 := [  ];
__n7["arguments"] := __n24;
__n6["expression"] := __n7;
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "assert";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "sameValue";
__n29["raw"] := "\"sameValue\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["callee"] := __n27;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "typeofInside";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "function";
__n32["raw"] := "'function'";
__n30 := [ __n31, __n32 ];
__n26["arguments"] := __n30;
__n25["expression"] := __n26;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "MemberExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "assert";
__n35["object"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "sameValue";
__n37["raw"] := "\"sameValue\"";
__n35["property"] := __n37;
__n35["computed"] := true;
__n34["callee"] := __n35;
__n39 := {  };
__n39["type"] := "UnaryExpression";
__n39["operator"] := "typeof";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "fun";
__n39["argument"] := __n40;
__n39["prefix"] := true;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "undefined";
__n41["raw"] := "'undefined'";
__n38 := [ __n39, __n41 ];
__n34["arguments"] := __n38;
__n33["expression"] := __n34;
__n1 := [ __n2, __n6, __n25, __n33 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [ "typeofInside" ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}