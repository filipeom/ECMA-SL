function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "isNaN";
__n4["callee"] := __n5;
__n7 := {  };
__n7["type"] := "BinaryExpression";
__n7["operator"] := "+";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "Number";
__n8["object"] := __n9;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "NaN";
__n10["raw"] := "\"NaN\"";
__n8["property"] := __n10;
__n8["computed"] := true;
__n7["left"] := __n8;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 1.;
__n11["raw"] := "1";
__n7["right"] := __n11;
__n6 := [ __n7 ];
__n4["arguments"] := __n6;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := true;
__n12["raw"] := "true";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: NaN + 1 === Not-a-Number. Actual: ";
__n20["raw"] := "'#1: NaN + 1 === Not-a-Number. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "+";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "NaN";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 1.;
__n23["raw"] := "1";
__n21["right"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "isNaN";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "+";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "MemberExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "Number";
__n31["object"] := __n32;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "NaN";
__n33["raw"] := "\"NaN\"";
__n31["property"] := __n33;
__n31["computed"] := true;
__n29["right"] := __n31;
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["left"] := __n26;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n25["right"] := __n34;
__n24["test"] := __n25;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "+";
__n42 := {  };
__n42["type"] := "Literal";
__n42["value"] := "#2: 1 + NaN === Not-a-Number. Actual: ";
__n42["raw"] := "'#2: 1 + NaN === Not-a-Number. Actual: '";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "+";
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := 1.;
__n44["raw"] := "1";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "NaN";
__n43["right"] := __n45;
__n41["right"] := __n43;
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n24["consequent"] := __n35;
__n24["alternate"] := null;
__n46 := {  };
__n46["type"] := "IfStatement";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!==";
__n48 := {  };
__n48["type"] := "CallExpression";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "isNaN";
__n48["callee"] := __n49;
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "+";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "Number";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "NaN";
__n54["raw"] := "\"NaN\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["left"] := __n52;
__n55 := {  };
__n55["type"] := "MemberExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "Number";
__n55["object"] := __n56;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "POSITIVE_INFINITY";
__n57["raw"] := "\"POSITIVE_INFINITY\"";
__n55["property"] := __n57;
__n55["computed"] := true;
__n51["right"] := __n55;
__n50 := [ __n51 ];
__n48["arguments"] := __n50;
__n47["left"] := __n48;
__n58 := {  };
__n58["type"] := "Literal";
__n58["value"] := true;
__n58["raw"] := "true";
__n47["right"] := __n58;
__n46["test"] := __n47;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "CallExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "$ERROR";
__n62["callee"] := __n63;
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "+";
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "#3: NaN + Infinity === Not-a-Number. Actual: ";
__n66["raw"] := "'#3: NaN + Infinity === Not-a-Number. Actual: '";
__n65["left"] := __n66;
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "+";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "NaN";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "Infinity";
__n67["right"] := __n69;
__n65["right"] := __n67;
__n64 := [ __n65 ];
__n62["arguments"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n46["consequent"] := __n59;
__n46["alternate"] := null;
__n70 := {  };
__n70["type"] := "IfStatement";
__n71 := {  };
__n71["type"] := "BinaryExpression";
__n71["operator"] := "!==";
__n72 := {  };
__n72["type"] := "CallExpression";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "isNaN";
__n72["callee"] := __n73;
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "+";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "Number";
__n76["object"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "POSITIVE_INFINITY";
__n78["raw"] := "\"POSITIVE_INFINITY\"";
__n76["property"] := __n78;
__n76["computed"] := true;
__n75["left"] := __n76;
__n79 := {  };
__n79["type"] := "MemberExpression";
__n80 := {  };
__n80["type"] := "Identifier";
__n80["name"] := "Number";
__n79["object"] := __n80;
__n81 := {  };
__n81["type"] := "Literal";
__n81["value"] := "NaN";
__n81["raw"] := "\"NaN\"";
__n79["property"] := __n81;
__n79["computed"] := true;
__n75["right"] := __n79;
__n74 := [ __n75 ];
__n72["arguments"] := __n74;
__n71["left"] := __n72;
__n82 := {  };
__n82["type"] := "Literal";
__n82["value"] := true;
__n82["raw"] := "true";
__n71["right"] := __n82;
__n70["test"] := __n71;
__n83 := {  };
__n83["type"] := "BlockStatement";
__n85 := {  };
__n85["type"] := "ExpressionStatement";
__n86 := {  };
__n86["type"] := "CallExpression";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "$ERROR";
__n86["callee"] := __n87;
__n89 := {  };
__n89["type"] := "BinaryExpression";
__n89["operator"] := "+";
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "#4: Infinity + NaN === Not-a-Number. Actual: ";
__n90["raw"] := "'#4: Infinity + NaN === Not-a-Number. Actual: '";
__n89["left"] := __n90;
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "Infinity";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "NaN";
__n91["right"] := __n93;
__n89["right"] := __n91;
__n88 := [ __n89 ];
__n86["arguments"] := __n88;
__n85["expression"] := __n86;
__n84 := [ __n85 ];
__n83["body"] := __n84;
__n70["consequent"] := __n83;
__n70["alternate"] := null;
__n94 := {  };
__n94["type"] := "IfStatement";
__n95 := {  };
__n95["type"] := "BinaryExpression";
__n95["operator"] := "!==";
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "isNaN";
__n96["callee"] := __n97;
__n99 := {  };
__n99["type"] := "BinaryExpression";
__n99["operator"] := "+";
__n100 := {  };
__n100["type"] := "MemberExpression";
__n101 := {  };
__n101["type"] := "Identifier";
__n101["name"] := "Number";
__n100["object"] := __n101;
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "NaN";
__n102["raw"] := "\"NaN\"";
__n100["property"] := __n102;
__n100["computed"] := true;
__n99["left"] := __n100;
__n103 := {  };
__n103["type"] := "MemberExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "Number";
__n103["object"] := __n104;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "NEGATIVE_INFINITY";
__n105["raw"] := "\"NEGATIVE_INFINITY\"";
__n103["property"] := __n105;
__n103["computed"] := true;
__n99["right"] := __n103;
__n98 := [ __n99 ];
__n96["arguments"] := __n98;
__n95["left"] := __n96;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := true;
__n106["raw"] := "true";
__n95["right"] := __n106;
__n94["test"] := __n95;
__n107 := {  };
__n107["type"] := "BlockStatement";
__n109 := {  };
__n109["type"] := "ExpressionStatement";
__n110 := {  };
__n110["type"] := "CallExpression";
__n111 := {  };
__n111["type"] := "Identifier";
__n111["name"] := "$ERROR";
__n110["callee"] := __n111;
__n113 := {  };
__n113["type"] := "BinaryExpression";
__n113["operator"] := "+";
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "#5: NaN + Infinity === Not-a-Number. Actual: ";
__n114["raw"] := "'#5: NaN + Infinity === Not-a-Number. Actual: '";
__n113["left"] := __n114;
__n115 := {  };
__n115["type"] := "BinaryExpression";
__n115["operator"] := "+";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "NaN";
__n115["left"] := __n116;
__n117 := {  };
__n117["type"] := "Identifier";
__n117["name"] := "Infinity";
__n115["right"] := __n117;
__n113["right"] := __n115;
__n112 := [ __n113 ];
__n110["arguments"] := __n112;
__n109["expression"] := __n110;
__n108 := [ __n109 ];
__n107["body"] := __n108;
__n94["consequent"] := __n107;
__n94["alternate"] := null;
__n118 := {  };
__n118["type"] := "IfStatement";
__n119 := {  };
__n119["type"] := "BinaryExpression";
__n119["operator"] := "!==";
__n120 := {  };
__n120["type"] := "CallExpression";
__n121 := {  };
__n121["type"] := "Identifier";
__n121["name"] := "isNaN";
__n120["callee"] := __n121;
__n123 := {  };
__n123["type"] := "BinaryExpression";
__n123["operator"] := "+";
__n124 := {  };
__n124["type"] := "MemberExpression";
__n125 := {  };
__n125["type"] := "Identifier";
__n125["name"] := "Number";
__n124["object"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "NEGATIVE_INFINITY";
__n126["raw"] := "\"NEGATIVE_INFINITY\"";
__n124["property"] := __n126;
__n124["computed"] := true;
__n123["left"] := __n124;
__n127 := {  };
__n127["type"] := "MemberExpression";
__n128 := {  };
__n128["type"] := "Identifier";
__n128["name"] := "Number";
__n127["object"] := __n128;
__n129 := {  };
__n129["type"] := "Literal";
__n129["value"] := "NaN";
__n129["raw"] := "\"NaN\"";
__n127["property"] := __n129;
__n127["computed"] := true;
__n123["right"] := __n127;
__n122 := [ __n123 ];
__n120["arguments"] := __n122;
__n119["left"] := __n120;
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := true;
__n130["raw"] := "true";
__n119["right"] := __n130;
__n118["test"] := __n119;
__n131 := {  };
__n131["type"] := "BlockStatement";
__n133 := {  };
__n133["type"] := "ExpressionStatement";
__n134 := {  };
__n134["type"] := "CallExpression";
__n135 := {  };
__n135["type"] := "Identifier";
__n135["name"] := "$ERROR";
__n134["callee"] := __n135;
__n137 := {  };
__n137["type"] := "BinaryExpression";
__n137["operator"] := "+";
__n138 := {  };
__n138["type"] := "Literal";
__n138["value"] := "#6: Infinity + NaN === Not-a-Number. Actual: ";
__n138["raw"] := "'#6: Infinity + NaN === Not-a-Number. Actual: '";
__n137["left"] := __n138;
__n139 := {  };
__n139["type"] := "BinaryExpression";
__n139["operator"] := "+";
__n140 := {  };
__n140["type"] := "Identifier";
__n140["name"] := "Infinity";
__n139["left"] := __n140;
__n141 := {  };
__n141["type"] := "Identifier";
__n141["name"] := "NaN";
__n139["right"] := __n141;
__n137["right"] := __n139;
__n136 := [ __n137 ];
__n134["arguments"] := __n136;
__n133["expression"] := __n134;
__n132 := [ __n133 ];
__n131["body"] := __n132;
__n118["consequent"] := __n131;
__n118["alternate"] := null;
__n1 := [ __n2, __n24, __n46, __n70, __n94, __n118 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n142 := [  ];
__n0["variableDeclarations"] := __n142;
__n143 := [  ];
__n0["functionDeclarations"] := __n143;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}