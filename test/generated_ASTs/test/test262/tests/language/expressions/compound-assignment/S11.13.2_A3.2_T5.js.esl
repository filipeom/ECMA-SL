function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "UnaryExpression";
__n6["operator"] := "-";
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 1.;
__n7["raw"] := "1";
__n6["argument"] := __n7;
__n6["prefix"] := true;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "VariableDeclaration";
__n10 := {  };
__n10["type"] := "VariableDeclarator";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x1";
__n10["id"] := __n11;
__n12 := {  };
__n12["type"] := "AssignmentExpression";
__n12["operator"] := "-=";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "x";
__n12["left"] := __n13;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := 1.;
__n14["raw"] := "1";
__n12["right"] := __n14;
__n10["init"] := __n12;
__n9 := [ __n10 ];
__n8["declarations"] := __n9;
__n8["kind"] := "var";
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "x1";
__n16["left"] := __n17;
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "-";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 2.;
__n19["raw"] := "2";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n16["right"] := __n18;
__n15["test"] := __n16;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "+";
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "#1: var x = -1; var x1 = (x -= 1); x1 === -2. Actual: ";
__n27["raw"] := "'#1: var x = -1; var x1 = (x -= 1); x1 === -2. Actual: '";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "x1";
__n26["right"] := __n28;
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n15["consequent"] := __n20;
__n15["alternate"] := null;
__n29 := {  };
__n29["type"] := "VariableDeclaration";
__n31 := {  };
__n31["type"] := "VariableDeclarator";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "y";
__n31["id"] := __n32;
__n31["init"] := null;
__n30 := [ __n31 ];
__n29["declarations"] := __n30;
__n29["kind"] := "var";
__n33 := {  };
__n33["type"] := "VariableDeclaration";
__n35 := {  };
__n35["type"] := "VariableDeclarator";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "y1";
__n35["id"] := __n36;
__n35["init"] := null;
__n34 := [ __n35 ];
__n33["declarations"] := __n34;
__n33["kind"] := "var";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "AssignmentExpression";
__n38["operator"] := "=";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "y";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "-";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := 1.;
__n41["raw"] := "1";
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n38["right"] := __n40;
__n37["expression"] := __n38;
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "y1";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "AssignmentExpression";
__n45["operator"] := "-=";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "y";
__n45["left"] := __n46;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n45["right"] := __n47;
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n48 := {  };
__n48["type"] := "IfStatement";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "y1";
__n49["left"] := __n50;
__n51 := {  };
__n51["type"] := "UnaryExpression";
__n51["operator"] := "-";
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := 2.;
__n52["raw"] := "2";
__n51["argument"] := __n52;
__n51["prefix"] := true;
__n49["right"] := __n51;
__n48["test"] := __n49;
__n53 := {  };
__n53["type"] := "BlockStatement";
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "$ERROR";
__n56["callee"] := __n57;
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "+";
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "#2: y = -1; y1 = (y -= 1); y1 === -2. Actual: ";
__n60["raw"] := "'#2: y = -1; y1 = (y -= 1); y1 === -2. Actual: '";
__n59["left"] := __n60;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "y1";
__n59["right"] := __n61;
__n58 := [ __n59 ];
__n56["arguments"] := __n58;
__n55["expression"] := __n56;
__n54 := [ __n55 ];
__n53["body"] := __n54;
__n48["consequent"] := __n53;
__n48["alternate"] := null;
__n1 := [ __n2, __n8, __n15, __n29, __n33, __n37, __n42, __n48 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n62 := [ "x", "x1", "y", "y1" ];
__n0["variableDeclarations"] := __n62;
__n63 := [  ];
__n0["functionDeclarations"] := __n63;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}