function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!=";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "undefined";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "undefined";
__n4["right"] := __n6;
__n3["left"] := __n4;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := false;
__n7["raw"] := "false";
__n3["right"] := __n7;
__n2["test"] := __n3;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "$ERROR";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: (undefined != undefined) === false";
__n14["raw"] := "'#1: (undefined != undefined) === false'";
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n2["consequent"] := __n8;
__n2["alternate"] := null;
__n15 := {  };
__n15["type"] := "IfStatement";
__n16 := {  };
__n16["type"] := "BinaryExpression";
__n16["operator"] := "!==";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "!=";
__n18 := {  };
__n18["type"] := "UnaryExpression";
__n18["operator"] := "void";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := 0.;
__n19["raw"] := "0";
__n18["argument"] := __n19;
__n18["prefix"] := true;
__n17["left"] := __n18;
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "undefined";
__n17["right"] := __n20;
__n16["left"] := __n17;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := false;
__n21["raw"] := "false";
__n16["right"] := __n21;
__n15["test"] := __n16;
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "$ERROR";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "#2: (void 0 != undefined) === false";
__n28["raw"] := "'#2: (void 0 != undefined) === false'";
__n27 := [ __n28 ];
__n25["arguments"] := __n27;
__n24["expression"] := __n25;
__n23 := [ __n24 ];
__n22["body"] := __n23;
__n15["consequent"] := __n22;
__n15["alternate"] := null;
__n29 := {  };
__n29["type"] := "IfStatement";
__n30 := {  };
__n30["type"] := "BinaryExpression";
__n30["operator"] := "!==";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "!=";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "undefined";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "eval";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "var x";
__n36["raw"] := "\"var x\"";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n31["right"] := __n33;
__n30["left"] := __n31;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := false;
__n37["raw"] := "false";
__n30["right"] := __n37;
__n29["test"] := __n30;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#3: (undefined != eval(\"var x\")) === false";
__n44["raw"] := "'#3: (undefined != eval(\"var x\")) === false'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n29["consequent"] := __n38;
__n29["alternate"] := null;
__n45 := {  };
__n45["type"] := "IfStatement";
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "!==";
__n47 := {  };
__n47["type"] := "BinaryExpression";
__n47["operator"] := "!=";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "undefined";
__n47["left"] := __n48;
__n49 := {  };
__n49["type"] := "Literal";
__n49["value"] := 'null;
__n49["raw"] := "\"'null\"";
__n47["right"] := __n49;
__n46["left"] := __n47;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := false;
__n50["raw"] := "false";
__n46["right"] := __n50;
__n45["test"] := __n46;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n53 := {  };
__n53["type"] := "ExpressionStatement";
__n54 := {  };
__n54["type"] := "CallExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "$ERROR";
__n54["callee"] := __n55;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "#4: (undefined != null) === false";
__n57["raw"] := "'#4: (undefined != null) === false'";
__n56 := [ __n57 ];
__n54["arguments"] := __n56;
__n53["expression"] := __n54;
__n52 := [ __n53 ];
__n51["body"] := __n52;
__n45["consequent"] := __n51;
__n45["alternate"] := null;
__n58 := {  };
__n58["type"] := "IfStatement";
__n59 := {  };
__n59["type"] := "BinaryExpression";
__n59["operator"] := "!==";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!=";
__n61 := {  };
__n61["type"] := "Literal";
__n61["value"] := 'null;
__n61["raw"] := "\"'null\"";
__n60["left"] := __n61;
__n62 := {  };
__n62["type"] := "UnaryExpression";
__n62["operator"] := "void";
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := 0.;
__n63["raw"] := "0";
__n62["argument"] := __n63;
__n62["prefix"] := true;
__n60["right"] := __n62;
__n59["left"] := __n60;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := false;
__n64["raw"] := "false";
__n59["right"] := __n64;
__n58["test"] := __n59;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "$ERROR";
__n68["callee"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#5: (null != void 0) === false";
__n71["raw"] := "'#5: (null != void 0) === false'";
__n70 := [ __n71 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n58["consequent"] := __n65;
__n58["alternate"] := null;
__n72 := {  };
__n72["type"] := "IfStatement";
__n73 := {  };
__n73["type"] := "BinaryExpression";
__n73["operator"] := "!==";
__n74 := {  };
__n74["type"] := "BinaryExpression";
__n74["operator"] := "!=";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 'null;
__n75["raw"] := "\"'null\"";
__n74["left"] := __n75;
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := 'null;
__n76["raw"] := "\"'null\"";
__n74["right"] := __n76;
__n73["left"] := __n74;
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := false;
__n77["raw"] := "false";
__n73["right"] := __n77;
__n72["test"] := __n73;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#6: (null != null) === false";
__n84["raw"] := "'#6: (null != null) === false'";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n72["consequent"] := __n78;
__n72["alternate"] := null;
__n1 := [ __n2, __n15, __n29, __n45, __n58, __n72 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n85 := [  ];
__n0["variableDeclarations"] := __n85;
__n86 := [  ];
__n0["functionDeclarations"] := __n86;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}