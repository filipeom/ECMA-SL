function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "instanceof";
__n4 := {  };
__n4["type"] := "Literal";
__n4["value"] := 0.;
__n4["raw"] := "0";
__n3["left"] := __n4;
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "Number";
__n3["right"] := __n5;
__n2["test"] := __n3;
__n6 := {  };
__n6["type"] := "BlockStatement";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "$ERROR";
__n9["callee"] := __n10;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "#1: 0 is not instanceof Number";
__n12["raw"] := "'#1: 0 is not instanceof Number'";
__n11 := [ __n12 ];
__n9["arguments"] := __n11;
__n8["expression"] := __n9;
__n7 := [ __n8 ];
__n6["body"] := __n7;
__n2["consequent"] := __n6;
__n2["alternate"] := null;
__n13 := {  };
__n13["type"] := "IfStatement";
__n14 := {  };
__n14["type"] := "BinaryExpression";
__n14["operator"] := "instanceof";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "Number";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 0.;
__n18["raw"] := "0";
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["left"] := __n15;
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "Number";
__n14["right"] := __n19;
__n13["test"] := __n14;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "CallExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "$ERROR";
__n23["callee"] := __n24;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "#2: Number(0) is not instanceof Number";
__n26["raw"] := "'#2: Number(0) is not instanceof Number'";
__n25 := [ __n26 ];
__n23["arguments"] := __n25;
__n22["expression"] := __n23;
__n21 := [ __n22 ];
__n20["body"] := __n21;
__n13["consequent"] := __n20;
__n13["alternate"] := null;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "instanceof";
__n30 := {  };
__n30["type"] := "NewExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Number";
__n30["callee"] := __n31;
__n32 := [  ];
__n30["arguments"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "Number";
__n29["right"] := __n33;
__n28["left"] := __n29;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := true;
__n34["raw"] := "true";
__n28["right"] := __n34;
__n27["test"] := __n28;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#3: new Number instanceof Number";
__n41["raw"] := "'#3: new Number instanceof Number'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n27["consequent"] := __n35;
__n27["alternate"] := null;
__n1 := [ __n2, __n13, __n27 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}