function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "UpdateExpression";
__n9["operator"] := "--";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "x";
__n9["argument"] := __n10;
__n9["prefix"] := false;
__n8["expression"] := __n9;
__n11 := {  };
__n11["type"] := "IfStatement";
__n12 := {  };
__n12["type"] := "BinaryExpression";
__n12["operator"] := "!==";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "isNaN";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "x";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["left"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := true;
__n17["raw"] := "true";
__n12["right"] := __n17;
__n11["test"] := __n12;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "+";
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1: var x = {}; x--; x === Not-a-Number. Actual: ";
__n25["raw"] := "'#1: var x = {}; x--; x === Not-a-Number. Actual: '";
__n24["left"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n24["right"] := __n26;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n11["consequent"] := __n18;
__n11["alternate"] := null;
__n27 := {  };
__n27["type"] := "VariableDeclaration";
__n29 := {  };
__n29["type"] := "VariableDeclarator";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n29["id"] := __n30;
__n31 := {  };
__n31["type"] := "FunctionExpression";
__n31["id"] := null;
__n32 := [  ];
__n31["params"] := __n32;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ReturnStatement";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := 1.;
__n36["raw"] := "1";
__n35["argument"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n37 := [  ];
__n33["variableDeclarations"] := __n37;
__n38 := [  ];
__n33["functionDeclarations"] := __n38;
__n33["codeType"] := "function";
__n33["strict"] := false;
__n31["body"] := __n33;
__n31["generator"] := false;
__n31["async"] := false;
__n31["expression"] := false;
__n29["init"] := __n31;
__n28 := [ __n29 ];
__n27["declarations"] := __n28;
__n27["kind"] := "var";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "UpdateExpression";
__n40["operator"] := "--";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "x";
__n40["argument"] := __n41;
__n40["prefix"] := false;
__n39["expression"] := __n40;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "CallExpression";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "isNaN";
__n44["callee"] := __n45;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "x";
__n46 := [ __n47 ];
__n44["arguments"] := __n46;
__n43["left"] := __n44;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := true;
__n48["raw"] := "true";
__n43["right"] := __n48;
__n42["test"] := __n43;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "BinaryExpression";
__n55["operator"] := "+";
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "#2: var x = function(){return 1}; x--; x === Not-a-Number. Actual: ";
__n56["raw"] := "'#2: var x = function(){return 1}; x--; x === Not-a-Number. Actual: '";
__n55["left"] := __n56;
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "x";
__n55["right"] := __n57;
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n42["consequent"] := __n49;
__n42["alternate"] := null;
__n1 := [ __n2, __n8, __n11, __n27, __n39, __n42 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n58 := [ "x" ];
__n0["variableDeclarations"] := __n58;
__n59 := [  ];
__n0["functionDeclarations"] := __n59;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}