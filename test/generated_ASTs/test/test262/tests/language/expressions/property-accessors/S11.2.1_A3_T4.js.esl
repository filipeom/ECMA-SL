function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ExpressionStatement";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "undefined";
__n7["object"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "toString";
__n9["raw"] := "\"toString\"";
__n7["property"] := __n9;
__n7["computed"] := true;
__n6["callee"] := __n7;
__n10 := [  ];
__n6["arguments"] := __n10;
__n5["expression"] := __n6;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "BinaryExpression";
__n15["operator"] := "+";
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1.1: undefined.toString() throw TypeError. Actual: ";
__n16["raw"] := "'#1.1: undefined.toString() throw TypeError. Actual: '";
__n15["left"] := __n16;
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "MemberExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "undefined";
__n18["object"] := __n19;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "toString";
__n20["raw"] := "\"toString\"";
__n18["property"] := __n20;
__n18["computed"] := true;
__n17["callee"] := __n18;
__n21 := [  ];
__n17["arguments"] := __n21;
__n15["right"] := __n17;
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n4 := [ __n5, __n11 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n22 := {  };
__n22["type"] := "CatchClause";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "e";
__n22["param"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "instanceof";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "e";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "TypeError";
__n28["right"] := __n30;
__n27["left"] := __n28;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := true;
__n31["raw"] := "true";
__n27["right"] := __n31;
__n26["test"] := __n27;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#1.2: undefined.toString() throw TypeError. Actual: ";
__n39["raw"] := "'#1.2: undefined.toString() throw TypeError. Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "e";
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n26["consequent"] := __n32;
__n26["alternate"] := null;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n22["body"] := __n24;
__n2["handler"] := __n22;
__n2["finalizer"] := null;
__n41 := {  };
__n41["type"] := "TryStatement";
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "MemberExpression";
__n46["computed"] := true;
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "undefined";
__n46["object"] := __n47;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "toString";
__n48["raw"] := "\"toString\"";
__n46["property"] := __n48;
__n45["callee"] := __n46;
__n49 := [  ];
__n45["arguments"] := __n49;
__n44["expression"] := __n45;
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#2.1: undefined[\"toString\"]() throw TypeError. Actual: ";
__n55["raw"] := "'#2.1: undefined[\"toString\"]() throw TypeError. Actual: '";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "CallExpression";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n57["computed"] := true;
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "undefined";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "toString";
__n59["raw"] := "\"toString\"";
__n57["property"] := __n59;
__n56["callee"] := __n57;
__n60 := [  ];
__n56["arguments"] := __n60;
__n54["right"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n43 := [ __n44, __n50 ];
__n42["body"] := __n43;
__n41["block"] := __n42;
__n61 := {  };
__n61["type"] := "CatchClause";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "e";
__n61["param"] := __n62;
__n63 := {  };
__n63["type"] := "BlockStatement";
__n65 := {  };
__n65["type"] := "IfStatement";
__n66 := {  };
__n66["type"] := "BinaryExpression";
__n66["operator"] := "!==";
__n67 := {  };
__n67["type"] := "BinaryExpression";
__n67["operator"] := "instanceof";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "e";
__n67["left"] := __n68;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "TypeError";
__n67["right"] := __n69;
__n66["left"] := __n67;
__n70 := {  };
__n70["type"] := "Literal";
__n70["value"] := true;
__n70["raw"] := "true";
__n66["right"] := __n70;
__n65["test"] := __n66;
__n71 := {  };
__n71["type"] := "BlockStatement";
__n73 := {  };
__n73["type"] := "ExpressionStatement";
__n74 := {  };
__n74["type"] := "CallExpression";
__n75 := {  };
__n75["type"] := "Identifier";
__n75["name"] := "$ERROR";
__n74["callee"] := __n75;
__n77 := {  };
__n77["type"] := "BinaryExpression";
__n77["operator"] := "+";
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#2.2: undefined[\"toString\"]() throw TypeError. Actual: ";
__n78["raw"] := "'#2.2: undefined[\"toString\"]() throw TypeError. Actual: '";
__n77["left"] := __n78;
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "e";
__n77["right"] := __n79;
__n76 := [ __n77 ];
__n74["arguments"] := __n76;
__n73["expression"] := __n74;
__n72 := [ __n73 ];
__n71["body"] := __n72;
__n65["consequent"] := __n71;
__n65["alternate"] := null;
__n64 := [ __n65 ];
__n63["body"] := __n64;
__n61["body"] := __n63;
__n41["handler"] := __n61;
__n41["finalizer"] := null;
__n1 := [ __n2, __n41 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n80 := [  ];
__n0["variableDeclarations"] := __n80;
__n81 := [  ];
__n0["functionDeclarations"] := __n81;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}