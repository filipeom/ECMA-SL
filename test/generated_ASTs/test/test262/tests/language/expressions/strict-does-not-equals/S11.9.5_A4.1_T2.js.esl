function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "BinaryExpression";
__n4["operator"] := "!==";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := true;
__n5["raw"] := "true";
__n4["left"] := __n5;
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "Number";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "NaN";
__n8["raw"] := "\"NaN\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n4["right"] := __n6;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "$ERROR";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "#1: true !== NaN";
__n15["raw"] := "'#1: true !== NaN'";
__n14 := [ __n15 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n10 := [ __n11 ];
__n9["body"] := __n10;
__n2["consequent"] := __n9;
__n2["alternate"] := null;
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "!";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "UnaryExpression";
__n19["operator"] := "-";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := 1.;
__n20["raw"] := "1";
__n19["argument"] := __n20;
__n19["prefix"] := true;
__n18["left"] := __n19;
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "Number";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "NaN";
__n23["raw"] := "\"NaN\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n18["right"] := __n21;
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["test"] := __n17;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "$ERROR";
__n27["callee"] := __n28;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "#2: -1 !== NaN";
__n30["raw"] := "'#2: -1 !== NaN'";
__n29 := [ __n30 ];
__n27["arguments"] := __n29;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n16["consequent"] := __n24;
__n16["alternate"] := null;
__n31 := {  };
__n31["type"] := "IfStatement";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "!";
__n33 := {  };
__n33["type"] := "BinaryExpression";
__n33["operator"] := "!==";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "Number";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "NaN";
__n36["raw"] := "\"NaN\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["left"] := __n34;
__n37 := {  };
__n37["type"] := "MemberExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "Number";
__n37["object"] := __n38;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "NaN";
__n39["raw"] := "\"NaN\"";
__n37["property"] := __n39;
__n37["computed"] := true;
__n33["right"] := __n37;
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["test"] := __n32;
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "CallExpression";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "$ERROR";
__n43["callee"] := __n44;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "#3: NaN !== NaN";
__n46["raw"] := "'#3: NaN !== NaN'";
__n45 := [ __n46 ];
__n43["arguments"] := __n45;
__n42["expression"] := __n43;
__n41 := [ __n42 ];
__n40["body"] := __n41;
__n31["consequent"] := __n40;
__n31["alternate"] := null;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "BinaryExpression";
__n49["operator"] := "!==";
__n50 := {  };
__n50["type"] := "MemberExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "Number";
__n50["object"] := __n51;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "POSITIVE_INFINITY";
__n52["raw"] := "\"POSITIVE_INFINITY\"";
__n50["property"] := __n52;
__n50["computed"] := true;
__n49["left"] := __n50;
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "Number";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "NaN";
__n55["raw"] := "\"NaN\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n49["right"] := __n53;
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n56 := {  };
__n56["type"] := "BlockStatement";
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#4: +Infinity !== NaN";
__n62["raw"] := "'#4: +Infinity !== NaN'";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n57 := [ __n58 ];
__n56["body"] := __n57;
__n47["consequent"] := __n56;
__n47["alternate"] := null;
__n63 := {  };
__n63["type"] := "IfStatement";
__n64 := {  };
__n64["type"] := "UnaryExpression";
__n64["operator"] := "!";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "Number";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "NEGATIVE_INFINITY";
__n68["raw"] := "\"NEGATIVE_INFINITY\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["left"] := __n66;
__n69 := {  };
__n69["type"] := "MemberExpression";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "Number";
__n69["object"] := __n70;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "NaN";
__n71["raw"] := "\"NaN\"";
__n69["property"] := __n71;
__n69["computed"] := true;
__n65["right"] := __n69;
__n64["argument"] := __n65;
__n64["prefix"] := true;
__n63["test"] := __n64;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := "#5: -Infinity !== NaN";
__n78["raw"] := "'#5: -Infinity !== NaN'";
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n63["consequent"] := __n72;
__n63["alternate"] := null;
__n79 := {  };
__n79["type"] := "IfStatement";
__n80 := {  };
__n80["type"] := "UnaryExpression";
__n80["operator"] := "!";
__n81 := {  };
__n81["type"] := "BinaryExpression";
__n81["operator"] := "!==";
__n82 := {  };
__n82["type"] := "MemberExpression";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "Number";
__n82["object"] := __n83;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "MAX_VALUE";
__n84["raw"] := "\"MAX_VALUE\"";
__n82["property"] := __n84;
__n82["computed"] := true;
__n81["left"] := __n82;
__n85 := {  };
__n85["type"] := "MemberExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "Number";
__n85["object"] := __n86;
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "NaN";
__n87["raw"] := "\"NaN\"";
__n85["property"] := __n87;
__n85["computed"] := true;
__n81["right"] := __n85;
__n80["argument"] := __n81;
__n80["prefix"] := true;
__n79["test"] := __n80;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "$ERROR";
__n91["callee"] := __n92;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "#6: Number.MAX_VALUE !== NaN";
__n94["raw"] := "'#6: Number.MAX_VALUE !== NaN'";
__n93 := [ __n94 ];
__n91["arguments"] := __n93;
__n90["expression"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n79["consequent"] := __n88;
__n79["alternate"] := null;
__n95 := {  };
__n95["type"] := "IfStatement";
__n96 := {  };
__n96["type"] := "UnaryExpression";
__n96["operator"] := "!";
__n97 := {  };
__n97["type"] := "BinaryExpression";
__n97["operator"] := "!==";
__n98 := {  };
__n98["type"] := "MemberExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "Number";
__n98["object"] := __n99;
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "MIN_VALUE";
__n100["raw"] := "\"MIN_VALUE\"";
__n98["property"] := __n100;
__n98["computed"] := true;
__n97["left"] := __n98;
__n101 := {  };
__n101["type"] := "MemberExpression";
__n102 := {  };
__n102["type"] := "Identifier";
__n102["name"] := "Number";
__n101["object"] := __n102;
__n103 := {  };
__n103["type"] := "Literal";
__n103["value"] := "NaN";
__n103["raw"] := "\"NaN\"";
__n101["property"] := __n103;
__n101["computed"] := true;
__n97["right"] := __n101;
__n96["argument"] := __n97;
__n96["prefix"] := true;
__n95["test"] := __n96;
__n104 := {  };
__n104["type"] := "BlockStatement";
__n106 := {  };
__n106["type"] := "ExpressionStatement";
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "$ERROR";
__n107["callee"] := __n108;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := "#7: Number.MIN_VALUE !== NaN";
__n110["raw"] := "'#7: Number.MIN_VALUE !== NaN'";
__n109 := [ __n110 ];
__n107["arguments"] := __n109;
__n106["expression"] := __n107;
__n105 := [ __n106 ];
__n104["body"] := __n105;
__n95["consequent"] := __n104;
__n95["alternate"] := null;
__n111 := {  };
__n111["type"] := "IfStatement";
__n112 := {  };
__n112["type"] := "UnaryExpression";
__n112["operator"] := "!";
__n113 := {  };
__n113["type"] := "BinaryExpression";
__n113["operator"] := "!==";
__n114 := {  };
__n114["type"] := "Literal";
__n114["value"] := "string";
__n114["raw"] := "\"string\"";
__n113["left"] := __n114;
__n115 := {  };
__n115["type"] := "MemberExpression";
__n116 := {  };
__n116["type"] := "Identifier";
__n116["name"] := "Number";
__n115["object"] := __n116;
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := "NaN";
__n117["raw"] := "\"NaN\"";
__n115["property"] := __n117;
__n115["computed"] := true;
__n113["right"] := __n115;
__n112["argument"] := __n113;
__n112["prefix"] := true;
__n111["test"] := __n112;
__n118 := {  };
__n118["type"] := "BlockStatement";
__n120 := {  };
__n120["type"] := "ExpressionStatement";
__n121 := {  };
__n121["type"] := "CallExpression";
__n122 := {  };
__n122["type"] := "Identifier";
__n122["name"] := "$ERROR";
__n121["callee"] := __n122;
__n124 := {  };
__n124["type"] := "Literal";
__n124["value"] := "#8: \"string\" !== NaN";
__n124["raw"] := "'#8: \"string\" !== NaN'";
__n123 := [ __n124 ];
__n121["arguments"] := __n123;
__n120["expression"] := __n121;
__n119 := [ __n120 ];
__n118["body"] := __n119;
__n111["consequent"] := __n118;
__n111["alternate"] := null;
__n125 := {  };
__n125["type"] := "IfStatement";
__n126 := {  };
__n126["type"] := "UnaryExpression";
__n126["operator"] := "!";
__n127 := {  };
__n127["type"] := "BinaryExpression";
__n127["operator"] := "!==";
__n128 := {  };
__n128["type"] := "NewExpression";
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "Object";
__n128["callee"] := __n129;
__n130 := [  ];
__n128["arguments"] := __n130;
__n127["left"] := __n128;
__n131 := {  };
__n131["type"] := "MemberExpression";
__n132 := {  };
__n132["type"] := "Identifier";
__n132["name"] := "Number";
__n131["object"] := __n132;
__n133 := {  };
__n133["type"] := "Literal";
__n133["value"] := "NaN";
__n133["raw"] := "\"NaN\"";
__n131["property"] := __n133;
__n131["computed"] := true;
__n127["right"] := __n131;
__n126["argument"] := __n127;
__n126["prefix"] := true;
__n125["test"] := __n126;
__n134 := {  };
__n134["type"] := "BlockStatement";
__n136 := {  };
__n136["type"] := "ExpressionStatement";
__n137 := {  };
__n137["type"] := "CallExpression";
__n138 := {  };
__n138["type"] := "Identifier";
__n138["name"] := "$ERROR";
__n137["callee"] := __n138;
__n140 := {  };
__n140["type"] := "Literal";
__n140["value"] := "#9: new Object() !== NaN";
__n140["raw"] := "'#9: new Object() !== NaN'";
__n139 := [ __n140 ];
__n137["arguments"] := __n139;
__n136["expression"] := __n137;
__n135 := [ __n136 ];
__n134["body"] := __n135;
__n125["consequent"] := __n134;
__n125["alternate"] := null;
__n1 := [ __n2, __n16, __n31, __n47, __n63, __n79, __n95, __n111, __n125 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n141 := [  ];
__n0["variableDeclarations"] := __n141;
__n142 := [  ];
__n0["functionDeclarations"] := __n142;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}