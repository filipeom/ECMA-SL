function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 3.;
__n6["raw"] := "3";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "assert";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "sameValue";
__n13["raw"] := "\"sameValue\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["callee"] := __n11;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "MemberExpression";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "ab";
__n17["raw"] := "\"ab\"";
__n16["object"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "replace";
__n18["raw"] := "\"replace\"";
__n16["property"] := __n18;
__n16["computed"] := true;
__n15["callee"] := __n16;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "b";
__n20["raw"] := "\"b\"";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f";
__n19 := [ __n20, __n21 ];
__n15["arguments"] := __n19;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "aa";
__n22["raw"] := "\"aa\"";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "\"ab\".replace(\"b\", f)";
__n23["raw"] := "'\"ab\".replace(\"b\", f)'";
__n14 := [ __n15, __n22, __n23 ];
__n10["arguments"] := __n14;
__n9["expression"] := __n10;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "MemberExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "assert";
__n26["object"] := __n27;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "sameValue";
__n28["raw"] := "\"sameValue\"";
__n26["property"] := __n28;
__n26["computed"] := true;
__n25["callee"] := __n26;
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "x";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "undefined";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "x";
__n32["raw"] := "'x'";
__n29 := [ __n30, __n31, __n32 ];
__n25["arguments"] := __n29;
__n24["expression"] := __n25;
__n1 := [ __n2, __n7, __n9, __n24 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [ "x" ];
__n0["variableDeclarations"] := __n33;
__n35 := {  };
__n35["type"] := "FunctionDeclaration";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "f";
__n35["id"] := __n36;
__n37 := [  ];
__n35["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "use strict";
__n41["raw"] := "\"use strict\"";
__n40["expression"] := __n41;
__n40["directive"] := "use strict";
__n42 := {  };
__n42["type"] := "ExpressionStatement";
__n43 := {  };
__n43["type"] := "AssignmentExpression";
__n43["operator"] := "=";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "x";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "ThisExpression";
__n43["right"] := __n45;
__n42["expression"] := __n43;
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "a";
__n47["raw"] := "\"a\"";
__n46["argument"] := __n47;
__n39 := [ __n40, __n42, __n46 ];
__n38["body"] := __n39;
__n48 := [  ];
__n38["variableDeclarations"] := __n48;
__n49 := [  ];
__n38["functionDeclarations"] := __n49;
__n38["codeType"] := "function";
__n38["strict"] := true;
__n35["body"] := __n38;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n34 := [ __n35 ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}