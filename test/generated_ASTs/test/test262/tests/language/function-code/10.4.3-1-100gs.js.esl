function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 3.;
__n6["raw"] := "3";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "LogicalExpression";
__n10["operator"] := "||";
__n11 := {  };
__n11["type"] := "BinaryExpression";
__n11["operator"] := "!==";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "MemberExpression";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "ab";
__n14["raw"] := "\"ab\"";
__n13["object"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "replace";
__n15["raw"] := "\"replace\"";
__n13["property"] := __n15;
__n13["computed"] := true;
__n12["callee"] := __n13;
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "b";
__n17["raw"] := "\"b\"";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "f";
__n16 := [ __n17, __n18 ];
__n12["arguments"] := __n16;
__n11["left"] := __n12;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "aa";
__n19["raw"] := "\"aa\"";
__n11["right"] := __n19;
__n10["left"] := __n11;
__n20 := {  };
__n20["type"] := "BinaryExpression";
__n20["operator"] := "!==";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "x";
__n20["left"] := __n21;
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "undefined";
__n20["right"] := __n22;
__n10["right"] := __n20;
__n9["test"] := __n10;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ThrowStatement";
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "'this' had incorrect value!";
__n26["raw"] := "\"'this' had incorrect value!\"";
__n25["argument"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n9["consequent"] := __n23;
__n9["alternate"] := null;
__n1 := [ __n2, __n7, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n27 := [ "x" ];
__n0["variableDeclarations"] := __n27;
__n29 := {  };
__n29["type"] := "FunctionDeclaration";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f";
__n29["id"] := __n30;
__n31 := [  ];
__n29["params"] := __n31;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "use strict";
__n35["raw"] := "\"use strict\"";
__n34["expression"] := __n35;
__n34["directive"] := "use strict";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "AssignmentExpression";
__n37["operator"] := "=";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "x";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "ThisExpression";
__n37["right"] := __n39;
__n36["expression"] := __n37;
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "a";
__n41["raw"] := "\"a\"";
__n40["argument"] := __n41;
__n33 := [ __n34, __n36, __n40 ];
__n32["body"] := __n33;
__n42 := [  ];
__n32["variableDeclarations"] := __n42;
__n43 := [  ];
__n32["functionDeclarations"] := __n43;
__n32["codeType"] := "function";
__n32["strict"] := true;
__n29["body"] := __n32;
__n29["generator"] := false;
__n29["async"] := false;
__n29["expression"] := false;
__n28 := [ __n29 ];
__n0["functionDeclarations"] := __n28;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}