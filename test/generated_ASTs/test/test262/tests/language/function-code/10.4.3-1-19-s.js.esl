function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "global";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "ThisExpression";
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "var";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "testcase";
__n9["expression"] := __n10;
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "testcase";
__n12["callee"] := __n13;
__n14 := [  ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n1 := [ __n2, __n4, __n9, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n15 := [ "global" ];
__n0["variableDeclarations"] := __n15;
__n17 := {  };
__n17["type"] := "FunctionDeclaration";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "testcase";
__n17["id"] := __n18;
__n19 := [  ];
__n17["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "my_eval";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "eval";
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "MemberExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "assert";
__n29["object"] := __n30;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "sameValue";
__n31["raw"] := "\"sameValue\"";
__n29["property"] := __n31;
__n29["computed"] := true;
__n28["callee"] := __n29;
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "my_eval";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "this";
__n36["raw"] := "\"this\"";
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "global";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "my_eval(\"this\")";
__n38["raw"] := "'my_eval(\"this\")'";
__n32 := [ __n33, __n37, __n38 ];
__n28["arguments"] := __n32;
__n27["expression"] := __n28;
__n21 := [ __n22, __n27 ];
__n20["body"] := __n21;
__n39 := [ "my_eval" ];
__n20["variableDeclarations"] := __n39;
__n40 := [  ];
__n20["functionDeclarations"] := __n40;
__n20["codeType"] := "function";
__n20["strict"] := false;
__n17["body"] := __n20;
__n17["generator"] := false;
__n17["async"] := false;
__n17["expression"] := false;
__n16 := [ __n17 ];
__n0["functionDeclarations"] := __n16;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}