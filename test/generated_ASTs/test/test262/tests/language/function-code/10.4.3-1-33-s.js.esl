function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "f";
__n10["expression"] := __n11;
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "assert";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "sameValue";
__n16["raw"] := "\"sameValue\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n13["callee"] := __n14;
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "f";
__n18["callee"] := __n19;
__n20 := [  ];
__n18["arguments"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "undefined";
__n21["raw"] := "\"undefined\"";
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "f()";
__n22["raw"] := "'f()'";
__n17 := [ __n18, __n21, __n22 ];
__n13["arguments"] := __n17;
__n12["expression"] := __n13;
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "CallExpression";
__n25 := {  };
__n25["type"] := "MemberExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "assert";
__n25["object"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "sameValue";
__n27["raw"] := "\"sameValue\"";
__n25["property"] := __n27;
__n25["computed"] := true;
__n24["callee"] := __n25;
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "typeof";
__n30 := {  };
__n30["type"] := "ThisExpression";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "undefined";
__n31["raw"] := "\"undefined\"";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "typeof this";
__n32["raw"] := "'typeof this'";
__n28 := [ __n29, __n31, __n32 ];
__n24["arguments"] := __n28;
__n23["expression"] := __n24;
__n9 := [ __n10, __n12, __n23 ];
__n8["body"] := __n9;
__n33 := [  ];
__n8["variableDeclarations"] := __n33;
__n35 := {  };
__n35["type"] := "FunctionDeclaration";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "f";
__n35["id"] := __n36;
__n37 := [  ];
__n35["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "UnaryExpression";
__n41["operator"] := "typeof";
__n42 := {  };
__n42["type"] := "ThisExpression";
__n41["argument"] := __n42;
__n41["prefix"] := true;
__n40["argument"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n43 := [  ];
__n38["variableDeclarations"] := __n43;
__n44 := [  ];
__n38["functionDeclarations"] := __n44;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n35["body"] := __n38;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n34 := [ __n35 ];
__n8["functionDeclarations"] := __n34;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["async"] := false;
__n6["expression"] := false;
__n5["callee"] := __n6;
__n45 := [  ];
__n5["arguments"] := __n45;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [  ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}