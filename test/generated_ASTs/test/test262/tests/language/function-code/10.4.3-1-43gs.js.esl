function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "UnaryExpression";
__n3["operator"] := "!";
__n4 := {  };
__n4["type"] := "CallExpression";
__n5 := {  };
__n5["type"] := "FunctionExpression";
__n5["id"] := null;
__n6 := [  ];
__n5["params"] := __n6;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "use strict";
__n10["raw"] := "\"use strict\"";
__n9["expression"] := __n10;
__n9["directive"] := "use strict";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "f";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ReturnStatement";
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "typeof";
__n21 := {  };
__n21["type"] := "ThisExpression";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n19["argument"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n22 := [  ];
__n17["variableDeclarations"] := __n22;
__n23 := [  ];
__n17["functionDeclarations"] := __n23;
__n17["codeType"] := "function";
__n17["strict"] := false;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n24 := {  };
__n24["type"] := "ReturnStatement";
__n25 := {  };
__n25["type"] := "LogicalExpression";
__n25["operator"] := "&&";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "===";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "f";
__n27["callee"] := __n28;
__n29 := [  ];
__n27["arguments"] := __n29;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "undefined";
__n30["raw"] := "\"undefined\"";
__n26["right"] := __n30;
__n25["left"] := __n26;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "typeof";
__n33 := {  };
__n33["type"] := "ThisExpression";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["left"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "undefined";
__n34["raw"] := "\"undefined\"";
__n31["right"] := __n34;
__n25["right"] := __n31;
__n24["argument"] := __n25;
__n8 := [ __n9, __n11, __n24 ];
__n7["body"] := __n8;
__n35 := [ "f" ];
__n7["variableDeclarations"] := __n35;
__n36 := [  ];
__n7["functionDeclarations"] := __n36;
__n7["codeType"] := "function";
__n7["strict"] := true;
__n5["body"] := __n7;
__n5["generator"] := false;
__n5["async"] := false;
__n5["expression"] := false;
__n4["callee"] := __n5;
__n37 := [  ];
__n4["arguments"] := __n37;
__n3["argument"] := __n4;
__n3["prefix"] := true;
__n2["test"] := __n3;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ThrowStatement";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "'this' had incorrect value!";
__n41["raw"] := "\"'this' had incorrect value!\"";
__n40["argument"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n2["consequent"] := __n38;
__n2["alternate"] := null;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [  ];
__n0["variableDeclarations"] := __n42;
__n43 := [  ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}