function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f1";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "IfStatement";
__n10 := {  };
__n10["type"] := "UnaryExpression";
__n10["operator"] := "!";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "f1";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n10["argument"] := __n11;
__n10["prefix"] := true;
__n9["test"] := __n10;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ThrowStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := "'this' had incorrect value!";
__n17["raw"] := "\"'this' had incorrect value!\"";
__n16["argument"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n9["consequent"] := __n14;
__n9["alternate"] := null;
__n1 := [ __n2, __n7, __n9 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n18 := [ "global" ];
__n0["variableDeclarations"] := __n18;
__n20 := {  };
__n20["type"] := "FunctionDeclaration";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "f1";
__n20["id"] := __n21;
__n22 := [  ];
__n20["params"] := __n22;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "f";
__n25["expression"] := __n26;
__n27 := {  };
__n27["type"] := "ReturnStatement";
__n28 := {  };
__n28["type"] := "LogicalExpression";
__n28["operator"] := "&&";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "===";
__n30 := {  };
__n30["type"] := "CallExpression";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "f";
__n30["callee"] := __n31;
__n32 := [  ];
__n30["arguments"] := __n32;
__n29["left"] := __n30;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "undefined";
__n33["raw"] := "\"undefined\"";
__n29["right"] := __n33;
__n28["left"] := __n29;
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "===";
__n35 := {  };
__n35["type"] := "ThisExpression";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "global";
__n34["right"] := __n36;
__n28["right"] := __n34;
__n27["argument"] := __n28;
__n24 := [ __n25, __n27 ];
__n23["body"] := __n24;
__n37 := [  ];
__n23["variableDeclarations"] := __n37;
__n39 := {  };
__n39["type"] := "FunctionDeclaration";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "f";
__n39["id"] := __n40;
__n41 := [  ];
__n39["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "use strict";
__n45["raw"] := "\"use strict\"";
__n44["expression"] := __n45;
__n44["directive"] := "use strict";
__n46 := {  };
__n46["type"] := "ReturnStatement";
__n47 := {  };
__n47["type"] := "UnaryExpression";
__n47["operator"] := "typeof";
__n48 := {  };
__n48["type"] := "ThisExpression";
__n47["argument"] := __n48;
__n47["prefix"] := true;
__n46["argument"] := __n47;
__n43 := [ __n44, __n46 ];
__n42["body"] := __n43;
__n49 := [  ];
__n42["variableDeclarations"] := __n49;
__n50 := [  ];
__n42["functionDeclarations"] := __n50;
__n42["codeType"] := "function";
__n42["strict"] := true;
__n39["body"] := __n42;
__n39["generator"] := false;
__n39["async"] := false;
__n39["expression"] := false;
__n38 := [ __n39 ];
__n23["functionDeclarations"] := __n38;
__n23["codeType"] := "function";
__n23["strict"] := false;
__n20["body"] := __n23;
__n20["generator"] := false;
__n20["async"] := false;
__n20["expression"] := false;
__n19 := [ __n20 ];
__n0["functionDeclarations"] := __n19;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}