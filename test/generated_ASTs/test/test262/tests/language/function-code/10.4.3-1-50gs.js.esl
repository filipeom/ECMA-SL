function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "f1";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "FunctionExpression";
__n11["id"] := null;
__n12 := [  ];
__n11["params"] := __n12;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ReturnStatement";
__n16 := {  };
__n16["type"] := "LogicalExpression";
__n16["operator"] := "&&";
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "===";
__n18 := {  };
__n18["type"] := "CallExpression";
__n19 := {  };
__n19["type"] := "FunctionExpression";
__n19["id"] := null;
__n20 := [  ];
__n19["params"] := __n20;
__n21 := {  };
__n21["type"] := "BlockStatement";
__n23 := {  };
__n23["type"] := "ExpressionStatement";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "use strict";
__n24["raw"] := "\"use strict\"";
__n23["expression"] := __n24;
__n23["directive"] := "use strict";
__n25 := {  };
__n25["type"] := "ReturnStatement";
__n26 := {  };
__n26["type"] := "UnaryExpression";
__n26["operator"] := "typeof";
__n27 := {  };
__n27["type"] := "ThisExpression";
__n26["argument"] := __n27;
__n26["prefix"] := true;
__n25["argument"] := __n26;
__n22 := [ __n23, __n25 ];
__n21["body"] := __n22;
__n28 := [  ];
__n21["variableDeclarations"] := __n28;
__n29 := [  ];
__n21["functionDeclarations"] := __n29;
__n21["codeType"] := "function";
__n21["strict"] := true;
__n19["body"] := __n21;
__n19["generator"] := false;
__n19["async"] := false;
__n19["expression"] := false;
__n18["callee"] := __n19;
__n30 := [  ];
__n18["arguments"] := __n30;
__n17["left"] := __n18;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "undefined";
__n31["raw"] := "\"undefined\"";
__n17["right"] := __n31;
__n16["left"] := __n17;
__n32 := {  };
__n32["type"] := "BinaryExpression";
__n32["operator"] := "===";
__n33 := {  };
__n33["type"] := "ThisExpression";
__n32["left"] := __n33;
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "global";
__n32["right"] := __n34;
__n16["right"] := __n32;
__n15["argument"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n35 := [  ];
__n13["variableDeclarations"] := __n35;
__n36 := [  ];
__n13["functionDeclarations"] := __n36;
__n13["codeType"] := "function";
__n13["strict"] := false;
__n11["body"] := __n13;
__n11["generator"] := false;
__n11["async"] := false;
__n11["expression"] := false;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n37 := {  };
__n37["type"] := "IfStatement";
__n38 := {  };
__n38["type"] := "UnaryExpression";
__n38["operator"] := "!";
__n39 := {  };
__n39["type"] := "CallExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "f1";
__n39["callee"] := __n40;
__n41 := [  ];
__n39["arguments"] := __n41;
__n38["argument"] := __n39;
__n38["prefix"] := true;
__n37["test"] := __n38;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ThrowStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "'this' had incorrect value!";
__n45["raw"] := "\"'this' had incorrect value!\"";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n37["consequent"] := __n42;
__n37["alternate"] := null;
__n1 := [ __n2, __n7, __n37 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "global", "f1" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}