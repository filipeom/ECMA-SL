function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "UnaryExpression";
__n8["operator"] := "!";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "FunctionExpression";
__n10["id"] := null;
__n11 := [  ];
__n10["params"] := __n11;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "f";
__n16["id"] := __n17;
__n18 := {  };
__n18["type"] := "FunctionExpression";
__n18["id"] := null;
__n19 := [  ];
__n18["params"] := __n19;
__n20 := {  };
__n20["type"] := "BlockStatement";
__n22 := {  };
__n22["type"] := "ExpressionStatement";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "use strict";
__n23["raw"] := "\"use strict\"";
__n22["expression"] := __n23;
__n22["directive"] := "use strict";
__n24 := {  };
__n24["type"] := "ReturnStatement";
__n25 := {  };
__n25["type"] := "UnaryExpression";
__n25["operator"] := "typeof";
__n26 := {  };
__n26["type"] := "ThisExpression";
__n25["argument"] := __n26;
__n25["prefix"] := true;
__n24["argument"] := __n25;
__n21 := [ __n22, __n24 ];
__n20["body"] := __n21;
__n27 := [  ];
__n20["variableDeclarations"] := __n27;
__n28 := [  ];
__n20["functionDeclarations"] := __n28;
__n20["codeType"] := "function";
__n20["strict"] := true;
__n18["body"] := __n20;
__n18["generator"] := false;
__n18["async"] := false;
__n18["expression"] := false;
__n16["init"] := __n18;
__n15 := [ __n16 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n29 := {  };
__n29["type"] := "ReturnStatement";
__n30 := {  };
__n30["type"] := "LogicalExpression";
__n30["operator"] := "&&";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "f";
__n32["callee"] := __n33;
__n34 := [  ];
__n32["arguments"] := __n34;
__n31["left"] := __n32;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "undefined";
__n35["raw"] := "\"undefined\"";
__n31["right"] := __n35;
__n30["left"] := __n31;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "===";
__n37 := {  };
__n37["type"] := "ThisExpression";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "global";
__n36["right"] := __n38;
__n30["right"] := __n36;
__n29["argument"] := __n30;
__n13 := [ __n14, __n29 ];
__n12["body"] := __n13;
__n39 := [ "f" ];
__n12["variableDeclarations"] := __n39;
__n40 := [  ];
__n12["functionDeclarations"] := __n40;
__n12["codeType"] := "function";
__n12["strict"] := false;
__n10["body"] := __n12;
__n10["generator"] := false;
__n10["async"] := false;
__n10["expression"] := false;
__n9["callee"] := __n10;
__n41 := [  ];
__n9["arguments"] := __n41;
__n8["argument"] := __n9;
__n8["prefix"] := true;
__n7["test"] := __n8;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ThrowStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "'this' had incorrect value!";
__n45["raw"] := "\"'this' had incorrect value!\"";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n7["consequent"] := __n42;
__n7["alternate"] := null;
__n1 := [ __n2, __n7 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n46 := [ "global" ];
__n0["variableDeclarations"] := __n46;
__n47 := [  ];
__n0["functionDeclarations"] := __n47;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}