function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "o";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ObjectExpression";
__n7 := [  ];
__n6["properties"] := __n7;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n8 := {  };
__n8["type"] := "ExpressionStatement";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["expression"] := __n9;
__n10 := {  };
__n10["type"] := "EmptyStatement";
__n11 := {  };
__n11["type"] := "ExpressionStatement";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "assert";
__n12["callee"] := __n13;
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "MemberExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "f";
__n17["object"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "bind";
__n19["raw"] := "\"bind\"";
__n17["property"] := __n19;
__n17["computed"] := true;
__n16["callee"] := __n17;
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "o";
__n20 := [ __n21 ];
__n16["arguments"] := __n20;
__n15["callee"] := __n16;
__n22 := [  ];
__n15["arguments"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "f.bind(o)() !== true";
__n23["raw"] := "'f.bind(o)() !== true'";
__n14 := [ __n15, __n23 ];
__n12["arguments"] := __n14;
__n11["expression"] := __n12;
__n1 := [ __n2, __n8, __n10, __n11 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n24 := [ "o" ];
__n0["variableDeclarations"] := __n24;
__n26 := {  };
__n26["type"] := "FunctionDeclaration";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "f";
__n26["id"] := __n27;
__n28 := [  ];
__n26["params"] := __n28;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "use strict";
__n32["raw"] := "\"use strict\"";
__n31["expression"] := __n32;
__n31["directive"] := "use strict";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "BinaryExpression";
__n34["operator"] := "===";
__n35 := {  };
__n35["type"] := "ThisExpression";
__n34["left"] := __n35;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "o";
__n34["right"] := __n36;
__n33["argument"] := __n34;
__n30 := [ __n31, __n33 ];
__n29["body"] := __n30;
__n37 := [  ];
__n29["variableDeclarations"] := __n37;
__n38 := [  ];
__n29["functionDeclarations"] := __n38;
__n29["codeType"] := "function";
__n29["strict"] := true;
__n26["body"] := __n29;
__n26["generator"] := false;
__n26["async"] := false;
__n26["expression"] := false;
__n25 := [ __n26 ];
__n0["functionDeclarations"] := __n25;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}