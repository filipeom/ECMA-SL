function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "EmptyStatement";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "assert";
__n11["callee"] := __n12;
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "FunctionExpression";
__n15["id"] := null;
__n16 := [  ];
__n15["params"] := __n16;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "use strict";
__n20["raw"] := "\"use strict\"";
__n19["expression"] := __n20;
__n19["directive"] := "use strict";
__n21 := {  };
__n21["type"] := "ReturnStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "f";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "call";
__n25["raw"] := "\"call\"";
__n23["property"] := __n25;
__n23["computed"] := true;
__n22["callee"] := __n23;
__n26 := [  ];
__n22["arguments"] := __n26;
__n21["argument"] := __n22;
__n18 := [ __n19, __n21 ];
__n17["body"] := __n18;
__n27 := [  ];
__n17["variableDeclarations"] := __n27;
__n28 := [  ];
__n17["functionDeclarations"] := __n28;
__n17["codeType"] := "function";
__n17["strict"] := true;
__n15["body"] := __n17;
__n15["generator"] := false;
__n15["async"] := false;
__n15["expression"] := false;
__n14["callee"] := __n15;
__n29 := [  ];
__n14["arguments"] := __n29;
__n13 := [ __n14 ];
__n11["arguments"] := __n13;
__n10["expression"] := __n11;
__n1 := [ __n2, __n7, __n9, __n10 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n30 := [ "global" ];
__n0["variableDeclarations"] := __n30;
__n32 := {  };
__n32["type"] := "FunctionDeclaration";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "f";
__n32["id"] := __n33;
__n34 := [  ];
__n32["params"] := __n34;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ReturnStatement";
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "===";
__n39 := {  };
__n39["type"] := "ThisExpression";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "global";
__n38["right"] := __n40;
__n37["argument"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n41 := [  ];
__n35["variableDeclarations"] := __n41;
__n42 := [  ];
__n35["functionDeclarations"] := __n42;
__n35["codeType"] := "function";
__n35["strict"] := false;
__n32["body"] := __n35;
__n32["generator"] := false;
__n32["async"] := false;
__n32["expression"] := false;
__n31 := [ __n32 ];
__n0["functionDeclarations"] := __n31;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}