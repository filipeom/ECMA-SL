function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "global";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "ThisExpression";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "f";
__n7["expression"] := __n8;
__n9 := {  };
__n9["type"] := "EmptyStatement";
__n10 := {  };
__n10["type"] := "IfStatement";
__n11 := {  };
__n11["type"] := "UnaryExpression";
__n11["operator"] := "!";
__n12 := {  };
__n12["type"] := "CallExpression";
__n13 := {  };
__n13["type"] := "FunctionExpression";
__n13["id"] := null;
__n14 := [  ];
__n13["params"] := __n14;
__n15 := {  };
__n15["type"] := "BlockStatement";
__n17 := {  };
__n17["type"] := "ExpressionStatement";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "use strict";
__n18["raw"] := "\"use strict\"";
__n17["expression"] := __n18;
__n17["directive"] := "use strict";
__n19 := {  };
__n19["type"] := "ReturnStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "MemberExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "f";
__n21["object"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "call";
__n23["raw"] := "\"call\"";
__n21["property"] := __n23;
__n21["computed"] := true;
__n20["callee"] := __n21;
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "undefined";
__n24 := [ __n25 ];
__n20["arguments"] := __n24;
__n19["argument"] := __n20;
__n16 := [ __n17, __n19 ];
__n15["body"] := __n16;
__n26 := [  ];
__n15["variableDeclarations"] := __n26;
__n27 := [  ];
__n15["functionDeclarations"] := __n27;
__n15["codeType"] := "function";
__n15["strict"] := true;
__n13["body"] := __n15;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12["callee"] := __n13;
__n28 := [  ];
__n12["arguments"] := __n28;
__n11["argument"] := __n12;
__n11["prefix"] := true;
__n10["test"] := __n11;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ThrowStatement";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "'this' had incorrect value!";
__n32["raw"] := "\"'this' had incorrect value!\"";
__n31["argument"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n10["consequent"] := __n29;
__n10["alternate"] := null;
__n1 := [ __n2, __n7, __n9, __n10 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n33 := [ "global" ];
__n0["variableDeclarations"] := __n33;
__n35 := {  };
__n35["type"] := "FunctionDeclaration";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "f";
__n35["id"] := __n36;
__n37 := [  ];
__n35["params"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ReturnStatement";
__n41 := {  };
__n41["type"] := "BinaryExpression";
__n41["operator"] := "===";
__n42 := {  };
__n42["type"] := "ThisExpression";
__n41["left"] := __n42;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "global";
__n41["right"] := __n43;
__n40["argument"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n44 := [  ];
__n38["variableDeclarations"] := __n44;
__n45 := [  ];
__n38["functionDeclarations"] := __n45;
__n38["codeType"] := "function";
__n38["strict"] := false;
__n35["body"] := __n38;
__n35["generator"] := false;
__n35["async"] := false;
__n35["expression"] := false;
__n34 := [ __n35 ];
__n0["functionDeclarations"] := __n34;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}