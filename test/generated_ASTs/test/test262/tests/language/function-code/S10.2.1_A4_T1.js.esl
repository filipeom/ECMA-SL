function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "f1";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "UnaryExpression";
__n5["operator"] := "!";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "===";
__n7 := {  };
__n7["type"] := "MemberExpression";
__n8 := {  };
__n8["type"] := "MemberExpression";
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "f1";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n8["object"] := __n9;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "constructor";
__n12["raw"] := "\"constructor\"";
__n8["property"] := __n12;
__n8["computed"] := true;
__n7["object"] := __n8;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "prototype";
__n13["raw"] := "\"prototype\"";
__n7["property"] := __n13;
__n7["computed"] := true;
__n6["left"] := __n7;
__n14 := {  };
__n14["type"] := "MemberExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "Function";
__n14["object"] := __n15;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "prototype";
__n16["raw"] := "\"prototype\"";
__n14["property"] := __n16;
__n14["computed"] := true;
__n6["right"] := __n14;
__n5["argument"] := __n6;
__n5["prefix"] := true;
__n4["test"] := __n5;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: f1() returns function";
__n23["raw"] := "'#1: f1() returns function'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n4["consequent"] := __n17;
__n4["alternate"] := null;
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "f2";
__n24["expression"] := __n25;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "UnaryExpression";
__n27["operator"] := "!";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "===";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "f2";
__n29["callee"] := __n30;
__n31 := [  ];
__n29["arguments"] := __n31;
__n28["left"] := __n29;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "function";
__n32["raw"] := "\"function\"";
__n28["right"] := __n32;
__n27["argument"] := __n28;
__n27["prefix"] := true;
__n26["test"] := __n27;
__n33 := {  };
__n33["type"] := "BlockStatement";
__n35 := {  };
__n35["type"] := "ExpressionStatement";
__n36 := {  };
__n36["type"] := "CallExpression";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "$ERROR";
__n36["callee"] := __n37;
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: f2() === \"function\"";
__n39["raw"] := "'#2: f2() === \"function\"'";
__n38 := [ __n39 ];
__n36["arguments"] := __n38;
__n35["expression"] := __n36;
__n34 := [ __n35 ];
__n33["body"] := __n34;
__n26["consequent"] := __n33;
__n26["alternate"] := null;
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "f3";
__n40["expression"] := __n41;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "UnaryExpression";
__n43["operator"] := "!";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "===";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "f3";
__n45["callee"] := __n46;
__n47 := [  ];
__n45["arguments"] := __n47;
__n44["left"] := __n45;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "function";
__n48["raw"] := "\"function\"";
__n44["right"] := __n48;
__n43["argument"] := __n44;
__n43["prefix"] := true;
__n42["test"] := __n43;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#3: f3() === \"function\"";
__n55["raw"] := "'#3: f3() === \"function\"'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n42["consequent"] := __n49;
__n42["alternate"] := null;
__n1 := [ __n2, __n4, __n24, __n26, __n40, __n42 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n56 := [  ];
__n0["variableDeclarations"] := __n56;
__n58 := {  };
__n58["type"] := "FunctionDeclaration";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "f1";
__n58["id"] := __n59;
__n60 := [ "x" ];
__n58["params"] := __n60;
__n61 := {  };
__n61["type"] := "BlockStatement";
__n63 := {  };
__n63["type"] := "ReturnStatement";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "x";
__n63["argument"] := __n64;
__n65 := {  };
__n65["type"] := "ExpressionStatement";
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "x";
__n65["expression"] := __n66;
__n62 := [ __n63, __n65 ];
__n61["body"] := __n62;
__n67 := [  ];
__n61["variableDeclarations"] := __n67;
__n69 := {  };
__n69["type"] := "FunctionDeclaration";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "x";
__n69["id"] := __n70;
__n71 := [  ];
__n69["params"] := __n71;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ReturnStatement";
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := 7.;
__n75["raw"] := "7";
__n74["argument"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n76 := [  ];
__n72["variableDeclarations"] := __n76;
__n77 := [  ];
__n72["functionDeclarations"] := __n77;
__n72["codeType"] := "function";
__n72["strict"] := false;
__n69["body"] := __n72;
__n69["generator"] := false;
__n69["async"] := false;
__n69["expression"] := false;
__n68 := [ __n69 ];
__n61["functionDeclarations"] := __n68;
__n61["codeType"] := "function";
__n61["strict"] := false;
__n58["body"] := __n61;
__n58["generator"] := false;
__n58["async"] := false;
__n58["expression"] := false;
__n78 := {  };
__n78["type"] := "FunctionDeclaration";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "f2";
__n78["id"] := __n79;
__n80 := [ "x" ];
__n78["params"] := __n80;
__n81 := {  };
__n81["type"] := "BlockStatement";
__n83 := {  };
__n83["type"] := "ReturnStatement";
__n84 := {  };
__n84["type"] := "UnaryExpression";
__n84["operator"] := "typeof";
__n85 := {  };
__n85["type"] := "Identifier";
__n85["name"] := "x";
__n84["argument"] := __n85;
__n84["prefix"] := true;
__n83["argument"] := __n84;
__n86 := {  };
__n86["type"] := "ExpressionStatement";
__n87 := {  };
__n87["type"] := "Identifier";
__n87["name"] := "x";
__n86["expression"] := __n87;
__n82 := [ __n83, __n86 ];
__n81["body"] := __n82;
__n88 := [  ];
__n81["variableDeclarations"] := __n88;
__n90 := {  };
__n90["type"] := "FunctionDeclaration";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "x";
__n90["id"] := __n91;
__n92 := [  ];
__n90["params"] := __n92;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n95 := {  };
__n95["type"] := "ReturnStatement";
__n96 := {  };
__n96["type"] := "Literal";
__n96["value"] := 7.;
__n96["raw"] := "7";
__n95["argument"] := __n96;
__n94 := [ __n95 ];
__n93["body"] := __n94;
__n97 := [  ];
__n93["variableDeclarations"] := __n97;
__n98 := [  ];
__n93["functionDeclarations"] := __n98;
__n93["codeType"] := "function";
__n93["strict"] := false;
__n90["body"] := __n93;
__n90["generator"] := false;
__n90["async"] := false;
__n90["expression"] := false;
__n89 := [ __n90 ];
__n81["functionDeclarations"] := __n89;
__n81["codeType"] := "function";
__n81["strict"] := false;
__n78["body"] := __n81;
__n78["generator"] := false;
__n78["async"] := false;
__n78["expression"] := false;
__n99 := {  };
__n99["type"] := "FunctionDeclaration";
__n100 := {  };
__n100["type"] := "Identifier";
__n100["name"] := "f3";
__n99["id"] := __n100;
__n101 := [  ];
__n99["params"] := __n101;
__n102 := {  };
__n102["type"] := "BlockStatement";
__n104 := {  };
__n104["type"] := "ReturnStatement";
__n105 := {  };
__n105["type"] := "UnaryExpression";
__n105["operator"] := "typeof";
__n106 := {  };
__n106["type"] := "Identifier";
__n106["name"] := "arguments";
__n105["argument"] := __n106;
__n105["prefix"] := true;
__n104["argument"] := __n105;
__n107 := {  };
__n107["type"] := "ExpressionStatement";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "arguments";
__n107["expression"] := __n108;
__n103 := [ __n104, __n107 ];
__n102["body"] := __n103;
__n109 := [  ];
__n102["variableDeclarations"] := __n109;
__n111 := {  };
__n111["type"] := "FunctionDeclaration";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "arguments";
__n111["id"] := __n112;
__n113 := [  ];
__n111["params"] := __n113;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ReturnStatement";
__n117 := {  };
__n117["type"] := "Literal";
__n117["value"] := 7.;
__n117["raw"] := "7";
__n116["argument"] := __n117;
__n115 := [ __n116 ];
__n114["body"] := __n115;
__n118 := [  ];
__n114["variableDeclarations"] := __n118;
__n119 := [  ];
__n114["functionDeclarations"] := __n119;
__n114["codeType"] := "function";
__n114["strict"] := false;
__n111["body"] := __n114;
__n111["generator"] := false;
__n111["async"] := false;
__n111["expression"] := false;
__n110 := [ __n111 ];
__n102["functionDeclarations"] := __n110;
__n102["codeType"] := "function";
__n102["strict"] := false;
__n99["body"] := __n102;
__n99["generator"] := false;
__n99["async"] := false;
__n99["expression"] := false;
__n57 := [ __n58, __n78, __n99 ];
__n0["functionDeclarations"] := __n57;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}