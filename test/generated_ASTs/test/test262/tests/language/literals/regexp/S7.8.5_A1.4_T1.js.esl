function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "/\\;/";
__n5["raw"] := "/\\;/";
__n5["source"] := "\\;";
__n6 := {  };
__n6["type"] := "RegExp";
__n7 := {  };
__n7["type"] := "Char";
__n7["value"] := ";";
__n7["kind"] := "simple";
__n7["symbol"] := ";";
__n7["codePoint"] := 59.;
__n7["escaped"] := true;
__n6["body"] := __n7;
__n6["flags"] := "";
__n6["nCaps"] := 0.;
__n5["regex"] := __n6;
__n4["object"] := __n5;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "source";
__n8["raw"] := "\"source\"";
__n4["property"] := __n8;
__n4["computed"] := true;
__n3["left"] := __n4;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "\\;";
__n9["raw"] := "\"\\\\;\"";
__n3["right"] := __n9;
__n2["test"] := __n3;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "CallExpression";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "$ERROR";
__n13["callee"] := __n14;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "#1: /\\;/";
__n16["raw"] := "'#1: /\\\\;/'";
__n15 := [ __n16 ];
__n13["arguments"] := __n15;
__n12["expression"] := __n13;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n2["consequent"] := __n10;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "IfStatement";
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "!==";
__n19 := {  };
__n19["type"] := "MemberExpression";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "/\\ /";
__n20["raw"] := "/\\ /";
__n20["source"] := "\\ ";
__n21 := {  };
__n21["type"] := "RegExp";
__n22 := {  };
__n22["type"] := "Char";
__n22["value"] := " ";
__n22["kind"] := "simple";
__n22["symbol"] := " ";
__n22["codePoint"] := 32.;
__n22["escaped"] := true;
__n21["body"] := __n22;
__n21["flags"] := "";
__n21["nCaps"] := 0.;
__n20["regex"] := __n21;
__n19["object"] := __n20;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "source";
__n23["raw"] := "\"source\"";
__n19["property"] := __n23;
__n19["computed"] := true;
__n18["left"] := __n19;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "\\ ";
__n24["raw"] := "\"\\\\ \"";
__n18["right"] := __n24;
__n17["test"] := __n18;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "#2: /\\ /";
__n31["raw"] := "'#2: /\\\\ /'";
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n17["consequent"] := __n25;
__n17["alternate"] := null;
__n1 := [ __n2, __n17 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n32 := [  ];
__n0["variableDeclarations"] := __n32;
__n33 := [  ];
__n0["functionDeclarations"] := __n33;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}