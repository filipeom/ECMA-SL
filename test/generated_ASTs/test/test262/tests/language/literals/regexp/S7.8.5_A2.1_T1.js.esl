function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "MemberExpression";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := "/1a/";
__n5["raw"] := "/1a/";
__n5["source"] := "1a";
__n6 := {  };
__n6["type"] := "RegExp";
__n7 := {  };
__n7["type"] := "Alternative";
__n9 := {  };
__n9["type"] := "Char";
__n9["value"] := "1";
__n9["kind"] := "simple";
__n9["symbol"] := "1";
__n9["codePoint"] := 49.;
__n10 := {  };
__n10["type"] := "Char";
__n10["value"] := "a";
__n10["kind"] := "simple";
__n10["symbol"] := "a";
__n10["codePoint"] := 97.;
__n8 := [ __n9, __n10 ];
__n7["expressions"] := __n8;
__n6["body"] := __n7;
__n6["flags"] := "";
__n6["nCaps"] := 0.;
__n5["regex"] := __n6;
__n4["object"] := __n5;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "source";
__n11["raw"] := "\"source\"";
__n4["property"] := __n11;
__n4["computed"] := true;
__n3["left"] := __n4;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "1a";
__n12["raw"] := "\"1a\"";
__n3["right"] := __n12;
__n2["test"] := __n3;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: /1a/";
__n19["raw"] := "'#1: /1a/'";
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n2["consequent"] := __n13;
__n2["alternate"] := null;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "BinaryExpression";
__n21["operator"] := "!==";
__n22 := {  };
__n22["type"] := "MemberExpression";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "/aa/";
__n23["raw"] := "/aa/";
__n23["source"] := "aa";
__n24 := {  };
__n24["type"] := "RegExp";
__n25 := {  };
__n25["type"] := "Alternative";
__n27 := {  };
__n27["type"] := "Char";
__n27["value"] := "a";
__n27["kind"] := "simple";
__n27["symbol"] := "a";
__n27["codePoint"] := 97.;
__n28 := {  };
__n28["type"] := "Char";
__n28["value"] := "a";
__n28["kind"] := "simple";
__n28["symbol"] := "a";
__n28["codePoint"] := 97.;
__n26 := [ __n27, __n28 ];
__n25["expressions"] := __n26;
__n24["body"] := __n25;
__n24["flags"] := "";
__n24["nCaps"] := 0.;
__n23["regex"] := __n24;
__n22["object"] := __n23;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "source";
__n29["raw"] := "\"source\"";
__n22["property"] := __n29;
__n22["computed"] := true;
__n21["left"] := __n22;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "aa";
__n30["raw"] := "\"aa\"";
__n21["right"] := __n30;
__n20["test"] := __n21;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#2: /aa/";
__n37["raw"] := "'#2: /aa/'";
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n20["consequent"] := __n31;
__n20["alternate"] := null;
__n38 := {  };
__n38["type"] := "IfStatement";
__n39 := {  };
__n39["type"] := "BinaryExpression";
__n39["operator"] := "!==";
__n40 := {  };
__n40["type"] := "MemberExpression";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "/,;/";
__n41["raw"] := "/,;/";
__n41["source"] := ",;";
__n42 := {  };
__n42["type"] := "RegExp";
__n43 := {  };
__n43["type"] := "Alternative";
__n45 := {  };
__n45["type"] := "Char";
__n45["value"] := ",";
__n45["kind"] := "simple";
__n45["symbol"] := ",";
__n45["codePoint"] := 44.;
__n46 := {  };
__n46["type"] := "Char";
__n46["value"] := ";";
__n46["kind"] := "simple";
__n46["symbol"] := ";";
__n46["codePoint"] := 59.;
__n44 := [ __n45, __n46 ];
__n43["expressions"] := __n44;
__n42["body"] := __n43;
__n42["flags"] := "";
__n42["nCaps"] := 0.;
__n41["regex"] := __n42;
__n40["object"] := __n41;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "source";
__n47["raw"] := "\"source\"";
__n40["property"] := __n47;
__n40["computed"] := true;
__n39["left"] := __n40;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := ",;";
__n48["raw"] := "\",;\"";
__n39["right"] := __n48;
__n38["test"] := __n39;
__n49 := {  };
__n49["type"] := "BlockStatement";
__n51 := {  };
__n51["type"] := "ExpressionStatement";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "$ERROR";
__n52["callee"] := __n53;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#3: /,;/";
__n55["raw"] := "'#3: /,;/'";
__n54 := [ __n55 ];
__n52["arguments"] := __n54;
__n51["expression"] := __n52;
__n50 := [ __n51 ];
__n49["body"] := __n50;
__n38["consequent"] := __n49;
__n38["alternate"] := null;
__n56 := {  };
__n56["type"] := "IfStatement";
__n57 := {  };
__n57["type"] := "BinaryExpression";
__n57["operator"] := "!==";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "/  /";
__n59["raw"] := "/  /";
__n59["source"] := "  ";
__n60 := {  };
__n60["type"] := "RegExp";
__n61 := {  };
__n61["type"] := "Alternative";
__n63 := {  };
__n63["type"] := "Char";
__n63["value"] := " ";
__n63["kind"] := "simple";
__n63["symbol"] := " ";
__n63["codePoint"] := 32.;
__n64 := {  };
__n64["type"] := "Char";
__n64["value"] := " ";
__n64["kind"] := "simple";
__n64["symbol"] := " ";
__n64["codePoint"] := 32.;
__n62 := [ __n63, __n64 ];
__n61["expressions"] := __n62;
__n60["body"] := __n61;
__n60["flags"] := "";
__n60["nCaps"] := 0.;
__n59["regex"] := __n60;
__n58["object"] := __n59;
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "source";
__n65["raw"] := "\"source\"";
__n58["property"] := __n65;
__n58["computed"] := true;
__n57["left"] := __n58;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "  ";
__n66["raw"] := "\"  \"";
__n57["right"] := __n66;
__n56["test"] := __n57;
__n67 := {  };
__n67["type"] := "BlockStatement";
__n69 := {  };
__n69["type"] := "ExpressionStatement";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "$ERROR";
__n70["callee"] := __n71;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "#4: /  /";
__n73["raw"] := "'#4: /  /'";
__n72 := [ __n73 ];
__n70["arguments"] := __n72;
__n69["expression"] := __n70;
__n68 := [ __n69 ];
__n67["body"] := __n68;
__n56["consequent"] := __n67;
__n56["alternate"] := null;
__n74 := {  };
__n74["type"] := "IfStatement";
__n75 := {  };
__n75["type"] := "BinaryExpression";
__n75["operator"] := "!==";
__n76 := {  };
__n76["type"] := "MemberExpression";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "/a\\u0041/";
__n77["raw"] := "/a\\u0041/";
__n77["source"] := "a\\u0041";
__n78 := {  };
__n78["type"] := "RegExp";
__n79 := {  };
__n79["type"] := "Alternative";
__n81 := {  };
__n81["type"] := "Char";
__n81["value"] := "a";
__n81["kind"] := "simple";
__n81["symbol"] := "a";
__n81["codePoint"] := 97.;
__n82 := {  };
__n82["type"] := "Char";
__n82["value"] := "\\u0041";
__n82["kind"] := "unicode";
__n82["symbol"] := "A";
__n82["codePoint"] := 65.;
__n80 := [ __n81, __n82 ];
__n79["expressions"] := __n80;
__n78["body"] := __n79;
__n78["flags"] := "";
__n78["nCaps"] := 0.;
__n77["regex"] := __n78;
__n76["object"] := __n77;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "source";
__n83["raw"] := "\"source\"";
__n76["property"] := __n83;
__n76["computed"] := true;
__n75["left"] := __n76;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "a\\u0041";
__n84["raw"] := "\"a\\\\u0041\"";
__n75["right"] := __n84;
__n74["test"] := __n75;
__n85 := {  };
__n85["type"] := "BlockStatement";
__n87 := {  };
__n87["type"] := "ExpressionStatement";
__n88 := {  };
__n88["type"] := "CallExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "$ERROR";
__n88["callee"] := __n89;
__n91 := {  };
__n91["type"] := "Literal";
__n91["value"] := "#5: /a\\u0041/";
__n91["raw"] := "'#5: /a\\\\u0041/'";
__n90 := [ __n91 ];
__n88["arguments"] := __n90;
__n87["expression"] := __n88;
__n86 := [ __n87 ];
__n85["body"] := __n86;
__n74["consequent"] := __n85;
__n74["alternate"] := null;
__n1 := [ __n2, __n20, __n38, __n56, __n74 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n92 := [  ];
__n0["variableDeclarations"] := __n92;
__n93 := [  ];
__n0["functionDeclarations"] := __n93;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}