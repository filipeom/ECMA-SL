function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "x";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := 0.;
__n6["raw"] := "0";
__n4["init"] := __n6;
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "y";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := 0.;
__n9["raw"] := "0";
__n7["init"] := __n9;
__n3 := [ __n4, __n7 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n10 := {  };
__n10["type"] := "ExpressionStatement";
__n11 := {  };
__n11["type"] := "CallExpression";
__n12 := {  };
__n12["type"] := "FunctionExpression";
__n12["id"] := null;
__n13 := [  ];
__n12["params"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "LabeledStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "FOR";
__n16["label"] := __n17;
__n18 := {  };
__n18["type"] := "ForStatement";
__n18["init"] := null;
__n18["test"] := null;
__n18["update"] := null;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "TryStatement";
__n22 := {  };
__n22["type"] := "BlockStatement";
__n24 := {  };
__n24["type"] := "ExpressionStatement";
__n25 := {  };
__n25["type"] := "UpdateExpression";
__n25["operator"] := "++";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "x";
__n25["argument"] := __n26;
__n25["prefix"] := false;
__n24["expression"] := __n25;
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "===";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "x";
__n28["left"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 10.;
__n30["raw"] := "10";
__n28["right"] := __n30;
__n27["test"] := __n28;
__n31 := {  };
__n31["type"] := "ReturnStatement";
__n31["argument"] := null;
__n27["consequent"] := __n31;
__n27["alternate"] := null;
__n32 := {  };
__n32["type"] := "ThrowStatement";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 1.;
__n33["raw"] := "1";
__n32["argument"] := __n33;
__n23 := [ __n24, __n27, __n32 ];
__n22["body"] := __n23;
__n21["block"] := __n22;
__n34 := {  };
__n34["type"] := "CatchClause";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "e";
__n34["param"] := __n35;
__n36 := {  };
__n36["type"] := "BlockStatement";
__n38 := {  };
__n38["type"] := "ContinueStatement";
__n38["label"] := "FOR";
__n37 := [ __n38 ];
__n36["body"] := __n37;
__n34["body"] := __n36;
__n21["handler"] := __n34;
__n21["finalizer"] := null;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n18["body"] := __n19;
__n16["body"] := __n18;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n39 := [  ];
__n14["variableDeclarations"] := __n39;
__n40 := [  ];
__n14["functionDeclarations"] := __n40;
__n14["codeType"] := "function";
__n14["strict"] := false;
__n12["body"] := __n14;
__n12["generator"] := false;
__n12["async"] := false;
__n12["expression"] := false;
__n11["callee"] := __n12;
__n41 := [  ];
__n11["arguments"] := __n41;
__n10["expression"] := __n11;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "BinaryExpression";
__n43["operator"] := "!==";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "x";
__n43["left"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := 10.;
__n45["raw"] := "10";
__n43["right"] := __n45;
__n42["test"] := __n43;
__n46 := {  };
__n46["type"] := "BlockStatement";
__n48 := {  };
__n48["type"] := "ExpressionStatement";
__n49 := {  };
__n49["type"] := "CallExpression";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "$ERROR";
__n49["callee"] := __n50;
__n52 := {  };
__n52["type"] := "Literal";
__n52["value"] := "#1: Continue inside of try-catch nested in loop is allowed";
__n52["raw"] := "'#1: Continue inside of try-catch nested in loop is allowed'";
__n51 := [ __n52 ];
__n49["arguments"] := __n51;
__n48["expression"] := __n49;
__n47 := [ __n48 ];
__n46["body"] := __n47;
__n42["consequent"] := __n46;
__n42["alternate"] := null;
__n1 := [ __n2, __n10, __n42 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n53 := [ "x", "y" ];
__n0["variableDeclarations"] := __n53;
__n54 := [  ];
__n0["functionDeclarations"] := __n54;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}