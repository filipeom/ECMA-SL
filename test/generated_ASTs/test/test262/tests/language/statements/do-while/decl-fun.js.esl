function buildAST () {
__n0 := {  };
__n0["type"] := "Program";
__n2 := {  };
__n2["type"] := "DoWhileStatement";
__n3 := {  };
__n3["type"] := "ExpressionStatement";
__n4 := {  };
__n4["type"] := "Identifier";
__n4["name"] := "f";
__n3["expression"] := __n4;
__n2["body"] := __n3;
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := false;
__n5["raw"] := "false";
__n2["test"] := __n5;
__n1 := [ __n2 ];
__n0["body"] := __n1;
__n0["sourceType"] := "script";
__n6 := [  ];
__n0["variableDeclarations"] := __n6;
__n8 := {  };
__n8["type"] := "FunctionDeclaration";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "f";
__n8["id"] := __n9;
__n10 := [  ];
__n8["params"] := __n10;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n12 := [  ];
__n11["body"] := __n12;
__n13 := [  ];
__n11["variableDeclarations"] := __n13;
__n14 := [  ];
__n11["functionDeclarations"] := __n14;
__n11["codeType"] := "function";
__n11["strict"] := false;
__n8["body"] := __n11;
__n8["generator"] := false;
__n8["expression"] := false;
__n8["async"] := false;
__n7 := [ __n8 ];
__n0["functionDeclarations"] := __n7;
__n0["codeType"] := "global";
__n0["strict"] := false;
return __n0
}