function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ForInStatement";
__n6 := {  };
__n6["type"] := "Identifier";
__n6["name"] := "__key";
__n5["left"] := __n6;
__n7 := {  };
__n7["type"] := "Literal";
__n7["value"] := 'null;
__n7["raw"] := "\"'null\"";
__n5["right"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "VariableDeclaration";
__n12 := {  };
__n12["type"] := "VariableDeclarator";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "key";
__n12["id"] := __n13;
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__key";
__n12["init"] := __n14;
__n11 := [ __n12 ];
__n10["declarations"] := __n11;
__n10["kind"] := "var";
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n5["body"] := __n8;
__n5["each"] := false;
__n15 := {  };
__n15["type"] := "EmptyStatement";
__n4 := [ __n5, __n15 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n16 := {  };
__n16["type"] := "CatchClause";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "e";
__n16["param"] := __n17;
__n18 := {  };
__n18["type"] := "BlockStatement";
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "$ERROR";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: \"for(__key in null){}\" does not lead to throwing exception";
__n24["raw"] := "'#1: \"for(__key in null){}\" does not lead to throwing exception'";
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n20["expression"] := __n21;
__n19 := [ __n20 ];
__n18["body"] := __n19;
__n16["body"] := __n18;
__n2["handler"] := __n16;
__n2["finalizer"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "key";
__n26["left"] := __n27;
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "undefined";
__n26["right"] := __n28;
__n25["test"] := __n26;
__n29 := {  };
__n29["type"] := "BlockStatement";
__n31 := {  };
__n31["type"] := "ExpressionStatement";
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "$ERROR";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "+";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "#2: key === undefined. Actual: key ===";
__n36["raw"] := "'#2: key === undefined. Actual: key ==='";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "key";
__n35["right"] := __n37;
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n31["expression"] := __n32;
__n30 := [ __n31 ];
__n29["body"] := __n30;
__n25["consequent"] := __n29;
__n25["alternate"] := null;
__n1 := [ __n2, __n25 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n38 := [ "key" ];
__n0["variableDeclarations"] := __n38;
__n39 := [  ];
__n0["functionDeclarations"] := __n39;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}