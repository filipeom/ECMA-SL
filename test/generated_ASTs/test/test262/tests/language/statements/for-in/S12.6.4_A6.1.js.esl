function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__accum";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "FACTORY";
__n6["expression"] := __n7;
__n8 := {  };
__n8["type"] := "EmptyStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "AssignmentExpression";
__n10["operator"] := "=";
__n11 := {  };
__n11["type"] := "MemberExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "FACTORY";
__n11["object"] := __n12;
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "prototype";
__n13["raw"] := "\"prototype\"";
__n11["property"] := __n13;
__n11["computed"] := true;
__n10["left"] := __n11;
__n14 := {  };
__n14["type"] := "ObjectExpression";
__n16 := {  };
__n16["type"] := "Property";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "feat";
__n16["key"] := __n17;
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := 2.;
__n18["raw"] := "2";
__n16["value"] := __n18;
__n16["computed"] := false;
__n16["kind"] := "init";
__n16["shorthand"] := false;
__n19 := {  };
__n19["type"] := "Property";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "hint";
__n19["key"] := __n20;
__n21 := {  };
__n21["type"] := "Literal";
__n21["value"] := "protohint";
__n21["raw"] := "\"protohint\"";
__n19["value"] := __n21;
__n19["computed"] := false;
__n19["kind"] := "init";
__n19["shorthand"] := false;
__n15 := [ __n16, __n19 ];
__n14["properties"] := __n15;
__n10["right"] := __n14;
__n9["expression"] := __n10;
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "__instance";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "NewExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "FACTORY";
__n26["callee"] := __n27;
__n28 := [  ];
__n26["arguments"] := __n28;
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n29 := {  };
__n29["type"] := "ExpressionStatement";
__n30 := {  };
__n30["type"] := "AssignmentExpression";
__n30["operator"] := "=";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "__accum";
__n30["left"] := __n31;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "";
__n32["raw"] := "\"\"";
__n30["right"] := __n32;
__n29["expression"] := __n30;
__n33 := {  };
__n33["type"] := "ForInStatement";
__n34 := {  };
__n34["type"] := "VariableDeclarator";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "key";
__n34["id"] := __n35;
__n34["init"] := null;
__n33["left"] := __n34;
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "__instance";
__n33["right"] := __n36;
__n37 := {  };
__n37["type"] := "BlockStatement";
__n39 := {  };
__n39["type"] := "ExpressionStatement";
__n40 := {  };
__n40["type"] := "AssignmentExpression";
__n40["operator"] := "+=";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__accum";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "BinaryExpression";
__n42["operator"] := "+";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "key";
__n42["left"] := __n43;
__n44 := {  };
__n44["type"] := "MemberExpression";
__n44["computed"] := true;
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__instance";
__n44["object"] := __n45;
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "key";
__n44["property"] := __n46;
__n42["right"] := __n44;
__n40["right"] := __n42;
__n39["expression"] := __n40;
__n38 := [ __n39 ];
__n37["body"] := __n38;
__n33["body"] := __n37;
__n33["each"] := false;
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "UnaryExpression";
__n48["operator"] := "!";
__n49 := {  };
__n49["type"] := "LogicalExpression";
__n49["operator"] := "&&";
__n50 := {  };
__n50["type"] := "LogicalExpression";
__n50["operator"] := "&&";
__n51 := {  };
__n51["type"] := "BinaryExpression";
__n51["operator"] := "!==";
__n52 := {  };
__n52["type"] := "CallExpression";
__n53 := {  };
__n53["type"] := "MemberExpression";
__n54 := {  };
__n54["type"] := "Identifier";
__n54["name"] := "__accum";
__n53["object"] := __n54;
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "indexOf";
__n55["raw"] := "\"indexOf\"";
__n53["property"] := __n55;
__n53["computed"] := true;
__n52["callee"] := __n53;
__n57 := {  };
__n57["type"] := "Literal";
__n57["value"] := "prop1";
__n57["raw"] := "\"prop1\"";
__n56 := [ __n57 ];
__n52["arguments"] := __n56;
__n51["left"] := __n52;
__n58 := {  };
__n58["type"] := "UnaryExpression";
__n58["operator"] := "-";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := 1.;
__n59["raw"] := "1";
__n58["argument"] := __n59;
__n58["prefix"] := true;
__n51["right"] := __n58;
__n50["left"] := __n51;
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "CallExpression";
__n62 := {  };
__n62["type"] := "MemberExpression";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__accum";
__n62["object"] := __n63;
__n64 := {  };
__n64["type"] := "Literal";
__n64["value"] := "indexOf";
__n64["raw"] := "\"indexOf\"";
__n62["property"] := __n64;
__n62["computed"] := true;
__n61["callee"] := __n62;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "feat2";
__n66["raw"] := "\"feat2\"";
__n65 := [ __n66 ];
__n61["arguments"] := __n65;
__n60["left"] := __n61;
__n67 := {  };
__n67["type"] := "UnaryExpression";
__n67["operator"] := "-";
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := 1.;
__n68["raw"] := "1";
__n67["argument"] := __n68;
__n67["prefix"] := true;
__n60["right"] := __n67;
__n50["right"] := __n60;
__n49["left"] := __n50;
__n69 := {  };
__n69["type"] := "BinaryExpression";
__n69["operator"] := "!==";
__n70 := {  };
__n70["type"] := "CallExpression";
__n71 := {  };
__n71["type"] := "MemberExpression";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "__accum";
__n71["object"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "indexOf";
__n73["raw"] := "\"indexOf\"";
__n71["property"] := __n73;
__n71["computed"] := true;
__n70["callee"] := __n71;
__n75 := {  };
__n75["type"] := "Literal";
__n75["value"] := "hinthinted";
__n75["raw"] := "\"hinthinted\"";
__n74 := [ __n75 ];
__n70["arguments"] := __n74;
__n69["left"] := __n70;
__n76 := {  };
__n76["type"] := "UnaryExpression";
__n76["operator"] := "-";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := 1.;
__n77["raw"] := "1";
__n76["argument"] := __n77;
__n76["prefix"] := true;
__n69["right"] := __n76;
__n49["right"] := __n69;
__n48["argument"] := __n49;
__n48["prefix"] := true;
__n47["test"] := __n48;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "ExpressionStatement";
__n81 := {  };
__n81["type"] := "CallExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "$ERROR";
__n81["callee"] := __n82;
__n84 := {  };
__n84["type"] := "Literal";
__n84["value"] := "#1: (__accum.indexOf(\"prop1\")!==-1)&&(__accum.indexOf(\"feat2\")!==-1)&&(__accum.indexOf(\"hinthinted\")!==-1)";
__n84["raw"] := "'#1: (__accum.indexOf(\"prop1\")!==-1)&&(__accum.indexOf(\"feat2\")!==-1)&&(__accum.indexOf(\"hinthinted\")!==-1)'";
__n83 := [ __n84 ];
__n81["arguments"] := __n83;
__n80["expression"] := __n81;
__n79 := [ __n80 ];
__n78["body"] := __n79;
__n47["consequent"] := __n78;
__n47["alternate"] := null;
__n85 := {  };
__n85["type"] := "IfStatement";
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "!==";
__n87 := {  };
__n87["type"] := "CallExpression";
__n88 := {  };
__n88["type"] := "MemberExpression";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "__accum";
__n88["object"] := __n89;
__n90 := {  };
__n90["type"] := "Literal";
__n90["value"] := "indexOf";
__n90["raw"] := "\"indexOf\"";
__n88["property"] := __n90;
__n88["computed"] := true;
__n87["callee"] := __n88;
__n92 := {  };
__n92["type"] := "Literal";
__n92["value"] := "hintprotohint";
__n92["raw"] := "\"hintprotohint\"";
__n91 := [ __n92 ];
__n87["arguments"] := __n91;
__n86["left"] := __n87;
__n93 := {  };
__n93["type"] := "UnaryExpression";
__n93["operator"] := "-";
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := 1.;
__n94["raw"] := "1";
__n93["argument"] := __n94;
__n93["prefix"] := true;
__n86["right"] := __n93;
__n85["test"] := __n86;
__n95 := {  };
__n95["type"] := "BlockStatement";
__n97 := {  };
__n97["type"] := "ExpressionStatement";
__n98 := {  };
__n98["type"] := "CallExpression";
__n99 := {  };
__n99["type"] := "Identifier";
__n99["name"] := "$ERROR";
__n98["callee"] := __n99;
__n101 := {  };
__n101["type"] := "BinaryExpression";
__n101["operator"] := "+";
__n102 := {  };
__n102["type"] := "Literal";
__n102["value"] := "#2: __accum.indexOf(\"hintprotohint\") === -1. Actual:  __accum.indexOf(\"hintprotohint\") ===";
__n102["raw"] := "'#2: __accum.indexOf(\"hintprotohint\") === -1. Actual:  __accum.indexOf(\"hintprotohint\") ==='";
__n101["left"] := __n102;
__n103 := {  };
__n103["type"] := "CallExpression";
__n104 := {  };
__n104["type"] := "MemberExpression";
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "__accum";
__n104["object"] := __n105;
__n106 := {  };
__n106["type"] := "Literal";
__n106["value"] := "indexOf";
__n106["raw"] := "\"indexOf\"";
__n104["property"] := __n106;
__n104["computed"] := true;
__n103["callee"] := __n104;
__n108 := {  };
__n108["type"] := "Literal";
__n108["value"] := "hintprotohint";
__n108["raw"] := "\"hintprotohint\"";
__n107 := [ __n108 ];
__n103["arguments"] := __n107;
__n101["right"] := __n103;
__n100 := [ __n101 ];
__n98["arguments"] := __n100;
__n97["expression"] := __n98;
__n96 := [ __n97 ];
__n95["body"] := __n96;
__n85["consequent"] := __n95;
__n85["alternate"] := null;
__n1 := [ __n2, __n6, __n8, __n9, __n22, __n29, __n33, __n47, __n85 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n109 := [ "__accum", "__instance", "key" ];
__n0["variableDeclarations"] := __n109;
__n111 := {  };
__n111["type"] := "FunctionDeclaration";
__n112 := {  };
__n112["type"] := "Identifier";
__n112["name"] := "FACTORY";
__n111["id"] := __n112;
__n113 := [  ];
__n111["params"] := __n113;
__n114 := {  };
__n114["type"] := "BlockStatement";
__n116 := {  };
__n116["type"] := "ExpressionStatement";
__n117 := {  };
__n117["type"] := "AssignmentExpression";
__n117["operator"] := "=";
__n118 := {  };
__n118["type"] := "MemberExpression";
__n119 := {  };
__n119["type"] := "ThisExpression";
__n118["object"] := __n119;
__n120 := {  };
__n120["type"] := "Literal";
__n120["value"] := "prop";
__n120["raw"] := "\"prop\"";
__n118["property"] := __n120;
__n118["computed"] := true;
__n117["left"] := __n118;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := 1.;
__n121["raw"] := "1";
__n117["right"] := __n121;
__n116["expression"] := __n117;
__n122 := {  };
__n122["type"] := "ExpressionStatement";
__n123 := {  };
__n123["type"] := "AssignmentExpression";
__n123["operator"] := "=";
__n124 := {  };
__n124["type"] := "MemberExpression";
__n125 := {  };
__n125["type"] := "ThisExpression";
__n124["object"] := __n125;
__n126 := {  };
__n126["type"] := "Literal";
__n126["value"] := "hint";
__n126["raw"] := "\"hint\"";
__n124["property"] := __n126;
__n124["computed"] := true;
__n123["left"] := __n124;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := "hinted";
__n127["raw"] := "\"hinted\"";
__n123["right"] := __n127;
__n122["expression"] := __n123;
__n115 := [ __n116, __n122 ];
__n114["body"] := __n115;
__n128 := [  ];
__n114["variableDeclarations"] := __n128;
__n129 := [  ];
__n114["functionDeclarations"] := __n129;
__n114["codeType"] := "function";
__n114["strict"] := false;
__n111["body"] := __n114;
__n111["generator"] := false;
__n111["async"] := false;
__n111["expression"] := false;
__n110 := [ __n111 ];
__n0["functionDeclarations"] := __n110;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}