function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "probeBefore";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "FunctionExpression";
__n6["id"] := null;
__n7 := [  ];
__n6["params"] := __n7;
__n8 := {  };
__n8["type"] := "BlockStatement";
__n10 := {  };
__n10["type"] := "ReturnStatement";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "x";
__n10["argument"] := __n11;
__n9 := [ __n10 ];
__n8["body"] := __n9;
__n12 := [  ];
__n8["variableDeclarations"] := __n12;
__n13 := [  ];
__n8["functionDeclarations"] := __n13;
__n8["codeType"] := "function";
__n8["strict"] := false;
__n6["body"] := __n8;
__n6["generator"] := false;
__n6["async"] := false;
__n6["expression"] := false;
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n14 := {  };
__n14["type"] := "VariableDeclaration";
__n16 := {  };
__n16["type"] := "VariableDeclarator";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "probeTest";
__n16["id"] := __n17;
__n16["init"] := null;
__n18 := {  };
__n18["type"] := "VariableDeclarator";
__n19 := {  };
__n19["type"] := "Identifier";
__n19["name"] := "probeIncr";
__n18["id"] := __n19;
__n18["init"] := null;
__n20 := {  };
__n20["type"] := "VariableDeclarator";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "probeBody";
__n20["id"] := __n21;
__n20["init"] := null;
__n15 := [ __n16, __n18, __n20 ];
__n14["declarations"] := __n15;
__n14["kind"] := "var";
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "run";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := true;
__n26["raw"] := "true";
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n27 := {  };
__n27["type"] := "ForStatement";
__n28 := {  };
__n28["type"] := "VariableDeclaration";
__n30 := {  };
__n30["type"] := "VariableDeclarator";
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "_";
__n30["id"] := __n31;
__n32 := {  };
__n32["type"] := "CallExpression";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "eval";
__n32["callee"] := __n33;
__n35 := {  };
__n35["type"] := "Literal";
__n35["value"] := "var x = 1;";
__n35["raw"] := "'var x = 1;'";
__n34 := [ __n35 ];
__n32["arguments"] := __n34;
__n30["init"] := __n32;
__n29 := [ __n30 ];
__n28["declarations"] := __n29;
__n28["kind"] := "var";
__n27["init"] := __n28;
__n36 := {  };
__n36["type"] := "LogicalExpression";
__n36["operator"] := "&&";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "run";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "AssignmentExpression";
__n38["operator"] := "=";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "probeTest";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "FunctionExpression";
__n40["id"] := null;
__n41 := [  ];
__n40["params"] := __n41;
__n42 := {  };
__n42["type"] := "BlockStatement";
__n44 := {  };
__n44["type"] := "ReturnStatement";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "x";
__n44["argument"] := __n45;
__n43 := [ __n44 ];
__n42["body"] := __n43;
__n46 := [  ];
__n42["variableDeclarations"] := __n46;
__n47 := [  ];
__n42["functionDeclarations"] := __n47;
__n42["codeType"] := "function";
__n42["strict"] := false;
__n40["body"] := __n42;
__n40["generator"] := false;
__n40["async"] := false;
__n40["expression"] := false;
__n38["right"] := __n40;
__n36["right"] := __n38;
__n27["test"] := __n36;
__n48 := {  };
__n48["type"] := "AssignmentExpression";
__n48["operator"] := "=";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "probeIncr";
__n48["left"] := __n49;
__n50 := {  };
__n50["type"] := "FunctionExpression";
__n50["id"] := null;
__n51 := [  ];
__n50["params"] := __n51;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ReturnStatement";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "x";
__n54["argument"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n56 := [  ];
__n52["variableDeclarations"] := __n56;
__n57 := [  ];
__n52["functionDeclarations"] := __n57;
__n52["codeType"] := "function";
__n52["strict"] := false;
__n50["body"] := __n52;
__n50["generator"] := false;
__n50["async"] := false;
__n50["expression"] := false;
__n48["right"] := __n50;
__n27["update"] := __n48;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "SequenceExpression";
__n61 := {  };
__n61["type"] := "AssignmentExpression";
__n61["operator"] := "=";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "probeBody";
__n61["left"] := __n62;
__n63 := {  };
__n63["type"] := "FunctionExpression";
__n63["id"] := null;
__n64 := [  ];
__n63["params"] := __n64;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n67 := {  };
__n67["type"] := "ReturnStatement";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "x";
__n67["argument"] := __n68;
__n66 := [ __n67 ];
__n65["body"] := __n66;
__n69 := [  ];
__n65["variableDeclarations"] := __n69;
__n70 := [  ];
__n65["functionDeclarations"] := __n70;
__n65["codeType"] := "function";
__n65["strict"] := false;
__n63["body"] := __n65;
__n63["generator"] := false;
__n63["async"] := false;
__n63["expression"] := false;
__n61["right"] := __n63;
__n71 := {  };
__n71["type"] := "AssignmentExpression";
__n71["operator"] := "=";
__n72 := {  };
__n72["type"] := "Identifier";
__n72["name"] := "run";
__n71["left"] := __n72;
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := false;
__n73["raw"] := "false";
__n71["right"] := __n73;
__n60 := [ __n61, __n71 ];
__n59["expressions"] := __n60;
__n58["expression"] := __n59;
__n27["body"] := __n58;
__n74 := {  };
__n74["type"] := "VariableDeclaration";
__n76 := {  };
__n76["type"] := "VariableDeclarator";
__n77 := {  };
__n77["type"] := "Identifier";
__n77["name"] := "x";
__n76["id"] := __n77;
__n78 := {  };
__n78["type"] := "Literal";
__n78["value"] := 2.;
__n78["raw"] := "2";
__n76["init"] := __n78;
__n75 := [ __n76 ];
__n74["declarations"] := __n75;
__n74["kind"] := "var";
__n79 := {  };
__n79["type"] := "ExpressionStatement";
__n80 := {  };
__n80["type"] := "CallExpression";
__n81 := {  };
__n81["type"] := "MemberExpression";
__n82 := {  };
__n82["type"] := "Identifier";
__n82["name"] := "assert";
__n81["object"] := __n82;
__n83 := {  };
__n83["type"] := "Literal";
__n83["value"] := "sameValue";
__n83["raw"] := "\"sameValue\"";
__n81["property"] := __n83;
__n81["computed"] := true;
__n80["callee"] := __n81;
__n85 := {  };
__n85["type"] := "CallExpression";
__n86 := {  };
__n86["type"] := "Identifier";
__n86["name"] := "probeBefore";
__n85["callee"] := __n86;
__n87 := [  ];
__n85["arguments"] := __n87;
__n88 := {  };
__n88["type"] := "Literal";
__n88["value"] := 2.;
__n88["raw"] := "2";
__n89 := {  };
__n89["type"] := "Literal";
__n89["value"] := "reference preceding statement";
__n89["raw"] := "'reference preceding statement'";
__n84 := [ __n85, __n88, __n89 ];
__n80["arguments"] := __n84;
__n79["expression"] := __n80;
__n90 := {  };
__n90["type"] := "ExpressionStatement";
__n91 := {  };
__n91["type"] := "CallExpression";
__n92 := {  };
__n92["type"] := "MemberExpression";
__n93 := {  };
__n93["type"] := "Identifier";
__n93["name"] := "assert";
__n92["object"] := __n93;
__n94 := {  };
__n94["type"] := "Literal";
__n94["value"] := "sameValue";
__n94["raw"] := "\"sameValue\"";
__n92["property"] := __n94;
__n92["computed"] := true;
__n91["callee"] := __n92;
__n96 := {  };
__n96["type"] := "CallExpression";
__n97 := {  };
__n97["type"] := "Identifier";
__n97["name"] := "probeTest";
__n96["callee"] := __n97;
__n98 := [  ];
__n96["arguments"] := __n98;
__n99 := {  };
__n99["type"] := "Literal";
__n99["value"] := 2.;
__n99["raw"] := "2";
__n100 := {  };
__n100["type"] := "Literal";
__n100["value"] := "reference from \"test\" position";
__n100["raw"] := "'reference from \"test\" position'";
__n95 := [ __n96, __n99, __n100 ];
__n91["arguments"] := __n95;
__n90["expression"] := __n91;
__n101 := {  };
__n101["type"] := "ExpressionStatement";
__n102 := {  };
__n102["type"] := "CallExpression";
__n103 := {  };
__n103["type"] := "MemberExpression";
__n104 := {  };
__n104["type"] := "Identifier";
__n104["name"] := "assert";
__n103["object"] := __n104;
__n105 := {  };
__n105["type"] := "Literal";
__n105["value"] := "sameValue";
__n105["raw"] := "\"sameValue\"";
__n103["property"] := __n105;
__n103["computed"] := true;
__n102["callee"] := __n103;
__n107 := {  };
__n107["type"] := "CallExpression";
__n108 := {  };
__n108["type"] := "Identifier";
__n108["name"] := "probeBody";
__n107["callee"] := __n108;
__n109 := [  ];
__n107["arguments"] := __n109;
__n110 := {  };
__n110["type"] := "Literal";
__n110["value"] := 2.;
__n110["raw"] := "2";
__n111 := {  };
__n111["type"] := "Literal";
__n111["value"] := "reference from statement body";
__n111["raw"] := "'reference from statement body'";
__n106 := [ __n107, __n110, __n111 ];
__n102["arguments"] := __n106;
__n101["expression"] := __n102;
__n112 := {  };
__n112["type"] := "ExpressionStatement";
__n113 := {  };
__n113["type"] := "CallExpression";
__n114 := {  };
__n114["type"] := "MemberExpression";
__n115 := {  };
__n115["type"] := "Identifier";
__n115["name"] := "assert";
__n114["object"] := __n115;
__n116 := {  };
__n116["type"] := "Literal";
__n116["value"] := "sameValue";
__n116["raw"] := "\"sameValue\"";
__n114["property"] := __n116;
__n114["computed"] := true;
__n113["callee"] := __n114;
__n118 := {  };
__n118["type"] := "CallExpression";
__n119 := {  };
__n119["type"] := "Identifier";
__n119["name"] := "probeIncr";
__n118["callee"] := __n119;
__n120 := [  ];
__n118["arguments"] := __n120;
__n121 := {  };
__n121["type"] := "Literal";
__n121["value"] := 2.;
__n121["raw"] := "2";
__n122 := {  };
__n122["type"] := "Literal";
__n122["value"] := "reference from \"increment\" position";
__n122["raw"] := "'reference from \"increment\" position'";
__n117 := [ __n118, __n121, __n122 ];
__n113["arguments"] := __n117;
__n112["expression"] := __n113;
__n123 := {  };
__n123["type"] := "ExpressionStatement";
__n124 := {  };
__n124["type"] := "CallExpression";
__n125 := {  };
__n125["type"] := "MemberExpression";
__n126 := {  };
__n126["type"] := "Identifier";
__n126["name"] := "assert";
__n125["object"] := __n126;
__n127 := {  };
__n127["type"] := "Literal";
__n127["value"] := "sameValue";
__n127["raw"] := "\"sameValue\"";
__n125["property"] := __n127;
__n125["computed"] := true;
__n124["callee"] := __n125;
__n129 := {  };
__n129["type"] := "Identifier";
__n129["name"] := "x";
__n130 := {  };
__n130["type"] := "Literal";
__n130["value"] := 2.;
__n130["raw"] := "2";
__n131 := {  };
__n131["type"] := "Literal";
__n131["value"] := "reference following statement";
__n131["raw"] := "'reference following statement'";
__n128 := [ __n129, __n130, __n131 ];
__n124["arguments"] := __n128;
__n123["expression"] := __n124;
__n1 := [ __n2, __n14, __n22, __n27, __n74, __n79, __n90, __n101, __n112, __n123 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n132 := [ "probeBefore", "probeTest", "probeIncr", "probeBody", "run", "_", "x" ];
__n0["variableDeclarations"] := __n132;
__n133 := [  ];
__n0["functionDeclarations"] := __n133;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}