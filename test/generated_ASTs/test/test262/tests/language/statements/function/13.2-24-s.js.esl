function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "foo";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "CallExpression";
__n6 := {  };
__n6["type"] := "MemberExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "foo";
__n6["object"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := "call";
__n8["raw"] := "\"call\"";
__n6["property"] := __n8;
__n6["computed"] := true;
__n5["callee"] := __n6;
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "foo";
__n9 := [ __n10 ];
__n5["arguments"] := __n9;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n11 := [  ];
__n0["variableDeclarations"] := __n11;
__n13 := {  };
__n13["type"] := "FunctionDeclaration";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "foo";
__n13["id"] := __n14;
__n15 := [  ];
__n13["params"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "use strict";
__n19["raw"] := "\"use strict\"";
__n18["expression"] := __n19;
__n18["directive"] := "use strict";
__n20 := {  };
__n20["type"] := "ForInStatement";
__n21 := {  };
__n21["type"] := "VariableDeclarator";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "tempIndex";
__n21["id"] := __n22;
__n21["init"] := null;
__n20["left"] := __n21;
__n23 := {  };
__n23["type"] := "ThisExpression";
__n20["right"] := __n23;
__n24 := {  };
__n24["type"] := "BlockStatement";
__n26 := {  };
__n26["type"] := "ExpressionStatement";
__n27 := {  };
__n27["type"] := "CallExpression";
__n28 := {  };
__n28["type"] := "MemberExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "assert";
__n28["object"] := __n29;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "notSameValue";
__n30["raw"] := "\"notSameValue\"";
__n28["property"] := __n30;
__n28["computed"] := true;
__n27["callee"] := __n28;
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "tempIndex";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "caller";
__n33["raw"] := "\"caller\"";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "tempIndex";
__n34["raw"] := "'tempIndex'";
__n31 := [ __n32, __n33, __n34 ];
__n27["arguments"] := __n31;
__n26["expression"] := __n27;
__n25 := [ __n26 ];
__n24["body"] := __n25;
__n20["body"] := __n24;
__n20["each"] := false;
__n17 := [ __n18, __n20 ];
__n16["body"] := __n17;
__n35 := [ "tempIndex" ];
__n16["variableDeclarations"] := __n35;
__n36 := [  ];
__n16["functionDeclarations"] := __n36;
__n16["codeType"] := "function";
__n16["strict"] := true;
__n13["body"] := __n16;
__n13["generator"] := false;
__n13["async"] := false;
__n13["expression"] := false;
__n12 := [ __n13 ];
__n0["functionDeclarations"] := __n12;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}