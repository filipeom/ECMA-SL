function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "FACTORY";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "TryStatement";
__n5 := {  };
__n5["type"] := "BlockStatement";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "obj";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "NewExpression";
__n12 := {  };
__n12["type"] := "Identifier";
__n12["name"] := "FACTORY";
__n11["callee"] := __n12;
__n13 := [  ];
__n11["arguments"] := __n13;
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n6 := [ __n7 ];
__n5["body"] := __n6;
__n4["block"] := __n5;
__n14 := {  };
__n14["type"] := "CatchClause";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "e";
__n14["param"] := __n15;
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "$ERROR";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "+";
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: var obj = new FACTORY() does not lead to throwing exception. Actual: Exception is ";
__n23["raw"] := "'#1: var obj = new FACTORY() does not lead to throwing exception. Actual: Exception is '";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "e";
__n22["right"] := __n24;
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n14["body"] := __n16;
__n4["handler"] := __n14;
__n4["finalizer"] := null;
__n25 := {  };
__n25["type"] := "IfStatement";
__n26 := {  };
__n26["type"] := "BinaryExpression";
__n26["operator"] := "!==";
__n27 := {  };
__n27["type"] := "MemberExpression";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "obj";
__n27["object"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "id";
__n29["raw"] := "\"id\"";
__n27["property"] := __n29;
__n27["computed"] := true;
__n26["left"] := __n27;
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "id_string";
__n30["raw"] := "\"id_string\"";
__n26["right"] := __n30;
__n25["test"] := __n26;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "CallExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "$ERROR";
__n34["callee"] := __n35;
__n37 := {  };
__n37["type"] := "BinaryExpression";
__n37["operator"] := "+";
__n38 := {  };
__n38["type"] := "Literal";
__n38["value"] := "#2: obj.id === \"id_string\". Actual: obj.id ===";
__n38["raw"] := "'#2: obj.id === \"id_string\". Actual: obj.id ==='";
__n37["left"] := __n38;
__n39 := {  };
__n39["type"] := "MemberExpression";
__n40 := {  };
__n40["type"] := "Identifier";
__n40["name"] := "obj";
__n39["object"] := __n40;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "id";
__n41["raw"] := "\"id\"";
__n39["property"] := __n41;
__n39["computed"] := true;
__n37["right"] := __n39;
__n36 := [ __n37 ];
__n34["arguments"] := __n36;
__n33["expression"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n25["consequent"] := __n31;
__n25["alternate"] := null;
__n1 := [ __n2, __n4, __n25 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n42 := [ "obj" ];
__n0["variableDeclarations"] := __n42;
__n44 := {  };
__n44["type"] := "FunctionDeclaration";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "FACTORY";
__n44["id"] := __n45;
__n46 := [  ];
__n44["params"] := __n46;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "MemberExpression";
__n52 := {  };
__n52["type"] := "ThisExpression";
__n51["object"] := __n52;
__n53 := {  };
__n53["type"] := "Literal";
__n53["value"] := "id";
__n53["raw"] := "\"id\"";
__n51["property"] := __n53;
__n51["computed"] := true;
__n50["left"] := __n51;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 0.;
__n54["raw"] := "0";
__n50["right"] := __n54;
__n49["expression"] := __n50;
__n55 := {  };
__n55["type"] := "ExpressionStatement";
__n56 := {  };
__n56["type"] := "AssignmentExpression";
__n56["operator"] := "=";
__n57 := {  };
__n57["type"] := "MemberExpression";
__n58 := {  };
__n58["type"] := "ThisExpression";
__n57["object"] := __n58;
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "id";
__n59["raw"] := "\"id\"";
__n57["property"] := __n59;
__n57["computed"] := true;
__n56["left"] := __n57;
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "func";
__n60["callee"] := __n61;
__n62 := [  ];
__n60["arguments"] := __n62;
__n56["right"] := __n60;
__n55["expression"] := __n56;
__n63 := {  };
__n63["type"] := "ExpressionStatement";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "func";
__n63["expression"] := __n64;
__n48 := [ __n49, __n55, __n63 ];
__n47["body"] := __n48;
__n65 := [  ];
__n47["variableDeclarations"] := __n65;
__n67 := {  };
__n67["type"] := "FunctionDeclaration";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "func";
__n67["id"] := __n68;
__n69 := [  ];
__n67["params"] := __n69;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ReturnStatement";
__n73 := {  };
__n73["type"] := "Literal";
__n73["value"] := "id_string";
__n73["raw"] := "\"id_string\"";
__n72["argument"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n74 := [  ];
__n70["variableDeclarations"] := __n74;
__n75 := [  ];
__n70["functionDeclarations"] := __n75;
__n70["codeType"] := "function";
__n70["strict"] := false;
__n67["body"] := __n70;
__n67["generator"] := false;
__n67["async"] := false;
__n67["expression"] := false;
__n66 := [ __n67 ];
__n47["functionDeclarations"] := __n66;
__n47["codeType"] := "function";
__n47["strict"] := false;
__n44["body"] := __n47;
__n44["generator"] := false;
__n44["async"] := false;
__n44["expression"] := false;
__n43 := [ __n44 ];
__n0["functionDeclarations"] := __n43;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}