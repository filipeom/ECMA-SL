function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__MONSTER";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "monster";
__n6["raw"] := "\"monster\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "VariableDeclaration";
__n9 := {  };
__n9["type"] := "VariableDeclarator";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__PREDATOR";
__n9["id"] := __n10;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "predator";
__n11["raw"] := "\"predator\"";
__n9["init"] := __n11;
__n8 := [ __n9 ];
__n7["declarations"] := __n8;
__n7["kind"] := "var";
__n12 := {  };
__n12["type"] := "ExpressionStatement";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "__PROTO";
__n12["expression"] := __n13;
__n14 := {  };
__n14["type"] := "EmptyStatement";
__n15 := {  };
__n15["type"] := "TryStatement";
__n16 := {  };
__n16["type"] := "BlockStatement";
__n18 := {  };
__n18["type"] := "ExpressionStatement";
__n19 := {  };
__n19["type"] := "AssignmentExpression";
__n19["operator"] := "=";
__n20 := {  };
__n20["type"] := "MemberExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "__PROTO";
__n20["object"] := __n21;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "type";
__n22["raw"] := "\"type\"";
__n20["property"] := __n22;
__n20["computed"] := true;
__n19["left"] := __n20;
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__MONSTER";
__n19["right"] := __n23;
__n18["expression"] := __n19;
__n17 := [ __n18 ];
__n16["body"] := __n17;
__n15["block"] := __n16;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#0: __PROTO.type=__MONSTER does not lead to throwing exception";
__n32["raw"] := "'#0: __PROTO.type=__MONSTER does not lead to throwing exception'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n15["handler"] := __n24;
__n15["finalizer"] := null;
__n33 := {  };
__n33["type"] := "ExpressionStatement";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "__FACTORY";
__n33["expression"] := __n34;
__n35 := {  };
__n35["type"] := "EmptyStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "AssignmentExpression";
__n37["operator"] := "=";
__n38 := {  };
__n38["type"] := "MemberExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__FACTORY";
__n38["object"] := __n39;
__n40 := {  };
__n40["type"] := "Literal";
__n40["value"] := "prototype";
__n40["raw"] := "\"prototype\"";
__n38["property"] := __n40;
__n38["computed"] := true;
__n37["left"] := __n38;
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__PROTO";
__n37["right"] := __n41;
__n36["expression"] := __n37;
__n42 := {  };
__n42["type"] := "VariableDeclaration";
__n44 := {  };
__n44["type"] := "VariableDeclarator";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__monster";
__n44["id"] := __n45;
__n46 := {  };
__n46["type"] := "NewExpression";
__n47 := {  };
__n47["type"] := "Identifier";
__n47["name"] := "__FACTORY";
__n46["callee"] := __n47;
__n48 := [  ];
__n46["arguments"] := __n48;
__n44["init"] := __n46;
__n43 := [ __n44 ];
__n42["declarations"] := __n43;
__n42["kind"] := "var";
__n49 := {  };
__n49["type"] := "IfStatement";
__n50 := {  };
__n50["type"] := "UnaryExpression";
__n50["operator"] := "!";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "MemberExpression";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__PROTO";
__n52["object"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "isPrototypeOf";
__n54["raw"] := "\"isPrototypeOf\"";
__n52["property"] := __n54;
__n52["computed"] := true;
__n51["callee"] := __n52;
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "__monster";
__n55 := [ __n56 ];
__n51["arguments"] := __n55;
__n50["argument"] := __n51;
__n50["prefix"] := true;
__n49["test"] := __n50;
__n57 := {  };
__n57["type"] := "BlockStatement";
__n59 := {  };
__n59["type"] := "ExpressionStatement";
__n60 := {  };
__n60["type"] := "CallExpression";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "$ERROR";
__n60["callee"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "#1: __PROTO.isPrototypeOf(__monster) must be true";
__n63["raw"] := "'#1: __PROTO.isPrototypeOf(__monster) must be true'";
__n62 := [ __n63 ];
__n60["arguments"] := __n62;
__n59["expression"] := __n60;
__n58 := [ __n59 ];
__n57["body"] := __n58;
__n49["consequent"] := __n57;
__n49["alternate"] := null;
__n64 := {  };
__n64["type"] := "IfStatement";
__n65 := {  };
__n65["type"] := "BinaryExpression";
__n65["operator"] := "!==";
__n66 := {  };
__n66["type"] := "MemberExpression";
__n67 := {  };
__n67["type"] := "Identifier";
__n67["name"] := "__monster";
__n66["object"] := __n67;
__n68 := {  };
__n68["type"] := "Literal";
__n68["value"] := "type";
__n68["raw"] := "\"type\"";
__n66["property"] := __n68;
__n66["computed"] := true;
__n65["left"] := __n66;
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "__MONSTER";
__n65["right"] := __n69;
__n64["test"] := __n65;
__n70 := {  };
__n70["type"] := "BlockStatement";
__n72 := {  };
__n72["type"] := "ExpressionStatement";
__n73 := {  };
__n73["type"] := "CallExpression";
__n74 := {  };
__n74["type"] := "Identifier";
__n74["name"] := "$ERROR";
__n73["callee"] := __n74;
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "+";
__n77 := {  };
__n77["type"] := "Literal";
__n77["value"] := "#2: __monster.type ===__MONSTER. Actual: __monster.type ===";
__n77["raw"] := "'#2: __monster.type ===__MONSTER. Actual: __monster.type ==='";
__n76["left"] := __n77;
__n78 := {  };
__n78["type"] := "MemberExpression";
__n79 := {  };
__n79["type"] := "Identifier";
__n79["name"] := "__monster";
__n78["object"] := __n79;
__n80 := {  };
__n80["type"] := "Literal";
__n80["value"] := "type";
__n80["raw"] := "\"type\"";
__n78["property"] := __n80;
__n78["computed"] := true;
__n76["right"] := __n78;
__n75 := [ __n76 ];
__n73["arguments"] := __n75;
__n72["expression"] := __n73;
__n71 := [ __n72 ];
__n70["body"] := __n71;
__n64["consequent"] := __n70;
__n64["alternate"] := null;
__n1 := [ __n2, __n7, __n12, __n14, __n15, __n33, __n35, __n36, __n42, __n49, __n64 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n81 := [ "__MONSTER", "__PREDATOR", "__monster" ];
__n0["variableDeclarations"] := __n81;
__n83 := {  };
__n83["type"] := "FunctionDeclaration";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "__PROTO";
__n83["id"] := __n84;
__n85 := [  ];
__n83["params"] := __n85;
__n86 := {  };
__n86["type"] := "BlockStatement";
__n87 := [  ];
__n86["body"] := __n87;
__n88 := [  ];
__n86["variableDeclarations"] := __n88;
__n89 := [  ];
__n86["functionDeclarations"] := __n89;
__n86["codeType"] := "function";
__n86["strict"] := false;
__n83["body"] := __n86;
__n83["generator"] := false;
__n83["async"] := false;
__n83["expression"] := false;
__n90 := {  };
__n90["type"] := "FunctionDeclaration";
__n91 := {  };
__n91["type"] := "Identifier";
__n91["name"] := "__FACTORY";
__n90["id"] := __n91;
__n92 := [  ];
__n90["params"] := __n92;
__n93 := {  };
__n93["type"] := "BlockStatement";
__n94 := [  ];
__n93["body"] := __n94;
__n95 := [  ];
__n93["variableDeclarations"] := __n95;
__n96 := [  ];
__n93["functionDeclarations"] := __n96;
__n93["codeType"] := "function";
__n93["strict"] := false;
__n90["body"] := __n93;
__n90["generator"] := false;
__n90["async"] := false;
__n90["expression"] := false;
__n82 := [ __n83, __n90 ];
__n0["functionDeclarations"] := __n82;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}