function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := "use strict";
__n3["raw"] := "\"use strict\"";
__n2["expression"] := __n3;
__n2["directive"] := "use strict";
__n4 := {  };
__n4["type"] := "ExpressionStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "in";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "caller";
__n6["raw"] := "'caller'";
__n5["left"] := __n6;
__n7 := {  };
__n7["type"] := "FunctionExpression";
__n7["id"] := null;
__n8 := [  ];
__n7["params"] := __n8;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n10 := [  ];
__n9["body"] := __n10;
__n11 := [  ];
__n9["variableDeclarations"] := __n11;
__n12 := [  ];
__n9["functionDeclarations"] := __n12;
__n9["codeType"] := "function";
__n9["strict"] := false;
__n7["body"] := __n9;
__n7["generator"] := false;
__n7["async"] := false;
__n7["expression"] := false;
__n5["right"] := __n7;
__n4["expression"] := __n5;
__n1 := [ __n2, __n4 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n13 := [  ];
__n0["variableDeclarations"] := __n13;
__n14 := [  ];
__n0["functionDeclarations"] := __n14;
__n0["codeType"] := "global";
__n0["strict"] := true;
return ( false, __n0 )
}