function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "VariableDeclaration";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__result";
__n7["id"] := __n8;
__n9 := {  };
__n9["type"] := "CallExpression";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "__func";
__n9["callee"] := __n10;
__n11 := [  ];
__n9["arguments"] := __n11;
__n7["init"] := __n9;
__n6 := [ __n7 ];
__n5["declarations"] := __n6;
__n5["kind"] := "var";
__n4 := [ __n5 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n12 := {  };
__n12["type"] := "CatchClause";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "e";
__n12["param"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "CallExpression";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "$ERROR";
__n17["callee"] := __n18;
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: Function call can appears in the program before the FunctionDeclaration appears";
__n20["raw"] := "\"#1: Function call can appears in the program before the FunctionDeclaration appears\"";
__n19 := [ __n20 ];
__n17["arguments"] := __n19;
__n16["expression"] := __n17;
__n15 := [ __n16 ];
__n14["body"] := __n15;
__n12["body"] := __n14;
__n2["handler"] := __n12;
__n2["finalizer"] := null;
__n21 := {  };
__n21["type"] := "IfStatement";
__n22 := {  };
__n22["type"] := "BinaryExpression";
__n22["operator"] := "!==";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "__result";
__n22["left"] := __n23;
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "SECOND";
__n24["raw"] := "\"SECOND\"";
__n22["right"] := __n24;
__n21["test"] := __n22;
__n25 := {  };
__n25["type"] := "BlockStatement";
__n27 := {  };
__n27["type"] := "ExpressionStatement";
__n28 := {  };
__n28["type"] := "CallExpression";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "$ERROR";
__n28["callee"] := __n29;
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "+";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#1.1: __result === \"SECOND\". Actual: __result ===";
__n32["raw"] := "'#1.1: __result === \"SECOND\". Actual: __result ==='";
__n31["left"] := __n32;
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__result";
__n31["right"] := __n33;
__n30 := [ __n31 ];
__n28["arguments"] := __n30;
__n27["expression"] := __n28;
__n26 := [ __n27 ];
__n25["body"] := __n26;
__n21["consequent"] := __n25;
__n21["alternate"] := null;
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "__func";
__n34["expression"] := __n35;
__n36 := {  };
__n36["type"] := "EmptyStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "AssignmentExpression";
__n38["operator"] := "=";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "__result";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "CallExpression";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "__func";
__n40["callee"] := __n41;
__n42 := [  ];
__n40["arguments"] := __n42;
__n38["right"] := __n40;
__n37["expression"] := __n38;
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__result";
__n44["left"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "SECOND";
__n46["raw"] := "\"SECOND\"";
__n44["right"] := __n46;
__n43["test"] := __n44;
__n47 := {  };
__n47["type"] := "BlockStatement";
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "CallExpression";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "$ERROR";
__n50["callee"] := __n51;
__n53 := {  };
__n53["type"] := "BinaryExpression";
__n53["operator"] := "+";
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := "#2: __result === \"SECOND\". Actual: __result ===";
__n54["raw"] := "'#2: __result === \"SECOND\". Actual: __result ==='";
__n53["left"] := __n54;
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "__result";
__n53["right"] := __n55;
__n52 := [ __n53 ];
__n50["arguments"] := __n52;
__n49["expression"] := __n50;
__n48 := [ __n49 ];
__n47["body"] := __n48;
__n43["consequent"] := __n47;
__n43["alternate"] := null;
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__func";
__n56["expression"] := __n57;
__n58 := {  };
__n58["type"] := "EmptyStatement";
__n1 := [ __n2, __n21, __n34, __n36, __n37, __n43, __n56, __n58 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n59 := [ "__result" ];
__n0["variableDeclarations"] := __n59;
__n61 := {  };
__n61["type"] := "FunctionDeclaration";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__func";
__n61["id"] := __n62;
__n63 := [  ];
__n61["params"] := __n63;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ReturnStatement";
__n67 := {  };
__n67["type"] := "Literal";
__n67["value"] := "FIRST";
__n67["raw"] := "\"FIRST\"";
__n66["argument"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n68 := [  ];
__n64["variableDeclarations"] := __n68;
__n69 := [  ];
__n64["functionDeclarations"] := __n69;
__n64["codeType"] := "function";
__n64["strict"] := false;
__n61["body"] := __n64;
__n61["generator"] := false;
__n61["async"] := false;
__n61["expression"] := false;
__n70 := {  };
__n70["type"] := "FunctionDeclaration";
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "__func";
__n70["id"] := __n71;
__n72 := [  ];
__n70["params"] := __n72;
__n73 := {  };
__n73["type"] := "BlockStatement";
__n75 := {  };
__n75["type"] := "ReturnStatement";
__n76 := {  };
__n76["type"] := "Literal";
__n76["value"] := "SECOND";
__n76["raw"] := "\"SECOND\"";
__n75["argument"] := __n76;
__n74 := [ __n75 ];
__n73["body"] := __n74;
__n77 := [  ];
__n73["variableDeclarations"] := __n77;
__n78 := [  ];
__n73["functionDeclarations"] := __n78;
__n73["codeType"] := "function";
__n73["strict"] := false;
__n70["body"] := __n73;
__n70["generator"] := false;
__n70["async"] := false;
__n70["expression"] := false;
__n60 := [ __n61, __n70 ];
__n0["functionDeclarations"] := __n60;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}