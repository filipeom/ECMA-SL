function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__func";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "BinaryExpression";
__n5["operator"] := "!==";
__n6 := {  };
__n6["type"] := "CallExpression";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "__func";
__n6["callee"] := __n7;
__n9 := {  };
__n9["type"] := "Literal";
__n9["value"] := "A";
__n9["raw"] := "'A'";
__n8 := [ __n9 ];
__n6["arguments"] := __n8;
__n5["left"] := __n6;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := 1.;
__n10["raw"] := "1";
__n5["right"] := __n10;
__n4["test"] := __n5;
__n11 := {  };
__n11["type"] := "BlockStatement";
__n13 := {  };
__n13["type"] := "ExpressionStatement";
__n14 := {  };
__n14["type"] := "CallExpression";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "$ERROR";
__n14["callee"] := __n15;
__n17 := {  };
__n17["type"] := "BinaryExpression";
__n17["operator"] := "+";
__n18 := {  };
__n18["type"] := "Literal";
__n18["value"] := "#1: __func('A') === 1. Actual: __func('A') ===";
__n18["raw"] := "'#1: __func(\\'A\\') === 1. Actual: __func(\\'A\\') ==='";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "CallExpression";
__n20 := {  };
__n20["type"] := "Identifier";
__n20["name"] := "__func";
__n19["callee"] := __n20;
__n22 := {  };
__n22["type"] := "Literal";
__n22["value"] := "A";
__n22["raw"] := "'A'";
__n21 := [ __n22 ];
__n19["arguments"] := __n21;
__n17["right"] := __n19;
__n16 := [ __n17 ];
__n14["arguments"] := __n16;
__n13["expression"] := __n14;
__n12 := [ __n13 ];
__n11["body"] := __n12;
__n4["consequent"] := __n11;
__n4["alternate"] := null;
__n23 := {  };
__n23["type"] := "IfStatement";
__n24 := {  };
__n24["type"] := "BinaryExpression";
__n24["operator"] := "!==";
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__func";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "A";
__n28["raw"] := "'A'";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "B";
__n29["raw"] := "'B'";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := 1.;
__n30["raw"] := "1";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := 2.;
__n31["raw"] := "2";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "__func";
__n27 := [ __n28, __n29, __n30, __n31, __n32 ];
__n25["arguments"] := __n27;
__n24["left"] := __n25;
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := 5.;
__n33["raw"] := "5";
__n24["right"] := __n33;
__n23["test"] := __n24;
__n34 := {  };
__n34["type"] := "BlockStatement";
__n36 := {  };
__n36["type"] := "ExpressionStatement";
__n37 := {  };
__n37["type"] := "CallExpression";
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "$ERROR";
__n37["callee"] := __n38;
__n40 := {  };
__n40["type"] := "BinaryExpression";
__n40["operator"] := "+";
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: __func('A', 'B', 1, 2,__func) === 5. Actual: __func('A', 'B', 1, 2,__func) ===";
__n41["raw"] := "'#2: __func(\\'A\\', \\'B\\', 1, 2,__func) === 5. Actual: __func(\\'A\\', \\'B\\', 1, 2,__func) ==='";
__n40["left"] := __n41;
__n42 := {  };
__n42["type"] := "CallExpression";
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "__func";
__n42["callee"] := __n43;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "A";
__n45["raw"] := "'A'";
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "B";
__n46["raw"] := "'B'";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := 1.;
__n47["raw"] := "1";
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := 2.;
__n48["raw"] := "2";
__n49 := {  };
__n49["type"] := "Identifier";
__n49["name"] := "__func";
__n44 := [ __n45, __n46, __n47, __n48, __n49 ];
__n42["arguments"] := __n44;
__n40["right"] := __n42;
__n39 := [ __n40 ];
__n37["arguments"] := __n39;
__n36["expression"] := __n37;
__n35 := [ __n36 ];
__n34["body"] := __n35;
__n23["consequent"] := __n34;
__n23["alternate"] := null;
__n1 := [ __n2, __n4, __n23 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n50 := [  ];
__n0["variableDeclarations"] := __n50;
__n52 := {  };
__n52["type"] := "FunctionDeclaration";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "__func";
__n52["id"] := __n53;
__n54 := [ "param1", "param2", "param3" ];
__n52["params"] := __n54;
__n55 := {  };
__n55["type"] := "BlockStatement";
__n57 := {  };
__n57["type"] := "ReturnStatement";
__n58 := {  };
__n58["type"] := "MemberExpression";
__n59 := {  };
__n59["type"] := "Identifier";
__n59["name"] := "arguments";
__n58["object"] := __n59;
__n60 := {  };
__n60["type"] := "Literal";
__n60["value"] := "length";
__n60["raw"] := "\"length\"";
__n58["property"] := __n60;
__n58["computed"] := true;
__n57["argument"] := __n58;
__n56 := [ __n57 ];
__n55["body"] := __n56;
__n61 := [  ];
__n55["variableDeclarations"] := __n61;
__n62 := [  ];
__n55["functionDeclarations"] := __n62;
__n55["codeType"] := "function";
__n55["strict"] := false;
__n52["body"] := __n55;
__n52["generator"] := false;
__n52["async"] := false;
__n52["expression"] := false;
__n51 := [ __n52 ];
__n0["functionDeclarations"] := __n51;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}