function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "Literal";
__n3["value"] := true;
__n3["raw"] := "true";
__n2["test"] := __n3;
__n4 := {  };
__n4["type"] := "IfStatement";
__n5 := {  };
__n5["type"] := "Literal";
__n5["value"] := false;
__n5["raw"] := "false";
__n4["test"] := __n5;
__n6 := {  };
__n6["type"] := "ExpressionStatement";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "$ERROR";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "#1.1: At embedded \"if/else\" constructions engine must select right branches";
__n10["raw"] := "'#1.1: At embedded \"if/else\" constructions engine must select right branches'";
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["expression"] := __n7;
__n4["consequent"] := __n6;
__n4["alternate"] := null;
__n2["consequent"] := __n4;
__n2["alternate"] := null;
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "c";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 0.;
__n15["raw"] := "0";
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := true;
__n17["raw"] := "true";
__n16["test"] := __n17;
__n18 := {  };
__n18["type"] := "IfStatement";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n18["test"] := __n19;
__n20 := {  };
__n20["type"] := "ExpressionStatement";
__n21 := {  };
__n21["type"] := "AssignmentExpression";
__n21["operator"] := "=";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "c";
__n21["left"] := __n22;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := 2.;
__n23["raw"] := "2";
__n21["right"] := __n23;
__n20["expression"] := __n21;
__n18["consequent"] := __n20;
__n18["alternate"] := null;
__n16["consequent"] := __n18;
__n16["alternate"] := null;
__n24 := {  };
__n24["type"] := "IfStatement";
__n25 := {  };
__n25["type"] := "BinaryExpression";
__n25["operator"] := "!==";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "c";
__n25["left"] := __n26;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := 2.;
__n27["raw"] := "2";
__n25["right"] := __n27;
__n24["test"] := __n25;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "CallExpression";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "$ERROR";
__n29["callee"] := __n30;
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "#2: At embedded \"if/else\" constructions engine must select right branches";
__n32["raw"] := "'#2: At embedded \"if/else\" constructions engine must select right branches'";
__n31 := [ __n32 ];
__n29["arguments"] := __n31;
__n28["expression"] := __n29;
__n24["consequent"] := __n28;
__n24["alternate"] := null;
__n33 := {  };
__n33["type"] := "IfStatement";
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := false;
__n34["raw"] := "false";
__n33["test"] := __n34;
__n35 := {  };
__n35["type"] := "IfStatement";
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := true;
__n36["raw"] := "true";
__n35["test"] := __n36;
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#3.1: At embedded \"if/else\" constructions engine must select right branches";
__n41["raw"] := "'#3.1: At embedded \"if/else\" constructions engine must select right branches'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n35["consequent"] := __n37;
__n35["alternate"] := null;
__n33["consequent"] := __n35;
__n33["alternate"] := null;
__n42 := {  };
__n42["type"] := "IfStatement";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := false;
__n43["raw"] := "false";
__n42["test"] := __n43;
__n44 := {  };
__n44["type"] := "IfStatement";
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := true;
__n45["raw"] := "true";
__n44["test"] := __n45;
__n46 := {  };
__n46["type"] := "ExpressionStatement";
__n47 := {  };
__n47["type"] := "CallExpression";
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "$ERROR";
__n47["callee"] := __n48;
__n50 := {  };
__n50["type"] := "Literal";
__n50["value"] := "#4.1: At embedded \"if/else\" constructions engine must select right branches";
__n50["raw"] := "'#4.1: At embedded \"if/else\" constructions engine must select right branches'";
__n49 := [ __n50 ];
__n47["arguments"] := __n49;
__n46["expression"] := __n47;
__n44["consequent"] := __n46;
__n44["alternate"] := null;
__n42["consequent"] := __n44;
__n42["alternate"] := null;
__n1 := [ __n2, __n11, __n16, __n24, __n33, __n42 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n51 := [ "c" ];
__n0["variableDeclarations"] := __n51;
__n52 := [  ];
__n0["functionDeclarations"] := __n52;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}