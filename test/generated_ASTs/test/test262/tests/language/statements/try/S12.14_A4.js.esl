function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "ThrowStatement";
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "catchme";
__n6["raw"] := "\"catchme\"";
__n5["argument"] := __n6;
__n7 := {  };
__n7["type"] := "ExpressionStatement";
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "$ERROR";
__n8["callee"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "#1.1: throw \"catchme\" lead to throwing exception";
__n11["raw"] := "'#1.1: throw \"catchme\" lead to throwing exception'";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n7["expression"] := __n8;
__n4 := [ __n5, __n7 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n12 := {  };
__n12["type"] := "CatchClause";
__n13 := {  };
__n13["type"] := "Identifier";
__n13["name"] := "e";
__n12["param"] := __n13;
__n14 := {  };
__n14["type"] := "BlockStatement";
__n16 := {  };
__n16["type"] := "IfStatement";
__n17 := {  };
__n17["type"] := "UnaryExpression";
__n17["operator"] := "delete";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "e";
__n17["argument"] := __n18;
__n17["prefix"] := true;
__n16["test"] := __n17;
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "$ERROR";
__n22["callee"] := __n23;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "#1.2: Exception has DontDelete property";
__n25["raw"] := "'#1.2: Exception has DontDelete property'";
__n24 := [ __n25 ];
__n22["arguments"] := __n24;
__n21["expression"] := __n22;
__n20 := [ __n21 ];
__n19["body"] := __n20;
__n16["consequent"] := __n19;
__n16["alternate"] := null;
__n26 := {  };
__n26["type"] := "IfStatement";
__n27 := {  };
__n27["type"] := "BinaryExpression";
__n27["operator"] := "!==";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "e";
__n27["left"] := __n28;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "catchme";
__n29["raw"] := "\"catchme\"";
__n27["right"] := __n29;
__n26["test"] := __n27;
__n30 := {  };
__n30["type"] := "BlockStatement";
__n32 := {  };
__n32["type"] := "ExpressionStatement";
__n33 := {  };
__n33["type"] := "CallExpression";
__n34 := {  };
__n34["type"] := "Identifier";
__n34["name"] := "$ERROR";
__n33["callee"] := __n34;
__n36 := {  };
__n36["type"] := "BinaryExpression";
__n36["operator"] := "+";
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := "#1.3: Exception === \"catchme\". Actual:  Exception ===";
__n37["raw"] := "'#1.3: Exception === \"catchme\". Actual:  Exception ==='";
__n36["left"] := __n37;
__n38 := {  };
__n38["type"] := "Identifier";
__n38["name"] := "e";
__n36["right"] := __n38;
__n35 := [ __n36 ];
__n33["arguments"] := __n35;
__n32["expression"] := __n33;
__n31 := [ __n32 ];
__n30["body"] := __n31;
__n26["consequent"] := __n30;
__n26["alternate"] := null;
__n15 := [ __n16, __n26 ];
__n14["body"] := __n15;
__n12["body"] := __n14;
__n2["handler"] := __n12;
__n2["finalizer"] := null;
__n39 := {  };
__n39["type"] := "TryStatement";
__n40 := {  };
__n40["type"] := "BlockStatement";
__n42 := {  };
__n42["type"] := "ThrowStatement";
__n43 := {  };
__n43["type"] := "Literal";
__n43["value"] := "catchme";
__n43["raw"] := "\"catchme\"";
__n42["argument"] := __n43;
__n44 := {  };
__n44["type"] := "ExpressionStatement";
__n45 := {  };
__n45["type"] := "CallExpression";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "$ERROR";
__n45["callee"] := __n46;
__n48 := {  };
__n48["type"] := "Literal";
__n48["value"] := "#2.1: throw \"catchme\" lead to throwing exception";
__n48["raw"] := "'#2.1: throw \"catchme\" lead to throwing exception'";
__n47 := [ __n48 ];
__n45["arguments"] := __n47;
__n44["expression"] := __n45;
__n41 := [ __n42, __n44 ];
__n40["body"] := __n41;
__n39["block"] := __n40;
__n49 := {  };
__n49["type"] := "CatchClause";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "e";
__n49["param"] := __n50;
__n51 := {  };
__n51["type"] := "BlockStatement";
__n52 := [  ];
__n51["body"] := __n52;
__n49["body"] := __n51;
__n39["handler"] := __n49;
__n39["finalizer"] := null;
__n53 := {  };
__n53["type"] := "TryStatement";
__n54 := {  };
__n54["type"] := "BlockStatement";
__n56 := {  };
__n56["type"] := "ExpressionStatement";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "e";
__n56["expression"] := __n57;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "Identifier";
__n60["name"] := "$ERROR";
__n59["callee"] := __n60;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "#2.2: Deleting catching exception after ending \"catch\" block";
__n62["raw"] := "'#2.2: Deleting catching exception after ending \"catch\" block'";
__n61 := [ __n62 ];
__n59["arguments"] := __n61;
__n58["expression"] := __n59;
__n55 := [ __n56, __n58 ];
__n54["body"] := __n55;
__n53["block"] := __n54;
__n63 := {  };
__n63["type"] := "CatchClause";
__n64 := {  };
__n64["type"] := "Identifier";
__n64["name"] := "err";
__n63["param"] := __n64;
__n65 := {  };
__n65["type"] := "BlockStatement";
__n66 := [  ];
__n65["body"] := __n66;
__n63["body"] := __n65;
__n53["handler"] := __n63;
__n53["finalizer"] := null;
__n1 := [ __n2, __n39, __n53 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n67 := [  ];
__n0["variableDeclarations"] := __n67;
__n68 := [  ];
__n0["functionDeclarations"] := __n68;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}