function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "enumed";
__n4["id"] := __n5;
__n4["init"] := null;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n6 := {  };
__n6["type"] := "ForInStatement";
__n7 := {  };
__n7["type"] := "VariableDeclarator";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__prop";
__n7["id"] := __n8;
__n7["init"] := null;
__n6["left"] := __n7;
__n9 := {  };
__n9["type"] := "ThisExpression";
__n6["right"] := __n9;
__n10 := {  };
__n10["type"] := "BlockStatement";
__n12 := {  };
__n12["type"] := "IfStatement";
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "===";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "__prop";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "__declared__var";
__n15["raw"] := "\"__declared__var\"";
__n13["right"] := __n15;
__n12["test"] := __n13;
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "AssignmentExpression";
__n17["operator"] := "=";
__n18 := {  };
__n18["type"] := "Identifier";
__n18["name"] := "enumed";
__n17["left"] := __n18;
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := true;
__n19["raw"] := "true";
__n17["right"] := __n19;
__n16["expression"] := __n17;
__n12["consequent"] := __n16;
__n12["alternate"] := null;
__n11 := [ __n12 ];
__n10["body"] := __n11;
__n6["body"] := __n10;
__n6["each"] := false;
__n20 := {  };
__n20["type"] := "IfStatement";
__n21 := {  };
__n21["type"] := "UnaryExpression";
__n21["operator"] := "!";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "enumed";
__n21["argument"] := __n22;
__n21["prefix"] := true;
__n20["test"] := __n21;
__n23 := {  };
__n23["type"] := "BlockStatement";
__n25 := {  };
__n25["type"] := "ExpressionStatement";
__n26 := {  };
__n26["type"] := "CallExpression";
__n27 := {  };
__n27["type"] := "Identifier";
__n27["name"] := "$ERROR";
__n26["callee"] := __n27;
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "#1: When using property attributes, {DontEnum} not used";
__n29["raw"] := "'#1: When using property attributes, {DontEnum} not used'";
__n28 := [ __n29 ];
__n26["arguments"] := __n28;
__n25["expression"] := __n26;
__n24 := [ __n25 ];
__n23["body"] := __n24;
__n20["consequent"] := __n23;
__n20["alternate"] := null;
__n30 := {  };
__n30["type"] := "VariableDeclaration";
__n32 := {  };
__n32["type"] := "VariableDeclarator";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__declared__var";
__n32["id"] := __n33;
__n32["init"] := null;
__n31 := [ __n32 ];
__n30["declarations"] := __n31;
__n30["kind"] := "var";
__n1 := [ __n2, __n6, __n20, __n30 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n34 := [ "enumed", "__prop", "__declared__var" ];
__n0["variableDeclarations"] := __n34;
__n35 := [  ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}