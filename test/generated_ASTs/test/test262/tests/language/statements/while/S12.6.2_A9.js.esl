function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "TryStatement";
__n3 := {  };
__n3["type"] := "BlockStatement";
__n5 := {  };
__n5["type"] := "WhileStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!=";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "x";
__n6["left"] := __n7;
__n8 := {  };
__n8["type"] := "Literal";
__n8["value"] := 1.;
__n8["raw"] := "1";
__n6["right"] := __n8;
__n5["test"] := __n6;
__n9 := {  };
__n9["type"] := "BlockStatement";
__n11 := {  };
__n11["type"] := "VariableDeclaration";
__n13 := {  };
__n13["type"] := "VariableDeclarator";
__n14 := {  };
__n14["type"] := "Identifier";
__n14["name"] := "x";
__n13["id"] := __n14;
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := 1.;
__n15["raw"] := "1";
__n13["init"] := __n15;
__n12 := [ __n13 ];
__n11["declarations"] := __n12;
__n11["kind"] := "var";
__n16 := {  };
__n16["type"] := "ExpressionStatement";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "abaracadabara";
__n16["expression"] := __n17;
__n10 := [ __n11, __n16 ];
__n9["body"] := __n10;
__n5["body"] := __n9;
__n18 := {  };
__n18["type"] := "EmptyStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "Literal";
__n23["value"] := "#1: \"abbracadabra\" lead to throwing exception";
__n23["raw"] := "'#1: \"abbracadabra\" lead to throwing exception'";
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n4 := [ __n5, __n18, __n19 ];
__n3["body"] := __n4;
__n2["block"] := __n3;
__n24 := {  };
__n24["type"] := "CatchClause";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "e";
__n24["param"] := __n25;
__n26 := {  };
__n26["type"] := "BlockStatement";
__n28 := {  };
__n28["type"] := "IfStatement";
__n29 := {  };
__n29["type"] := "BinaryExpression";
__n29["operator"] := "instanceof";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "e";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "Identifier";
__n31["name"] := "Test262Error";
__n29["right"] := __n31;
__n28["test"] := __n29;
__n32 := {  };
__n32["type"] := "ThrowStatement";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "e";
__n32["argument"] := __n33;
__n28["consequent"] := __n32;
__n28["alternate"] := null;
__n27 := [ __n28 ];
__n26["body"] := __n27;
__n24["body"] := __n26;
__n2["handler"] := __n24;
__n2["finalizer"] := null;
__n34 := {  };
__n34["type"] := "IfStatement";
__n35 := {  };
__n35["type"] := "BinaryExpression";
__n35["operator"] := "!==";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "x";
__n35["left"] := __n36;
__n37 := {  };
__n37["type"] := "Literal";
__n37["value"] := 1.;
__n37["raw"] := "1";
__n35["right"] := __n37;
__n34["test"] := __n35;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "Identifier";
__n42["name"] := "$ERROR";
__n41["callee"] := __n42;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "#1.1: while statement evaluates as is, without syntax checks";
__n44["raw"] := "'#1.1: while statement evaluates as is, without syntax checks'";
__n43 := [ __n44 ];
__n41["arguments"] := __n43;
__n40["expression"] := __n41;
__n39 := [ __n40 ];
__n38["body"] := __n39;
__n34["consequent"] := __n38;
__n34["alternate"] := null;
__n1 := [ __n2, __n34 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n45 := [ "x" ];
__n0["variableDeclarations"] := __n45;
__n46 := [  ];
__n0["functionDeclarations"] := __n46;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}