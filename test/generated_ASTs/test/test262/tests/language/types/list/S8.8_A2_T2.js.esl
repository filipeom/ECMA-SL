function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__mFunc";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__mFunc";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "ArrayExpression";
__n11 := [ null, null ];
__n10["elements"] := __n11;
__n9 := [ __n10 ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := 1.;
__n12["raw"] := "1";
__n6["right"] := __n12;
__n5["test"] := __n6;
__n13 := {  };
__n13["type"] := "BlockStatement";
__n15 := {  };
__n15["type"] := "ExpressionStatement";
__n16 := {  };
__n16["type"] := "CallExpression";
__n17 := {  };
__n17["type"] := "Identifier";
__n17["name"] := "$ERROR";
__n16["callee"] := __n17;
__n19 := {  };
__n19["type"] := "BinaryExpression";
__n19["operator"] := "+";
__n20 := {  };
__n20["type"] := "Literal";
__n20["value"] := "#1: function __mFunc(){return arguments.length;}; __mFunc([,,]) === 1. Actual: ";
__n20["raw"] := "'#1: function __mFunc(){return arguments.length;}; __mFunc([,,]) === 1. Actual: '";
__n19["left"] := __n20;
__n21 := {  };
__n21["type"] := "CallExpression";
__n22 := {  };
__n22["type"] := "Identifier";
__n22["name"] := "__mFunc";
__n21["callee"] := __n22;
__n24 := {  };
__n24["type"] := "ArrayExpression";
__n25 := [ null, null ];
__n24["elements"] := __n25;
__n23 := [ __n24 ];
__n21["arguments"] := __n23;
__n19["right"] := __n21;
__n18 := [ __n19 ];
__n16["arguments"] := __n18;
__n15["expression"] := __n16;
__n14 := [ __n15 ];
__n13["body"] := __n14;
__n5["consequent"] := __n13;
__n5["alternate"] := null;
__n1 := [ __n2, __n4, __n5 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n26 := [  ];
__n0["variableDeclarations"] := __n26;
__n28 := {  };
__n28["type"] := "FunctionDeclaration";
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "__mFunc";
__n28["id"] := __n29;
__n30 := [  ];
__n28["params"] := __n30;
__n31 := {  };
__n31["type"] := "BlockStatement";
__n33 := {  };
__n33["type"] := "ReturnStatement";
__n34 := {  };
__n34["type"] := "MemberExpression";
__n35 := {  };
__n35["type"] := "Identifier";
__n35["name"] := "arguments";
__n34["object"] := __n35;
__n36 := {  };
__n36["type"] := "Literal";
__n36["value"] := "length";
__n36["raw"] := "\"length\"";
__n34["property"] := __n36;
__n34["computed"] := true;
__n33["argument"] := __n34;
__n32 := [ __n33 ];
__n31["body"] := __n32;
__n37 := [  ];
__n31["variableDeclarations"] := __n37;
__n38 := [  ];
__n31["functionDeclarations"] := __n38;
__n31["codeType"] := "function";
__n31["strict"] := false;
__n28["body"] := __n31;
__n28["generator"] := false;
__n28["async"] := false;
__n28["expression"] := false;
__n27 := [ __n28 ];
__n0["functionDeclarations"] := __n27;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}