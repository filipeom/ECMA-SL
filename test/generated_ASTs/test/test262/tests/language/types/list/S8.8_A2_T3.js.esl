function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "__mFunc";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "EmptyStatement";
__n5 := {  };
__n5["type"] := "IfStatement";
__n6 := {  };
__n6["type"] := "BinaryExpression";
__n6["operator"] := "!==";
__n7 := {  };
__n7["type"] := "CallExpression";
__n8 := {  };
__n8["type"] := "Identifier";
__n8["name"] := "__mFunc";
__n7["callee"] := __n8;
__n10 := {  };
__n10["type"] := "Literal";
__n10["value"] := "A";
__n10["raw"] := "\"A\"";
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "B";
__n11["raw"] := "\"B\"";
__n12 := {  };
__n12["type"] := "Literal";
__n12["value"] := "C";
__n12["raw"] := "\"C\"";
__n13 := {  };
__n13["type"] := "Literal";
__n13["value"] := "D";
__n13["raw"] := "\"D\"";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "E";
__n14["raw"] := "\"E\"";
__n15 := {  };
__n15["type"] := "Literal";
__n15["value"] := "F";
__n15["raw"] := "\"F\"";
__n9 := [ __n10, __n11, __n12, __n13, __n14, __n15 ];
__n7["arguments"] := __n9;
__n6["left"] := __n7;
__n16 := {  };
__n16["type"] := "Literal";
__n16["value"] := "ABCDEF";
__n16["raw"] := "\"ABCDEF\"";
__n6["right"] := __n16;
__n5["test"] := __n6;
__n17 := {  };
__n17["type"] := "BlockStatement";
__n19 := {  };
__n19["type"] := "ExpressionStatement";
__n20 := {  };
__n20["type"] := "CallExpression";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "$ERROR";
__n20["callee"] := __n21;
__n23 := {  };
__n23["type"] := "BinaryExpression";
__n23["operator"] := "+";
__n24 := {  };
__n24["type"] := "Literal";
__n24["value"] := "#1: function __mFunc(){var __accum=\"\"; for (var i = 0; i < arguments.length; ++i){__accum += arguments[i]};return __accum;}; __mFunc(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\") === \"ABCDEF\". Actual: ";
__n24["raw"] := "'#1: function __mFunc(){var __accum=\"\"; for (var i = 0; i < arguments.length; ++i){__accum += arguments[i]};return __accum;}; __mFunc(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\") === \"ABCDEF\". Actual: '";
__n23["left"] := __n24;
__n25 := {  };
__n25["type"] := "CallExpression";
__n26 := {  };
__n26["type"] := "Identifier";
__n26["name"] := "__mFunc";
__n25["callee"] := __n26;
__n28 := {  };
__n28["type"] := "Literal";
__n28["value"] := "A";
__n28["raw"] := "\"A\"";
__n29 := {  };
__n29["type"] := "Literal";
__n29["value"] := "B";
__n29["raw"] := "\"B\"";
__n30 := {  };
__n30["type"] := "Literal";
__n30["value"] := "C";
__n30["raw"] := "\"C\"";
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "D";
__n31["raw"] := "\"D\"";
__n32 := {  };
__n32["type"] := "Literal";
__n32["value"] := "E";
__n32["raw"] := "\"E\"";
__n33 := {  };
__n33["type"] := "Literal";
__n33["value"] := "F";
__n33["raw"] := "\"F\"";
__n27 := [ __n28, __n29, __n30, __n31, __n32, __n33 ];
__n25["arguments"] := __n27;
__n23["right"] := __n25;
__n22 := [ __n23 ];
__n20["arguments"] := __n22;
__n19["expression"] := __n20;
__n18 := [ __n19 ];
__n17["body"] := __n18;
__n5["consequent"] := __n17;
__n5["alternate"] := null;
__n1 := [ __n2, __n4, __n5 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n34 := [  ];
__n0["variableDeclarations"] := __n34;
__n36 := {  };
__n36["type"] := "FunctionDeclaration";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "__mFunc";
__n36["id"] := __n37;
__n38 := [  ];
__n36["params"] := __n38;
__n39 := {  };
__n39["type"] := "BlockStatement";
__n41 := {  };
__n41["type"] := "VariableDeclaration";
__n43 := {  };
__n43["type"] := "VariableDeclarator";
__n44 := {  };
__n44["type"] := "Identifier";
__n44["name"] := "__accum";
__n43["id"] := __n44;
__n45 := {  };
__n45["type"] := "Literal";
__n45["value"] := "";
__n45["raw"] := "\"\"";
__n43["init"] := __n45;
__n42 := [ __n43 ];
__n41["declarations"] := __n42;
__n41["kind"] := "var";
__n46 := {  };
__n46["type"] := "ForStatement";
__n47 := {  };
__n47["type"] := "VariableDeclaration";
__n49 := {  };
__n49["type"] := "VariableDeclarator";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "i";
__n49["id"] := __n50;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := 0.;
__n51["raw"] := "0";
__n49["init"] := __n51;
__n48 := [ __n49 ];
__n47["declarations"] := __n48;
__n47["kind"] := "var";
__n46["init"] := __n47;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "<";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "i";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "MemberExpression";
__n55 := {  };
__n55["type"] := "Identifier";
__n55["name"] := "arguments";
__n54["object"] := __n55;
__n56 := {  };
__n56["type"] := "Literal";
__n56["value"] := "length";
__n56["raw"] := "\"length\"";
__n54["property"] := __n56;
__n54["computed"] := true;
__n52["right"] := __n54;
__n46["test"] := __n52;
__n57 := {  };
__n57["type"] := "UpdateExpression";
__n57["operator"] := "++";
__n58 := {  };
__n58["type"] := "Identifier";
__n58["name"] := "i";
__n57["argument"] := __n58;
__n57["prefix"] := true;
__n46["update"] := __n57;
__n59 := {  };
__n59["type"] := "BlockStatement";
__n61 := {  };
__n61["type"] := "ExpressionStatement";
__n62 := {  };
__n62["type"] := "AssignmentExpression";
__n62["operator"] := "+=";
__n63 := {  };
__n63["type"] := "Identifier";
__n63["name"] := "__accum";
__n62["left"] := __n63;
__n64 := {  };
__n64["type"] := "MemberExpression";
__n64["computed"] := true;
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "arguments";
__n64["object"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "i";
__n64["property"] := __n66;
__n62["right"] := __n64;
__n61["expression"] := __n62;
__n60 := [ __n61 ];
__n59["body"] := __n60;
__n46["body"] := __n59;
__n67 := {  };
__n67["type"] := "EmptyStatement";
__n68 := {  };
__n68["type"] := "ReturnStatement";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "__accum";
__n68["argument"] := __n69;
__n40 := [ __n41, __n46, __n67, __n68 ];
__n39["body"] := __n40;
__n70 := [ "__accum", "i" ];
__n39["variableDeclarations"] := __n70;
__n71 := [  ];
__n39["functionDeclarations"] := __n71;
__n39["codeType"] := "function";
__n39["strict"] := false;
__n36["body"] := __n39;
__n36["generator"] := false;
__n36["async"] := false;
__n36["expression"] := false;
__n35 := [ __n36 ];
__n0["functionDeclarations"] := __n35;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}