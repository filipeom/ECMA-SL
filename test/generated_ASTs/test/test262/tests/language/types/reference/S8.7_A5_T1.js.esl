function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "IfStatement";
__n3 := {  };
__n3["type"] := "BinaryExpression";
__n3["operator"] := "!==";
__n4 := {  };
__n4["type"] := "UnaryExpression";
__n4["operator"] := "typeof";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "__ref";
__n4["argument"] := __n5;
__n4["prefix"] := true;
__n3["left"] := __n4;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "undefined";
__n6["raw"] := "\"undefined\"";
__n3["right"] := __n6;
__n2["test"] := __n3;
__n7 := {  };
__n7["type"] := "BlockStatement";
__n9 := {  };
__n9["type"] := "ExpressionStatement";
__n10 := {  };
__n10["type"] := "CallExpression";
__n11 := {  };
__n11["type"] := "Identifier";
__n11["name"] := "$ERROR";
__n10["callee"] := __n11;
__n13 := {  };
__n13["type"] := "BinaryExpression";
__n13["operator"] := "+";
__n14 := {  };
__n14["type"] := "Literal";
__n14["value"] := "#1: typeof(__ref) === \"undefined\". Actual: ";
__n14["raw"] := "'#1: typeof(__ref) === \"undefined\". Actual: '";
__n13["left"] := __n14;
__n15 := {  };
__n15["type"] := "UnaryExpression";
__n15["operator"] := "typeof";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "__ref";
__n15["argument"] := __n16;
__n15["prefix"] := true;
__n13["right"] := __n15;
__n12 := [ __n13 ];
__n10["arguments"] := __n12;
__n9["expression"] := __n10;
__n8 := [ __n9 ];
__n7["body"] := __n8;
__n2["consequent"] := __n7;
__n2["alternate"] := null;
__n17 := {  };
__n17["type"] := "EmptyStatement";
__n18 := {  };
__n18["type"] := "VariableDeclaration";
__n20 := {  };
__n20["type"] := "VariableDeclarator";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "obj";
__n20["id"] := __n21;
__n22 := {  };
__n22["type"] := "NewExpression";
__n23 := {  };
__n23["type"] := "Identifier";
__n23["name"] := "Object";
__n22["callee"] := __n23;
__n24 := [  ];
__n22["arguments"] := __n24;
__n20["init"] := __n22;
__n19 := [ __n20 ];
__n18["declarations"] := __n19;
__n18["kind"] := "var";
__n25 := {  };
__n25["type"] := "VariableDeclaration";
__n27 := {  };
__n27["type"] := "VariableDeclarator";
__n28 := {  };
__n28["type"] := "Identifier";
__n28["name"] := "__ref";
__n27["id"] := __n28;
__n29 := {  };
__n29["type"] := "Identifier";
__n29["name"] := "obj";
__n27["init"] := __n29;
__n26 := [ __n27 ];
__n25["declarations"] := __n26;
__n25["kind"] := "var";
__n30 := {  };
__n30["type"] := "IfStatement";
__n31 := {  };
__n31["type"] := "BinaryExpression";
__n31["operator"] := "===";
__n32 := {  };
__n32["type"] := "UnaryExpression";
__n32["operator"] := "typeof";
__n33 := {  };
__n33["type"] := "Identifier";
__n33["name"] := "__ref";
__n32["argument"] := __n33;
__n32["prefix"] := true;
__n31["left"] := __n32;
__n34 := {  };
__n34["type"] := "Literal";
__n34["value"] := "undefined";
__n34["raw"] := "\"undefined\"";
__n31["right"] := __n34;
__n30["test"] := __n31;
__n35 := {  };
__n35["type"] := "BlockStatement";
__n37 := {  };
__n37["type"] := "ExpressionStatement";
__n38 := {  };
__n38["type"] := "CallExpression";
__n39 := {  };
__n39["type"] := "Identifier";
__n39["name"] := "$ERROR";
__n38["callee"] := __n39;
__n41 := {  };
__n41["type"] := "Literal";
__n41["value"] := "#2: obj = new Object(); var __ref = obj; typeof(__ref) !== \"undefined\"";
__n41["raw"] := "'#2: obj = new Object(); var __ref = obj; typeof(__ref) !== \"undefined\"'";
__n40 := [ __n41 ];
__n38["arguments"] := __n40;
__n37["expression"] := __n38;
__n36 := [ __n37 ];
__n35["body"] := __n36;
__n30["consequent"] := __n35;
__n30["alternate"] := null;
__n42 := {  };
__n42["type"] := "EmptyStatement";
__n43 := {  };
__n43["type"] := "IfStatement";
__n44 := {  };
__n44["type"] := "BinaryExpression";
__n44["operator"] := "!==";
__n45 := {  };
__n45["type"] := "UnaryExpression";
__n45["operator"] := "delete";
__n46 := {  };
__n46["type"] := "Identifier";
__n46["name"] := "__ref";
__n45["argument"] := __n46;
__n45["prefix"] := true;
__n44["left"] := __n45;
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := false;
__n47["raw"] := "false";
__n44["right"] := __n47;
__n43["test"] := __n44;
__n48 := {  };
__n48["type"] := "BlockStatement";
__n50 := {  };
__n50["type"] := "ExpressionStatement";
__n51 := {  };
__n51["type"] := "CallExpression";
__n52 := {  };
__n52["type"] := "Identifier";
__n52["name"] := "$ERROR";
__n51["callee"] := __n52;
__n54 := {  };
__n54["type"] := "BinaryExpression";
__n54["operator"] := "+";
__n55 := {  };
__n55["type"] := "Literal";
__n55["value"] := "#3: obj = new Object(); var __ref = obj; delete __ref === false. Actual: ";
__n55["raw"] := "'#3: obj = new Object(); var __ref = obj; delete __ref === false. Actual: '";
__n54["left"] := __n55;
__n56 := {  };
__n56["type"] := "UnaryExpression";
__n56["operator"] := "delete";
__n57 := {  };
__n57["type"] := "Identifier";
__n57["name"] := "__ref";
__n56["argument"] := __n57;
__n56["prefix"] := true;
__n54["right"] := __n56;
__n53 := [ __n54 ];
__n51["arguments"] := __n53;
__n50["expression"] := __n51;
__n49 := [ __n50 ];
__n48["body"] := __n49;
__n43["consequent"] := __n48;
__n43["alternate"] := null;
__n58 := {  };
__n58["type"] := "EmptyStatement";
__n59 := {  };
__n59["type"] := "IfStatement";
__n60 := {  };
__n60["type"] := "BinaryExpression";
__n60["operator"] := "!==";
__n61 := {  };
__n61["type"] := "UnaryExpression";
__n61["operator"] := "typeof";
__n62 := {  };
__n62["type"] := "Identifier";
__n62["name"] := "__ref";
__n61["argument"] := __n62;
__n61["prefix"] := true;
__n60["left"] := __n61;
__n63 := {  };
__n63["type"] := "Literal";
__n63["value"] := "object";
__n63["raw"] := "\"object\"";
__n60["right"] := __n63;
__n59["test"] := __n60;
__n64 := {  };
__n64["type"] := "BlockStatement";
__n66 := {  };
__n66["type"] := "ExpressionStatement";
__n67 := {  };
__n67["type"] := "CallExpression";
__n68 := {  };
__n68["type"] := "Identifier";
__n68["name"] := "$ERROR";
__n67["callee"] := __n68;
__n70 := {  };
__n70["type"] := "BinaryExpression";
__n70["operator"] := "+";
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "#4: obj = new Object(); var __ref = obj; delete __ref; typeof(__ref) === \"object\". Actual: ";
__n71["raw"] := "'#4: obj = new Object(); var __ref = obj; delete __ref; typeof(__ref) === \"object\". Actual: '";
__n70["left"] := __n71;
__n72 := {  };
__n72["type"] := "UnaryExpression";
__n72["operator"] := "typeof";
__n73 := {  };
__n73["type"] := "Identifier";
__n73["name"] := "__ref";
__n72["argument"] := __n73;
__n72["prefix"] := true;
__n70["right"] := __n72;
__n69 := [ __n70 ];
__n67["arguments"] := __n69;
__n66["expression"] := __n67;
__n65 := [ __n66 ];
__n64["body"] := __n65;
__n59["consequent"] := __n64;
__n59["alternate"] := null;
__n74 := {  };
__n74["type"] := "EmptyStatement";
__n75 := {  };
__n75["type"] := "IfStatement";
__n76 := {  };
__n76["type"] := "BinaryExpression";
__n76["operator"] := "!==";
__n77 := {  };
__n77["type"] := "UnaryExpression";
__n77["operator"] := "typeof";
__n78 := {  };
__n78["type"] := "Identifier";
__n78["name"] := "obj";
__n77["argument"] := __n78;
__n77["prefix"] := true;
__n76["left"] := __n77;
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "object";
__n79["raw"] := "\"object\"";
__n76["right"] := __n79;
__n75["test"] := __n76;
__n80 := {  };
__n80["type"] := "BlockStatement";
__n82 := {  };
__n82["type"] := "ExpressionStatement";
__n83 := {  };
__n83["type"] := "CallExpression";
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "$ERROR";
__n83["callee"] := __n84;
__n86 := {  };
__n86["type"] := "BinaryExpression";
__n86["operator"] := "+";
__n87 := {  };
__n87["type"] := "Literal";
__n87["value"] := "#5: obj = new Object(); var __ref = obj; delete __ref; typeof(obj) === \"object\". Actual: ";
__n87["raw"] := "'#5: obj = new Object(); var __ref = obj; delete __ref; typeof(obj) === \"object\". Actual: '";
__n86["left"] := __n87;
__n88 := {  };
__n88["type"] := "UnaryExpression";
__n88["operator"] := "typeof";
__n89 := {  };
__n89["type"] := "Identifier";
__n89["name"] := "obj";
__n88["argument"] := __n89;
__n88["prefix"] := true;
__n86["right"] := __n88;
__n85 := [ __n86 ];
__n83["arguments"] := __n85;
__n82["expression"] := __n83;
__n81 := [ __n82 ];
__n80["body"] := __n81;
__n75["consequent"] := __n80;
__n75["alternate"] := null;
__n90 := {  };
__n90["type"] := "EmptyStatement";
__n1 := [ __n2, __n17, __n18, __n25, __n30, __n42, __n43, __n58, __n59, __n74, __n75, __n90 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n91 := [ "obj", "__ref" ];
__n0["variableDeclarations"] := __n91;
__n92 := [  ];
__n0["functionDeclarations"] := __n92;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}