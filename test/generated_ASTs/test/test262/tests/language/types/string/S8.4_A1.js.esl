function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "VariableDeclaration";
__n4 := {  };
__n4["type"] := "VariableDeclarator";
__n5 := {  };
__n5["type"] := "Identifier";
__n5["name"] := "str";
__n4["id"] := __n5;
__n6 := {  };
__n6["type"] := "Literal";
__n6["value"] := "abcdfg";
__n6["raw"] := "\"abcdfg\"";
__n4["init"] := __n6;
__n3 := [ __n4 ];
__n2["declarations"] := __n3;
__n2["kind"] := "var";
__n7 := {  };
__n7["type"] := "IfStatement";
__n8 := {  };
__n8["type"] := "BinaryExpression";
__n8["operator"] := "!==";
__n9 := {  };
__n9["type"] := "UnaryExpression";
__n9["operator"] := "typeof";
__n10 := {  };
__n10["type"] := "Identifier";
__n10["name"] := "str";
__n9["argument"] := __n10;
__n9["prefix"] := true;
__n8["left"] := __n9;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := "string";
__n11["raw"] := "\"string\"";
__n8["right"] := __n11;
__n7["test"] := __n8;
__n12 := {  };
__n12["type"] := "BlockStatement";
__n14 := {  };
__n14["type"] := "ExpressionStatement";
__n15 := {  };
__n15["type"] := "CallExpression";
__n16 := {  };
__n16["type"] := "Identifier";
__n16["name"] := "$ERROR";
__n15["callee"] := __n16;
__n18 := {  };
__n18["type"] := "BinaryExpression";
__n18["operator"] := "+";
__n19 := {  };
__n19["type"] := "Literal";
__n19["value"] := "#1: var str=\"abcdfg\"; typeof(str) === \"string\". Actual: ";
__n19["raw"] := "'#1: var str=\"abcdfg\"; typeof(str) === \"string\". Actual: '";
__n18["left"] := __n19;
__n20 := {  };
__n20["type"] := "UnaryExpression";
__n20["operator"] := "typeof";
__n21 := {  };
__n21["type"] := "Identifier";
__n21["name"] := "str";
__n20["argument"] := __n21;
__n20["prefix"] := true;
__n18["right"] := __n20;
__n17 := [ __n18 ];
__n15["arguments"] := __n17;
__n14["expression"] := __n15;
__n13 := [ __n14 ];
__n12["body"] := __n13;
__n7["consequent"] := __n12;
__n7["alternate"] := null;
__n22 := {  };
__n22["type"] := "VariableDeclaration";
__n24 := {  };
__n24["type"] := "VariableDeclarator";
__n25 := {  };
__n25["type"] := "Identifier";
__n25["name"] := "str2";
__n24["id"] := __n25;
__n26 := {  };
__n26["type"] := "Literal";
__n26["value"] := "qwerty";
__n26["raw"] := "'qwerty'";
__n24["init"] := __n26;
__n23 := [ __n24 ];
__n22["declarations"] := __n23;
__n22["kind"] := "var";
__n27 := {  };
__n27["type"] := "IfStatement";
__n28 := {  };
__n28["type"] := "BinaryExpression";
__n28["operator"] := "!==";
__n29 := {  };
__n29["type"] := "UnaryExpression";
__n29["operator"] := "typeof";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "str2";
__n29["argument"] := __n30;
__n29["prefix"] := true;
__n28["left"] := __n29;
__n31 := {  };
__n31["type"] := "Literal";
__n31["value"] := "string";
__n31["raw"] := "\"string\"";
__n28["right"] := __n31;
__n27["test"] := __n28;
__n32 := {  };
__n32["type"] := "BlockStatement";
__n34 := {  };
__n34["type"] := "ExpressionStatement";
__n35 := {  };
__n35["type"] := "CallExpression";
__n36 := {  };
__n36["type"] := "Identifier";
__n36["name"] := "$ERROR";
__n35["callee"] := __n36;
__n38 := {  };
__n38["type"] := "BinaryExpression";
__n38["operator"] := "+";
__n39 := {  };
__n39["type"] := "Literal";
__n39["value"] := "#2: var str2='qwerty'; typeof(str) === \"string\". Actual: ";
__n39["raw"] := "'#2: var str2=\\'qwerty\\'; typeof(str) === \"string\". Actual: '";
__n38["left"] := __n39;
__n40 := {  };
__n40["type"] := "UnaryExpression";
__n40["operator"] := "typeof";
__n41 := {  };
__n41["type"] := "Identifier";
__n41["name"] := "str2";
__n40["argument"] := __n41;
__n40["prefix"] := true;
__n38["right"] := __n40;
__n37 := [ __n38 ];
__n35["arguments"] := __n37;
__n34["expression"] := __n35;
__n33 := [ __n34 ];
__n32["body"] := __n33;
__n27["consequent"] := __n32;
__n27["alternate"] := null;
__n42 := {  };
__n42["type"] := "VariableDeclaration";
__n44 := {  };
__n44["type"] := "VariableDeclarator";
__n45 := {  };
__n45["type"] := "Identifier";
__n45["name"] := "__str";
__n44["id"] := __n45;
__n46 := {  };
__n46["type"] := "Literal";
__n46["value"] := "BCDEFGH";
__n46["raw"] := "'\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\\u0048'";
__n44["init"] := __n46;
__n43 := [ __n44 ];
__n42["declarations"] := __n43;
__n42["kind"] := "var";
__n47 := {  };
__n47["type"] := "IfStatement";
__n48 := {  };
__n48["type"] := "BinaryExpression";
__n48["operator"] := "!==";
__n49 := {  };
__n49["type"] := "UnaryExpression";
__n49["operator"] := "typeof";
__n50 := {  };
__n50["type"] := "Identifier";
__n50["name"] := "__str";
__n49["argument"] := __n50;
__n49["prefix"] := true;
__n48["left"] := __n49;
__n51 := {  };
__n51["type"] := "Literal";
__n51["value"] := "string";
__n51["raw"] := "\"string\"";
__n48["right"] := __n51;
__n47["test"] := __n48;
__n52 := {  };
__n52["type"] := "BlockStatement";
__n54 := {  };
__n54["type"] := "ExpressionStatement";
__n55 := {  };
__n55["type"] := "CallExpression";
__n56 := {  };
__n56["type"] := "Identifier";
__n56["name"] := "$ERROR";
__n55["callee"] := __n56;
__n58 := {  };
__n58["type"] := "BinaryExpression";
__n58["operator"] := "+";
__n59 := {  };
__n59["type"] := "Literal";
__n59["value"] := "#3: var __str='\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\\u0048'; typeof(__str) === \"string\". Actual: ";
__n59["raw"] := "'#3: var __str=\\'\\\\u0042\\\\u0043\\\\u0044\\\\u0045\\\\u0046\\\\u0047\\\\u0048\\'; typeof(__str) === \"string\". Actual: '";
__n58["left"] := __n59;
__n60 := {  };
__n60["type"] := "UnaryExpression";
__n60["operator"] := "typeof";
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "__str";
__n60["argument"] := __n61;
__n60["prefix"] := true;
__n58["right"] := __n60;
__n57 := [ __n58 ];
__n55["arguments"] := __n57;
__n54["expression"] := __n55;
__n53 := [ __n54 ];
__n52["body"] := __n53;
__n47["consequent"] := __n52;
__n47["alternate"] := null;
__n62 := {  };
__n62["type"] := "VariableDeclaration";
__n64 := {  };
__n64["type"] := "VariableDeclarator";
__n65 := {  };
__n65["type"] := "Identifier";
__n65["name"] := "str__";
__n64["id"] := __n65;
__n66 := {  };
__n66["type"] := "Literal";
__n66["value"] := "BCDEFGH";
__n66["raw"] := "\"\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\\u0048\"";
__n64["init"] := __n66;
__n63 := [ __n64 ];
__n62["declarations"] := __n63;
__n62["kind"] := "var";
__n67 := {  };
__n67["type"] := "IfStatement";
__n68 := {  };
__n68["type"] := "BinaryExpression";
__n68["operator"] := "!==";
__n69 := {  };
__n69["type"] := "UnaryExpression";
__n69["operator"] := "typeof";
__n70 := {  };
__n70["type"] := "Identifier";
__n70["name"] := "str__";
__n69["argument"] := __n70;
__n69["prefix"] := true;
__n68["left"] := __n69;
__n71 := {  };
__n71["type"] := "Literal";
__n71["value"] := "string";
__n71["raw"] := "\"string\"";
__n68["right"] := __n71;
__n67["test"] := __n68;
__n72 := {  };
__n72["type"] := "BlockStatement";
__n74 := {  };
__n74["type"] := "ExpressionStatement";
__n75 := {  };
__n75["type"] := "CallExpression";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "$ERROR";
__n75["callee"] := __n76;
__n78 := {  };
__n78["type"] := "BinaryExpression";
__n78["operator"] := "+";
__n79 := {  };
__n79["type"] := "Literal";
__n79["value"] := "#4: var str__=\"abcdfg\"; typeof(str__) === \"string\". Actual: ";
__n79["raw"] := "'#4: var str__=\"abcdfg\"; typeof(str__) === \"string\". Actual: '";
__n78["left"] := __n79;
__n80 := {  };
__n80["type"] := "UnaryExpression";
__n80["operator"] := "typeof";
__n81 := {  };
__n81["type"] := "Identifier";
__n81["name"] := "str__";
__n80["argument"] := __n81;
__n80["prefix"] := true;
__n78["right"] := __n80;
__n77 := [ __n78 ];
__n75["arguments"] := __n77;
__n74["expression"] := __n75;
__n73 := [ __n74 ];
__n72["body"] := __n73;
__n67["consequent"] := __n72;
__n67["alternate"] := null;
__n1 := [ __n2, __n7, __n22, __n27, __n42, __n47, __n62, __n67 ];
__n0["body"] := __n1;
__n0["optimised"] := true;
__n82 := [ "str", "str2", "__str", "str__" ];
__n0["variableDeclarations"] := __n82;
__n83 := [  ];
__n0["functionDeclarations"] := __n83;
__n0["codeType"] := "global";
__n0["strict"] := false;
return ( false, __n0 )
}