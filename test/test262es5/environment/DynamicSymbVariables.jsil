import Array.jsil, Boolean.jsil, Date.jsil, Function.jsil, Global.jsil, InitFantine.jsil, Internals.jsil, Math.jsil, Number.jsil, Object.jsil, RegExp.jsil, String.jsil, Errors.jsil;
proc main () {
             x_0 := "setupInitialHeap"();
             x__scope := {{ $lg }};
             x__sc_fst := {{ $lg }};
             x__this := $lg;
             [$lg, "x"] := {{ "d", undefined, true, true, false }};
             [$lg, "tx"] := {{ "d", undefined, true, true, false }};
             [$lg, "y"] := {{ "d", undefined, true, true, false }};
             [$lg, "ty"] := {{ "d", undefined, true, true, false }};
             [$lg, "t"] := {{ "d", undefined, true, true, false }};
             [$lg, "arguments"] := {{ "d", undefined, true, true, false }};
             x__te := "TypeError"();
             x__se := "SyntaxError"();
             fresh_lvar (x_1_v, #banana);
             assume ((! (#banana == empty)));
             assume ((! ((typeOf #banana) == List)));
             skip;
             x_2 := l-nth(x__sc_fst, 0.);
             x_3 := {{ "v", x_2, "x" }};
             x_4 := "i__checkAssignmentErrors"(x_3) with elab;
             x_5 := "i__putValue"(x_3, x_1_v) with elab;
             x_6 := empty;
             x_7 := l-nth(x__sc_fst, 0.);
             x_8 := {{ "v", x_7, "x" }};
             goto [((typeOf x_8) = List)] next_0 next_4;
    next_0:  goto [((l-nth(x_8, 0.) = "v") or (l-nth(x_8, 0.) = "o"))] next_1 next_4;
    next_1:  goto [((l-nth(x_8, 1.) = null) or (l-nth(x_8, 1.) = undefined))] next_2 next_3;
    next_2:  x_9 := undefined;
             goto next_4;
    next_3:  x_10 := "i__getValue"(x_8) with elab;
    next_4:  PHI(x_11: x_8, x_8, x_9, x_10);
             x_12 := "i__typeOf"(x_11) with elab;
             x_12_v := "i__getValue"(x_12) with elab;
             x_13_v := "i__getValue"("number") with elab;
             x_14 := "i__strictEquality"(x_12_v, x_13_v) with elab;
             x_14_v := "i__getValue"(x_14) with elab;
             x_14_b := "i__toBoolean"(x_14_v) with elab;
             goto [x_14_b] next_5 end_0;
    next_5:  x_15 := l-nth(x__sc_fst, 0.);
             x_16 := {{ "v", x_15, "x" }};
             x_16_v := "i__getValue"(x_16) with elab;
             x_17_v := "i__getValue"(0.) with elab;
             x_18 := "i__abstractComparison"(x_17_v, x_16_v, false) with elab;
             goto [(x_18 = undefined)] lab_0 lab_1;
    lab_0:   x_19 := false;
    lab_1:   PHI(x_20: x_18, x_19);
             x_20_v := "i__getValue"(x_20) with elab;
    end_0:   PHI(x_21: x_14_v, x_20_v);
             x_21_v := "i__getValue"(x_21) with elab;
             x_22 := l-nth(x__sc_fst, 0.);
             x_23 := {{ "v", x_22, "tx" }};
             x_24 := "i__checkAssignmentErrors"(x_23) with elab;
             x_25 := "i__putValue"(x_23, x_21_v) with elab;
             x_26 := empty;
             goto [(x_26 = empty)] next_6 next_7;
    next_6:  skip;
    next_7:  PHI(x_27: x_26, x_6);
             fresh_lvar (x_28_v, #apple);
             assume ((! (#apple == empty)));
             assume ((! ((typeOf #apple) == List)));
             skip;
             x_29 := l-nth(x__sc_fst, 0.);
             x_30 := {{ "v", x_29, "y" }};
             x_31 := "i__checkAssignmentErrors"(x_30) with elab;
             x_32 := "i__putValue"(x_30, x_28_v) with elab;
             x_33 := empty;
             goto [(x_33 = empty)] next_8 next_9;
    next_8:  skip;
    next_9:  PHI(x_34: x_33, x_27);
             x_35 := l-nth(x__sc_fst, 0.);
             x_36 := {{ "v", x_35, "y" }};
             goto [((typeOf x_36) = List)] next_10 next_14;
    next_10: goto [((l-nth(x_36, 0.) = "v") or (l-nth(x_36, 0.) = "o"))] next_11 next_14;
    next_11: goto [((l-nth(x_36, 1.) = null) or (l-nth(x_36, 1.) = undefined))] next_12 next_13;
    next_12: x_37 := undefined;
             goto next_14;
    next_13: x_38 := "i__getValue"(x_36) with elab;
    next_14: PHI(x_39: x_36, x_36, x_37, x_38);
             x_40 := "i__typeOf"(x_39) with elab;
             x_40_v := "i__getValue"(x_40) with elab;
             x_41_v := "i__getValue"("number") with elab;
             x_42 := "i__strictEquality"(x_40_v, x_41_v) with elab;
             x_42_v := "i__getValue"(x_42) with elab;
             x_43 := l-nth(x__sc_fst, 0.);
             x_44 := {{ "v", x_43, "ty" }};
             x_45 := "i__checkAssignmentErrors"(x_44) with elab;
             x_46 := "i__putValue"(x_44, x_42_v) with elab;
             x_47 := empty;
             goto [(x_47 = empty)] next_15 next_16;
    next_15: skip;
    next_16: PHI(x_48: x_47, x_34);
             x_49 := l-nth(x__sc_fst, 0.);
             x_50 := {{ "v", x_49, "tx" }};
             x_50_v := "i__getValue"(x_50) with elab;
             x_50_b := "i__toBoolean"(x_50_v) with elab;
             goto [x_50_b] next_17 end_1;
    next_17: x_51 := l-nth(x__sc_fst, 0.);
             x_52 := {{ "v", x_51, "ty" }};
             x_52_v := "i__getValue"(x_52) with elab;
    end_1:   PHI(x_53: x_50_v, x_52_v);
             x_53_v := "i__getValue"(x_53) with elab;
             x_54 := l-nth(x__sc_fst, 0.);
             x_55 := {{ "v", x_54, "t" }};
             x_56 := "i__checkAssignmentErrors"(x_55) with elab;
             x_57 := "i__putValue"(x_55, x_53_v) with elab;
             x_58 := empty;
             goto [(x_58 = empty)] next_18 next_19;
    next_18: skip;
    next_19: PHI(x_59: x_58, x_48);
             x_60 := l-nth(x__sc_fst, 0.);
             x_61 := {{ "v", x_60, "t" }};
             x_61_v := "i__getValue"(x_61) with elab;
             assume ((x_61_v == true));
             x_62_v := "i__getValue"(empty) with elab;
             x_63 := l-nth(x__sc_fst, 0.);
             x_64 := {{ "v", x_63, "x" }};
             x_64_v := "i__getValue"(x_64) with elab;
             x_65 := l-nth(x__sc_fst, 0.);
             x_66 := {{ "v", x_65, "y" }};
             x_66_v := "i__getValue"(x_66) with elab;
             assert ((0. <# (x_64_v + x_66_v)));
             x_67_v := "i__getValue"(empty) with elab;
             ret := x_67_v;
             x_68 := "i__purge"(x__te);
             x_68 := "i__purge"(x__se);
    rlab:    return;
    elab:    PHI(ret: x_4, x_5, x_10, x_12, x_12_v, x_13_v, x_14, x_14_v, x_14_b, x_16_v, x_17_v, x_18, x_20_v, x_21_v, x_24, x_25, x_31, x_32, x_38, x_40, x_40_v, x_41_v, x_42, x_42_v, x_45, x_46, x_50_v, x_50_b, x_52_v, x_53_v, x_56, x_57, x_61_v, x_62_v, x_64_v, x_66_v, x_67_v);
             assert (False);
             throw
};
